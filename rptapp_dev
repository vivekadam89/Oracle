--------------------------------------------------------
--  File created - Friday-June-12-2015   
--------------------------------------------------------
DROP TABLE "RPTAPP"."AAA_TEST_RA_REPORTS_B" cascade constraints;
DROP TABLE "RPTAPP"."AAA_TEST_RA_RPT_PRM_B" cascade constraints;
DROP TABLE "RPTAPP"."AAA_TEST_RA_SEEDED_QRY_COL" cascade constraints;
DROP TABLE "RPTAPP"."ABC" cascade constraints;
DROP TABLE "RPTAPP"."ABCD_DMG" cascade constraints;
DROP TABLE "RPTAPP"."ABC_BCK" cascade constraints;
DROP TABLE "RPTAPP"."ABC_RPT" cascade constraints;
DROP TABLE "RPTAPP"."ACTION_1" cascade constraints;
DROP TABLE "RPTAPP"."ACTION_2" cascade constraints;
DROP TABLE "RPTAPP"."ANKUSH" cascade constraints;
DROP TABLE "RPTAPP"."ANK_1" cascade constraints;
DROP TABLE "RPTAPP"."AUD_RA_APPS" cascade constraints;
DROP TABLE "RPTAPP"."AUD_RA_DATA_SOURCES" cascade constraints;
DROP TABLE "RPTAPP"."AUD_RA_IMAGES" cascade constraints;
DROP TABLE "RPTAPP"."AUD_RA_INPUT_VALIDATION" cascade constraints;
DROP TABLE "RPTAPP"."AUD_RA_JR_TEMPLATES" cascade constraints;
DROP TABLE "RPTAPP"."AUD_RA_OUTPUT_TEMPLATES" cascade constraints;
DROP TABLE "RPTAPP"."AUD_RA_REPORTS_B" cascade constraints;
DROP TABLE "RPTAPP"."AUD_RA_REPORT_PARAMETERS_B" cascade constraints;
DROP TABLE "RPTAPP"."AUD_RA_REPORT_QUERY_MAP" cascade constraints;
DROP TABLE "RPTAPP"."AUD_RA_SEEDED_QUERIES" cascade constraints;
DROP TABLE "RPTAPP"."AUD_RA_SEEDED_QUERY_COLUMNS" cascade constraints;
DROP TABLE "RPTAPP"."AUD_RA_SUB_REPORT_MAP" cascade constraints;
DROP TABLE "RPTAPP"."AUD_RA_SUB_RPT_PARAM_MAP" cascade constraints;
DROP TABLE "RPTAPP"."BACKUP_14083" cascade constraints;
DROP TABLE "RPTAPP"."BACK_ANU" cascade constraints;
DROP TABLE "RPTAPP"."BATCH_TEST" cascade constraints;
DROP TABLE "RPTAPP"."BCK_34" cascade constraints;
DROP TABLE "RPTAPP"."BCK_DATA_SOURCES" cascade constraints;
DROP TABLE "RPTAPP"."BCK_SEEDED_QUERIES_AP" cascade constraints;
DROP TABLE "RPTAPP"."D1_TEST123" cascade constraints;
DROP TABLE "RPTAPP"."DELETE_0001" cascade constraints;
DROP TABLE "RPTAPP"."DMG_10" cascade constraints;
DROP TABLE "RPTAPP"."DMG_10_AFTER" cascade constraints;
DROP TABLE "RPTAPP"."DMG_10_BFR" cascade constraints;
DROP TABLE "RPTAPP"."DMG_T" cascade constraints;
DROP TABLE "RPTAPP"."DM_INV002" cascade constraints;
DROP TABLE "RPTAPP"."DSMT_ENTRPS_PROD_HIER" cascade constraints;
DROP TABLE "RPTAPP"."DYNAMIC_INQ_TAB" cascade constraints;
DROP TABLE "RPTAPP"."ENV_DTLS" cascade constraints;
DROP TABLE "RPTAPP"."FFS_SHEET_SITG" cascade constraints;
DROP TABLE "RPTAPP"."FFS_SHEET_UAT1" cascade constraints;
DROP TABLE "RPTAPP"."FFS_SHEET_UATA" cascade constraints;
DROP TABLE "RPTAPP"."FFS_SHEET_UATC" cascade constraints;
DROP TABLE "RPTAPP"."FFS_SHEET_UATN" cascade constraints;
DROP TABLE "RPTAPP"."FFS_SHEET_UP" cascade constraints;
DROP TABLE "RPTAPP"."FFS_SHEET_VBK" cascade constraints;
DROP TABLE "RPTAPP"."HIST_RA_APPS" cascade constraints;
DROP TABLE "RPTAPP"."HIST_RA_DATA_SOURCES" cascade constraints;
DROP TABLE "RPTAPP"."HIST_RA_RA_REPORTS_B" cascade constraints;
DROP TABLE "RPTAPP"."HIST_RA_REPORT_PARAMETERS_B" cascade constraints;
DROP TABLE "RPTAPP"."HIST_RA_SEEDED_QUERIES" cascade constraints;
DROP TABLE "RPTAPP"."HIST_RA_SEEDED_QUERY_COLUMNS" cascade constraints;
DROP TABLE "RPTAPP"."JDBC_INQUIRY_TEST" cascade constraints;
DROP TABLE "RPTAPP"."MEXICO_ADJ" cascade constraints;
DROP TABLE "RPTAPP"."MEXICO_CYBERCRYPT" cascade constraints;
DROP TABLE "RPTAPP"."MEXICO_SGLCRM" cascade constraints;
DROP TABLE "RPTAPP"."MMR002_DM" cascade constraints;
DROP TABLE "RPTAPP"."MONGO_DOC_SIZE_TEST" cascade constraints;
DROP TABLE "RPTAPP"."PARAMETERS_RETAIL" cascade constraints;
DROP TABLE "RPTAPP"."PIVOT_TEST" cascade constraints;
DROP TABLE "RPTAPP"."PIVOT_TEST11" cascade constraints;
DROP TABLE "RPTAPP"."PIVOT_TEST1111" cascade constraints;
DROP TABLE "RPTAPP"."QC_25013" cascade constraints;
DROP TABLE "RPTAPP"."QC_25013_BKP" cascade constraints;
DROP TABLE "RPTAPP"."QRTZ_BLOB_TRIGGERS" cascade constraints;
DROP TABLE "RPTAPP"."QRTZ_CALENDARS" cascade constraints;
DROP TABLE "RPTAPP"."QRTZ_CRON_TRIGGERS" cascade constraints;
DROP TABLE "RPTAPP"."QRTZ_FIRED_TRIGGERS" cascade constraints;
DROP TABLE "RPTAPP"."QRTZ_JOB_DETAILS" cascade constraints;
DROP TABLE "RPTAPP"."QRTZ_LOCKS" cascade constraints;
DROP TABLE "RPTAPP"."QRTZ_PAUSED_TRIGGER_GRPS" cascade constraints;
DROP TABLE "RPTAPP"."QRTZ_SCHEDULER_STATE" cascade constraints;
DROP TABLE "RPTAPP"."QRTZ_SIMPLE_TRIGGERS" cascade constraints;
DROP TABLE "RPTAPP"."QRTZ_SIMPROP_TRIGGERS" cascade constraints;
DROP TABLE "RPTAPP"."QRTZ_TRIGGERS" cascade constraints;
DROP TABLE "RPTAPP"."QUERY_TEST" cascade constraints;
DROP TABLE "RPTAPP"."RAVI1" cascade constraints;
DROP TABLE "RPTAPP"."RAVI_TREE_TEST" cascade constraints;
DROP TABLE "RPTAPP"."RA_APPS" cascade constraints;
DROP TABLE "RPTAPP"."RA_APPS_DS_DOMAIN" cascade constraints;
DROP TABLE "RPTAPP"."RA_APPS_DS_DOMAIN_BCK" cascade constraints;
DROP TABLE "RPTAPP"."RA_APPS_DS_DOMAIN_TEST" cascade constraints;
DROP TABLE "RPTAPP"."RA_APPS_OFS" cascade constraints;
DROP TABLE "RPTAPP"."RA_APPS_T" cascade constraints;
DROP TABLE "RPTAPP"."RA_APP_APPROVER" cascade constraints;
DROP TABLE "RPTAPP"."RA_APP_DATA_SOURCES" cascade constraints;
DROP TABLE "RPTAPP"."RA_APP_DATA_SOURCES_1" cascade constraints;
DROP TABLE "RPTAPP"."RA_APP_EMAIL_PROPERTIES" cascade constraints;
DROP TABLE "RPTAPP"."RA_APP_EMAIL_PROPERTIES1" cascade constraints;
DROP TABLE "RPTAPP"."RA_APP_EMAIL_PROPERTIES_1" cascade constraints;
DROP TABLE "RPTAPP"."RA_APP_ENV_PROP" cascade constraints;
DROP TABLE "RPTAPP"."RA_APP_LDAP_GROUPS" cascade constraints;
DROP TABLE "RPTAPP"."RA_APP_NODE_MAPPING" cascade constraints;
DROP TABLE "RPTAPP"."RA_APRVL_Q" cascade constraints;
DROP TABLE "RPTAPP"."RA_AUDIT_JMS_RESTART" cascade constraints;
DROP TABLE "RPTAPP"."RA_BI_SERVERS" cascade constraints;
DROP TABLE "RPTAPP"."RA_BI_SERVERS_BKP" cascade constraints;
DROP TABLE "RPTAPP"."RA_BI_SERVERS_TEMP" cascade constraints;
DROP TABLE "RPTAPP"."RA_COLUMN_COMMENTS" cascade constraints;
DROP TABLE "RPTAPP"."RA_DATA_SOURCES" cascade constraints;
DROP TABLE "RPTAPP"."RA_DATA_SOURCES_BCK" cascade constraints;
DROP TABLE "RPTAPP"."RA_DATA_SOURCES_BKP" cascade constraints;
DROP TABLE "RPTAPP"."RA_DATA_SOURCES_CN" cascade constraints;
DROP TABLE "RPTAPP"."RA_DATA_SOURCES_MD" cascade constraints;
DROP TABLE "RPTAPP"."RA_DATA_SOURCES_SOJI" cascade constraints;
DROP TABLE "RPTAPP"."RA_DATA_SOURCES_SUBRA" cascade constraints;
DROP TABLE "RPTAPP"."RA_DATA_SOURCES_TEST" cascade constraints;
DROP TABLE "RPTAPP"."RA_DATA_SOURCES_TEST1" cascade constraints;
DROP TABLE "RPTAPP"."RA_DOMAIN_DATA_SOURCES" cascade constraints;
DROP TABLE "RPTAPP"."RA_EVENT_SUBSCRIPTIONS" cascade constraints;
DROP TABLE "RPTAPP"."RA_EVENT_SUBS_MATCHING" cascade constraints;
DROP TABLE "RPTAPP"."RA_EVENT_SUBS_REPORT_MAPPING" cascade constraints;
DROP TABLE "RPTAPP"."RA_EVENT_XML" cascade constraints;
DROP TABLE "RPTAPP"."RA_EVENT_XPATH_DATA" cascade constraints;
DROP TABLE "RPTAPP"."RA_EXCEPTIONS" cascade constraints;
DROP TABLE "RPTAPP"."RA_EXTERNAL_APP_AUTH" cascade constraints;
DROP TABLE "RPTAPP"."RA_EXTERNAL_MESSAGES" cascade constraints;
DROP TABLE "RPTAPP"."RA_EXT_REPORT_INSTANCE" cascade constraints;
DROP TABLE "RPTAPP"."RA_EXT_REPORT_INSTANCE_PROMPTS" cascade constraints;
DROP TABLE "RPTAPP"."RA_EXT_REPORT_MAPPING" cascade constraints;
DROP TABLE "RPTAPP"."RA_EXT_REPORT_PARAMETER_MAPING" cascade constraints;
DROP TABLE "RPTAPP"."RA_FREEMARKER_TEMPLATES" cascade constraints;
DROP TABLE "RPTAPP"."RA_FREQUENCY_TYPES" cascade constraints;
DROP TABLE "RPTAPP"."RA_GLOBAL_ENV_PROP" cascade constraints;
DROP TABLE "RPTAPP"."RA_GLOBAL_ENV_PROP_SIT_SVN" cascade constraints;
DROP TABLE "RPTAPP"."RA_HIST_INSTANCE_PROMPT_VALUES" cascade constraints;
DROP TABLE "RPTAPP"."RA_HIST_INSTANCE_QUERY_COLUMNS" cascade constraints;
DROP TABLE "RPTAPP"."RA_HIST_INSTANCE_READ_ACTIVITY" cascade constraints;
DROP TABLE "RPTAPP"."RA_HIST_REPORT_INSTANCES" cascade constraints;
DROP TABLE "RPTAPP"."RA_HIST_REPORT_INST_INFO" cascade constraints;
DROP TABLE "RPTAPP"."RA_HIST_RPT_INST_QRY_PROGRESS" cascade constraints;
DROP TABLE "RPTAPP"."RA_HIST_SHARED_REPORTS" cascade constraints;
DROP TABLE "RPTAPP"."RA_HIST_SUB_RUN_INSTANCES" cascade constraints;
DROP TABLE "RPTAPP"."RA_IMAGES" cascade constraints;
DROP TABLE "RPTAPP"."RA_INPUT_FIELDS" cascade constraints;
DROP TABLE "RPTAPP"."RA_INPUT_TYPES" cascade constraints;
DROP TABLE "RPTAPP"."RA_INPUT_VALIDATION" cascade constraints;
DROP TABLE "RPTAPP"."RA_INPUT_VALIDATION_BKP0506" cascade constraints;
DROP TABLE "RPTAPP"."RA_INPUT_VALIDATION_BKP0520" cascade constraints;
DROP TABLE "RPTAPP"."RA_INPUT_VAL_UP424" cascade constraints;
DROP TABLE "RPTAPP"."RA_INQUIRY_TABLE_DETAILS" cascade constraints;
DROP TABLE "RPTAPP"."RA_INSTANCE_PROMPT_VALUES" cascade constraints;
DROP TABLE "RPTAPP"."RA_INSTANCE_PROMPT_VALUES_IMP" cascade constraints;
DROP TABLE "RPTAPP"."RA_INSTANCE_PROMPT_VAL_CM22692" cascade constraints;
DROP TABLE "RPTAPP"."RA_INSTANCE_QUERY_COLUMNS" cascade constraints;
DROP TABLE "RPTAPP"."RA_INSTANCE_READ_ACTIVITY" cascade constraints;
DROP TABLE "RPTAPP"."RA_INSTANCE_STATUS_HIST" cascade constraints;
DROP TABLE "RPTAPP"."RA_INST_LABEL" cascade constraints;
DROP TABLE "RPTAPP"."RA_INST_SHARE" cascade constraints;
DROP TABLE "RPTAPP"."RA_JMS_LSTNR_RESTART_ACTIVITY" cascade constraints;
DROP TABLE "RPTAPP"."RA_JR_TEMPLATES" cascade constraints;
DROP TABLE "RPTAPP"."RA_JR_UP" cascade constraints;
DROP TABLE "RPTAPP"."RA_JR_UP_BKP" cascade constraints;
DROP TABLE "RPTAPP"."RA_LABELS" cascade constraints;
DROP TABLE "RPTAPP"."RA_LABLES_B" cascade constraints;
DROP TABLE "RPTAPP"."RA_LABLES_TL" cascade constraints;
DROP TABLE "RPTAPP"."RA_LOOKUPS" cascade constraints;
DROP TABLE "RPTAPP"."RA_LOOKUP_CODES" cascade constraints;
DROP TABLE "RPTAPP"."RA_META_AGGR_FUNC" cascade constraints;
DROP TABLE "RPTAPP"."RA_META_ATTR" cascade constraints;
DROP TABLE "RPTAPP"."RA_META_ATTR_GRP" cascade constraints;
DROP TABLE "RPTAPP"."RA_META_ATTR_GRP_MBR" cascade constraints;
DROP TABLE "RPTAPP"."RA_META_DATA_MODEL" cascade constraints;
DROP TABLE "RPTAPP"."RA_META_ENTITY_ALS" cascade constraints;
DROP TABLE "RPTAPP"."RA_META_FILT_OPER" cascade constraints;
DROP TABLE "RPTAPP"."RA_META_JOIN_CRTA" cascade constraints;
DROP TABLE "RPTAPP"."RA_META_PROD_ATTR" cascade constraints;
DROP TABLE "RPTAPP"."RA_META_PROD_TYP" cascade constraints;
DROP TABLE "RPTAPP"."RA_MNSG_TEST" cascade constraints;
DROP TABLE "RPTAPP"."RA_OUTPUT_FORMAT" cascade constraints;
DROP TABLE "RPTAPP"."RA_OUTPUT_TEMPLATES" cascade constraints;
DROP TABLE "RPTAPP"."RA_OUTPUT_TEMPLATES_T1" cascade constraints;
DROP TABLE "RPTAPP"."RA_OUTPUT_TYPE" cascade constraints;
DROP TABLE "RPTAPP"."RA_PARAM_B1415" cascade constraints;
DROP TABLE "RPTAPP"."RA_PARAM_B1815" cascade constraints;
DROP TABLE "RPTAPP"."RA_PARAM_B_BKP1415" cascade constraints;
DROP TABLE "RPTAPP"."RA_PARAM_DEPENDENCIES" cascade constraints;
DROP TABLE "RPTAPP"."RA_PARAM_DEPENENCY_REF" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORTS_15017" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORTS_B" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORTS_B_030814" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORTS_B_0324" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORTS_B_BKP_20140410" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORTS_B_CN" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORTS_B_IMP" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORTS_B_OFS" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORTS_B_SOJI" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORTS_B_T" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORTS_B_TEST" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORTS_SOJI" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORTS_TL" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_FILT_CRTA" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_INSTANCES" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_INSTANCES_SS" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_INSTANCES_SSS" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_INSTANCES_TEST" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_INST_INFO" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_INST_QRY_PROGRESS" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_LDAP_GROUPS" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_LDAP_GROUPS1" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_LDAP_GROUPS_1" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_LDAP_GROUPS_20141009" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_LDAP_GROUPS_20141092" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_LDAP_GROUPS_BKP_KV" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_LDAP_GROUPS_CN" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_LDAP_GROUPS_OFS" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_LDAP_GROUPS_SOJI" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_LDAP_GRPS_BKP_SR" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_META_DETAILS" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_META_DETAILS_T" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_OUTPUT_TEMPLATES" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_OUTPUT_TYPE" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_PARAMETERS_0403" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_PARAMETERS_15016" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_PARAMETERS_B" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_PARAMETERS_BSS_TMP" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_PARAMETERS_B_030814" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_PARAMETERS_B_0324" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_PARAMETERS_B_CM22692" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_PARAMETERS_B_CN" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_PARAMETERS_B_OFS" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_PARAMETERS_B_RAVI" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_PARAMETERS_B_TEST" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_PARAMETERS_TL" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_PARAMETERS_UP" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_PARAM_B_IMP" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_PARAM_TMP_20150211" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_QUERY_MAP" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_QUERY_MAP_CN" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_QUERY_MAP_OFS" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_QUERY_PARAMETERS" cascade constraints;
DROP TABLE "RPTAPP"."RA_REPORT_USER_DOWNLOADS" cascade constraints;
DROP TABLE "RPTAPP"."RA_ROLES_FEATURES" cascade constraints;
DROP TABLE "RPTAPP"."RA_RPT_LDAP_GROUPS_BKP2208" cascade constraints;
DROP TABLE "RPTAPP"."RA_RP_LDAP_GRP_BKUP" cascade constraints;
DROP TABLE "RPTAPP"."RA_SCHEDULING_INFO_TEMP" cascade constraints;
DROP TABLE "RPTAPP"."RA_SED_QUERY_COLS_BKP1415" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QC_COLUMNS_IMP" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERIES" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERIES_030814" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERIES_0324" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERIES_0403" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERIES_0418131630" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERIES_14103" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERIES_15016" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERIES_6072" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERIES_CM22692" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERIES_CN" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERIES_GC41405" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERIES_HIST_CM22692" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERIES_IMP" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERIES_OFS" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERIES_RAJEEV" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERIES_RAVI" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERIES_TEST" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERIES_TOP" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERY_ATTR" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERY_ATTR_EXPR" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_030814" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_2212" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_CN" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_OFS" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_SOJI" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMN_FORMAT" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERY_GENERATOR" cascade constraints;
DROP TABLE "RPTAPP"."RA_SEEDED_QUERY_PROD" cascade constraints;
DROP TABLE "RPTAPP"."RA_SHARED_GROUPS" cascade constraints;
DROP TABLE "RPTAPP"."RA_SHARED_GROUP_MEMBERS" cascade constraints;
DROP TABLE "RPTAPP"."RA_SHARED_REPORTS" cascade constraints;
DROP TABLE "RPTAPP"."RA_SHARED_TEMPLATES" cascade constraints;
DROP TABLE "RPTAPP"."RA_STATIC_ENUM" cascade constraints;
DROP TABLE "RPTAPP"."RA_STG_USER_DETAILS" cascade constraints;
DROP TABLE "RPTAPP"."RA_STG_USER_LDAP_GROUPS" cascade constraints;
DROP TABLE "RPTAPP"."RA_SUB_REPORT_MAP" cascade constraints;
DROP TABLE "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP" cascade constraints;
DROP TABLE "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP_OFS" cascade constraints;
DROP TABLE "RPTAPP"."RA_SUB_RUN_INSTANCES" cascade constraints;
DROP TABLE "RPTAPP"."RA_TABLE_COMMENTS" cascade constraints;
DROP TABLE "RPTAPP"."RA_TABLE_META_DETAILS" cascade constraints;
DROP TABLE "RPTAPP"."RA_TEMPLATES" cascade constraints;
DROP TABLE "RPTAPP"."RA_TEMPLATE_LABELS" cascade constraints;
DROP TABLE "RPTAPP"."RA_TEMPLATE_PARAMS" cascade constraints;
DROP TABLE "RPTAPP"."RA_TEMPLATE_PARAMS_TST" cascade constraints;
DROP TABLE "RPTAPP"."RA_TEMPLATE_QUERY_COLUMNS" cascade constraints;
DROP TABLE "RPTAPP"."RA_TSEEDED_QUERIES" cascade constraints;
DROP TABLE "RPTAPP"."RA_USER_APP_ROLES" cascade constraints;
DROP TABLE "RPTAPP"."RA_USER_APP_ROLE_MAP" cascade constraints;
DROP TABLE "RPTAPP"."RA_USER_DELEGATION_MASTER" cascade constraints;
DROP TABLE "RPTAPP"."RA_USER_DETAILS" cascade constraints;
DROP TABLE "RPTAPP"."RA_USER_EMAIL_PREFS" cascade constraints;
DROP TABLE "RPTAPP"."RA_USER_FAV_CATEGORY" cascade constraints;
DROP TABLE "RPTAPP"."RA_USER_FAV_CAT_VALUE" cascade constraints;
DROP TABLE "RPTAPP"."RA_USER_LDAP_GROUPS" cascade constraints;
DROP TABLE "RPTAPP"."RA_USER_LDAP_GROUPS_T" cascade constraints;
DROP TABLE "RPTAPP"."RA_USER_LOGIN_RECD" cascade constraints;
DROP TABLE "RPTAPP"."RA_USER_SCHEDULES" cascade constraints;
DROP TABLE "RPTAPP"."RA_XML_REPORT_ID" cascade constraints;
DROP TABLE "RPTAPP"."REPAIR_START_TIME" cascade constraints;
DROP TABLE "RPTAPP"."REPORT_NAME_TABLE_DMG" cascade constraints;
DROP TABLE "RPTAPP"."RF_SEEDED_QUERIES" cascade constraints;
DROP TABLE "RPTAPP"."RLM_QUERY_TEST" cascade constraints;
DROP TABLE "RPTAPP"."RLM_QUERY_TEST2" cascade constraints;
DROP TABLE "RPTAPP"."RPT_ENV_PROP" cascade constraints;
DROP TABLE "RPTAPP"."SCHEMA_LOG" cascade constraints;
DROP TABLE "RPTAPP"."SEEDED_QRY_COLS1415" cascade constraints;
DROP TABLE "RPTAPP"."SIT1_DTLS_V" cascade constraints;
DROP TABLE "RPTAPP"."SLA_DATA" cascade constraints;
DROP TABLE "RPTAPP"."SNOW_HEADER" cascade constraints;
DROP TABLE "RPTAPP"."SNOW_INCIDENT_HISTORY" cascade constraints;
DROP TABLE "RPTAPP"."SNOW_RESOLVED_DETAILS" cascade constraints;
DROP TABLE "RPTAPP"."T" cascade constraints;
DROP TABLE "RPTAPP"."T1" cascade constraints;
DROP TABLE "RPTAPP"."TABLE1" cascade constraints;
DROP TABLE "RPTAPP"."TABLE2" cascade constraints;
DROP TABLE "RPTAPP"."TABLE3" cascade constraints;
DROP TABLE "RPTAPP"."TABLE4" cascade constraints;
DROP TABLE "RPTAPP"."TABLE_TS" cascade constraints;
DROP TABLE "RPTAPP"."TAB_TEST" cascade constraints;
DROP TABLE "RPTAPP"."TAPP_FEATURE" cascade constraints;
DROP TABLE "RPTAPP"."TEMP0001" cascade constraints;
DROP TABLE "RPTAPP"."TEMP0002" cascade constraints;
DROP TABLE "RPTAPP"."TEMP1_FILES" cascade constraints;
DROP TABLE "RPTAPP"."TEMP_CHANDRA" cascade constraints;
DROP TABLE "RPTAPP"."TEMP_CHANDRA_NZ" cascade constraints;
DROP TABLE "RPTAPP"."TEMP_CLOB_TAB" cascade constraints;
DROP TABLE "RPTAPP"."TEMP_RA_REPORTS_B1" cascade constraints;
DROP TABLE "RPTAPP"."TEMP_RA_REPORT_PARAMETERS_B" cascade constraints;
DROP TABLE "RPTAPP"."TEMP_WORK" cascade constraints;
DROP TABLE "RPTAPP"."TEST" cascade constraints;
DROP TABLE "RPTAPP"."TEST1" cascade constraints;
DROP TABLE "RPTAPP"."TEST_ADJUST_TEMPLATE_AM" cascade constraints;
DROP TABLE "RPTAPP"."TEST_INQ" cascade constraints;
DROP TABLE "RPTAPP"."TEST_PIVOT_NZ" cascade constraints;
DROP TABLE "RPTAPP"."TEST_RA_SEEDED_QUERY" cascade constraints;
DROP TABLE "RPTAPP"."TEST_TAB" cascade constraints;
DROP TABLE "RPTAPP"."TEST_VK" cascade constraints;
DROP TABLE "RPTAPP"."TMP_RA_DATA_SOURCES" cascade constraints;
DROP TABLE "RPTAPP"."TMP_RA_REPORT_INSTANCES" cascade constraints;
DROP TABLE "RPTAPP"."TRACKER_DTLS_V" cascade constraints;
DROP TABLE "RPTAPP"."TRADE" cascade constraints;
DROP TABLE "RPTAPP"."TST123" cascade constraints;
DROP TABLE "RPTAPP"."T_RA_REPORT_MIGRATION" cascade constraints;
DROP TABLE "RPTAPP"."T_RUNREPO" cascade constraints;
DROP TABLE "RPTAPP"."UAT1_DTLS_V" cascade constraints;
DROP TABLE "RPTAPP"."UATA_DTLS_V" cascade constraints;
DROP TABLE "RPTAPP"."UP_FFS_SHEET" cascade constraints;
DROP TABLE "RPTAPP"."VALID_VBK" cascade constraints;
DROP TABLE "RPTAPP"."VBK_QC_1426" cascade constraints;
DROP TABLE "RPTAPP"."VBK_RP_1426" cascade constraints;
DROP TABLE "RPTAPP"."XMLTYPETEST" cascade constraints;
DROP TABLE "RPTAPP"."XYZ" cascade constraints;
DROP DATABASE LINK "ADJUSTMENTS_DEV_DMG";
DROP DATABASE LINK "SGLCRM_DEV_DMG";
DROP SEQUENCE "RPTAPP"."EXT_MESSAGE_ID_SEQ";
DROP SEQUENCE "RPTAPP"."RA_APPS_APP_ID_SEQ";
DROP SEQUENCE "RPTAPP"."RA_APRVL_Q_ID_SEQ";
DROP SEQUENCE "RPTAPP"."RA_EVENT_INSTANCE_ID_SEQ";
DROP SEQUENCE "RPTAPP"."RA_M_APP_ENUM_ID_SEQ";
DROP SEQUENCE "RPTAPP"."RA_REPORT_FILT_CRTA_SEQ";
DROP SEQUENCE "RPTAPP"."RA_SEEDED_QUERY_ATTR_SEQ";
DROP SEQUENCE "RPTAPP"."RA_SEEDED_QUERY_FILT_CRTA_SEQ";
DROP SEQUENCE "RPTAPP"."RA_SHARED_GROUPS_S";
DROP SEQUENCE "RPTAPP"."RA_SHARED_GRP_ID_SEQ";
DROP SEQUENCE "RPTAPP"."RA_TEMPLATE_ID_SEQ";
DROP SEQUENCE "RPTAPP"."RA_USER_SCHEDULES_S";
DROP SEQUENCE "RPTAPP"."RF_SEED_QUERIES_S";
DROP SEQUENCE "RPTAPP"."RPT_RUN_ID_SEQ";
DROP SEQUENCE "RPTAPP"."RPT_USER_CAT_ID_SEQ";
DROP VIEW "RPTAPP"."AQ$MYQUEUETABLE";
DROP VIEW "RPTAPP"."AQ$QUE_RA_INST_PROMPT_VLUS";
DROP VIEW "RPTAPP"."AQ$TRADE_QUEUE_TABLE";
DROP VIEW "RPTAPP"."AQ$_MYQUEUETABLE_F";
DROP VIEW "RPTAPP"."AQ$_QUE_RA_INST_PROMPT_VLUS_F";
DROP VIEW "RPTAPP"."AQ$_TRADE_QUEUE_TABLE_F";
DROP VIEW "RPTAPP"."DMRS_INSTALLATION";
DROP VIEW "RPTAPP"."DMRS_VDIAGRAMS";
DROP VIEW "RPTAPP"."DMRV_AGGR_FUNC_DIMENSIONS";
DROP VIEW "RPTAPP"."DMRV_AGGR_FUNC_LEVELS";
DROP VIEW "RPTAPP"."DMRV_ATTRIBUTES";
DROP VIEW "RPTAPP"."DMRV_AVT";
DROP VIEW "RPTAPP"."DMRV_BUSINESS_INFO";
DROP VIEW "RPTAPP"."DMRV_CHANGE_REQUESTS";
DROP VIEW "RPTAPP"."DMRV_CHANGE_REQUEST_ELEMENTS";
DROP VIEW "RPTAPP"."DMRV_CHECK_CONSTRAINTS";
DROP VIEW "RPTAPP"."DMRV_CLASSIFICATION_TYPES";
DROP VIEW "RPTAPP"."DMRV_COLLECTION_TYPES";
DROP VIEW "RPTAPP"."DMRV_COLUMNS";
DROP VIEW "RPTAPP"."DMRV_COLUMN_GROUPS";
DROP VIEW "RPTAPP"."DMRV_COLUMN_UI";
DROP VIEW "RPTAPP"."DMRV_CONSTR_INDEX_COLUMNS";
DROP VIEW "RPTAPP"."DMRV_CONTACTS";
DROP VIEW "RPTAPP"."DMRV_CONTACT_EMAILS";
DROP VIEW "RPTAPP"."DMRV_CONTACT_LOCATIONS";
DROP VIEW "RPTAPP"."DMRV_CONTACT_RES_LOCATORS";
DROP VIEW "RPTAPP"."DMRV_CONTACT_TELEPHONES";
DROP VIEW "RPTAPP"."DMRV_CUBES";
DROP VIEW "RPTAPP"."DMRV_CUBE_DIMENSIONS";
DROP VIEW "RPTAPP"."DMRV_DATA_FLOW_DIAGRAM_INFOS";
DROP VIEW "RPTAPP"."DMRV_DESIGNS";
DROP VIEW "RPTAPP"."DMRV_DIAGRAMS";
DROP VIEW "RPTAPP"."DMRV_DIAGRAM_ELEMENTS";
DROP VIEW "RPTAPP"."DMRV_DIMENSIONS";
DROP VIEW "RPTAPP"."DMRV_DIMENSION_CALC_ATTRS";
DROP VIEW "RPTAPP"."DMRV_DIMENSION_LEVELS";
DROP VIEW "RPTAPP"."DMRV_DISTINCT_TYPES";
DROP VIEW "RPTAPP"."DMRV_DOCUMENTS";
DROP VIEW "RPTAPP"."DMRV_DOCUMENT_ELEMENTS";
DROP VIEW "RPTAPP"."DMRV_DOMAINS";
DROP VIEW "RPTAPP"."DMRV_DOMAIN_AVT";
DROP VIEW "RPTAPP"."DMRV_DOMAIN_CHECK_CONSTRAINTS";
DROP VIEW "RPTAPP"."DMRV_DOMAIN_VALUE_RANGES";
DROP VIEW "RPTAPP"."DMRV_EMAILS";
DROP VIEW "RPTAPP"."DMRV_ENTITIES";
DROP VIEW "RPTAPP"."DMRV_ENTITYVIEWS";
DROP VIEW "RPTAPP"."DMRV_EVENTS";
DROP VIEW "RPTAPP"."DMRV_EXTERNAL_AGENTS";
DROP VIEW "RPTAPP"."DMRV_EXTERNAL_DATAS";
DROP VIEW "RPTAPP"."DMRV_EXT_AGENT_EXT_DATAS";
DROP VIEW "RPTAPP"."DMRV_EXT_AGENT_FLOWS";
DROP VIEW "RPTAPP"."DMRV_FACT_ENTITIES";
DROP VIEW "RPTAPP"."DMRV_FACT_ENTITIES_JOINS";
DROP VIEW "RPTAPP"."DMRV_FLOWS";
DROP VIEW "RPTAPP"."DMRV_FLOW_INFO_STRUCTURES";
DROP VIEW "RPTAPP"."DMRV_FOREIGNKEYS";
DROP VIEW "RPTAPP"."DMRV_GLOSSARIES";
DROP VIEW "RPTAPP"."DMRV_GLOSSARY_TERMS";
DROP VIEW "RPTAPP"."DMRV_HIERARCHIES";
DROP VIEW "RPTAPP"."DMRV_HIERARCHY_LEVELS";
DROP VIEW "RPTAPP"."DMRV_HIERARCHY_ROLLUP_LINKS";
DROP VIEW "RPTAPP"."DMRV_INDEXES";
DROP VIEW "RPTAPP"."DMRV_INFO_STORES";
DROP VIEW "RPTAPP"."DMRV_INFO_STRUCTURES";
DROP VIEW "RPTAPP"."DMRV_KEYS";
DROP VIEW "RPTAPP"."DMRV_KEY_ATTRIBUTES";
DROP VIEW "RPTAPP"."DMRV_KEY_ELEMENTS";
DROP VIEW "RPTAPP"."DMRV_LARGE_TEXT";
DROP VIEW "RPTAPP"."DMRV_LEVELS";
DROP VIEW "RPTAPP"."DMRV_LEVEL_ATTRS";
DROP VIEW "RPTAPP"."DMRV_LOCATIONS";
DROP VIEW "RPTAPP"."DMRV_LOGICAL_TO_NATIVE";
DROP VIEW "RPTAPP"."DMRV_LOGICAL_TYPES";
DROP VIEW "RPTAPP"."DMRV_MAPPINGS";
DROP VIEW "RPTAPP"."DMRV_MAPPING_TARGETS";
DROP VIEW "RPTAPP"."DMRV_MAPPING_TARGET_SOURCES";
DROP VIEW "RPTAPP"."DMRV_MEASURES";
DROP VIEW "RPTAPP"."DMRV_MEASURE_AGGR_FUNCS";
DROP VIEW "RPTAPP"."DMRV_MEASURE_FOLDERS";
DROP VIEW "RPTAPP"."DMRV_MEASURE_FOLDER_MEASURES";
DROP VIEW "RPTAPP"."DMRV_MODELS";
DROP VIEW "RPTAPP"."DMRV_MODEL_DISPLAYS";
DROP VIEW "RPTAPP"."DMRV_MODEL_NAMING_OPTIONS";
DROP VIEW "RPTAPP"."DMRV_MODEL_SUBVIEWS";
DROP VIEW "RPTAPP"."DMRV_NATIVE_TO_LOGICAL";
DROP VIEW "RPTAPP"."DMRV_NOTES";
DROP VIEW "RPTAPP"."DMRV_PK_OID_COLUMNS";
DROP VIEW "RPTAPP"."DMRV_PROCESSES";
DROP VIEW "RPTAPP"."DMRV_PROCESS_ATTRIBUTES";
DROP VIEW "RPTAPP"."DMRV_PROCESS_ENTITIES";
DROP VIEW "RPTAPP"."DMRV_RAGGED_HIER_LINKS";
DROP VIEW "RPTAPP"."DMRV_RAGGED_HIER_LINK_ATTRS";
DROP VIEW "RPTAPP"."DMRV_RDBMS_SITES";
DROP VIEW "RPTAPP"."DMRV_RECORD_STRUCTURES";
DROP VIEW "RPTAPP"."DMRV_RECORD_STRUCT_EXT_DATAS";
DROP VIEW "RPTAPP"."DMRV_RELATIONSHIPS";
DROP VIEW "RPTAPP"."DMRV_REPORTS_VERSION_1_0";
DROP VIEW "RPTAPP"."DMRV_RESOURCE_LOCATORS";
DROP VIEW "RPTAPP"."DMRV_RESPONSIBLE_PARTIES";
DROP VIEW "RPTAPP"."DMRV_RES_PARTY_CONTACTS";
DROP VIEW "RPTAPP"."DMRV_RES_PARTY_ELEMENTS";
DROP VIEW "RPTAPP"."DMRV_ROLES";
DROP VIEW "RPTAPP"."DMRV_ROLE_PROCESSES";
DROP VIEW "RPTAPP"."DMRV_ROLLUP_LINKS";
DROP VIEW "RPTAPP"."DMRV_ROLLUP_LINK_ATTRS";
DROP VIEW "RPTAPP"."DMRV_SLICES";
DROP VIEW "RPTAPP"."DMRV_SLICE_DIM_HIER_LEVEL";
DROP VIEW "RPTAPP"."DMRV_SLICE_MEASURES";
DROP VIEW "RPTAPP"."DMRV_SOURCE_INFO";
DROP VIEW "RPTAPP"."DMRV_SPATIAL_COLUMN_DEFINITION";
DROP VIEW "RPTAPP"."DMRV_SPATIAL_DIMENSIONS";
DROP VIEW "RPTAPP"."DMRV_STRUCTURED_TYPES";
DROP VIEW "RPTAPP"."DMRV_STRUCT_TYPE_ATTRS";
DROP VIEW "RPTAPP"."DMRV_STRUCT_TYPE_METHODS";
DROP VIEW "RPTAPP"."DMRV_STRUCT_TYPE_METHOD_PARS";
DROP VIEW "RPTAPP"."DMRV_TABLES";
DROP VIEW "RPTAPP"."DMRV_TABLEVIEWS";
DROP VIEW "RPTAPP"."DMRV_TABLE_CONSTRAINTS";
DROP VIEW "RPTAPP"."DMRV_TABLE_INCLUDE_SCRIPTS";
DROP VIEW "RPTAPP"."DMRV_TASK_PARAMS";
DROP VIEW "RPTAPP"."DMRV_TASK_PARAMS_ITEMS";
DROP VIEW "RPTAPP"."DMRV_TELEPHONES";
DROP VIEW "RPTAPP"."DMRV_TRANSFORMATIONS";
DROP VIEW "RPTAPP"."DMRV_TRANSFORMATION_FLOWS";
DROP VIEW "RPTAPP"."DMRV_TRANSFORMATION_PACKAGES";
DROP VIEW "RPTAPP"."DMRV_TRANSFORMATION_TASKS";
DROP VIEW "RPTAPP"."DMRV_TRANSFORMATION_TASK_INFOS";
DROP VIEW "RPTAPP"."DMRV_VALUE_RANGES";
DROP VIEW "RPTAPP"."DMRV_VIEW_COLUMNS";
DROP VIEW "RPTAPP"."DMRV_VIEW_CONTAINERS";
DROP VIEW "RPTAPP"."DMRV_VIEW_ORDER_GROUPBY";
DROP VIEW "RPTAPP"."RA_PARAM_EXPRSN_RSLVD_VALUES_V";
DROP VIEW "RPTAPP"."RA_REPORTS";
DROP VIEW "RPTAPP"."RA_REPORT_PARAMETERS_V";
DROP VIEW "RPTAPP"."RA_REPORT_RUN_DETAILS_V";
DROP VIEW "RPTAPP"."RA_TEMPLATE_PARAM_VALUES_V";
DROP VIEW "RPTAPP"."RA_UI_REPORT_EXECUTION_V";
DROP FUNCTION "RPTAPP"."CAN_ACCESS_REPORT";
DROP FUNCTION "RPTAPP"."DEMO_RETURN";
DROP FUNCTION "RPTAPP"."FNCHECKDOMAINVALID";
DROP FUNCTION "RPTAPP"."FN_GEN_INSERTS";
DROP FUNCTION "RPTAPP"."FN_GET_METADATA_DELETES";
DROP FUNCTION "RPTAPP"."FN_GET_METADATA_INSERTS";
DROP FUNCTION "RPTAPP"."FN_GET_METADATA_INSERTS_NEW";
DROP FUNCTION "RPTAPP"."FN_GET_METADATA_INSERTS_Q1";
DROP FUNCTION "RPTAPP"."FN_GET_METADATA_INSERTS_SIT";
DROP FUNCTION "RPTAPP"."FN_GET_METAQUERY_INSERTS";
DROP FUNCTION "RPTAPP"."FN_GET_METAQUERY_INSERTS_HG";
DROP FUNCTION "RPTAPP"."FN_GET_META_INSERTS";
DROP FUNCTION "RPTAPP"."FN_GET_RA_META_INSERTS";
DROP FUNCTION "RPTAPP"."FN_GET_UNIV_TRANS_VAL";
DROP FUNCTION "RPTAPP"."FUNC_GET_REPORT_INSTANCES";
DROP FUNCTION "RPTAPP"."GEN_XML_SCHEMA";
DROP FUNCTION "RPTAPP"."GET_USER";
DROP FUNCTION "RPTAPP"."RA_CHECKSUM_CLOB_FUNC";
DROP FUNCTION "RPTAPP"."RA_RPT_GETFILE_SIZE";
DROP FUNCTION "RPTAPP"."RTN_REFCURSOR";
DROP FUNCTION "RPTAPP"."TEST_LOG_FILE_CREATION";
DROP FUNCTION "RPTAPP"."TF_FBBGRS0003";
DROP FUNCTION "RPTAPP"."TF_FBBGRS0004";
DROP FUNCTION "RPTAPP"."TF_FBBLM0012";
DROP FUNCTION "RPTAPP"."TF_FBBLMR0017";
DROP PACKAGE "RPTAPP"."PA_QUERY";
DROP PACKAGE "RPTAPP"."PKG_OSDM_UTILS";
DROP PACKAGE "RPTAPP"."PKG_SP_TEST";
DROP PACKAGE "RPTAPP"."RA_INQUIRY_PURGE_REPORT";
DROP PACKAGE "RPTAPP"."RA_INQUIRY_PURGE_REPORT_PKG";
DROP PACKAGE "RPTAPP"."RA_STR_PROC_TEST";
DROP PACKAGE "RPTAPP"."RA_USER_SCHEDULES_PKG";
DROP PACKAGE BODY "RPTAPP"."PKG_OSDM_UTILS";
DROP PACKAGE BODY "RPTAPP"."PKG_SP_TEST";
DROP PACKAGE BODY "RPTAPP"."RA_INQUIRY_PURGE_REPORT";
DROP PACKAGE BODY "RPTAPP"."RA_INQUIRY_PURGE_REPORT_PKG";
DROP PACKAGE BODY "RPTAPP"."RA_STR_PROC_TEST";
DROP PACKAGE BODY "RPTAPP"."RA_USER_SCHEDULES_PKG";
DROP PROCEDURE "RPTAPP"."CREATE_INQ_DEV_USER";
DROP PROCEDURE "RPTAPP"."CREATE_INQ_USER_MODEL_AFTER";
DROP PROCEDURE "RPTAPP"."DELETE_HISTORY_PER_RUN_ID";
DROP PROCEDURE "RPTAPP"."GETDYNAMICSQLQUERY";
DROP PROCEDURE "RPTAPP"."GETREPORTDATASET";
DROP PROCEDURE "RPTAPP"."GET_DYNAMIC_UNIVERSE_QUERY";
DROP PROCEDURE "RPTAPP"."GET_DYNAMIC_UNIVERSE_QUERY_BAK";
DROP PROCEDURE "RPTAPP"."GET_INQUIRY_PROC";
DROP PROCEDURE "RPTAPP"."GET_REPORT_INSTANCES";
DROP PROCEDURE "RPTAPP"."GET_STATIC_UNIVERSE_QUERY";
DROP PROCEDURE "RPTAPP"."GET_STATIC_UNIVERSE_QUERY_BAK";
DROP PROCEDURE "RPTAPP"."GET_UNIVERSE_QUERY";
DROP PROCEDURE "RPTAPP"."P1";
DROP PROCEDURE "RPTAPP"."PROC_GET_REPORT_INSTANCES";
DROP PROCEDURE "RPTAPP"."PROC_GET_REPORT_INSTANCES1";
DROP PROCEDURE "RPTAPP"."PROC_MULTI_OUTPUT_TEST01";
DROP PROCEDURE "RPTAPP"."P_INSERT_SCRIPT";
DROP PROCEDURE "RPTAPP"."P_TEST";
DROP PROCEDURE "RPTAPP"."P_TEST_01";
DROP PROCEDURE "RPTAPP"."P_TEST_PROC";
DROP PROCEDURE "RPTAPP"."REMOVE_REPORT";
DROP PROCEDURE "RPTAPP"."SAVE_HISTORY_FOR_RUN_ID";
DROP PROCEDURE "RPTAPP"."SP_COPY_LDAP";
DROP PROCEDURE "RPTAPP"."SP_REPORT_LDAP_CONFIG";
DROP PROCEDURE "RPTAPP"."TESTMESSAGE";
begin
DBMS_AQADM.DROP_QUEUE(queue_name=>'TRADE_QUEUE', auto_commit=>TRUE);
end;
/
begin
DBMS_AQADM.DROP_QUEUE(queue_name=>'USERQUEUE', auto_commit=>TRUE);
end;
/
begin
DBMS_AQADM.DROP_QUEUE(queue_name=>'QUE_RA_INST_PROMPT_VLUS', auto_commit=>TRUE);
end;
/
begin
DBMS_AQADM.DROP_QUEUE_TABLE(queue_table=>'MYQUEUETABLE', force=>TRUE);
end;
/
begin
DBMS_AQADM.DROP_QUEUE_TABLE(queue_table=>'QUE_RA_INST_PROMPT_VLUS', force=>TRUE);
end;
/
begin
DBMS_AQADM.DROP_QUEUE_TABLE(queue_table=>'TRADE_QUEUE_TABLE', force=>TRUE);
end;
/
DROP TYPE "RPTAPP"."DIMENSION_ARRAY";
DROP TYPE "RPTAPP"."FBBGRS0003_REC_TYP";
DROP TYPE "RPTAPP"."FBBGRS0003_TAB_TYP";
DROP TYPE "RPTAPP"."FBBGRS0004_REC_TYP";
DROP TYPE "RPTAPP"."FBBGRS0004_TAB_TYP";
DROP TYPE "RPTAPP"."FBBLM0012_REC_TYP";
DROP TYPE "RPTAPP"."FBBLM0012_TAB_TYP";
DROP TYPE "RPTAPP"."FBBLMR0017_REC_TYP";
DROP TYPE "RPTAPP"."FBBLMR0017_TAB_TYP";
DROP TYPE "RPTAPP"."MEASURE_ARRAY";
DROP TYPE "RPTAPP"."MEASURE_TYPE";
DROP TYPE "RPTAPP"."MSG_REC";
DROP TYPE "RPTAPP"."MSG_REC_OUT";
DROP TYPE "RPTAPP"."RA_INSTANCE_PROMPT_VALUES_TYPE";
DROP TYPE "RPTAPP"."REPORT_TEMPLATE";
DROP TYPE "RPTAPP"."SOEID";
DROP TYPE "RPTAPP"."TCLOB";
DROP TYPE "RPTAPP"."TCLOB_2D";
DROP TYPE "RPTAPP"."UID_TABLE";
--------------------------------------------------------

--  DDL for DB Link ADJUSTMENTS_DEV_DMG

--------------------------------------------------------


  CREATE DATABASE LINK "ADJUSTMENTS_DEV_DMG"
   CONNECT TO "ADJUSTMENTS" IDENTIFIED BY VALUES ':1'
   USING '(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=vm-e329-a0f3.nam.nsroot.net)(PORT=1525))(CONNECT_DATA=(SID=FBADTDVG))) ';
--------------------------------------------------------

--  DDL for DB Link SGLCRM_DEV_DMG

--------------------------------------------------------


  CREATE DATABASE LINK "SGLCRM_DEV_DMG"
   CONNECT TO "SGLCRM" IDENTIFIED BY VALUES ':1'
   USING '(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=fbblnxmwdb12d.nam.nsroot.net)(PORT=15321))(CONNECT_DATA=(SID=FBSRDVG1))) ';
--------------------------------------------------------

--  DDL for Type DIMENSION_ARRAY

--------------------------------------------------------


  CREATE OR REPLACE TYPE "RPTAPP"."DIMENSION_ARRAY" AS VARRAY(200) OF VARCHAR2(50);

/
--------------------------------------------------------

--  DDL for Type FBBGRS0003_REC_TYP

--------------------------------------------------------


  CREATE OR REPLACE TYPE "RPTAPP"."FBBGRS0003_REC_TYP" As Object
(
FEED_AS_OF_DT VARCHAR2(256),
FEED_ID VARCHAR2(256),
MAP_ID VARCHAR2(256),
JRNL_HEAD_ID VARCHAR2(256),
JRNL_LINE_ID VARCHAR2(256),
EXCP_ATTR1_CD VARCHAR2(256),
Source_attr VARCHAR2(10000)
);

/
--------------------------------------------------------

--  DDL for Type FBBGRS0003_TAB_TYP

--------------------------------------------------------


  CREATE OR REPLACE TYPE "RPTAPP"."FBBGRS0003_TAB_TYP" 
IS
  TABLE OF FBBGRS0003_REC_TYP;

/
--------------------------------------------------------

--  DDL for Type FBBGRS0004_REC_TYP

--------------------------------------------------------


  CREATE OR REPLACE TYPE "RPTAPP"."FBBGRS0004_REC_TYP" As Object
(
  C1 VARCHAR2(256),C2 VARCHAR2(256),C3 VARCHAR2(256),
  C4 VARCHAR2(256),C5 VARCHAR2(256),C6 VARCHAR2(256),
  C7 VARCHAR2(256),C8 VARCHAR2(256),C9 VARCHAR2(256),
  C10 VARCHAR2(256),C11 VARCHAR2(256),C12 VARCHAR2(256),
  C13 VARCHAR2(256),C14 VARCHAR2(256),C15 VARCHAR2(256),
  C16 VARCHAR2(256),C17 VARCHAR2(256),C18 VARCHAR2(256),
  C19 VARCHAR2(256),C20 VARCHAR2(256),C21 VARCHAR2(256),
  C22 VARCHAR2(256),C23 VARCHAR2(256),C24 VARCHAR2(256),C25 VARCHAR2(4000)
);

/
--------------------------------------------------------

--  DDL for Type FBBGRS0004_TAB_TYP

--------------------------------------------------------


  CREATE OR REPLACE TYPE "RPTAPP"."FBBGRS0004_TAB_TYP" Is Table Of FBBGRS0004_REC_TYP;

/
--------------------------------------------------------

--  DDL for Type FBBLM0012_REC_TYP

--------------------------------------------------------


  CREATE OR REPLACE TYPE "RPTAPP"."FBBLM0012_REC_TYP" 
AS
  Object
  (
    C1  VARCHAR2(256),
    C2  VARCHAR2(256),
    C3  VARCHAR2(256),
    C4  VARCHAR2(256),
    C5  VARCHAR2(256),
    C6  VARCHAR2(256),
    C7  VARCHAR2(256),
    C8  VARCHAR2(256),
    C9  VARCHAR2(256),
    C10 VARCHAR2(256),
    C11 VARCHAR2(256),
    C12 VARCHAR2(256),
    C13 VARCHAR2(256),
    C14 VARCHAR2(256),
    C15 VARCHAR2(256),
    C16 VARCHAR2(256),
    C17 VARCHAR2(256),
    C18 VARCHAR2(256),
    C19 VARCHAR2(256),
    C20 VARCHAR2(256),
    C21 VARCHAR2(256),
    C22 VARCHAR2(256),
    C23 VARCHAR2(256),
    C24 VARCHAR2(256),
    C25 VARCHAR2(256),
    C26 VARCHAR2(256),
    C27 VARCHAR2(256),
    C28 VARCHAR2(256),
    C29 VARCHAR2(256),
    C30 VARCHAR2(256),
    C31 VARCHAR2(256),
    C32 VARCHAR2(256),
    C33 VARCHAR2(256),
    C34 VARCHAR2(256),
    C35 VARCHAR2(256),
    C36 VARCHAR2(256),
    C37 VARCHAR2(256),
    C38 VARCHAR2(256),
    C39 VARCHAR2(256),
    C40 VARCHAR2(256),
    C41 VARCHAR2(256),
    C42 VARCHAR2(256),
    C43 VARCHAR2(256),
    C44 VARCHAR2(256),
    C45 VARCHAR2(256),
    C46 VARCHAR2(256),
    C47 VARCHAR2(256),
    C48 VARCHAR2(256),
    C49 VARCHAR2(256),
    C50 VARCHAR2(256),
    C51 VARCHAR2(256),
    C52 VARCHAR2(256),
    C53 VARCHAR2(256),
    C54 VARCHAR2(256),
    C55 VARCHAR2(256),
    C56 VARCHAR2(256),
    C57 VARCHAR2(256),
    C58 VARCHAR2(256),
    C59 VARCHAR2(256),
    C60 VARCHAR2(256),
    C61 VARCHAR2(256),
    C62 VARCHAR2(256),
    C63 VARCHAR2(256),
    C64 VARCHAR2(256),
    C65 VARCHAR2(256),
    C66 VARCHAR2(256),
    C67 VARCHAR2(256),
    C68 VARCHAR2(256),
    C69 VARCHAR2(256),
    C70 VARCHAR2(256),
    C71 VARCHAR2(256),
    C72 VARCHAR2(256),
    C73 VARCHAR2(256),
    C74 VARCHAR2(256),
    C75 VARCHAR2(256),
    C76 VARCHAR2(256),
    C77 VARCHAR2(256),
    C78 VARCHAR2(256),
    C79 VARCHAR2(256),
    C80 VARCHAR2(256),
    C81 VARCHAR2(256),
    C82 VARCHAR2(256),
    C83 VARCHAR2(256),
    C84 VARCHAR2(256),
    C85 VARCHAR2(256),
    C86 VARCHAR2(256),
    C87 VARCHAR2(256),
    C88 VARCHAR2(256),
    C89 VARCHAR2(256),
    C90 VARCHAR2(256),
    C91 VARCHAR2(256),
    C92 VARCHAR2(256),
    C93 VARCHAR2(256),
    C94 VARCHAR2(256),
    C95 VARCHAR2(256),
    C96 VARCHAR2(256),
    C97 VARCHAR2(256),
    C98 VARCHAR2(256),
    C99 VARCHAR2(256),
    C100 NUMBER,
    C101 VARCHAR2(2000),
    C102 VARCHAR2(256),
    C103 VARCHAR2(256),
    C104 VARCHAR2(256),
    C105 NUMBER,
    C106 VARCHAR2(256),
    C107 VARCHAR2(256)
    );

/
--------------------------------------------------------

--  DDL for Type FBBLM0012_TAB_TYP

--------------------------------------------------------


  CREATE OR REPLACE TYPE "RPTAPP"."FBBLM0012_TAB_TYP" 
IS
  TABLE OF FBBLM0012_REC_TYP;   

/
--------------------------------------------------------

--  DDL for Type FBBLMR0017_REC_TYP

--------------------------------------------------------


  CREATE OR REPLACE TYPE "RPTAPP"."FBBLMR0017_REC_TYP" As Object
(
  C1 VARCHAR2(30),C2 VARCHAR2(256),C3 VARCHAR2(256),
  C4 VARCHAR2(4000),C5 VARCHAR2(256),C6 VARCHAR2(256),
  C7 VARCHAR2(256),C8 VARCHAR2(256),C9 VARCHAR2(256),
  C10 VARCHAR2(256),C11 VARCHAR2(256),C12 VARCHAR2(256)
);

/
--------------------------------------------------------

--  DDL for Type FBBLMR0017_TAB_TYP

--------------------------------------------------------


  CREATE OR REPLACE TYPE "RPTAPP"."FBBLMR0017_TAB_TYP" Is Table Of FBBLMR0017_REC_TYP;

/
--------------------------------------------------------

--  DDL for Type MEASURE_ARRAY

--------------------------------------------------------


  CREATE OR REPLACE TYPE "RPTAPP"."MEASURE_ARRAY" AS VARRAY(200) OF MEASURE_TYPE;

/
--------------------------------------------------------

--  DDL for Type MEASURE_TYPE

--------------------------------------------------------


  CREATE OR REPLACE TYPE "RPTAPP"."MEASURE_TYPE" 
    AS OBJECT (COLUMNNAME VARCHAR2(50), COLUMNDISPLAYNAME VARCHAR2(50), MEASUREFUNCTION VARCHAR2(5));

/
--------------------------------------------------------

--  DDL for Type MSG_REC

--------------------------------------------------------


  CREATE OR REPLACE TYPE "RPTAPP"."MSG_REC" AS OBJECT (
    msgid                    number(20),
    grp              number(3),
    nodedesc              VARCHAR2(2000),
    pp                   NUMBER,
    cp                  NUMBER,
    Variance1 NUMBER,
    pVariance NUMBER
  );

/
--------------------------------------------------------

--  DDL for Type MSG_REC_OUT

--------------------------------------------------------


  CREATE OR REPLACE TYPE "RPTAPP"."MSG_REC_OUT" AS TABLE OF Msg_rec;

/
--------------------------------------------------------

--  DDL for Type RA_INSTANCE_PROMPT_VALUES_TYPE

--------------------------------------------------------


  CREATE OR REPLACE TYPE "RPTAPP"."RA_INSTANCE_PROMPT_VALUES_TYPE" AS OBJECT
(	RUN_ID NUMBER(38,0) , 
	INSTPRM_PROMPT_ID NUMBER(38,0), 
	INSTPRM_PROMPT_VALUE VARCHAR2(2000 CHAR), 
	CREATED_BY VARCHAR2(50 BYTE), 
	CREATION_DTM DATE , 
	LAST_UPDATED_BY VARCHAR2(50 BYTE) , 
	LAST_UPDATE_DTM DATE 
   )

/
--------------------------------------------------------

--  DDL for Type REPORT_TEMPLATE

--------------------------------------------------------


  CREATE OR REPLACE TYPE "RPTAPP"."REPORT_TEMPLATE" AS OBJECT (reportType                 INTEGER, useDescriptionInfo          INTEGER, useQuantitativeInfo         INTEGER, useTableColumns             INTEGER, useTableColumnsComments     INTEGER, useTableIndexes             INTEGER, useTableConstraints         INTEGER, useTableFKReferringTo       INTEGER, useTableFKReferredFrom      INTEGER, useEntityAttributes         INTEGER, useEntityAttributesComments INTEGER, useEntityConstraints        INTEGER, useEntityIdentifiers        INTEGER, useEntityRelationships      INTEGER, useEntityIncomingProcesses  INTEGER, useEntityOutgoingProcesses  INTEGER, useDomainConstraints        INTEGER, useDomainUsedInTables       INTEGER, useDomainUsedInEntities     INTEGER, useSTAttributes             INTEGER, useSTAttributesComments     INTEGER, useSTMethods                INTEGER, useSTUsedInTables           INTEGER, useSTUsedInEntities         INTEGER, useCTUsedInTables           INTEGER, useCTUsedInEntities         INTEGER, useDTUsedInTables           INTEGER, useDTUsedInEntities         INTEGER, useCRImpactedObjects        INTEGER, useMRImpactedObjects        INTEGER)

/
--------------------------------------------------------

--  DDL for Type SOEID

--------------------------------------------------------


  CREATE OR REPLACE TYPE "RPTAPP"."SOEID" as object (soeid varchar2(20));

/
--------------------------------------------------------

--  DDL for Type TCLOB

--------------------------------------------------------


  CREATE OR REPLACE TYPE "RPTAPP"."TCLOB" Is Table Of Clob;

/
--------------------------------------------------------

--  DDL for Type TCLOB_2D

--------------------------------------------------------


  CREATE OR REPLACE TYPE "RPTAPP"."TCLOB_2D" Is Table of TClob;

/
--------------------------------------------------------

--  DDL for Type UID_TABLE

--------------------------------------------------------


  CREATE OR REPLACE TYPE "RPTAPP"."UID_TABLE" as table of soeid;

/
--------------------------------------------------------

--  DDL for Sequence EXT_MESSAGE_ID_SEQ

--------------------------------------------------------


   CREATE SEQUENCE  "RPTAPP"."EXT_MESSAGE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 35417 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------

--  DDL for Sequence RA_APPS_APP_ID_SEQ

--------------------------------------------------------


   CREATE SEQUENCE  "RPTAPP"."RA_APPS_APP_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------

--  DDL for Sequence RA_APRVL_Q_ID_SEQ

--------------------------------------------------------


   CREATE SEQUENCE  "RPTAPP"."RA_APRVL_Q_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 64 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------

--  DDL for Sequence RA_EVENT_INSTANCE_ID_SEQ

--------------------------------------------------------


   CREATE SEQUENCE  "RPTAPP"."RA_EVENT_INSTANCE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 123 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------

--  DDL for Sequence RA_M_APP_ENUM_ID_SEQ

--------------------------------------------------------


   CREATE SEQUENCE  "RPTAPP"."RA_M_APP_ENUM_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE ;
--------------------------------------------------------

--  DDL for Sequence RA_REPORT_FILT_CRTA_SEQ

--------------------------------------------------------


   CREATE SEQUENCE  "RPTAPP"."RA_REPORT_FILT_CRTA_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 27 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------

--  DDL for Sequence RA_SEEDED_QUERY_ATTR_SEQ

--------------------------------------------------------


   CREATE SEQUENCE  "RPTAPP"."RA_SEEDED_QUERY_ATTR_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 305 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------

--  DDL for Sequence RA_SEEDED_QUERY_FILT_CRTA_SEQ

--------------------------------------------------------


   CREATE SEQUENCE  "RPTAPP"."RA_SEEDED_QUERY_FILT_CRTA_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 6 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------

--  DDL for Sequence RA_SHARED_GROUPS_S

--------------------------------------------------------


   CREATE SEQUENCE  "RPTAPP"."RA_SHARED_GROUPS_S"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 802 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------

--  DDL for Sequence RA_SHARED_GRP_ID_SEQ

--------------------------------------------------------


   CREATE SEQUENCE  "RPTAPP"."RA_SHARED_GRP_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 24 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------

--  DDL for Sequence RA_TEMPLATE_ID_SEQ

--------------------------------------------------------


   CREATE SEQUENCE  "RPTAPP"."RA_TEMPLATE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2484 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------

--  DDL for Sequence RA_USER_SCHEDULES_S

--------------------------------------------------------


   CREATE SEQUENCE  "RPTAPP"."RA_USER_SCHEDULES_S"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 705 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------

--  DDL for Sequence RF_SEED_QUERIES_S

--------------------------------------------------------


   CREATE SEQUENCE  "RPTAPP"."RF_SEED_QUERIES_S"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------

--  DDL for Sequence RPT_RUN_ID_SEQ

--------------------------------------------------------


   CREATE SEQUENCE  "RPTAPP"."RPT_RUN_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 55512 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------

--  DDL for Sequence RPT_USER_CAT_ID_SEQ

--------------------------------------------------------


   CREATE SEQUENCE  "RPTAPP"."RPT_USER_CAT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------

--  DDL for Table AAA_TEST_RA_REPORTS_B

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."AAA_TEST_RA_REPORTS_B" 
   (	"REPORT_ID" NUMBER(38,0), 
	"APP_ID" NUMBER(38,0), 
	"ID_ON_BI_SERVER" VARCHAR2(200 CHAR), 
	"REPORT_NAME_ON_BI_SERVER" VARCHAR2(100 CHAR), 
	"REPORT_PATH_ON_BI_SERVER" VARCHAR2(500 CHAR), 
	"DISPLAY_REPORT_NAME" VARCHAR2(150 CHAR), 
	"REPORT_DESCRIPTION" VARCHAR2(200 CHAR), 
	"BI_CATEGORY_ID" VARCHAR2(30 CHAR), 
	"SCHEDULING_ALLOWED" VARCHAR2(1 CHAR), 
	"MOVE_TO_ARCHIVE_AFTER_DAYS" NUMBER(2,0), 
	"PURGE_AFTER_DAYS" NUMBER(3,0), 
	"ARCHIVE_ALLLOWED" VARCHAR2(1 CHAR), 
	"ARCHIVE_FORMAT_TYPE" VARCHAR2(10 BYTE), 
	"DATA_SECURITY_ENABLED" CHAR(1 CHAR), 
	"REPORT_SHORT_NAME" VARCHAR2(30 CHAR), 
	"REPORT_TYPE" VARCHAR2(30 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"BI_REPORT_DIRECT_QUERY" VARCHAR2(4000 CHAR), 
	"BI_SERVER" VARCHAR2(30 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"ACTIVE_IND" CHAR(1 BYTE), 
	"REPORT_TOOL" VARCHAR2(20 CHAR), 
	"QUERY_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"IS_EXCEL_SUPPORTED" VARCHAR2(1 BYTE), 
	"EXCEL_TEMPLATE_NAME" VARCHAR2(100 BYTE), 
	"OUTPUT_STORAGE_TYPE" VARCHAR2(10 BYTE), 
	"DETAIL_REPORT_ID" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table AAA_TEST_RA_RPT_PRM_B

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."AAA_TEST_RA_RPT_PRM_B" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(2000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table AAA_TEST_RA_SEEDED_QRY_COL

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."AAA_TEST_RA_SEEDED_QRY_COL" 
   (	"QUERY_ID" NUMBER(*,0), 
	"COLUMN_ORDER" NUMBER(3,0), 
	"COLUMN_NAME" VARCHAR2(50 BYTE), 
	"COLUMN_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"COLUMN_TYPE" VARCHAR2(30 CHAR), 
	"COLUMN_SUB_TYPE" VARCHAR2(30 BYTE), 
	"COLUMN_TYPE_FORMAT_MASK" VARCHAR2(30 CHAR), 
	"REQUIRED_IN_SELECT_CLAUSE" VARCHAR2(1 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"COLUMN_DATA_TYPE" VARCHAR2(10 CHAR), 
	"MEASURE_FUNCTION" VARCHAR2(30 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table ABC

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."ABC" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(2000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR), 
	"MULTI_VALUE_LIMIT" NUMBER(38,0), 
	"IS_MULTI_VALUE_NUMERIC" CHAR(1 CHAR), 
	"MULTI_VALUE_SEPARATOR" CHAR(1 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table ABCD_DMG

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."ABCD_DMG" 
   (	"FNAME" VARCHAR2(20 BYTE), 
	"LNAME" VARCHAR2(20 BYTE), 
	"AGE" NUMBER(20,0), 
	"ADDRESS" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table ABC_BCK

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."ABC_BCK" 
   (	"REPORT_ID" NUMBER(38,0), 
	"LDAP_GROUP_NAME" VARCHAR2(150 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table ABC_RPT

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."ABC_RPT" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(4000 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(4000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR), 
	"MULTI_VALUE_LIMIT" NUMBER(38,0), 
	"IS_MULTI_VALUE_NUMERIC" CHAR(1 CHAR), 
	"MULTI_VALUE_SEPARATOR" VARCHAR2(10 CHAR), 
	"MULTI_VALUE_OUT_SEPARATOR" VARCHAR2(10 CHAR), 
	"DS_ID2" NUMBER(38,0), 
	"LOV_QUERY2" VARCHAR2(4000 CHAR), 
	"EXT_PARAMETER_NAME" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table ACTION_1

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."ACTION_1" 
   (	"RUN_ID" NUMBER(*,0), 
	"REPORT_ID" NUMBER(38,0), 
	"SUBMITTED_BY_SOEID" VARCHAR2(25 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table ACTION_2

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."ACTION_2" 
   (	"RUN_ID" NUMBER(*,0), 
	"ORIGINAL_RUN_ID" NUMBER(*,0), 
	"REPORT_ID" NUMBER(38,0), 
	"APP_ID" NUMBER(38,0), 
	"APP" VARCHAR2(100 CHAR), 
	"SOEID" VARCHAR2(25 CHAR), 
	"ORIGINAL_SOEID" VARCHAR2(25 CHAR), 
	"REPORT_NAME" VARCHAR2(150 CHAR), 
	"REPORT_TITLE" VARCHAR2(150 BYTE), 
	"OUTPUT_TYPE" VARCHAR2(30 BYTE), 
	"SIZE" NUMBER, 
	"STATUS" NUMBER(38,0), 
	"STATUS_DESC" VARCHAR2(9 BYTE), 
	"REPORT_ACTIVE_IND" VARCHAR2(14 BYTE), 
	"CREATE_TIME" VARCHAR2(19 BYTE), 
	"SCHEDULED_TIME" VARCHAR2(19 BYTE), 
	"START_TIME" VARCHAR2(19 BYTE), 
	"END_TIME" VARCHAR2(19 BYTE), 
	"TRIGGERED_BY" VARCHAR2(5 BYTE), 
	"IS_SHARABLE" CHAR(1 BYTE), 
	"IS_ENTITLED" CHAR(1 BYTE), 
	"IS_PARTIAL_RESULT" VARCHAR2(1 BYTE), 
	"IS_CACHED" VARCHAR2(1 BYTE), 
	"IS_READ" CHAR(1 BYTE), 
	"IS_DELETABLE" CHAR(1 BYTE), 
	"REASON" VARCHAR2(500 CHAR), 
	"IS_ONLINE_AVAILABLE" VARCHAR2(1 BYTE), 
	"RECORDS" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table ANKUSH

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."ANKUSH" 
   (	"REPORT_TYPE" VARCHAR2(200 BYTE), 
	"REPORT_ID" NUMBER(8,0), 
	"REPORT_NAME" VARCHAR2(1000 BYTE), 
	"IMPACT" VARCHAR2(5 BYTE), 
	"TABLE_NAME" VARCHAR2(1000 BYTE), 
	"COLUMN_NAME" VARCHAR2(1000 BYTE), 
	"Q_TEXT" CLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" 
 LOB ("Q_TEXT") STORE AS BASICFILE (
  TABLESPACE "RPTAPP_DATA" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table ANK_1

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."ANK_1" 
   (	"ACC_ID" VARCHAR2(100 BYTE), 
	"AMOUNT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table AUD_RA_APPS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."AUD_RA_APPS" 
   (	"AUD_RA_APPS_ID" NUMBER(38,0), 
	"APP_NAME" VARCHAR2(100 CHAR), 
	"APP_SHORT_NAME" VARCHAR2(10 CHAR), 
	"APP_ID" NUMBER(38,0), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"ACTIVE" CHAR(1 BYTE), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"ACTION" VARCHAR2(10 CHAR), 
	"MODIFIED_BY" VARCHAR2(100 CHAR), 
	"MODIFIED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table AUD_RA_DATA_SOURCES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."AUD_RA_DATA_SOURCES" 
   (	"AUD_RA_DATA_SOURCES_ID" NUMBER(38,0), 
	"DS_ID" NUMBER(38,0), 
	"DS_CONN_STRING" VARCHAR2(200 CHAR), 
	"DS_JNDI_NAME" VARCHAR2(30 BYTE), 
	"DS_USER_ID" VARCHAR2(30 BYTE), 
	"DS_PORT" NUMBER(5,0), 
	"DS_IP" VARCHAR2(15 BYTE), 
	"DS_ENCRYPT_PASSWD" VARCHAR2(20 BYTE), 
	"APP_ID" NUMBER(38,0), 
	"DS_TYPE" VARCHAR2(150 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"DS_NAME" VARCHAR2(100 CHAR), 
	"DRIVER_CLASS" VARCHAR2(1024 CHAR), 
	"ACTION" VARCHAR2(10 CHAR), 
	"MODIFIED_BY" VARCHAR2(100 CHAR), 
	"MODIFIED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table AUD_RA_IMAGES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."AUD_RA_IMAGES" 
   (	"AUD_RA_IMAGES_ID" NUMBER(38,0), 
	"IMAGE_NAME" VARCHAR2(250 CHAR), 
	"IMAGE_URL" VARCHAR2(2000 CHAR), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"ACTION" VARCHAR2(10 CHAR), 
	"MODIFIED_BY" VARCHAR2(100 CHAR), 
	"MODIFIED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table AUD_RA_INPUT_VALIDATION

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."AUD_RA_INPUT_VALIDATION" 
   (	"AUD_RA_INPUT_VALIDATION_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"SCRIPT_SEQ" NUMBER(38,0), 
	"SCRIPT_TEXT" VARCHAR2(4000 CHAR), 
	"SCRIPT_LANGUAGE" VARCHAR2(4000 CHAR), 
	"IS_ACTIVE" CHAR(1 CHAR) DEFAULT 'Y', 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"ACTION" VARCHAR2(10 CHAR), 
	"MODIFIED_BY" VARCHAR2(100 CHAR), 
	"MODIFIED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table AUD_RA_JR_TEMPLATES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."AUD_RA_JR_TEMPLATES" 
   (	"AUD_RA_JR_TEMPLATES_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"JR_TEMPLATE_NAME" VARCHAR2(250 CHAR), 
	"JR_TEMPLATE" CLOB, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"ACTION" VARCHAR2(10 CHAR), 
	"MODIFIED_BY" VARCHAR2(100 CHAR), 
	"MODIFIED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("JR_TEMPLATE") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table AUD_RA_OUTPUT_TEMPLATES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."AUD_RA_OUTPUT_TEMPLATES" 
   (	"AUD_RA_OUTPUT_TEMPLATES_ID" NUMBER(38,0), 
	"TPL_NAME" VARCHAR2(250 CHAR), 
	"TPL_TEXT" CLOB, 
	"TPL_TYPE" VARCHAR2(250 CHAR), 
	"TPL_LANGUAGE" VARCHAR2(100 CHAR), 
	"TPL_COMMENTS" VARCHAR2(500 CHAR), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"ACTION" VARCHAR2(10 CHAR), 
	"MODIFIED_BY" VARCHAR2(100 CHAR), 
	"MODIFIED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("TPL_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table AUD_RA_REPORTS_B

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."AUD_RA_REPORTS_B" 
   (	"AUD_RA_REPORT_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"APP_ID" NUMBER(38,0), 
	"ID_ON_BI_SERVER" VARCHAR2(200 CHAR), 
	"REPORT_NAME_ON_BI_SERVER" VARCHAR2(100 CHAR), 
	"REPORT_PATH_ON_BI_SERVER" VARCHAR2(500 CHAR), 
	"DISPLAY_REPORT_NAME" VARCHAR2(150 CHAR), 
	"REPORT_DESCRIPTION" VARCHAR2(200 CHAR), 
	"BI_CATEGORY_ID" VARCHAR2(30 CHAR), 
	"SCHEDULING_ALLOWED" VARCHAR2(1 CHAR), 
	"MOVE_TO_ARCHIVE_AFTER_DAYS" NUMBER(2,0), 
	"PURGE_AFTER_DAYS" NUMBER(3,0), 
	"ARCHIVE_ALLLOWED" VARCHAR2(1 CHAR), 
	"ARCHIVE_FORMAT_TYPE" VARCHAR2(10 BYTE), 
	"DATA_SECURITY_ENABLED" CHAR(1 CHAR), 
	"REPORT_SHORT_NAME" VARCHAR2(30 CHAR), 
	"REPORT_TYPE" VARCHAR2(30 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"BI_REPORT_DIRECT_QUERY" VARCHAR2(4000 CHAR), 
	"BI_SERVER" VARCHAR2(30 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"ACTIVE_IND" CHAR(1 BYTE), 
	"REPORT_TOOL" VARCHAR2(20 CHAR), 
	"QUERY_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"IS_EXCEL_SUPPORTED" VARCHAR2(1 BYTE), 
	"EXCEL_TEMPLATE_NAME" VARCHAR2(100 BYTE), 
	"OUTPUT_STORAGE_TYPE" VARCHAR2(10 BYTE), 
	"ACTION" VARCHAR2(10 CHAR), 
	"MODIFIED_BY" VARCHAR2(100 CHAR), 
	"MODIFIED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"USE_CACHE" CHAR(1 BYTE), 
	"IS_CSV_SUPPORTED" CHAR(1 BYTE), 
	"IS_PDF_SUPPORTED" CHAR(1 BYTE), 
	"IS_ONLINE_SUPPORTED" CHAR(1 BYTE), 
	"HTML_TPL_NAME" VARCHAR2(250 CHAR), 
	"OUTPUT_STORAGE_LIMIT_IN_MB" NUMBER, 
	"HTML_PAGE_MAX_RECORDS" NUMBER(38,0), 
	"IS_HTML_MULTIPAGE_SUPPORTED" CHAR(1 BYTE), 
	"IS_HTML_SUPPORTED" CHAR(1 BYTE), 
	"REPORT_OUTPUT_LOCATION" VARCHAR2(2000 CHAR), 
	"DETAIL_REPORT_ID" NUMBER(*,0), 
	"EXTRA_META_DATA" CLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("EXTRA_META_DATA") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table AUD_RA_REPORT_PARAMETERS_B

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."AUD_RA_REPORT_PARAMETERS_B" 
   (	"AUD_RA_REPORT_PARAM_ID" NUMBER(38,0), 
	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(4000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR), 
	"ACTION" VARCHAR2(10 CHAR), 
	"MODIFIED_BY" VARCHAR2(100 CHAR), 
	"MODIFIED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"IS_MULTI_VALUE_NUMERIC" CHAR(1 CHAR), 
	"MULTI_VALUE_SEPARATOR" VARCHAR2(10 CHAR), 
	"MULTI_VALUE_OUT_SEPARATOR" VARCHAR2(10 CHAR), 
	"MULTI_VALUE_LIMIT" NUMBER(38,0), 
	"DS_ID2" NUMBER(38,0), 
	"LOV_QUERY2" VARCHAR2(4000 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table AUD_RA_REPORT_QUERY_MAP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."AUD_RA_REPORT_QUERY_MAP" 
   (	"AUD_RA_REPORT_QUERY_MAP_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"QUERY_ID" NUMBER(38,0), 
	"QUERY_SEQ" NUMBER(38,0) DEFAULT 1, 
	"IS_ACTIVE" CHAR(1 CHAR) DEFAULT 'Y', 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"ACTION" VARCHAR2(10 CHAR), 
	"MODIFIED_BY" VARCHAR2(100 CHAR), 
	"MODIFIED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"IS_NEW_PAGE" CHAR(1 BYTE), 
	"JR_DS_NAME" VARCHAR2(250 CHAR), 
	"IS_ACTIVE_FOR_JASPER" CHAR(1 CHAR), 
	"RECORD_COUNT_TO_LOG" NUMBER(38,0), 
	"QUERY_EXEC_TIME_OUT_SECONDS" NUMBER(38,0), 
	"QUERY_EXTRACT_TIME_OUT_SECONDS" NUMBER(38,0), 
	"HTML_PAGE_MAX_RECORDS" NUMBER(38,0), 
	"MIN_DIMENSION_COUNT" NUMBER(38,0) DEFAULT 1, 
	"MIN_MEASURE_COUNT" NUMBER(38,0) DEFAULT 1, 
	"MAX_DIMENSION_COUNT" NUMBER(38,0), 
	"MAX_MEASURE_COUNT" NUMBER(38,0), 
	"MAX_SUBTOTAL_COUNT" NUMBER(38,0), 
	"HTML_TPL_NAME" VARCHAR2(250 CHAR), 
	"EXTRA_META_DATA" CLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("EXTRA_META_DATA") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table AUD_RA_SEEDED_QUERIES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."AUD_RA_SEEDED_QUERIES" 
   (	"AUD_RA_SEEDED_QUERIES_ID" NUMBER(38,0), 
	"QUERY_ID" NUMBER(38,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR), 
	"ACTION" VARCHAR2(10 CHAR), 
	"MODIFIED_BY" VARCHAR2(100 CHAR), 
	"MODIFIED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"DS_ID" NUMBER, 
	"MAX_RECORD_COUNT" NUMBER, 
	"DYNAMIC_QUERY_TEMPLATE_ID" NUMBER(38,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table AUD_RA_SEEDED_QUERY_COLUMNS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."AUD_RA_SEEDED_QUERY_COLUMNS" 
   (	"AUD_RA_QUERY_COLUMNS_ID" NUMBER(38,0), 
	"QUERY_ID" NUMBER(38,0), 
	"COLUMN_ORDER" NUMBER(3,0), 
	"COLUMN_NAME" VARCHAR2(50 BYTE), 
	"COLUMN_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"COLUMN_TYPE" VARCHAR2(30 CHAR), 
	"COLUMN_SUB_TYPE" VARCHAR2(30 BYTE), 
	"COLUMN_TYPE_FORMAT_MASK" VARCHAR2(30 CHAR), 
	"REQUIRED_IN_SELECT_CLAUSE" VARCHAR2(1 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"COLUMN_DATA_TYPE" VARCHAR2(10 CHAR), 
	"MEASURE_FUNCTION" VARCHAR2(30 CHAR), 
	"ACTION" VARCHAR2(10 CHAR), 
	"MODIFIED_BY" VARCHAR2(100 CHAR), 
	"MODIFIED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table AUD_RA_SUB_REPORT_MAP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."AUD_RA_SUB_REPORT_MAP" 
   (	"AUD_RA_SUB_REPORT_MAP_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"SUB_REPORT_ID" NUMBER(38,0), 
	"SUB_REPORT_SEQ" NUMBER(38,0), 
	"DISPLAY_NAME" VARCHAR2(250 CHAR), 
	"IS_ACTIVE" CHAR(1 CHAR) DEFAULT 'Y', 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"ACTION" VARCHAR2(10 CHAR), 
	"MODIFIED_BY" VARCHAR2(100 CHAR), 
	"MODIFIED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"IS_ASYNC_DRILLDOWN" CHAR(1 CHAR), 
	"IS_SYNC_DRILLDOWN" CHAR(1 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table AUD_RA_SUB_RPT_PARAM_MAP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."AUD_RA_SUB_RPT_PARAM_MAP" 
   (	"AUD_RA_SUB_RPT_PARAM_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"SUB_REPORT_ID" NUMBER(38,0), 
	"REPORT_COLUMN_NAME" VARCHAR2(250 CHAR), 
	"SUB_REPORT_PARAM_NAME_IN_QUERY" VARCHAR2(250 CHAR), 
	"IS_ACTIVE" CHAR(1 CHAR) DEFAULT 'Y', 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"ACTION" VARCHAR2(10 CHAR), 
	"MODIFIED_BY" VARCHAR2(100 CHAR), 
	"MODIFIED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"SUB_REPORT_SEQ" NUMBER(38,0) DEFAULT 1, 
	"SUB_REPORT_PARAM_DEFAULT_VALUE" VARCHAR2(250 BYTE), 
	"CONVERSION_TYPE" VARCHAR2(250 BYTE), 
	"REPORT_COLUMN_FORMAT" VARCHAR2(250 BYTE), 
	"SUB_REPORT_PARAM_FORMAT" VARCHAR2(250 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table BACKUP_14083

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."BACKUP_14083" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"DYNAMIC_QUERY_TEMPLATE_ID" NUMBER(38,0), 
	"QUERY_EXEC_TIME_OUT_SECONDS" NUMBER(38,0), 
	"QUERY_EXTRACT_TIME_OUT_SECONDS" NUMBER(38,0), 
	"HTML_PAGE_MAX_RECORDS" NUMBER(38,0), 
	"QUERY_TYPE" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table BACK_ANU

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."BACK_ANU" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"DYNAMIC_QUERY_TEMPLATE_ID" NUMBER(38,0), 
	"QUERY_EXEC_TIME_OUT_SECONDS" NUMBER(38,0), 
	"QUERY_EXTRACT_TIME_OUT_SECONDS" NUMBER(38,0), 
	"HTML_PAGE_MAX_RECORDS" NUMBER(38,0), 
	"QUERY_TYPE" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "RPTAPP_DATA" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table BATCH_TEST

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."BATCH_TEST" 
   (	"BATCH_ID" NUMBER, 
	"BATCH_NAME" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table BCK_34

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."BCK_34" 
   (	"DS_ID" NUMBER(38,0), 
	"DS_CONN_STRING" VARCHAR2(200 CHAR), 
	"DS_JNDI_NAME" VARCHAR2(30 BYTE), 
	"DS_USER_ID" VARCHAR2(30 BYTE), 
	"DS_PORT" NUMBER(5,0), 
	"DS_IP" VARCHAR2(15 BYTE), 
	"DS_ENCRYPT_PASSWD" VARCHAR2(20 BYTE), 
	"APP_ID" NUMBER(38,0), 
	"DS_TYPE" VARCHAR2(150 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"DS_NAME" VARCHAR2(100 CHAR), 
	"DRIVER_CLASS" VARCHAR2(1024 CHAR), 
	"DS_TEST_QUERY" VARCHAR2(1024 BYTE), 
	"DOMAIN_CODE" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table BCK_DATA_SOURCES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."BCK_DATA_SOURCES" 
   (	"DS_ID" NUMBER(38,0), 
	"DS_CONN_STRING" VARCHAR2(200 CHAR), 
	"DS_JNDI_NAME" VARCHAR2(30 BYTE), 
	"DS_USER_ID" VARCHAR2(30 BYTE), 
	"DS_PORT" NUMBER(5,0), 
	"DS_IP" VARCHAR2(15 BYTE), 
	"DS_ENCRYPT_PASSWD" VARCHAR2(20 BYTE), 
	"APP_ID" NUMBER(38,0), 
	"DS_TYPE" VARCHAR2(150 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"DS_NAME" VARCHAR2(100 CHAR), 
	"DRIVER_CLASS" VARCHAR2(1024 CHAR), 
	"DS_TEST_QUERY" VARCHAR2(1024 BYTE), 
	"DOMAIN_CODE" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table BCK_SEEDED_QUERIES_AP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."BCK_SEEDED_QUERIES_AP" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"DYNAMIC_QUERY_TEMPLATE_ID" NUMBER(38,0), 
	"QUERY_EXEC_TIME_OUT_SECONDS" NUMBER(38,0), 
	"QUERY_EXTRACT_TIME_OUT_SECONDS" NUMBER(38,0), 
	"HTML_PAGE_MAX_RECORDS" NUMBER(38,0), 
	"QUERY_TYPE" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table D1_TEST123

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."D1_TEST123" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table DELETE_0001

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."DELETE_0001" 
   (	"COL1" CLOB
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("COL1") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING ) ;
--------------------------------------------------------

--  DDL for Table DMG_10

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."DMG_10" 
   (	"QUERY_ID" NUMBER(*,0), 
	"COLUMN_ORDER" NUMBER(3,0), 
	"COLUMN_NAME" VARCHAR2(50 BYTE), 
	"COLUMN_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"COLUMN_TYPE" VARCHAR2(30 CHAR), 
	"COLUMN_SUB_TYPE" VARCHAR2(30 BYTE), 
	"COLUMN_TYPE_FORMAT_MASK" VARCHAR2(30 CHAR), 
	"REQUIRED_IN_SELECT_CLAUSE" VARCHAR2(1 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"COLUMN_DATA_TYPE" VARCHAR2(10 CHAR), 
	"MEASURE_FUNCTION" VARCHAR2(30 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table DMG_10_AFTER

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."DMG_10_AFTER" 
   (	"QUERY_ID" NUMBER(*,0), 
	"COLUMN_ORDER" NUMBER(3,0), 
	"COLUMN_NAME" VARCHAR2(50 BYTE), 
	"COLUMN_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"COLUMN_TYPE" VARCHAR2(30 CHAR), 
	"COLUMN_SUB_TYPE" VARCHAR2(30 BYTE), 
	"COLUMN_TYPE_FORMAT_MASK" VARCHAR2(30 CHAR), 
	"REQUIRED_IN_SELECT_CLAUSE" VARCHAR2(1 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"COLUMN_DATA_TYPE" VARCHAR2(10 CHAR), 
	"MEASURE_FUNCTION" VARCHAR2(30 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table DMG_10_BFR

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."DMG_10_BFR" 
   (	"QUERY_ID" NUMBER(*,0), 
	"COLUMN_ORDER" NUMBER(3,0), 
	"COLUMN_NAME" VARCHAR2(50 BYTE), 
	"COLUMN_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"COLUMN_TYPE" VARCHAR2(30 CHAR), 
	"COLUMN_SUB_TYPE" VARCHAR2(30 BYTE), 
	"COLUMN_TYPE_FORMAT_MASK" VARCHAR2(30 CHAR), 
	"REQUIRED_IN_SELECT_CLAUSE" VARCHAR2(1 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"COLUMN_DATA_TYPE" VARCHAR2(10 CHAR), 
	"MEASURE_FUNCTION" VARCHAR2(30 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table DMG_T

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."DMG_T" 
   (	"N1" NUMBER(*,0), 
	"N2" NUMBER(*,0), 
	"N3" NUMBER(*,0) GENERATED ALWAYS AS ("N1"+"N2") VIRTUAL VISIBLE 
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table DM_INV002

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."DM_INV002" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(2000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR), 
	"MULTI_VALUE_LIMIT" NUMBER(38,0), 
	"IS_MULTI_VALUE_NUMERIC" CHAR(1 CHAR), 
	"MULTI_VALUE_SEPARATOR" VARCHAR2(10 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table DSMT_ENTRPS_PROD_HIER

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."DSMT_ENTRPS_PROD_HIER" 
   (	"SETID" VARCHAR2(5 CHAR), 
	"PRNT_ENTRPS_PROD_ID" VARCHAR2(10 CHAR), 
	"ENTRPS_PROD_ID" VARCHAR2(10 CHAR), 
	"EFFDT" DATE, 
	"PRNT_ENTRPS_PROD_NM" VARCHAR2(255 CHAR), 
	"ENTRPS_PROD_NM" VARCHAR2(255 CHAR), 
	"HIER_LVL_NO" NUMBER(*,0), 
	"CRTE_OPER_ID" VARCHAR2(30 CHAR), 
	"CRTE_DTTM" TIMESTAMP (6), 
	"LST_UPDT_OPER_ID" VARCHAR2(30 CHAR), 
	"UPDT_DTTM" TIMESTAMP (6), 
	"DA_REC_EFF_DT" DATE, 
	"DA_INIT_LOAD_DTTM" TIMESTAMP (6), 
	"DA_LST_UPDT_DTTM" TIMESTAMP (6), 
	"DA_LST_UPDT_USER_ID" VARCHAR2(10 CHAR), 
	"DA_LST_UPDT_PROC_ID" VARCHAR2(10 CHAR), 
	"DA_REC_EXPR_DT" DATE, 
	"DA_REC_SRC_SYS_ID" VARCHAR2(50 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table DYNAMIC_INQ_TAB

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."DYNAMIC_INQ_TAB" 
   (	"REPORT_ID" VARCHAR2(200 BYTE), 
	"COLUMN_NAME" VARCHAR2(200 BYTE), 
	"TABLE_NAME" VARCHAR2(200 BYTE), 
	"MANDATORY_IND" VARCHAR2(200 BYTE), 
	"PARAMETER_DATA_TYPE" VARCHAR2(200 BYTE), 
	"ORDERING_SEQUENCE" VARCHAR2(200 BYTE), 
	"LOV_QUERY" VARCHAR2(2000 BYTE), 
	"DS_ID" VARCHAR2(2 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table ENV_DTLS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."ENV_DTLS" 
   (	"ENVIRONMENT" VARCHAR2(2000 BYTE), 
	"OC_METADATA" VARCHAR2(2000 BYTE), 
	"ADJUSTMENTS" VARCHAR2(2000 BYTE), 
	"SGLCRM/SGLRPL" VARCHAR2(2000 BYTE), 
	"FBBOP" VARCHAR2(2000 BYTE), 
	"UI_LINK" VARCHAR2(2000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table FFS_SHEET_SITG

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."FFS_SHEET_SITG" 
   (	"REPORT_ID" NUMBER(6,0), 
	"REPORT_NAME" VARCHAR2(2000 BYTE), 
	"VERSION" NUMBER(3,2)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table FFS_SHEET_UAT1

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."FFS_SHEET_UAT1" 
   (	"REPORT_ID" NUMBER(6,0), 
	"REPORT_NAME" VARCHAR2(2000 BYTE), 
	"VERSION" NUMBER(3,2)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table FFS_SHEET_UATA

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."FFS_SHEET_UATA" 
   (	"REPORT_ID" NUMBER(6,0), 
	"REPORT_NAME" VARCHAR2(2000 BYTE), 
	"VERSION" NUMBER(3,2)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table FFS_SHEET_UATC

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."FFS_SHEET_UATC" 
   (	"REPORT_ID" NUMBER(6,0), 
	"REPORT_NAME" VARCHAR2(2000 BYTE), 
	"VERSION" NUMBER(3,2)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table FFS_SHEET_UATN

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."FFS_SHEET_UATN" 
   (	"REPORT_ID" NUMBER(6,0), 
	"REPORT_NAME" VARCHAR2(2000 BYTE), 
	"VERSION" NUMBER(3,2)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table FFS_SHEET_UP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."FFS_SHEET_UP" 
   (	"SR_NO" NUMBER(4,0), 
	"REPORT_ID" NUMBER(6,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table FFS_SHEET_VBK

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."FFS_SHEET_VBK" 
   (	"SR_NO" NUMBER(4,0), 
	"REPORT_ID" NUMBER(6,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table HIST_RA_APPS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."HIST_RA_APPS" 
   (	"APP_NAME" VARCHAR2(100 CHAR), 
	"APP_SHORT_NAME" VARCHAR2(10 CHAR), 
	"APP_ID" NUMBER(38,0), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"ACTIVE" CHAR(1 BYTE), 
	"MAX_RECORD_COUNT" NUMBER(38,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table HIST_RA_DATA_SOURCES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."HIST_RA_DATA_SOURCES" 
   (	"DS_ID" NUMBER(38,0), 
	"DS_CONN_STRING" VARCHAR2(200 CHAR), 
	"DS_JNDI_NAME" VARCHAR2(30 BYTE), 
	"DS_USER_ID" VARCHAR2(30 BYTE), 
	"DS_PORT" NUMBER(5,0), 
	"DS_IP" VARCHAR2(15 BYTE), 
	"DS_ENCRYPT_PASSWD" VARCHAR2(20 BYTE), 
	"APP_ID" NUMBER(38,0), 
	"DS_TYPE" VARCHAR2(150 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"DS_NAME" VARCHAR2(100 CHAR), 
	"DRIVER_CLASS" VARCHAR2(1024 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table HIST_RA_RA_REPORTS_B

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."HIST_RA_RA_REPORTS_B" 
   (	"REPORT_ID" NUMBER(38,0), 
	"APP_ID" NUMBER(38,0), 
	"ID_ON_BI_SERVER" VARCHAR2(200 CHAR), 
	"REPORT_NAME_ON_BI_SERVER" VARCHAR2(100 CHAR), 
	"REPORT_PATH_ON_BI_SERVER" VARCHAR2(500 CHAR), 
	"DISPLAY_REPORT_NAME" VARCHAR2(150 CHAR), 
	"REPORT_DESCRIPTION" VARCHAR2(200 CHAR), 
	"BI_CATEGORY_ID" VARCHAR2(30 CHAR), 
	"SCHEDULING_ALLOWED" VARCHAR2(1 CHAR), 
	"MOVE_TO_ARCHIVE_AFTER_DAYS" NUMBER(2,0), 
	"PURGE_AFTER_DAYS" NUMBER(3,0), 
	"ARCHIVE_ALLLOWED" VARCHAR2(1 CHAR), 
	"ARCHIVE_FORMAT_TYPE" VARCHAR2(10 BYTE), 
	"DATA_SECURITY_ENABLED" CHAR(1 CHAR), 
	"REPORT_SHORT_NAME" VARCHAR2(30 CHAR), 
	"REPORT_TYPE" VARCHAR2(30 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"BI_REPORT_DIRECT_QUERY" VARCHAR2(4000 CHAR), 
	"BI_SERVER" VARCHAR2(30 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"ACTIVE_IND" CHAR(1 BYTE), 
	"REPORT_TOOL" VARCHAR2(20 CHAR), 
	"QUERY_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"IS_EXCEL_SUPPORTED" VARCHAR2(1 BYTE), 
	"EXCEL_TEMPLATE_NAME" VARCHAR2(100 BYTE), 
	"OUTPUT_STORAGE_TYPE" VARCHAR2(10 BYTE), 
	"DETAIL_REPORT_ID" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table HIST_RA_REPORT_PARAMETERS_B

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."HIST_RA_REPORT_PARAMETERS_B" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(2000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table HIST_RA_SEEDED_QUERIES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."HIST_RA_SEEDED_QUERIES" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table HIST_RA_SEEDED_QUERY_COLUMNS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."HIST_RA_SEEDED_QUERY_COLUMNS" 
   (	"QUERY_ID" NUMBER(*,0), 
	"COLUMN_ORDER" NUMBER(3,0), 
	"COLUMN_NAME" VARCHAR2(50 BYTE), 
	"COLUMN_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"COLUMN_TYPE" VARCHAR2(30 CHAR), 
	"COLUMN_SUB_TYPE" VARCHAR2(30 BYTE), 
	"COLUMN_TYPE_FORMAT_MASK" VARCHAR2(30 CHAR), 
	"REQUIRED_IN_SELECT_CLAUSE" VARCHAR2(1 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"COLUMN_DATA_TYPE" VARCHAR2(10 CHAR), 
	"MEASURE_FUNCTION" VARCHAR2(30 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table JDBC_INQUIRY_TEST

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."JDBC_INQUIRY_TEST" 
   (	"ID" NUMBER, 
	"REPORT_NAME" VARCHAR2(100 BYTE), 
	"REPORT_DESC" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table MEXICO_ADJ

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."MEXICO_ADJ" 
   (	"TABLE_NAME" VARCHAR2(1000 BYTE), 
	"COLUMN_NAME" VARCHAR2(1000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table MEXICO_CYBERCRYPT

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."MEXICO_CYBERCRYPT" 
   (	"REPORT_TYPE" VARCHAR2(200 BYTE), 
	"REPORT_ID" NUMBER(8,0), 
	"REPORT_NAME" VARCHAR2(1000 BYTE), 
	"IMPACT" VARCHAR2(5 BYTE), 
	"TABLE_NAME" VARCHAR2(1000 BYTE), 
	"COLUMN_NAME" VARCHAR2(1000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table MEXICO_SGLCRM

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."MEXICO_SGLCRM" 
   (	"TABLE_NAME" VARCHAR2(1000 BYTE), 
	"COLUMN_NAME" VARCHAR2(1000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table MMR002_DM

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."MMR002_DM" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(2000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR), 
	"MULTI_VALUE_LIMIT" NUMBER(38,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table MONGO_DOC_SIZE_TEST

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."MONGO_DOC_SIZE_TEST" 
   (	"RUN_ID" NUMBER(*,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MONGO_DOC_SIZE" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table PARAMETERS_RETAIL

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."PARAMETERS_RETAIL" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(4000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR), 
	"MULTI_VALUE_LIMIT" NUMBER(38,0), 
	"IS_MULTI_VALUE_NUMERIC" CHAR(1 CHAR), 
	"MULTI_VALUE_SEPARATOR" VARCHAR2(10 CHAR), 
	"MULTI_VALUE_OUT_SEPARATOR" VARCHAR2(10 CHAR), 
	"DS_ID2" NUMBER(38,0), 
	"LOV_QUERY2" VARCHAR2(4000 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table PIVOT_TEST

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."PIVOT_TEST" 
   (	"ID" NUMBER, 
	"CUSTOMER_ID" NUMBER, 
	"PRODUCT_CODE" VARCHAR2(5 BYTE), 
	"QUANTITY" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table PIVOT_TEST11

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."PIVOT_TEST11" 
   (	"ID" NUMBER, 
	"CUSTOMER_ID" NUMBER, 
	"PRODUCT_CODE" VARCHAR2(5 BYTE), 
	"QUANTITY" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table PIVOT_TEST1111

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."PIVOT_TEST1111" 
   (	"ID" NUMBER, 
	"CUSTOMER_ID" NUMBER, 
	"PRODUCT_CODE" VARCHAR2(5 BYTE), 
	"QUANTITY" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table QC_25013

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."QC_25013" 
   (	"QUERY_ID" NUMBER(*,0), 
	"COLUMN_ORDER" NUMBER(3,0), 
	"COLUMN_NAME" VARCHAR2(50 BYTE), 
	"COLUMN_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"COLUMN_TYPE" VARCHAR2(30 CHAR), 
	"COLUMN_SUB_TYPE" VARCHAR2(30 BYTE), 
	"COLUMN_TYPE_FORMAT_MASK" VARCHAR2(30 CHAR), 
	"REQUIRED_IN_SELECT_CLAUSE" VARCHAR2(1 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"COLUMN_DATA_TYPE" VARCHAR2(10 CHAR), 
	"MEASURE_FUNCTION" VARCHAR2(30 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table QC_25013_BKP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."QC_25013_BKP" 
   (	"QUERY_ID" NUMBER(*,0), 
	"COLUMN_ORDER" NUMBER(3,0), 
	"COLUMN_NAME" VARCHAR2(50 BYTE), 
	"COLUMN_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"COLUMN_TYPE" VARCHAR2(30 CHAR), 
	"COLUMN_SUB_TYPE" VARCHAR2(30 BYTE), 
	"COLUMN_TYPE_FORMAT_MASK" VARCHAR2(30 CHAR), 
	"REQUIRED_IN_SELECT_CLAUSE" VARCHAR2(1 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"COLUMN_DATA_TYPE" VARCHAR2(10 CHAR), 
	"MEASURE_FUNCTION" VARCHAR2(30 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table QRTZ_BLOB_TRIGGERS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."QRTZ_BLOB_TRIGGERS" 
   (	"SCHED_NAME" VARCHAR2(120 BYTE), 
	"TRIGGER_NAME" VARCHAR2(200 BYTE), 
	"TRIGGER_GROUP" VARCHAR2(200 BYTE), 
	"BLOB_DATA" BLOB
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("BLOB_DATA") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING ) ;
--------------------------------------------------------

--  DDL for Table QRTZ_CALENDARS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."QRTZ_CALENDARS" 
   (	"SCHED_NAME" VARCHAR2(120 BYTE), 
	"CALENDAR_NAME" VARCHAR2(200 BYTE), 
	"CALENDAR" BLOB
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("CALENDAR") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING ) ;
--------------------------------------------------------

--  DDL for Table QRTZ_CRON_TRIGGERS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."QRTZ_CRON_TRIGGERS" 
   (	"SCHED_NAME" VARCHAR2(120 BYTE), 
	"TRIGGER_NAME" VARCHAR2(200 BYTE), 
	"TRIGGER_GROUP" VARCHAR2(200 BYTE), 
	"CRON_EXPRESSION" VARCHAR2(120 BYTE), 
	"TIME_ZONE_ID" VARCHAR2(80 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table QRTZ_FIRED_TRIGGERS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."QRTZ_FIRED_TRIGGERS" 
   (	"SCHED_NAME" VARCHAR2(120 BYTE), 
	"ENTRY_ID" VARCHAR2(95 BYTE), 
	"TRIGGER_NAME" VARCHAR2(200 BYTE), 
	"TRIGGER_GROUP" VARCHAR2(200 BYTE), 
	"INSTANCE_NAME" VARCHAR2(200 BYTE), 
	"FIRED_TIME" NUMBER(13,0), 
	"SCHED_TIME" NUMBER(13,0), 
	"PRIORITY" NUMBER(13,0), 
	"STATE" VARCHAR2(16 BYTE), 
	"JOB_NAME" VARCHAR2(200 BYTE), 
	"JOB_GROUP" VARCHAR2(200 BYTE), 
	"IS_NONCONCURRENT" VARCHAR2(1 BYTE), 
	"REQUESTS_RECOVERY" VARCHAR2(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table QRTZ_JOB_DETAILS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."QRTZ_JOB_DETAILS" 
   (	"SCHED_NAME" VARCHAR2(120 BYTE), 
	"JOB_NAME" VARCHAR2(200 BYTE), 
	"JOB_GROUP" VARCHAR2(200 BYTE), 
	"DESCRIPTION" VARCHAR2(250 BYTE), 
	"JOB_CLASS_NAME" VARCHAR2(250 BYTE), 
	"IS_DURABLE" VARCHAR2(1 BYTE), 
	"IS_NONCONCURRENT" VARCHAR2(1 BYTE), 
	"IS_UPDATE_DATA" VARCHAR2(1 BYTE), 
	"REQUESTS_RECOVERY" VARCHAR2(1 BYTE), 
	"JOB_DATA" BLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("JOB_DATA") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table QRTZ_LOCKS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."QRTZ_LOCKS" 
   (	"SCHED_NAME" VARCHAR2(120 BYTE), 
	"LOCK_NAME" VARCHAR2(40 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table QRTZ_PAUSED_TRIGGER_GRPS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."QRTZ_PAUSED_TRIGGER_GRPS" 
   (	"SCHED_NAME" VARCHAR2(120 BYTE), 
	"TRIGGER_GROUP" VARCHAR2(200 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table QRTZ_SCHEDULER_STATE

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."QRTZ_SCHEDULER_STATE" 
   (	"SCHED_NAME" VARCHAR2(120 BYTE), 
	"INSTANCE_NAME" VARCHAR2(200 BYTE), 
	"LAST_CHECKIN_TIME" NUMBER(13,0), 
	"CHECKIN_INTERVAL" NUMBER(13,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table QRTZ_SIMPLE_TRIGGERS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."QRTZ_SIMPLE_TRIGGERS" 
   (	"SCHED_NAME" VARCHAR2(120 BYTE), 
	"TRIGGER_NAME" VARCHAR2(200 BYTE), 
	"TRIGGER_GROUP" VARCHAR2(200 BYTE), 
	"REPEAT_COUNT" NUMBER(7,0), 
	"REPEAT_INTERVAL" NUMBER(12,0), 
	"TIMES_TRIGGERED" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table QRTZ_SIMPROP_TRIGGERS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."QRTZ_SIMPROP_TRIGGERS" 
   (	"SCHED_NAME" VARCHAR2(120 BYTE), 
	"TRIGGER_NAME" VARCHAR2(200 BYTE), 
	"TRIGGER_GROUP" VARCHAR2(200 BYTE), 
	"STR_PROP_1" VARCHAR2(512 BYTE), 
	"STR_PROP_2" VARCHAR2(512 BYTE), 
	"STR_PROP_3" VARCHAR2(512 BYTE), 
	"INT_PROP_1" NUMBER(10,0), 
	"INT_PROP_2" NUMBER(10,0), 
	"LONG_PROP_1" NUMBER(13,0), 
	"LONG_PROP_2" NUMBER(13,0), 
	"DEC_PROP_1" NUMBER(13,4), 
	"DEC_PROP_2" NUMBER(13,4), 
	"BOOL_PROP_1" VARCHAR2(1 BYTE), 
	"BOOL_PROP_2" VARCHAR2(1 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table QRTZ_TRIGGERS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."QRTZ_TRIGGERS" 
   (	"SCHED_NAME" VARCHAR2(120 BYTE), 
	"TRIGGER_NAME" VARCHAR2(200 BYTE), 
	"TRIGGER_GROUP" VARCHAR2(200 BYTE), 
	"JOB_NAME" VARCHAR2(200 BYTE), 
	"JOB_GROUP" VARCHAR2(200 BYTE), 
	"DESCRIPTION" VARCHAR2(250 BYTE), 
	"NEXT_FIRE_TIME" NUMBER(13,0), 
	"PREV_FIRE_TIME" NUMBER(13,0), 
	"PRIORITY" NUMBER(13,0), 
	"TRIGGER_STATE" VARCHAR2(16 BYTE), 
	"TRIGGER_TYPE" VARCHAR2(8 BYTE), 
	"START_TIME" NUMBER(13,0), 
	"END_TIME" NUMBER(13,0), 
	"CALENDAR_NAME" VARCHAR2(200 BYTE), 
	"MISFIRE_INSTR" NUMBER(2,0), 
	"JOB_DATA" BLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("JOB_DATA") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table QUERY_TEST

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."QUERY_TEST" 
   (	"ID" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RAVI1

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RAVI1" 
   (	"X" VARCHAR2(4000 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RAVI_TREE_TEST

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RAVI_TREE_TEST" 
   (	"NODE_ID" VARCHAR2(20 BYTE), 
	"PARENT_ID" VARCHAR2(20 BYTE), 
	"NODE_NAME" VARCHAR2(20 BYTE), 
	"NODE_VALUE" VARCHAR2(20 BYTE), 
	"IS_LEAF" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_APPS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_APPS" 
   (	"APP_NAME" VARCHAR2(100 CHAR) DEFAULT 'N', 
	"APP_SHORT_NAME" VARCHAR2(10 CHAR), 
	"APP_ID" NUMBER(38,0), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate, 
	"ACTIVE" CHAR(1 BYTE) DEFAULT 'N', 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"PURGE_AFTER_DAYS" NUMBER(3,0) DEFAULT 5, 
	"APP_OUTPUT_LOCATION" VARCHAR2(2000 CHAR), 
	"OUTPUT_STORAGE_LIMIT_IN_MB" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;


   COMMENT ON COLUMN "RPTAPP"."RA_APPS"."APP_NAME" IS 'Application Name';
   COMMENT ON COLUMN "RPTAPP"."RA_APPS"."APP_SHORT_NAME" IS 'Application short name';
   COMMENT ON COLUMN "RPTAPP"."RA_APPS"."APP_ID" IS 'Generated Unique Sequence number';
   COMMENT ON TABLE "RPTAPP"."RA_APPS"  IS 'Definites the application and the BI Report Servers used by that application.  (BO Report Servers)';
--------------------------------------------------------

--  DDL for Table RA_APPS_DS_DOMAIN

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_APPS_DS_DOMAIN" 
   (	"APP_ID" NUMBER, 
	"DOMAIN_CODE" VARCHAR2(250 BYTE), 
	"DOMAIN_DESC" VARCHAR2(1000 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate, 
	"DOMAIN_SEQ" NUMBER, 
	"SNOW_GROUP_ID" VARCHAR2(100 BYTE) DEFAULT 'CTO GL AD APPL - FFS-INQUIRY FRAMEWORK'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_APPS_DS_DOMAIN_BCK

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_APPS_DS_DOMAIN_BCK" 
   (	"APP_ID" NUMBER, 
	"DOMAIN_CODE" VARCHAR2(250 BYTE), 
	"DOMAIN_DESC" VARCHAR2(1000 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"DOMAIN_SEQ" NUMBER, 
	"SNOW_GROUP_ID" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_APPS_DS_DOMAIN_TEST

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_APPS_DS_DOMAIN_TEST" 
   (	"APP_ID" NUMBER, 
	"DOMAIN_CODE" VARCHAR2(250 BYTE), 
	"DOMAIN_DESC" VARCHAR2(1000 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate, 
	"DOMAIN_SEQ" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_APPS_OFS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_APPS_OFS" 
   (	"APP_NAME" VARCHAR2(100 CHAR) DEFAULT 'N', 
	"APP_SHORT_NAME" VARCHAR2(10 CHAR), 
	"APP_ID" NUMBER(38,0), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate, 
	"ACTIVE" CHAR(1 BYTE) DEFAULT 'N', 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"PURGE_AFTER_DAYS" NUMBER(3,0) DEFAULT 5, 
	"APP_OUTPUT_LOCATION" VARCHAR2(2000 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_APPS_T

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_APPS_T" 
   (	"APP_NAME" VARCHAR2(100 CHAR), 
	"APP_SHORT_NAME" VARCHAR2(10 CHAR), 
	"APP_ID" NUMBER(38,0), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"ACTIVE" CHAR(1 BYTE), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"PURGE_AFTER_DAYS" NUMBER(3,0), 
	"PURGE_AFTER_DAYS_T" NUMBER(3,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_APP_APPROVER

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_APP_APPROVER" 
   (	"APP_ID" NUMBER(38,0), 
	"APRVL_SOE_ID" VARCHAR2(25 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table RA_APP_DATA_SOURCES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_APP_DATA_SOURCES" 
   (	"APP_ID" NUMBER, 
	"DS_ID" NUMBER, 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_TIME" TIMESTAMP (6), 
	"LAST_UPDATE_TIME" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_APP_DATA_SOURCES_1

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_APP_DATA_SOURCES_1" 
   (	"APP_ID" NUMBER, 
	"DS_ID" NUMBER, 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table RA_APP_EMAIL_PROPERTIES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_APP_EMAIL_PROPERTIES" 
   (	"APP_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"EMAIL_ACTION" VARCHAR2(20 BYTE), 
	"ACTIVE" CHAR(1 BYTE) DEFAULT 'Y', 
	"EMAIL_TO" VARCHAR2(100 BYTE), 
	"EMAIL_BCC" VARCHAR2(100 BYTE), 
	"EMAIL_CC" VARCHAR2(100 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" TIMESTAMP (6) DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" TIMESTAMP (6) DEFAULT sysdate, 
	"EMAIL_FROM" VARCHAR2(100 BYTE) DEFAULT 'no-reply@citi.com'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_APP_EMAIL_PROPERTIES1

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_APP_EMAIL_PROPERTIES1" 
   (	"APP_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"EMAIL_ACTION" VARCHAR2(20 BYTE), 
	"ACTIVE" CHAR(1 BYTE), 
	"EMAIL_TO" VARCHAR2(100 BYTE), 
	"EMAIL_BCC" VARCHAR2(100 BYTE), 
	"EMAIL_CC" VARCHAR2(100 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" TIMESTAMP (6), 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" TIMESTAMP (6), 
	"EMAIL_FROM" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_APP_EMAIL_PROPERTIES_1

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_APP_EMAIL_PROPERTIES_1" 
   (	"APP_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"EMAIL_ACTION" VARCHAR2(20 BYTE), 
	"ACTIVE" CHAR(1 BYTE), 
	"EMAIL_TO" VARCHAR2(100 BYTE), 
	"EMAIL_BCC" VARCHAR2(100 BYTE), 
	"EMAIL_CC" VARCHAR2(100 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" TIMESTAMP (6), 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" TIMESTAMP (6), 
	"EMAIL_FROM" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_APP_ENV_PROP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_APP_ENV_PROP" 
   (	"APP_ID" NUMBER(*,0), 
	"REPORT_ID" NUMBER, 
	"NAME" VARCHAR2(50 CHAR), 
	"VALUE" VARCHAR2(1000 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_APP_LDAP_GROUPS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_APP_LDAP_GROUPS" 
   (	"APP_ID" NUMBER(38,0), 
	"LDAP_GROUP_NAME" VARCHAR2(150 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_APP_NODE_MAPPING

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_APP_NODE_MAPPING" 
   (	"NODE_ID" NUMBER, 
	"APP_ID" NUMBER, 
	"ACTIVE" CHAR(1 BYTE) DEFAULT 'Y', 
	"COMMENTS" VARCHAR2(1000 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_APRVL_Q

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_APRVL_Q" 
   (	"UNIQUE_ID" NUMBER(38,0), 
	"RUN_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"APP_ID" NUMBER(38,0), 
	"REPORT_TYPE" VARCHAR2(30 CHAR), 
	"DESCRPTN" VARCHAR2(4000 CHAR), 
	"STATUS" VARCHAR2(200 CHAR), 
	"CATEGORY" VARCHAR2(100 CHAR), 
	"DATA_PARAMS" VARCHAR2(4000 CHAR), 
	"MAKER_ID" VARCHAR2(100 CHAR), 
	"MAKER_DTM" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CHECKER_ID" VARCHAR2(100 CHAR), 
	"CHECKER_DTM" TIMESTAMP (6), 
	"CHECKER_COMMENTS" VARCHAR2(400 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table RA_AUDIT_JMS_RESTART

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_AUDIT_JMS_RESTART" 
   (	"DESTINATION_NAME" VARCHAR2(100 BYTE), 
	"SOEID" VARCHAR2(10 BYTE), 
	"NODE_ID" NUMBER, 
	"ACTION" VARCHAR2(20 BYTE), 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_BI_SERVERS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_BI_SERVERS" 
   (	"APP_ID" NUMBER(38,0), 
	"BI_SERVER" VARCHAR2(30 CHAR), 
	"BI_CATEGORY" VARCHAR2(30 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate, 
	"BI_SERVER_ID" NUMBER(38,0), 
	"BI_SERVER_TYPE" NUMBER(38,0) DEFAULT 1, 
	"BI_LOGIN" VARCHAR2(150 BYTE), 
	"BI_SERVER_DOCS_WRITE_LOCATION" VARCHAR2(250 BYTE), 
	"RA_SERVER_DOCS_READ_LOCATION" VARCHAR2(250 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;


   COMMENT ON COLUMN "RPTAPP"."RA_BI_SERVERS"."APP_ID" IS 'Application Name';
   COMMENT ON COLUMN "RPTAPP"."RA_BI_SERVERS"."BI_SERVER" IS 'Name of the server.  Use this credential to login to reporting system.  Example: corpbo300d:32070';
   COMMENT ON COLUMN "RPTAPP"."RA_BI_SERVERS"."BI_CATEGORY" IS 'Application Category in BI Server';
   COMMENT ON COLUMN "RPTAPP"."RA_BI_SERVERS"."BI_SERVER_ID" IS 'One Application may have multiple BI Servers.  For example, BO, Micro Strategy, COGNOS Or any other.  This is a sequence number for the server.';
--------------------------------------------------------

--  DDL for Table RA_BI_SERVERS_BKP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_BI_SERVERS_BKP" 
   (	"APP_ID" NUMBER(38,0), 
	"BI_SERVER" VARCHAR2(30 CHAR), 
	"BI_CATEGORY" VARCHAR2(30 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"BI_SERVER_ID" NUMBER(38,0), 
	"BI_SERVER_TYPE" NUMBER(38,0), 
	"BI_LOGIN" VARCHAR2(150 BYTE), 
	"BI_SERVER_DOCS_WRITE_LOCATION" VARCHAR2(250 BYTE), 
	"RA_SERVER_DOCS_READ_LOCATION" VARCHAR2(250 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_BI_SERVERS_TEMP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_BI_SERVERS_TEMP" 
   (	"APP_ID" NUMBER(38,0), 
	"BI_SERVER" VARCHAR2(30 CHAR), 
	"BI_CATEGORY" VARCHAR2(30 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"BI_SERVER_ID" NUMBER(38,0), 
	"BI_SERVER_TYPE" NUMBER(38,0), 
	"BI_LOGIN" VARCHAR2(150 BYTE), 
	"BI_SERVER_DOCS_WRITE_LOCATION" VARCHAR2(250 BYTE), 
	"RA_SERVER_DOCS_READ_LOCATION" VARCHAR2(250 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_COLUMN_COMMENTS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_COLUMN_COMMENTS" 
   (	"TABLE_NAME" VARCHAR2(30 BYTE), 
	"COLUMN_NAME" VARCHAR2(30 BYTE), 
	"COMMENTS" VARCHAR2(4000 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;


   COMMENT ON TABLE "RPTAPP"."RA_COLUMN_COMMENTS"  IS 'Reporting Application table column comments';
--------------------------------------------------------

--  DDL for Table RA_DATA_SOURCES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_DATA_SOURCES" 
   (	"DS_ID" NUMBER(38,0), 
	"DS_CONN_STRING" VARCHAR2(200 CHAR), 
	"DS_JNDI_NAME" VARCHAR2(30 BYTE), 
	"DS_USER_ID" VARCHAR2(30 BYTE), 
	"DS_PORT" NUMBER(5,0), 
	"DS_IP" VARCHAR2(15 BYTE), 
	"DS_ENCRYPT_PASSWD" VARCHAR2(20 BYTE), 
	"APP_ID" NUMBER(38,0), 
	"DS_TYPE" VARCHAR2(150 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"DS_NAME" VARCHAR2(100 CHAR), 
	"DRIVER_CLASS" VARCHAR2(1024 CHAR), 
	"DS_TEST_QUERY" VARCHAR2(1024 BYTE), 
	"DOMAIN_CODE" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_DATA_SOURCES_BCK

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_DATA_SOURCES_BCK" 
   (	"DS_ID" NUMBER(38,0), 
	"DS_CONN_STRING" VARCHAR2(200 CHAR), 
	"DS_JNDI_NAME" VARCHAR2(30 BYTE), 
	"DS_USER_ID" VARCHAR2(30 BYTE), 
	"DS_PORT" NUMBER(5,0), 
	"DS_IP" VARCHAR2(15 BYTE), 
	"DS_ENCRYPT_PASSWD" VARCHAR2(20 BYTE), 
	"APP_ID" NUMBER(38,0), 
	"DS_TYPE" VARCHAR2(150 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"DS_NAME" VARCHAR2(100 CHAR), 
	"DRIVER_CLASS" VARCHAR2(1024 CHAR), 
	"DS_TEST_QUERY" VARCHAR2(1024 BYTE), 
	"DOMAIN_CODE" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_DATA_SOURCES_BKP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_DATA_SOURCES_BKP" 
   (	"DS_ID" NUMBER(38,0), 
	"DS_CONN_STRING" VARCHAR2(200 CHAR), 
	"DS_JNDI_NAME" VARCHAR2(30 BYTE), 
	"DS_USER_ID" VARCHAR2(30 BYTE), 
	"DS_PORT" NUMBER(5,0), 
	"DS_IP" VARCHAR2(15 BYTE), 
	"DS_ENCRYPT_PASSWD" VARCHAR2(20 BYTE), 
	"APP_ID" NUMBER(38,0), 
	"DS_TYPE" VARCHAR2(150 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"DS_NAME" VARCHAR2(100 CHAR), 
	"DRIVER_CLASS" VARCHAR2(1024 CHAR), 
	"DS_TEST_QUERY" VARCHAR2(1024 BYTE), 
	"DOMAIN_CODE" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_DATA_SOURCES_CN

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_DATA_SOURCES_CN" 
   (	"DS_ID" NUMBER(38,0), 
	"DS_CONN_STRING" VARCHAR2(200 CHAR), 
	"DS_JNDI_NAME" VARCHAR2(30 BYTE), 
	"DS_USER_ID" VARCHAR2(30 BYTE), 
	"DS_PORT" NUMBER(5,0), 
	"DS_IP" VARCHAR2(15 BYTE), 
	"DS_ENCRYPT_PASSWD" VARCHAR2(20 BYTE), 
	"APP_ID" NUMBER(38,0), 
	"DS_TYPE" VARCHAR2(150 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"DS_NAME" VARCHAR2(100 CHAR), 
	"DRIVER_CLASS" VARCHAR2(1024 CHAR), 
	"DS_TEST_QUERY" VARCHAR2(1024 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_DATA_SOURCES_MD

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_DATA_SOURCES_MD" 
   (	"DS_ID" NUMBER(38,0), 
	"DS_CONN_STRING" VARCHAR2(200 CHAR), 
	"DS_JNDI_NAME" VARCHAR2(30 BYTE), 
	"DS_USER_ID" VARCHAR2(30 BYTE), 
	"DS_PORT" NUMBER(5,0), 
	"DS_IP" VARCHAR2(15 BYTE), 
	"DS_ENCRYPT_PASSWD" VARCHAR2(20 BYTE), 
	"APP_ID" NUMBER(38,0), 
	"DS_TYPE" VARCHAR2(150 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"DS_NAME" VARCHAR2(100 CHAR), 
	"DRIVER_CLASS" VARCHAR2(1024 CHAR), 
	"DS_TEST_QUERY" VARCHAR2(1024 BYTE), 
	"DOMAIN_CODE" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_DATA_SOURCES_SOJI

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_DATA_SOURCES_SOJI" 
   (	"DS_ID" NUMBER(38,0), 
	"DS_CONN_STRING" VARCHAR2(200 CHAR), 
	"DS_JNDI_NAME" VARCHAR2(30 BYTE), 
	"DS_USER_ID" VARCHAR2(30 BYTE), 
	"DS_PORT" NUMBER(5,0), 
	"DS_IP" VARCHAR2(15 BYTE), 
	"DS_ENCRYPT_PASSWD" VARCHAR2(20 BYTE), 
	"APP_ID" NUMBER(38,0), 
	"DS_TYPE" VARCHAR2(150 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"DS_NAME" VARCHAR2(100 CHAR), 
	"DRIVER_CLASS" VARCHAR2(1024 CHAR), 
	"DS_TEST_QUERY" VARCHAR2(1024 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_DATA_SOURCES_SUBRA

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_DATA_SOURCES_SUBRA" 
   (	"DS_ID" NUMBER(38,0), 
	"DS_CONN_STRING" VARCHAR2(200 CHAR), 
	"DS_JNDI_NAME" VARCHAR2(30 BYTE), 
	"DS_USER_ID" VARCHAR2(30 BYTE), 
	"DS_PORT" NUMBER(5,0), 
	"DS_IP" VARCHAR2(15 BYTE), 
	"DS_ENCRYPT_PASSWD" VARCHAR2(20 BYTE), 
	"APP_ID" NUMBER(38,0), 
	"DS_TYPE" VARCHAR2(150 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"DS_NAME" VARCHAR2(100 CHAR), 
	"DRIVER_CLASS" VARCHAR2(1024 CHAR), 
	"DS_TEST_QUERY" VARCHAR2(1024 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_DATA_SOURCES_TEST

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_DATA_SOURCES_TEST" 
   (	"DS_ID" NUMBER(38,0), 
	"DS_CONN_STRING" VARCHAR2(200 CHAR), 
	"DS_JNDI_NAME" VARCHAR2(30 BYTE), 
	"DS_USER_ID" VARCHAR2(30 BYTE), 
	"DS_PORT" NUMBER(5,0), 
	"DS_IP" VARCHAR2(15 BYTE), 
	"DS_ENCRYPT_PASSWD" VARCHAR2(20 BYTE), 
	"APP_ID" NUMBER(38,0), 
	"DS_TYPE" VARCHAR2(150 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"DS_NAME" VARCHAR2(100 CHAR), 
	"DRIVER_CLASS" VARCHAR2(1024 CHAR), 
	"DS_TEST_QUERY" VARCHAR2(1024 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_DATA_SOURCES_TEST1

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_DATA_SOURCES_TEST1" 
   (	"DS_ID" NUMBER(38,0), 
	"DS_CONN_STRING" VARCHAR2(200 CHAR), 
	"DS_JNDI_NAME" VARCHAR2(30 BYTE), 
	"DS_USER_ID" VARCHAR2(30 BYTE), 
	"DS_PORT" NUMBER(5,0), 
	"DS_IP" VARCHAR2(15 BYTE), 
	"DS_ENCRYPT_PASSWD" VARCHAR2(20 BYTE), 
	"APP_ID" NUMBER(38,0), 
	"DS_TYPE" VARCHAR2(150 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"DS_NAME" VARCHAR2(100 CHAR), 
	"DRIVER_CLASS" VARCHAR2(1024 CHAR), 
	"DS_TEST_QUERY" VARCHAR2(1024 BYTE), 
	"DOMAIN_CODE" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_DOMAIN_DATA_SOURCES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_DOMAIN_DATA_SOURCES" 
   (	"DS_ID" NUMBER(38,0), 
	"DS_CONN_STRING" VARCHAR2(200 CHAR), 
	"DS_JNDI_NAME" VARCHAR2(30 BYTE), 
	"DS_USER_ID" VARCHAR2(30 BYTE), 
	"DS_PORT" NUMBER(5,0), 
	"DS_IP" VARCHAR2(15 BYTE), 
	"DS_ENCRYPT_PASSWD" VARCHAR2(20 BYTE), 
	"APP_ID" NUMBER(38,0), 
	"DS_TYPE" VARCHAR2(150 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"DS_NAME" VARCHAR2(100 CHAR), 
	"DRIVER_CLASS" VARCHAR2(1024 CHAR), 
	"DS_TEST_QUERY" VARCHAR2(1024 BYTE), 
	"DOMAIN_CODE" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_EVENT_SUBSCRIPTIONS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_EVENT_SUBSCRIPTIONS" 
   (	"SUBSCRIPTION_ID" NUMBER(*,0), 
	"SOEID" VARCHAR2(25 CHAR), 
	"REPORT_ID" NUMBER(*,0), 
	"REPORT_OUTPUT_TYPE" VARCHAR2(25 CHAR), 
	"EFFECTIVE_FROM" DATE DEFAULT sysdate, 
	"EFFECTIVE_TO" DATE DEFAULT TO_DATE('31-DEC-9999','DD-MON-YYYY'), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_EVENT_SUBS_MATCHING

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_EVENT_SUBS_MATCHING" 
   (	"SUBSCRIPTION_ID" NUMBER(*,0), 
	"EVENT_XPATH_ELEMENT" VARCHAR2(500 CHAR), 
	"OPERATOR" VARCHAR2(50 CHAR), 
	"OPERAND" VARCHAR2(50 CHAR), 
	"EFFECTIVE_FROM" DATE DEFAULT sysdate, 
	"EFFECTIVE_TO" DATE DEFAULT TO_DATE('31-DEC-9999','DD-MON-YYYY'), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_EVENT_SUBS_REPORT_MAPPING

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_EVENT_SUBS_REPORT_MAPPING" 
   (	"SUBSCRIPTION_ID" NUMBER(*,0), 
	"PARAMETER_ID" NUMBER(*,0), 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"PARAMETER_VALUE" VARCHAR2(200 CHAR), 
	"VALUE_TYPE" VARCHAR2(100 CHAR), 
	"EFFECTIVE_FROM" DATE DEFAULT sysdate, 
	"EFFECTIVE_TO" DATE DEFAULT TO_DATE('31-DEC-9999','DD-MON-YYYY'), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp, 
	"REPORT_ID" NUMBER(38,0) DEFAULT NULL
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;


   COMMENT ON COLUMN "RPTAPP"."RA_EVENT_SUBS_REPORT_MAPPING"."REPORT_ID" IS 'A subscription can trigger multiple reports. This column is for future use.';
--------------------------------------------------------

--  DDL for Table RA_EVENT_XML

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_EVENT_XML" 
   (	"EVENT_ID" NUMBER, 
	"EVENT_XML" CLOB, 
	"EFFECTIVE_FROM" DATE DEFAULT SYSDATE, 
	"EFFECTIVE_TO" DATE DEFAULT TO_DATE('31-DEC-9999','DD-MON-YYYY'), 
	"CREATED_BY" VARCHAR2(25 BYTE), 
	"CREATION_TIME" DATE DEFAULT systimestamp, 
	"LAST_UPDATED_BY" VARCHAR2(20 BYTE), 
	"LAST_UPDATE_TIME" DATE DEFAULT systimestamp
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("EVENT_XML") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_EVENT_XPATH_DATA

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_EVENT_XPATH_DATA" 
   (	"EVENT_ID" NUMBER(38,0), 
	"XPATH" VARCHAR2(200 CHAR), 
	"XPATHVALUE" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE DEFAULT sysdate, 
	"EFFECTIVE_TO" DATE DEFAULT TO_DATE('31-DEC-9999','DD-MON-YYYY'), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" DATE DEFAULT systimestamp, 
	"LAST_UPDATED_BY" VARCHAR2(25 BYTE), 
	"LAST_UPDATE_TIME" DATE DEFAULT systimestamp
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_EXCEPTIONS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_EXCEPTIONS" 
   (	"ERROR_TYPE" VARCHAR2(20 BYTE), 
	"ERROR_CODE" VARCHAR2(50 BYTE), 
	"ERROR_MSG" VARCHAR2(4000 BYTE), 
	"USER_MSG" VARCHAR2(4000 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_EXTERNAL_APP_AUTH

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_EXTERNAL_APP_AUTH" 
   (	"APP_NAME" VARCHAR2(25 CHAR), 
	"IP_ADDRESS" VARCHAR2(200 CHAR), 
	"REMOTE_HOST" VARCHAR2(200 CHAR), 
	"CREATED_BY" VARCHAR2(200 BYTE), 
	"CREATION_DTM" DATE DEFAULT systimestamp, 
	"LAST_UPDATED_BY" VARCHAR2(200 CHAR), 
	"LAST_UPDATE_DTM" DATE DEFAULT systimestamp
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;


   COMMENT ON COLUMN "RPTAPP"."RA_EXTERNAL_APP_AUTH"."APP_NAME" IS 'this will be used in place of SOEID, so keeping the size to 25 Char, so that it can be inserted in to various columns in DB';
--------------------------------------------------------

--  DDL for Table RA_EXTERNAL_MESSAGES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_EXTERNAL_MESSAGES" 
   (	"MESSAGE_ID" NUMBER, 
	"MESSAGE_TEXT" CLOB, 
	"CREATED_BY" VARCHAR2(50 CHAR) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 CHAR) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate, 
	"MESSAGE_TYPE" VARCHAR2(100 CHAR) DEFAULT 'IN', 
	"APP_CODE" VARCHAR2(40 CHAR), 
	"MESSAGE_MODE" VARCHAR2(10 CHAR) DEFAULT 'IN'
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "RPTAPP_DATA" 
 LOB ("MESSAGE_TEXT") STORE AS BASICFILE (
  TABLESPACE "RPTAPP_DATA" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING ) ;
--------------------------------------------------------

--  DDL for Table RA_EXT_REPORT_INSTANCE

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_EXT_REPORT_INSTANCE" 
   (	"EXT_RUN_ID" NUMBER, 
	"SYSTEM_NAME" VARCHAR2(200 CHAR), 
	"SYSTEM_ID" NUMBER, 
	"EXT_REPORT_ID" VARCHAR2(200 CHAR), 
	"EXT_REPORT_NAME" VARCHAR2(200 CHAR), 
	"SHARED_BY" VARCHAR2(30 CHAR), 
	"SHARED_TO" VARCHAR2(30 CHAR), 
	"REPORT_OUTPUT_LOCATION" VARCHAR2(2000 CHAR), 
	"OUTPUT_TYPE" VARCHAR2(30 CHAR), 
	"IS_DATA_ENTITLED" CHAR(1 CHAR), 
	"LDAP_GROUP_NAME" VARCHAR2(100 CHAR), 
	"CREATED_BY" VARCHAR2(50 CHAR) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 CHAR) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table RA_EXT_REPORT_INSTANCE_PROMPTS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_EXT_REPORT_INSTANCE_PROMPTS" 
   (	"EXT_RUN_ID" NUMBER, 
	"EXT_REPORT_ID" VARCHAR2(200 CHAR), 
	"PARAMETER_NAME" VARCHAR2(100 CHAR), 
	"PARAMETER_TYPE" VARCHAR2(100 CHAR), 
	"PARAMETER_VALUE" VARCHAR2(4000 CHAR), 
	"CREATED_BY" VARCHAR2(50 CHAR) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 CHAR) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table RA_EXT_REPORT_MAPPING

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_EXT_REPORT_MAPPING" 
   (	"REPORT_ID" NUMBER, 
	"EXT_REPORT_ID" VARCHAR2(100 CHAR), 
	"EXT_SYSTEM_ID" NUMBER, 
	"CREATED_BY" VARCHAR2(50 CHAR) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 CHAR) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table RA_EXT_REPORT_PARAMETER_MAPING

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_EXT_REPORT_PARAMETER_MAPING" 
   (	"REPORT_ID" NUMBER, 
	"PARAMETER_NAME_IN_QUERY" VARCHAR2(100 CHAR), 
	"EXT_SYSTEM_ID" NUMBER, 
	"EXT_REPORT_ID" VARCHAR2(100 CHAR), 
	"EXT_PARAMETER_NAME" VARCHAR2(100 CHAR), 
	"CREATED_BY" VARCHAR2(50 CHAR) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 CHAR) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table RA_FREEMARKER_TEMPLATES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_FREEMARKER_TEMPLATES" 
   (	"FM_TEMPLATE_ID" NUMBER(*,0), 
	"FM_TEMPLATE_NAME" VARCHAR2(200 CHAR), 
	"FM_TEMPLATE_TEXT" CLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("FM_TEMPLATE_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_FREQUENCY_TYPES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_FREQUENCY_TYPES" 
   (	"FREQUENCY_ID" NUMBER, 
	"NAME" VARCHAR2(30 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT USER, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT USER, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate, 
	"DESCRIPTION" VARCHAR2(200 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_GLOBAL_ENV_PROP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_GLOBAL_ENV_PROP" 
   (	"ENV_PROP_ID" NUMBER(*,0), 
	"NAME" VARCHAR2(50 CHAR), 
	"VALUE" VARCHAR2(1000 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT USER, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT USER, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;


   COMMENT ON TABLE "RPTAPP"."RA_GLOBAL_ENV_PROP"  IS 'Global Environment properties that are not specific to Application.';
--------------------------------------------------------

--  DDL for Table RA_GLOBAL_ENV_PROP_SIT_SVN

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_GLOBAL_ENV_PROP_SIT_SVN" 
   (	"ENV_PROP_ID" NUMBER(*,0), 
	"NAME" VARCHAR2(50 CHAR), 
	"VALUE" VARCHAR2(1000 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_HIST_INSTANCE_PROMPT_VALUES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_HIST_INSTANCE_PROMPT_VALUES" 
   (	"RUN_ID" NUMBER(38,0), 
	"INSTPRM_PROMPT_ID" NUMBER(*,0), 
	"INSTPRM_PROMPT_VALUE" VARCHAR2(4000 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"IS_EXPRESSION" VARCHAR2(1 CHAR), 
	"INSTPRM_EXPRESSION" VARCHAR2(4000 CHAR), 
	"EXPRESSION_TYPE" VARCHAR2(200 CHAR), 
	"INSTPRM_PROMPT_VALUE_ORDER" NUMBER(38,0), 
	"INSTPRM_PROMPT_VAL_TRANSFORMED" VARCHAR2(4000 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_HIST_INSTANCE_QUERY_COLUMNS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_HIST_INSTANCE_QUERY_COLUMNS" 
   (	"RUN_ID" NUMBER(*,0), 
	"QUERY_ID" NUMBER(*,0), 
	"COLUMN_ORDER" NUMBER(3,0), 
	"COLUMN_NAME" VARCHAR2(50 BYTE), 
	"COLUMN_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"COLUMN_TYPE" VARCHAR2(30 CHAR), 
	"COLUMN_SUB_TYPE" VARCHAR2(30 BYTE), 
	"COLUMN_TYPE_FORMAT_MASK" VARCHAR2(30 CHAR), 
	"REQUIRED_IN_SELECT_CLAUSE" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"COLUMN_DATA_TYPE" VARCHAR2(10 CHAR), 
	"MEASURE_FUNCTION" VARCHAR2(30 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_HIST_INSTANCE_READ_ACTIVITY

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_HIST_INSTANCE_READ_ACTIVITY" 
   (	"RUN_ID" NUMBER(*,0), 
	"REPORT_ID" NUMBER(38,0), 
	"VIEWED_BY_SOEID" VARCHAR2(50 BYTE), 
	"OUTPUT_TYPE" VARCHAR2(30 BYTE), 
	"VIEW_DTM" TIMESTAMP (6), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_HIST_REPORT_INSTANCES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_HIST_REPORT_INSTANCES" 
   (	"RUN_ID" NUMBER(*,0), 
	"REPORT_ID" NUMBER(38,0), 
	"BI_INSTANCE_ID" NUMBER, 
	"INSTANCE_NAME" VARCHAR2(150 BYTE), 
	"OUTPUT_TYPE" VARCHAR2(30 BYTE), 
	"OUTPUT_PATH" VARCHAR2(4000 BYTE), 
	"SUBMITTED_BY_SOEID" VARCHAR2(25 CHAR), 
	"STATUS" NUMBER(38,0), 
	"START_TIME" DATE, 
	"END_TIME" DATE, 
	"TEMPLATE_ID" NUMBER(*,0), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"FAILED_REASON" CLOB, 
	"ORIGINAL_RUN_ID" NUMBER(*,0), 
	"PROCESSING_STATUS" NUMBER(*,0), 
	"EVENT_INSTANCE_ID" NUMBER(*,0), 
	"SUBSCRIPTION_ID" NUMBER(*,0), 
	"REASON" VARCHAR2(4000 BYTE), 
	"USER_SCHEDULE_ID" NUMBER(38,0), 
	"TRIGGERED_BY" VARCHAR2(10 CHAR), 
	"USER_ID" VARCHAR2(25 CHAR), 
	"CONCATENATED_PROMPTS" VARCHAR2(4000 CHAR), 
	"OUTPUT_FILE_SIZE" NUMBER, 
	"OUTPUT_NUM_OF_ROWS" NUMBER, 
	"OUTPUT_COMPRESSED_FILE_SIZE" NUMBER, 
	"IS_MAXROWS_EXCEED" CHAR(1 BYTE), 
	"QUERY_START_TIME" TIMESTAMP (6), 
	"QUERY_END_TIME" TIMESTAMP (6), 
	"ACTIVE_IND" CHAR(1 BYTE), 
	"IS_SUBMITTED_BY_EXTR_SYS" CHAR(1 BYTE), 
	"IS_ONLINE_AVAILABLE" CHAR(1 BYTE), 
	"ONLINE_ERROR" VARCHAR2(500 BYTE), 
	"EXTR_SYS_CALLBACK_URL" VARCHAR2(500 CHAR), 
	"MONGO_DOC_SIZE" NUMBER, 
	"IS_PARTIAL_RESULT" CHAR(1 BYTE), 
	"IS_STOPPED" CHAR(1 BYTE), 
	"IS_QURY_EXEC_TIMED_OUT" CHAR(1 BYTE), 
	"IS_QURY_EXTRACT_TIMED_OUT" CHAR(1 BYTE), 
	"DOMAIN_CODE" VARCHAR2(100 BYTE), 
	"HOST_NAME" VARCHAR2(100 BYTE), 
	"HOST_NODE" VARCHAR2(10 BYTE), 
	"PARENT_RUN_ID" NUMBER(38,0), 
	"IS_FORCE_RERUN" CHAR(1 CHAR), 
	"SUBMIT_HOST_NAME" VARCHAR2(100 BYTE), 
	"SUBMIT_HOST_NODE" VARCHAR2(10 BYTE), 
	"IS_QRY_EXTRCT_TIME_EXCEED" CHAR(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("FAILED_REASON") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_HIST_REPORT_INST_INFO

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_HIST_REPORT_INST_INFO" 
   (	"RUN_ID" NUMBER(38,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_PARAMS" CLOB, 
	"CREATED_BY" VARCHAR2(50 CHAR), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 CHAR), 
	"LAST_UPDATE_DTM" DATE, 
	"REPORT_ID" NUMBER(38,0), 
	"QUERY_ID" NUMBER(38,0), 
	"Q_START_TIME" TIMESTAMP (6), 
	"Q_END_TIME" TIMESTAMP (6), 
	"Q_RESULT_END_TIME" TIMESTAMP (6), 
	"Q_FAILED_TIME" TIMESTAMP (6), 
	"MONGODB_REPORT_SIZE" NUMBER(38,0), 
	"SQL_ERROR_CODE" VARCHAR2(50 BYTE), 
	"SQL_ERROR_MSG" VARCHAR2(1000 BYTE), 
	"FAILED_REASON" CLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("QUERY_PARAMS") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("FAILED_REASON") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_HIST_RPT_INST_QRY_PROGRESS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_HIST_RPT_INST_QRY_PROGRESS" 
   (	"RUN_ID" NUMBER(*,0), 
	"REPORT_ID" NUMBER(38,0), 
	"QUERY_ID" NUMBER(38,0), 
	"QUERY_ACTION_NAME" VARCHAR2(50 BYTE), 
	"QUERY_ACTION_TIME" TIMESTAMP (6), 
	"RECORD_COUNT" NUMBER(38,0), 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_HIST_SHARED_REPORTS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_HIST_SHARED_REPORTS" 
   (	"RUN_ID" NUMBER(*,0), 
	"SHARED_BY" VARCHAR2(25 CHAR), 
	"SHARE_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"SHARED_TO_USER" VARCHAR2(25 CHAR), 
	"SHARED_TO_GROUP" NUMBER(*,0), 
	"SHARED_TO_PUBLIC" VARCHAR2(1 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"SHARED_TO_TYPE" VARCHAR2(1 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_HIST_SUB_RUN_INSTANCES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_HIST_SUB_RUN_INSTANCES" 
   (	"SUB_RUN_ID" NUMBER(38,0), 
	"PARENT_RUN_ID" NUMBER(38,0), 
	"OBJECT_ID" VARCHAR2(250 CHAR), 
	"PARENT_REPORT_ID" NUMBER(38,0), 
	"SUB_REPORT_ID" NUMBER(38,0), 
	"SUB_REPORT_SEQ" NUMBER(38,0), 
	"DRILL_DOWN_ID" VARCHAR2(250 CHAR), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_IMAGES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_IMAGES" 
   (	"IMAGE_NAME" VARCHAR2(250 CHAR), 
	"IMAGE_URL" VARCHAR2(2000 CHAR), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_INPUT_FIELDS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_INPUT_FIELDS" 
   (	"INPUT_TYPE_ID" NUMBER(5,0), 
	"ATTRIBUTE_NAME" VARCHAR2(255 BYTE), 
	"ATTRIBUTE_VALUE" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_INPUT_TYPES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_INPUT_TYPES" 
   (	"INPUT_TYPE_ID" NUMBER, 
	"INPUT_NAME" VARCHAR2(30 BYTE), 
	"WIDTH" NUMBER(38,0), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;


   COMMENT ON COLUMN "RPTAPP"."RA_INPUT_TYPES"."INPUT_TYPE_ID" IS '1,2,3,4,5,6,7';
   COMMENT ON COLUMN "RPTAPP"."RA_INPUT_TYPES"."INPUT_NAME" IS 'Date, Multitext/List box, Text, Dropdown, Check box, Radio button, Hidden prompt';
   COMMENT ON TABLE "RPTAPP"."RA_INPUT_TYPES"  IS 'Prompt Type Definition.';
--------------------------------------------------------

--  DDL for Table RA_INPUT_VALIDATION

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_INPUT_VALIDATION" 
   (	"REPORT_ID" NUMBER(38,0), 
	"SCRIPT_SEQ" NUMBER(38,0), 
	"SCRIPT_TEXT" VARCHAR2(4000 CHAR), 
	"SCRIPT_LANGUAGE" VARCHAR2(4000 CHAR), 
	"IS_ACTIVE" CHAR(1 CHAR) DEFAULT 'Y', 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_INPUT_VALIDATION_BKP0506

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_INPUT_VALIDATION_BKP0506" 
   (	"REPORT_ID" NUMBER(38,0), 
	"SCRIPT_SEQ" NUMBER(38,0), 
	"SCRIPT_TEXT" VARCHAR2(4000 CHAR), 
	"SCRIPT_LANGUAGE" VARCHAR2(4000 CHAR), 
	"IS_ACTIVE" CHAR(1 CHAR), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table RA_INPUT_VALIDATION_BKP0520

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_INPUT_VALIDATION_BKP0520" 
   (	"REPORT_ID" NUMBER(38,0), 
	"SCRIPT_SEQ" NUMBER(38,0), 
	"SCRIPT_TEXT" VARCHAR2(4000 CHAR), 
	"SCRIPT_LANGUAGE" VARCHAR2(4000 CHAR), 
	"IS_ACTIVE" CHAR(1 CHAR), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table RA_INPUT_VAL_UP424

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_INPUT_VAL_UP424" 
   (	"REPORT_ID" NUMBER(38,0), 
	"SCRIPT_SEQ" NUMBER(38,0), 
	"SCRIPT_TEXT" VARCHAR2(4000 CHAR), 
	"SCRIPT_LANGUAGE" VARCHAR2(4000 CHAR), 
	"IS_ACTIVE" CHAR(1 CHAR), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table RA_INQUIRY_TABLE_DETAILS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_INQUIRY_TABLE_DETAILS" 
   (	"APP_ID" NUMBER, 
	"REPORT_ID" NUMBER, 
	"QUERY_ID" NUMBER, 
	"TABLE_NAME" VARCHAR2(50 BYTE), 
	"COLUMN_NAME" VARCHAR2(50 BYTE), 
	"C_DISPLAY_NAME" VARCHAR2(50 BYTE), 
	"C_NAME_IN_QUERY" VARCHAR2(50 BYTE), 
	"C_DATA_TYPE" VARCHAR2(50 BYTE), 
	"C_INPUT_TYPE_ID" NUMBER, 
	"C_OUPUT_EXPRESSION" VARCHAR2(2000 BYTE), 
	"C_SELECTION_TYPE" VARCHAR2(10 BYTE), 
	"C_SEQ_ORDER" NUMBER, 
	"C_OPT_MANDATORY" VARCHAR2(20 BYTE), 
	"C_MEASURE_FUNCTION" VARCHAR2(30 BYTE), 
	"C_QUERY" CLOB, 
	"C_QUERY_DS_ID" NUMBER, 
	"C_DEFAULT_VALUE" VARCHAR2(50 BYTE), 
	"C_MULTIVALUE_ALLOWED" CHAR(2 BYTE), 
	"C_QUERY_TIMEOUT_SECS" NUMBER, 
	"C_IS_SELECTED" CHAR(2 BYTE), 
	"CREATED_BY" VARCHAR2(25 CHAR) DEFAULT 'RPTAPP', 
	"CREATION_TIME" TIMESTAMP (6) DEFAULT systimestamp, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR) DEFAULT 'RPTAPP', 
	"LAST_UPDATE_TIME" TIMESTAMP (6) DEFAULT systimestamp
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("C_QUERY") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_INSTANCE_PROMPT_VALUES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_INSTANCE_PROMPT_VALUES" 
   (	"RUN_ID" NUMBER(38,0), 
	"INSTPRM_PROMPT_ID" NUMBER(*,0), 
	"INSTPRM_PROMPT_VALUE" VARCHAR2(4000 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"IS_EXPRESSION" VARCHAR2(1 CHAR), 
	"INSTPRM_EXPRESSION" VARCHAR2(4000 CHAR), 
	"EXPRESSION_TYPE" VARCHAR2(200 CHAR), 
	"INSTPRM_PROMPT_VALUE_ORDER" NUMBER(38,0), 
	"INSTPRM_PROMPT_VAL_TRANSFORMED" VARCHAR2(4000 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_INSTANCE_PROMPT_VALUES_IMP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_INSTANCE_PROMPT_VALUES_IMP" 
   (	"RUN_ID" NUMBER(38,0), 
	"INSTPRM_PROMPT_ID" NUMBER(*,0), 
	"INSTPRM_PROMPT_VALUE" VARCHAR2(2000 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate, 
	"IS_EXPRESSION" VARCHAR2(1 CHAR), 
	"INSTPRM_EXPRESSION" VARCHAR2(2000 CHAR), 
	"EXPRESSION_TYPE" VARCHAR2(200 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_INSTANCE_PROMPT_VAL_CM22692

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_INSTANCE_PROMPT_VAL_CM22692" 
   (	"RUN_ID" NUMBER(38,0), 
	"INSTPRM_PROMPT_ID" NUMBER(*,0), 
	"INSTPRM_PROMPT_VALUE" VARCHAR2(4000 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"IS_EXPRESSION" VARCHAR2(1 CHAR), 
	"INSTPRM_EXPRESSION" VARCHAR2(4000 CHAR), 
	"EXPRESSION_TYPE" VARCHAR2(200 CHAR), 
	"INSTPRM_PROMPT_VALUE_ORDER" NUMBER(38,0), 
	"INSTPRM_PROMPT_VAL_TRANSFORMED" VARCHAR2(4000 CHAR), 
	"SNAP_SHOT_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_INSTANCE_QUERY_COLUMNS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_INSTANCE_QUERY_COLUMNS" 
   (	"RUN_ID" NUMBER(*,0), 
	"QUERY_ID" NUMBER(*,0), 
	"COLUMN_ORDER" NUMBER(3,0), 
	"COLUMN_NAME" VARCHAR2(50 BYTE), 
	"COLUMN_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"COLUMN_TYPE" VARCHAR2(30 CHAR), 
	"COLUMN_SUB_TYPE" VARCHAR2(30 BYTE), 
	"COLUMN_TYPE_FORMAT_MASK" VARCHAR2(30 CHAR), 
	"REQUIRED_IN_SELECT_CLAUSE" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"COLUMN_DATA_TYPE" VARCHAR2(10 CHAR), 
	"MEASURE_FUNCTION" VARCHAR2(30 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;


   COMMENT ON COLUMN "RPTAPP"."RA_INSTANCE_QUERY_COLUMNS"."COLUMN_ORDER" IS 'This is the order in which user selected columns in the UI for dynamic inquiry';
--------------------------------------------------------

--  DDL for Table RA_INSTANCE_READ_ACTIVITY

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_INSTANCE_READ_ACTIVITY" 
   (	"RUN_ID" NUMBER(*,0), 
	"REPORT_ID" NUMBER(38,0), 
	"VIEWED_BY_SOEID" VARCHAR2(50 BYTE), 
	"OUTPUT_TYPE" VARCHAR2(30 BYTE), 
	"VIEW_DTM" TIMESTAMP (6) DEFAULT SYSDATE, 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT SYSDATE, 
	"LOGGED_IN_SOEID" VARCHAR2(25 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_INSTANCE_STATUS_HIST

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_INSTANCE_STATUS_HIST" 
   (	"RUN_ID" NUMBER(38,0), 
	"STATUS" VARCHAR2(30 CHAR), 
	"STATUS_UPD_DT" DATE, 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_INST_LABEL

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_INST_LABEL" 
   (	"SOEID" VARCHAR2(25 CHAR), 
	"RUN_ID" NUMBER(*,0), 
	"LABEL_NAME" VARCHAR2(100 CHAR), 
	"CREATED_BY" VARCHAR2(25 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(25 BYTE), 
	"LAST_UPDATE_DTM" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_INST_SHARE

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_INST_SHARE" 
   (	"RUN_ID" NUMBER(*,0), 
	"TO_SOEID" VARCHAR2(25 CHAR), 
	"FROM_SOEID" VARCHAR2(25 CHAR), 
	"CREATED_BY" VARCHAR2(25 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(25 BYTE), 
	"LAST_UPDATE_DTM" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_JMS_LSTNR_RESTART_ACTIVITY

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_JMS_LSTNR_RESTART_ACTIVITY" 
   (	"HOST_NAME" VARCHAR2(50 BYTE), 
	"NODE_ID" NUMBER, 
	"DESTINATION_NAME" VARCHAR2(100 BYTE), 
	"SOEID" VARCHAR2(10 BYTE), 
	"ACTION" VARCHAR2(20 BYTE), 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" TIMESTAMP (6) DEFAULT sysdate
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_JR_TEMPLATES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_JR_TEMPLATES" 
   (	"REPORT_ID" NUMBER(38,0), 
	"JR_TEMPLATE_NAME" VARCHAR2(250 CHAR), 
	"JR_TEMPLATE" CLOB, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("JR_TEMPLATE") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_JR_UP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_JR_UP" 
   (	"REPORT_ID" NUMBER(38,0), 
	"JR_TEMPLATE_NAME" VARCHAR2(250 CHAR), 
	"JR_TEMPLATE" CLOB, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" 
 LOB ("JR_TEMPLATE") STORE AS BASICFILE (
  TABLESPACE "RPTAPP_DATA" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_JR_UP_BKP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_JR_UP_BKP" 
   (	"REPORT_ID" NUMBER(38,0), 
	"JR_TEMPLATE_NAME" VARCHAR2(250 CHAR), 
	"JR_TEMPLATE" CLOB, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" 
 LOB ("JR_TEMPLATE") STORE AS BASICFILE (
  TABLESPACE "RPTAPP_DATA" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_LABELS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_LABELS" 
   (	"ID" NUMBER(*,0), 
	"NAME" VARCHAR2(200 CHAR), 
	"PARENT_PATH" VARCHAR2(250 CHAR), 
	"OWNER_ID" VARCHAR2(25 CHAR), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"LOGGED_IN_SOEID" VARCHAR2(25 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_LABLES_B

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_LABLES_B" 
   (	"LABLE_ID" NUMBER, 
	"LABLE_TEXT" VARCHAR2(300 BYTE), 
	"LABLE_TYPE" VARCHAR2(20 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_LABLES_TL

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_LABLES_TL" 
   (	"LABLE_ID" NUMBER, 
	"LANGUAGE" VARCHAR2(10 CHAR), 
	"BASE_LANGUAGE" VARCHAR2(10 CHAR), 
	"LABLE_TEXT" VARCHAR2(300 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_LOOKUPS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_LOOKUPS" 
   (	"LOOKUP_TYPE" VARCHAR2(50 CHAR), 
	"LOOKUP_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE DEFAULT sysdate, 
	"EFFECTIVE_TO" DATE DEFAULT TO_DATE('31-DEC-9999','DD-MON-YYYY'), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_LOOKUP_CODES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_LOOKUP_CODES" 
   (	"LOOKUP_TYPE" VARCHAR2(50 CHAR), 
	"LOOKUP_CODE" VARCHAR2(30 CHAR), 
	"LOOKUP_CODE_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE DEFAULT sysdate, 
	"EFFECTIVE_TO" DATE DEFAULT TO_DATE('31-DEC-9999','DD-MON-YYYY'), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp, 
	"LOOKUP_DISPLAY_SEQ" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_META_AGGR_FUNC

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_META_AGGR_FUNC" 
   (	"AGGR_FUNC_ID" NUMBER, 
	"AGGR_FUNC_NM" VARCHAR2(50 BYTE), 
	"ACTV_IND" CHAR(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_META_ATTR

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_META_ATTR" 
   (	"ATTR_ID" NUMBER, 
	"ATTR_DISP_NM" VARCHAR2(150 BYTE), 
	"ATTR_PHY_ENTY_NM" VARCHAR2(100 BYTE), 
	"ATTR_PHY_ATTR_NM" VARCHAR2(2000 BYTE), 
	"ATTR_ALS_ENTY_NM" VARCHAR2(1000 BYTE), 
	"ATTR_ALS_ATTR_NM" VARCHAR2(30 BYTE), 
	"DIM_FLAG" CHAR(1 BYTE), 
	"AGGR_FLAG" CHAR(1 BYTE), 
	"FILT_FLAG" CHAR(1 BYTE), 
	"EFF_DT" DATE, 
	"END_DT" DATE, 
	"DATA_TYP" VARCHAR2(30 BYTE), 
	"ACTV_IND" CHAR(1 BYTE), 
	"ATTR_DEF_DIS_LEN" NUMBER, 
	"DISP_ORD" NUMBER(9,0), 
	"ATTR_DESC" VARCHAR2(4000 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_META_ATTR_GRP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_META_ATTR_GRP" 
   (	"ATTR_GRP_ID" NUMBER, 
	"GRP_NM" VARCHAR2(100 BYTE), 
	"GRP_DESC" VARCHAR2(300 BYTE), 
	"ACTV_IND" CHAR(1 BYTE), 
	"CNCPT_NM" VARCHAR2(300 BYTE), 
	"EFF_DT" DATE, 
	"END_DT" DATE, 
	"PRNT_GRP_ID" NUMBER, 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_META_ATTR_GRP_MBR

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_META_ATTR_GRP_MBR" 
   (	"ATTR_GRP_MBR_ID" NUMBER, 
	"GRP_ID" NUMBER, 
	"ATTR_ID" NUMBER, 
	"ACTV_IND" CHAR(1 BYTE), 
	"EFF_DT" DATE, 
	"END_DT" DATE, 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_META_DATA_MODEL

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_META_DATA_MODEL" 
   (	"DM_ID" NUMBER(9,0), 
	"APP_ID" NUMBER(9,0), 
	"DM_NM" VARCHAR2(255 BYTE), 
	"ACT_IND" VARCHAR2(1 BYTE), 
	"DISP_ORD" NUMBER(9,0), 
	"DS_ID" NUMBER(38,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_META_ENTITY_ALS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_META_ENTITY_ALS" 
   (	"ENT_ALS_NM" VARCHAR2(30 BYTE), 
	"ENT_PHY_NM" VARCHAR2(4000 CHAR), 
	"ACTV_IND" CHAR(1 BYTE), 
	"DM_ID" NUMBER(9,0), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_META_FILT_OPER

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_META_FILT_OPER" 
   (	"FILT_OPER_ID" VARCHAR2(30 BYTE), 
	"FILT_OPER" VARCHAR2(50 CHAR), 
	"ACTV_IND" CHAR(1 BYTE), 
	"FILT_OPER_DESC" VARCHAR2(60 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_META_JOIN_CRTA

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_META_JOIN_CRTA" 
   (	"ENT_ALS_NM" VARCHAR2(30 BYTE), 
	"PRNT_ENT_ALS_NM" VARCHAR2(30 BYTE), 
	"ACTV_IND" CHAR(1 BYTE), 
	"MPD_DT_CHK_JOIN_CRTA" VARCHAR2(4000 CHAR), 
	"ENT_JOIN_CRTA" VARCHAR2(4000 CHAR), 
	"JOIN_ORDER" NUMBER(5,0), 
	"PROD_NM" VARCHAR2(100 CHAR), 
	"JOIN_SNTX" VARCHAR2(1000 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_META_PROD_ATTR

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_META_PROD_ATTR" 
   (	"PROD_ATTR_ID" NUMBER, 
	"ATTR_ID" NUMBER, 
	"PROD_ID" NUMBER, 
	"INCL_EXCL_IND" CHAR(1 BYTE), 
	"ACTV_IND" CHAR(1 BYTE), 
	"EFF_DT" DATE, 
	"END_DT" DATE, 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_META_PROD_TYP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_META_PROD_TYP" 
   (	"PROD_ID" NUMBER, 
	"PROD_NM" VARCHAR2(30 BYTE), 
	"PROD_DESC" VARCHAR2(300 BYTE), 
	"DM_ID" NUMBER(9,0), 
	"EFF_DT" DATE, 
	"END_DT" DATE, 
	"ACTV_IND" CHAR(1 BYTE), 
	"ARRG_TYP_CD" VARCHAR2(1000 CHAR), 
	"DISP_ORD" NUMBER(9,0), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_MNSG_TEST

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_MNSG_TEST" 
   (	"MNGD_SEG_ID" VARCHAR2(1000 BYTE), 
	"FDL_ACCT" VARCHAR2(1000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_OUTPUT_FORMAT

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_OUTPUT_FORMAT" 
   (	"REPORT_ID" NUMBER(*,0), 
	"RPT_OUTPUT_TYPE" VARCHAR2(10 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate, 
	"OUTPUT_TYPE_DISPLAY" VARCHAR2(200 CHAR), 
	"EXL_TEMPLATE" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_OUTPUT_TEMPLATES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_OUTPUT_TEMPLATES" 
   (	"TPL_NAME" VARCHAR2(250 CHAR), 
	"TPL_TEXT" CLOB, 
	"TPL_TYPE" VARCHAR2(250 CHAR), 
	"TPL_LANGUAGE" VARCHAR2(100 CHAR), 
	"TPL_COMMENTS" VARCHAR2(500 CHAR), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" DATE DEFAULT SYSDATE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" DATE DEFAULT SYSDATE, 
	"TEMPLATE_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("TPL_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_OUTPUT_TEMPLATES_T1

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_OUTPUT_TEMPLATES_T1" 
   (	"TPL_NAME" VARCHAR2(250 CHAR), 
	"TPL_TEXT" CLOB, 
	"TPL_TYPE" VARCHAR2(250 CHAR), 
	"TPL_LANGUAGE" VARCHAR2(100 CHAR), 
	"TPL_COMMENTS" VARCHAR2(500 CHAR), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" DATE DEFAULT SYSDATE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" DATE DEFAULT SYSDATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("TPL_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_OUTPUT_TYPE

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_OUTPUT_TYPE" 
   (	"REPORT_TOOL" VARCHAR2(30 CHAR), 
	"OUTPUT_FORMAT" VARCHAR2(30 CHAR), 
	"OUTPUT_TYPE_CODE" VARCHAR2(40 CHAR), 
	"OUTPUT_TYPE_DESC" VARCHAR2(100 CHAR), 
	"CREATED_BY" VARCHAR2(50 CHAR) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 CHAR) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate, 
	"DISPLAY_SEQ" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table RA_PARAM_B1415

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_PARAM_B1415" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(4000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR), 
	"MULTI_VALUE_LIMIT" NUMBER(38,0), 
	"IS_MULTI_VALUE_NUMERIC" CHAR(1 CHAR), 
	"MULTI_VALUE_SEPARATOR" VARCHAR2(10 CHAR), 
	"MULTI_VALUE_OUT_SEPARATOR" VARCHAR2(10 CHAR), 
	"DS_ID2" NUMBER(38,0), 
	"LOV_QUERY2" VARCHAR2(4000 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_PARAM_B1815

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_PARAM_B1815" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(4000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR), 
	"MULTI_VALUE_LIMIT" NUMBER(38,0), 
	"IS_MULTI_VALUE_NUMERIC" CHAR(1 CHAR), 
	"MULTI_VALUE_SEPARATOR" VARCHAR2(10 CHAR), 
	"MULTI_VALUE_OUT_SEPARATOR" VARCHAR2(10 CHAR), 
	"DS_ID2" NUMBER(38,0), 
	"LOV_QUERY2" VARCHAR2(4000 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_PARAM_B_BKP1415

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_PARAM_B_BKP1415" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(4000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR), 
	"MULTI_VALUE_LIMIT" NUMBER(38,0), 
	"IS_MULTI_VALUE_NUMERIC" CHAR(1 CHAR), 
	"MULTI_VALUE_SEPARATOR" VARCHAR2(10 CHAR), 
	"MULTI_VALUE_OUT_SEPARATOR" VARCHAR2(10 CHAR), 
	"DS_ID2" NUMBER(38,0), 
	"LOV_QUERY2" VARCHAR2(4000 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_PARAM_DEPENDENCIES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_PARAM_DEPENDENCIES" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"DEPENDENCY_ID" NUMBER(38,0), 
	"PARENT_PARAMETER_ID" VARCHAR2(20 BYTE), 
	"LOV_QUERY_BIND_ORDER" NUMBER(38,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"SHOW_CHILD_WHEN_VALUE_IS" VARCHAR2(300 BYTE), 
	"TYPE" VARCHAR2(50 CHAR), 
	"REPORT_ID" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;


   COMMENT ON COLUMN "RPTAPP"."RA_PARAM_DEPENDENCIES"."TYPE" IS 'Type of dependency. ';
--------------------------------------------------------

--  DDL for Table RA_PARAM_DEPENENCY_REF

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_PARAM_DEPENENCY_REF" 
   (	"DEP_TYPE_ID" NUMBER(10,0), 
	"DEP_DESCRIPTION" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORTS_15017

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORTS_15017" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(2000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR), 
	"MULTI_VALUE_LIMIT" NUMBER(38,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORTS_B

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORTS_B" 
   (	"REPORT_ID" NUMBER(38,0), 
	"APP_ID" NUMBER(38,0), 
	"ID_ON_BI_SERVER" VARCHAR2(200 CHAR), 
	"REPORT_NAME_ON_BI_SERVER" VARCHAR2(100 CHAR), 
	"REPORT_PATH_ON_BI_SERVER" VARCHAR2(500 CHAR), 
	"DISPLAY_REPORT_NAME" VARCHAR2(150 CHAR), 
	"REPORT_DESCRIPTION" VARCHAR2(200 CHAR), 
	"BI_CATEGORY_ID" VARCHAR2(30 CHAR), 
	"SCHEDULING_ALLOWED" VARCHAR2(1 CHAR), 
	"MOVE_TO_ARCHIVE_AFTER_DAYS" NUMBER(2,0), 
	"PURGE_AFTER_DAYS" NUMBER(3,0), 
	"ARCHIVE_ALLLOWED" VARCHAR2(1 CHAR), 
	"ARCHIVE_FORMAT_TYPE" VARCHAR2(10 BYTE), 
	"DATA_SECURITY_ENABLED" CHAR(1 CHAR), 
	"REPORT_SHORT_NAME" VARCHAR2(30 CHAR), 
	"REPORT_TYPE" VARCHAR2(30 CHAR) DEFAULT 'STATIC', 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate, 
	"BI_REPORT_DIRECT_QUERY" VARCHAR2(4000 CHAR), 
	"BI_SERVER" VARCHAR2(30 CHAR), 
	"ACTIVE_IND" CHAR(1 BYTE), 
	"REPORT_TOOL" VARCHAR2(20 CHAR) DEFAULT 'INQUIRY', 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"IS_EXCEL_SUPPORTED" VARCHAR2(1 BYTE), 
	"EXCEL_TEMPLATE_NAME" VARCHAR2(100 BYTE), 
	"OUTPUT_STORAGE_TYPE" VARCHAR2(10 BYTE), 
	"DETAIL_REPORT_ID" NUMBER(*,0), 
	"USE_CACHE" CHAR(1 BYTE) DEFAULT 'Y', 
	"IS_CSV_SUPPORTED" CHAR(1 BYTE) DEFAULT 'Y', 
	"IS_PDF_SUPPORTED" CHAR(1 BYTE) DEFAULT 'N', 
	"IS_ONLINE_SUPPORTED" CHAR(1 BYTE) DEFAULT 'Y', 
	"REPORT_OUTPUT_LOCATION" VARCHAR2(2000 CHAR), 
	"IS_HTML_SUPPORTED" CHAR(1 BYTE) DEFAULT 'N', 
	"IS_HTML_MULTIPAGE_SUPPORTED" CHAR(1 BYTE) DEFAULT 'N', 
	"HTML_PAGE_MAX_RECORDS" NUMBER(38,0), 
	"OUTPUT_STORAGE_LIMIT_IN_MB" NUMBER, 
	"HTML_TPL_NAME" VARCHAR2(250 CHAR), 
	"EXTRA_META_DATA" CLOB, 
	"EXT_REPORT_ID" VARCHAR2(100 BYTE), 
	"MONGO_MULTI_VALUE_SEPARATOR" VARCHAR2(10 CHAR), 
	"DATA_ENCRYPTION_ENABLED" CHAR(1 BYTE) DEFAULT 'N', 
	"ALLOW_SUBMIT_BEYOND_THRESHOLD" CHAR(1 BYTE) DEFAULT 'N'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("EXTRA_META_DATA") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;


   COMMENT ON COLUMN "RPTAPP"."RA_REPORTS_B"."REPORT_ID" IS 'Autogenerated Sequence.';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORTS_B"."ID_ON_BI_SERVER" IS 'Uniquie ID from the BI server. Example CUID in BO';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORTS_B"."BI_REPORT_DIRECT_QUERY" IS 'Future Use for reports that use direct query.';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORTS_B"."BI_SERVER" IS 'BI Serveron which this report is deployed.';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORTS_B"."ACTIVE_IND" IS '''A'' - Active, ''I'' - Inactive/Decommissioned & ''D'' - Deprecated';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORTS_B"."DETAIL_REPORT_ID" IS 'detail report''s id, if the report_id is a master report. To establish master/detail reports.';
--------------------------------------------------------

--  DDL for Table RA_REPORTS_B_030814

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORTS_B_030814" 
   (	"REPORT_ID" NUMBER(38,0), 
	"APP_ID" NUMBER(38,0), 
	"ID_ON_BI_SERVER" VARCHAR2(200 CHAR), 
	"REPORT_NAME_ON_BI_SERVER" VARCHAR2(100 CHAR), 
	"REPORT_PATH_ON_BI_SERVER" VARCHAR2(500 CHAR), 
	"DISPLAY_REPORT_NAME" VARCHAR2(150 CHAR), 
	"REPORT_DESCRIPTION" VARCHAR2(200 CHAR), 
	"BI_CATEGORY_ID" VARCHAR2(30 CHAR), 
	"SCHEDULING_ALLOWED" VARCHAR2(1 CHAR), 
	"MOVE_TO_ARCHIVE_AFTER_DAYS" NUMBER(2,0), 
	"PURGE_AFTER_DAYS" NUMBER(3,0), 
	"ARCHIVE_ALLLOWED" VARCHAR2(1 CHAR), 
	"ARCHIVE_FORMAT_TYPE" VARCHAR2(10 BYTE), 
	"DATA_SECURITY_ENABLED" CHAR(1 CHAR), 
	"REPORT_SHORT_NAME" VARCHAR2(30 CHAR), 
	"REPORT_TYPE" VARCHAR2(30 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"BI_REPORT_DIRECT_QUERY" VARCHAR2(4000 CHAR), 
	"BI_SERVER" VARCHAR2(30 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"ACTIVE_IND" CHAR(1 BYTE), 
	"REPORT_TOOL" VARCHAR2(20 CHAR), 
	"QUERY_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"IS_EXCEL_SUPPORTED" VARCHAR2(1 BYTE), 
	"EXCEL_TEMPLATE_NAME" VARCHAR2(100 BYTE), 
	"OUTPUT_STORAGE_TYPE" VARCHAR2(10 BYTE), 
	"DETAIL_REPORT_ID" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORTS_B_0324

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORTS_B_0324" 
   (	"REPORT_ID" NUMBER(38,0), 
	"APP_ID" NUMBER(38,0), 
	"ID_ON_BI_SERVER" VARCHAR2(200 CHAR), 
	"REPORT_NAME_ON_BI_SERVER" VARCHAR2(100 CHAR), 
	"REPORT_PATH_ON_BI_SERVER" VARCHAR2(500 CHAR), 
	"DISPLAY_REPORT_NAME" VARCHAR2(150 CHAR), 
	"REPORT_DESCRIPTION" VARCHAR2(200 CHAR), 
	"BI_CATEGORY_ID" VARCHAR2(30 CHAR), 
	"SCHEDULING_ALLOWED" VARCHAR2(1 CHAR), 
	"MOVE_TO_ARCHIVE_AFTER_DAYS" NUMBER(2,0), 
	"PURGE_AFTER_DAYS" NUMBER(3,0), 
	"ARCHIVE_ALLLOWED" VARCHAR2(1 CHAR), 
	"ARCHIVE_FORMAT_TYPE" VARCHAR2(10 BYTE), 
	"DATA_SECURITY_ENABLED" CHAR(1 CHAR), 
	"REPORT_SHORT_NAME" VARCHAR2(30 CHAR), 
	"REPORT_TYPE" VARCHAR2(30 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"BI_REPORT_DIRECT_QUERY" VARCHAR2(4000 CHAR), 
	"BI_SERVER" VARCHAR2(30 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"ACTIVE_IND" CHAR(1 BYTE), 
	"REPORT_TOOL" VARCHAR2(20 CHAR), 
	"QUERY_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"IS_EXCEL_SUPPORTED" VARCHAR2(1 BYTE), 
	"EXCEL_TEMPLATE_NAME" VARCHAR2(100 BYTE), 
	"OUTPUT_STORAGE_TYPE" VARCHAR2(10 BYTE), 
	"DETAIL_REPORT_ID" NUMBER(*,0), 
	"USE_CACHE" CHAR(1 BYTE), 
	"IS_CSV_SUPPORTED" CHAR(1 BYTE) DEFAULT 'Y', 
	"IS_PDF_SUPPORTED" CHAR(1 BYTE) DEFAULT 'N'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORTS_B_BKP_20140410

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORTS_B_BKP_20140410" 
   (	"REPORT_ID" NUMBER(38,0), 
	"APP_ID" NUMBER(38,0), 
	"ID_ON_BI_SERVER" VARCHAR2(200 CHAR), 
	"REPORT_NAME_ON_BI_SERVER" VARCHAR2(100 CHAR), 
	"REPORT_PATH_ON_BI_SERVER" VARCHAR2(500 CHAR), 
	"DISPLAY_REPORT_NAME" VARCHAR2(150 CHAR), 
	"REPORT_DESCRIPTION" VARCHAR2(200 CHAR), 
	"BI_CATEGORY_ID" VARCHAR2(30 CHAR), 
	"SCHEDULING_ALLOWED" VARCHAR2(1 CHAR), 
	"MOVE_TO_ARCHIVE_AFTER_DAYS" NUMBER(2,0), 
	"PURGE_AFTER_DAYS" NUMBER(3,0), 
	"ARCHIVE_ALLLOWED" VARCHAR2(1 CHAR), 
	"ARCHIVE_FORMAT_TYPE" VARCHAR2(10 BYTE), 
	"DATA_SECURITY_ENABLED" CHAR(1 CHAR), 
	"REPORT_SHORT_NAME" VARCHAR2(30 CHAR), 
	"REPORT_TYPE" VARCHAR2(30 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"BI_REPORT_DIRECT_QUERY" VARCHAR2(4000 CHAR), 
	"BI_SERVER" VARCHAR2(30 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"ACTIVE_IND" CHAR(1 BYTE), 
	"REPORT_TOOL" VARCHAR2(20 CHAR), 
	"QUERY_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"IS_EXCEL_SUPPORTED" VARCHAR2(1 BYTE), 
	"EXCEL_TEMPLATE_NAME" VARCHAR2(100 BYTE), 
	"OUTPUT_STORAGE_TYPE" VARCHAR2(10 BYTE), 
	"DETAIL_REPORT_ID" NUMBER(*,0), 
	"USE_CACHE" CHAR(1 BYTE), 
	"IS_CSV_SUPPORTED" CHAR(1 BYTE), 
	"IS_PDF_SUPPORTED" CHAR(1 BYTE), 
	"IS_ONLINE_SUPPORTED" CHAR(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORTS_B_CN

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORTS_B_CN" 
   (	"REPORT_ID" NUMBER(38,0), 
	"APP_ID" NUMBER(38,0), 
	"ID_ON_BI_SERVER" VARCHAR2(200 CHAR), 
	"REPORT_NAME_ON_BI_SERVER" VARCHAR2(100 CHAR), 
	"REPORT_PATH_ON_BI_SERVER" VARCHAR2(500 CHAR), 
	"DISPLAY_REPORT_NAME" VARCHAR2(150 CHAR), 
	"REPORT_DESCRIPTION" VARCHAR2(200 CHAR), 
	"BI_CATEGORY_ID" VARCHAR2(30 CHAR), 
	"SCHEDULING_ALLOWED" VARCHAR2(1 CHAR), 
	"MOVE_TO_ARCHIVE_AFTER_DAYS" NUMBER(2,0), 
	"PURGE_AFTER_DAYS" NUMBER(3,0), 
	"ARCHIVE_ALLLOWED" VARCHAR2(1 CHAR), 
	"ARCHIVE_FORMAT_TYPE" VARCHAR2(10 BYTE), 
	"DATA_SECURITY_ENABLED" CHAR(1 CHAR), 
	"REPORT_SHORT_NAME" VARCHAR2(30 CHAR), 
	"REPORT_TYPE" VARCHAR2(30 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"BI_REPORT_DIRECT_QUERY" VARCHAR2(4000 CHAR), 
	"BI_SERVER" VARCHAR2(30 CHAR), 
	"ACTIVE_IND" CHAR(1 BYTE), 
	"REPORT_TOOL" VARCHAR2(20 CHAR), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"IS_EXCEL_SUPPORTED" VARCHAR2(1 BYTE), 
	"EXCEL_TEMPLATE_NAME" VARCHAR2(100 BYTE), 
	"OUTPUT_STORAGE_TYPE" VARCHAR2(10 BYTE), 
	"DETAIL_REPORT_ID" NUMBER(*,0), 
	"USE_CACHE" CHAR(1 BYTE), 
	"IS_CSV_SUPPORTED" CHAR(1 BYTE), 
	"IS_PDF_SUPPORTED" CHAR(1 BYTE), 
	"IS_ONLINE_SUPPORTED" CHAR(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORTS_B_IMP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORTS_B_IMP" 
   (	"REPORT_ID" NUMBER(38,0), 
	"APP_ID" NUMBER(38,0), 
	"ID_ON_BI_SERVER" VARCHAR2(200 CHAR), 
	"REPORT_NAME_ON_BI_SERVER" VARCHAR2(100 CHAR), 
	"REPORT_PATH_ON_BI_SERVER" VARCHAR2(500 CHAR), 
	"DISPLAY_REPORT_NAME" VARCHAR2(150 CHAR), 
	"REPORT_DESCRIPTION" VARCHAR2(200 CHAR), 
	"BI_CATEGORY_ID" VARCHAR2(30 CHAR), 
	"SCHEDULING_ALLOWED" VARCHAR2(1 CHAR), 
	"MOVE_TO_ARCHIVE_AFTER_DAYS" NUMBER(2,0), 
	"PURGE_AFTER_DAYS" NUMBER(3,0), 
	"ARCHIVE_ALLLOWED" VARCHAR2(1 CHAR), 
	"ARCHIVE_FORMAT_TYPE" VARCHAR2(10 BYTE), 
	"DATA_SECURITY_ENABLED" CHAR(1 CHAR), 
	"REPORT_SHORT_NAME" VARCHAR2(30 CHAR), 
	"REPORT_TYPE" VARCHAR2(30 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"BI_REPORT_DIRECT_QUERY" VARCHAR2(4000 CHAR), 
	"BI_SERVER" VARCHAR2(30 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"ACTIVE_IND" CHAR(1 BYTE), 
	"REPORT_TOOL" VARCHAR2(20 CHAR), 
	"QUERY_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"IS_EXCEL_SUPPORTED" VARCHAR2(1 BYTE), 
	"EXCEL_TEMPLATE_NAME" VARCHAR2(100 BYTE), 
	"OUTPUT_STORAGE_TYPE" VARCHAR2(10 BYTE), 
	"DETAIL_REPORT_ID" NUMBER(*,0), 
	"USE_CACHE" CHAR(1 BYTE), 
	"IS_CSV_SUPPORTED" CHAR(1 BYTE), 
	"IS_PDF_SUPPORTED" CHAR(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORTS_B_OFS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORTS_B_OFS" 
   (	"REPORT_ID" NUMBER(38,0), 
	"APP_ID" NUMBER(38,0), 
	"ID_ON_BI_SERVER" VARCHAR2(200 CHAR), 
	"REPORT_NAME_ON_BI_SERVER" VARCHAR2(100 CHAR), 
	"REPORT_PATH_ON_BI_SERVER" VARCHAR2(500 CHAR), 
	"DISPLAY_REPORT_NAME" VARCHAR2(150 CHAR), 
	"REPORT_DESCRIPTION" VARCHAR2(200 CHAR), 
	"BI_CATEGORY_ID" VARCHAR2(30 CHAR), 
	"SCHEDULING_ALLOWED" VARCHAR2(1 CHAR), 
	"MOVE_TO_ARCHIVE_AFTER_DAYS" NUMBER(2,0), 
	"PURGE_AFTER_DAYS" NUMBER(3,0), 
	"ARCHIVE_ALLLOWED" VARCHAR2(1 CHAR), 
	"ARCHIVE_FORMAT_TYPE" VARCHAR2(10 BYTE), 
	"DATA_SECURITY_ENABLED" CHAR(1 CHAR), 
	"REPORT_SHORT_NAME" VARCHAR2(30 CHAR), 
	"REPORT_TYPE" VARCHAR2(30 CHAR) DEFAULT 'STATIC', 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate, 
	"BI_REPORT_DIRECT_QUERY" VARCHAR2(4000 CHAR), 
	"BI_SERVER" VARCHAR2(30 CHAR), 
	"ACTIVE_IND" CHAR(1 BYTE), 
	"REPORT_TOOL" VARCHAR2(20 CHAR) DEFAULT 'INQUIRY', 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"IS_EXCEL_SUPPORTED" VARCHAR2(1 BYTE), 
	"EXCEL_TEMPLATE_NAME" VARCHAR2(100 BYTE), 
	"OUTPUT_STORAGE_TYPE" VARCHAR2(10 BYTE), 
	"DETAIL_REPORT_ID" NUMBER(*,0), 
	"USE_CACHE" CHAR(1 BYTE) DEFAULT 'Y', 
	"IS_CSV_SUPPORTED" CHAR(1 BYTE) DEFAULT 'Y', 
	"IS_PDF_SUPPORTED" CHAR(1 BYTE) DEFAULT 'N', 
	"IS_ONLINE_SUPPORTED" CHAR(1 BYTE) DEFAULT 'Y', 
	"REPORT_OUTPUT_LOCATION" VARCHAR2(2000 CHAR), 
	"IS_HTML_SUPPORTED" CHAR(1 BYTE) DEFAULT 'N', 
	"IS_HTML_MULTIPAGE_SUPPORTED" CHAR(1 BYTE) DEFAULT 'N', 
	"HTML_PAGE_MAX_RECORDS" NUMBER(38,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORTS_B_SOJI

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORTS_B_SOJI" 
   (	"REPORT_ID" NUMBER(38,0), 
	"APP_ID" NUMBER(38,0), 
	"ID_ON_BI_SERVER" VARCHAR2(200 CHAR), 
	"REPORT_NAME_ON_BI_SERVER" VARCHAR2(100 CHAR), 
	"REPORT_PATH_ON_BI_SERVER" VARCHAR2(500 CHAR), 
	"DISPLAY_REPORT_NAME" VARCHAR2(150 CHAR), 
	"REPORT_DESCRIPTION" VARCHAR2(200 CHAR), 
	"BI_CATEGORY_ID" VARCHAR2(30 CHAR), 
	"SCHEDULING_ALLOWED" VARCHAR2(1 CHAR), 
	"MOVE_TO_ARCHIVE_AFTER_DAYS" NUMBER(2,0), 
	"PURGE_AFTER_DAYS" NUMBER(3,0), 
	"ARCHIVE_ALLLOWED" VARCHAR2(1 CHAR), 
	"ARCHIVE_FORMAT_TYPE" VARCHAR2(10 BYTE), 
	"DATA_SECURITY_ENABLED" CHAR(1 CHAR), 
	"REPORT_SHORT_NAME" VARCHAR2(30 CHAR), 
	"REPORT_TYPE" VARCHAR2(30 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"BI_REPORT_DIRECT_QUERY" VARCHAR2(4000 CHAR), 
	"BI_SERVER" VARCHAR2(30 CHAR), 
	"ACTIVE_IND" CHAR(1 BYTE), 
	"REPORT_TOOL" VARCHAR2(20 CHAR), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"IS_EXCEL_SUPPORTED" VARCHAR2(1 BYTE), 
	"EXCEL_TEMPLATE_NAME" VARCHAR2(100 BYTE), 
	"OUTPUT_STORAGE_TYPE" VARCHAR2(10 BYTE), 
	"DETAIL_REPORT_ID" NUMBER(*,0), 
	"USE_CACHE" CHAR(1 BYTE), 
	"IS_CSV_SUPPORTED" CHAR(1 BYTE), 
	"IS_PDF_SUPPORTED" CHAR(1 BYTE), 
	"IS_ONLINE_SUPPORTED" CHAR(1 BYTE), 
	"REPORT_OUTPUT_LOCATION" VARCHAR2(2000 CHAR), 
	"IS_HTML_SUPPORTED" CHAR(1 BYTE), 
	"IS_HTML_MULTIPAGE_SUPPORTED" CHAR(1 BYTE), 
	"HTML_PAGE_MAX_RECORDS" NUMBER(38,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORTS_B_T

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORTS_B_T" 
   (	"REPORT_ID" NUMBER(38,0), 
	"APP_ID" NUMBER(38,0), 
	"ID_ON_BI_SERVER" VARCHAR2(200 CHAR), 
	"REPORT_NAME_ON_BI_SERVER" VARCHAR2(100 CHAR), 
	"REPORT_PATH_ON_BI_SERVER" VARCHAR2(500 CHAR), 
	"DISPLAY_REPORT_NAME" VARCHAR2(150 CHAR), 
	"REPORT_DESCRIPTION" VARCHAR2(200 CHAR), 
	"BI_CATEGORY_ID" VARCHAR2(30 CHAR), 
	"SCHEDULING_ALLOWED" VARCHAR2(1 CHAR), 
	"MOVE_TO_ARCHIVE_AFTER_DAYS" NUMBER(2,0), 
	"PURGE_AFTER_DAYS" NUMBER(3,0), 
	"ARCHIVE_ALLLOWED" VARCHAR2(1 CHAR), 
	"ARCHIVE_FORMAT_TYPE" VARCHAR2(10 BYTE), 
	"DATA_SECURITY_ENABLED" CHAR(1 CHAR), 
	"REPORT_SHORT_NAME" VARCHAR2(30 CHAR), 
	"REPORT_TYPE" VARCHAR2(30 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"BI_REPORT_DIRECT_QUERY" VARCHAR2(4000 CHAR), 
	"BI_SERVER" VARCHAR2(30 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"ACTIVE_IND" CHAR(1 BYTE), 
	"REPORT_TOOL" VARCHAR2(20 CHAR), 
	"QUERY_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"IS_EXCEL_SUPPORTED" VARCHAR2(1 BYTE), 
	"EXCEL_TEMPLATE_NAME" VARCHAR2(100 BYTE), 
	"OUTPUT_STORAGE_TYPE" VARCHAR2(10 BYTE), 
	"DETAIL_REPORT_ID" NUMBER(*,0), 
	"USE_CACHE" CHAR(1 BYTE) DEFAULT 'Y'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORTS_B_TEST

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORTS_B_TEST" 
   (	"REPORT_ID" NUMBER(38,0), 
	"APP_ID" NUMBER(38,0), 
	"ID_ON_BI_SERVER" VARCHAR2(200 CHAR), 
	"REPORT_NAME_ON_BI_SERVER" VARCHAR2(100 CHAR), 
	"REPORT_PATH_ON_BI_SERVER" VARCHAR2(500 CHAR), 
	"DISPLAY_REPORT_NAME" VARCHAR2(150 CHAR), 
	"REPORT_DESCRIPTION" VARCHAR2(200 CHAR), 
	"BI_CATEGORY_ID" VARCHAR2(30 CHAR), 
	"SCHEDULING_ALLOWED" VARCHAR2(1 CHAR), 
	"MOVE_TO_ARCHIVE_AFTER_DAYS" NUMBER(2,0), 
	"PURGE_AFTER_DAYS" NUMBER(3,0), 
	"ARCHIVE_ALLLOWED" VARCHAR2(1 CHAR), 
	"ARCHIVE_FORMAT_TYPE" VARCHAR2(10 BYTE), 
	"DATA_SECURITY_ENABLED" CHAR(1 CHAR), 
	"REPORT_SHORT_NAME" VARCHAR2(30 CHAR), 
	"REPORT_TYPE" VARCHAR2(30 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"BI_REPORT_DIRECT_QUERY" VARCHAR2(4000 CHAR), 
	"BI_SERVER" VARCHAR2(30 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"ACTIVE_IND" CHAR(1 BYTE), 
	"REPORT_TOOL" VARCHAR2(20 CHAR), 
	"QUERY_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"IS_EXCEL_SUPPORTED" VARCHAR2(1 BYTE), 
	"EXCEL_TEMPLATE_NAME" VARCHAR2(100 BYTE), 
	"OUTPUT_STORAGE_TYPE" VARCHAR2(10 BYTE), 
	"DETAIL_REPORT_ID" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORTS_SOJI

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORTS_SOJI" 
   (	"REPORT_ID" NUMBER(38,0), 
	"APP_ID" NUMBER(38,0), 
	"ID_ON_BI_SERVER" VARCHAR2(200 CHAR), 
	"REPORT_NAME_ON_BI_SERVER" VARCHAR2(100 CHAR), 
	"REPORT_PATH_ON_BI_SERVER" VARCHAR2(500 CHAR), 
	"DISPLAY_REPORT_NAME" VARCHAR2(150 CHAR), 
	"REPORT_DESCRIPTION" VARCHAR2(200 CHAR), 
	"BI_CATEGORY_ID" VARCHAR2(30 CHAR), 
	"SCHEDULING_ALLOWED" VARCHAR2(1 CHAR), 
	"MOVE_TO_ARCHIVE_AFTER_DAYS" NUMBER(2,0), 
	"PURGE_AFTER_DAYS" NUMBER(3,0), 
	"ARCHIVE_ALLLOWED" VARCHAR2(1 CHAR), 
	"ARCHIVE_FORMAT_TYPE" VARCHAR2(10 BYTE), 
	"DATA_SECURITY_ENABLED" CHAR(1 CHAR), 
	"REPORT_SHORT_NAME" VARCHAR2(30 CHAR), 
	"REPORT_TYPE" VARCHAR2(30 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"BI_REPORT_DIRECT_QUERY" VARCHAR2(4000 CHAR), 
	"BI_SERVER" VARCHAR2(30 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"ACTIVE_IND" CHAR(1 BYTE), 
	"REPORT_TOOL" VARCHAR2(20 CHAR), 
	"QUERY_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"IS_EXCEL_SUPPORTED" VARCHAR2(1 BYTE), 
	"EXCEL_TEMPLATE_NAME" VARCHAR2(100 BYTE), 
	"OUTPUT_STORAGE_TYPE" VARCHAR2(10 BYTE), 
	"DETAIL_REPORT_ID" NUMBER(*,0), 
	"USE_CACHE" CHAR(1 BYTE), 
	"IS_CSV_SUPPORTED" CHAR(1 BYTE), 
	"IS_PDF_SUPPORTED" CHAR(1 BYTE), 
	"IS_ONLINE_SUPPORTED" CHAR(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORTS_TL

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORTS_TL" 
   (	"REPORT_ID" NUMBER(38,0), 
	"LANGUAGE" VARCHAR2(25 CHAR), 
	"BASE_LANGUAGE" VARCHAR2(25 CHAR), 
	"DISPLAY_REPORT_NAME" VARCHAR2(150 CHAR), 
	"REPORT_DESCRIPTION" VARCHAR2(200 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_FILT_CRTA

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_FILT_CRTA" 
   (	"RPT_FILT_CRTA_ID" NUMBER, 
	"ATTR_ID" NUMBER, 
	"REPORT_ID" NUMBER, 
	"ATTR_FILT_TYP" VARCHAR2(100 BYTE), 
	"FILT_OPER_ID" VARCHAR2(30 BYTE), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PROMPT_IND" VARCHAR2(2 CHAR), 
	"ATTR_FILT_VAL" CLOB, 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"LOV_DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(4000 CHAR), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"MULTI_VALUE_LIMIT" NUMBER(38,0), 
	"MULTI_VALUE_SEPARATOR" VARCHAR2(10 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" 
 LOB ("ATTR_FILT_VAL") STORE AS BASICFILE (
  TABLESPACE "RPTAPP_DATA" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_INSTANCES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_INSTANCES" 
   (	"RUN_ID" NUMBER(*,0), 
	"REPORT_ID" NUMBER(38,0), 
	"BI_INSTANCE_ID" NUMBER, 
	"INSTANCE_NAME" VARCHAR2(150 BYTE), 
	"OUTPUT_TYPE" VARCHAR2(30 BYTE), 
	"OUTPUT_PATH" VARCHAR2(4000 BYTE), 
	"SUBMITTED_BY_SOEID" VARCHAR2(25 CHAR), 
	"STATUS" NUMBER(38,0), 
	"START_TIME" DATE, 
	"END_TIME" DATE, 
	"TEMPLATE_ID" NUMBER(*,0), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate, 
	"FAILED_REASON" CLOB, 
	"ORIGINAL_RUN_ID" NUMBER(*,0), 
	"PROCESSING_STATUS" NUMBER(*,0) DEFAULT 0, 
	"EVENT_INSTANCE_ID" NUMBER(*,0), 
	"SUBSCRIPTION_ID" NUMBER(*,0), 
	"REASON" VARCHAR2(4000 BYTE), 
	"USER_SCHEDULE_ID" NUMBER(38,0), 
	"TRIGGERED_BY" VARCHAR2(10 CHAR) DEFAULT 'USER', 
	"USER_ID" VARCHAR2(25 CHAR), 
	"CONCATENATED_PROMPTS" VARCHAR2(4000 CHAR), 
	"OUTPUT_FILE_SIZE" NUMBER, 
	"OUTPUT_NUM_OF_ROWS" NUMBER, 
	"OUTPUT_COMPRESSED_FILE_SIZE" NUMBER, 
	"IS_MAXROWS_EXCEED" CHAR(1 BYTE), 
	"QUERY_START_TIME" TIMESTAMP (6), 
	"QUERY_END_TIME" TIMESTAMP (6), 
	"ACTIVE_IND" CHAR(1 BYTE) DEFAULT 'Y', 
	"IS_SUBMITTED_BY_EXTR_SYS" CHAR(1 BYTE), 
	"IS_ONLINE_AVAILABLE" CHAR(1 BYTE), 
	"ONLINE_ERROR" VARCHAR2(500 BYTE), 
	"EXTR_SYS_CALLBACK_URL" VARCHAR2(500 CHAR), 
	"MONGO_DOC_SIZE" NUMBER, 
	"IS_PARTIAL_RESULT" CHAR(1 BYTE) DEFAULT 'N', 
	"IS_STOPPED" CHAR(1 BYTE) DEFAULT 'N', 
	"IS_QURY_EXEC_TIMED_OUT" CHAR(1 BYTE) DEFAULT 'N', 
	"IS_QURY_EXTRACT_TIMED_OUT" CHAR(1 BYTE) DEFAULT 'N', 
	"DOMAIN_CODE" VARCHAR2(100 BYTE), 
	"HOST_NAME" VARCHAR2(100 BYTE), 
	"HOST_NODE" VARCHAR2(10 BYTE), 
	"PARENT_RUN_ID" NUMBER(38,0), 
	"IS_FORCE_RERUN" CHAR(1 CHAR) DEFAULT 'N', 
	"SUBMIT_HOST_NAME" VARCHAR2(100 BYTE), 
	"SUBMIT_HOST_NODE" VARCHAR2(10 BYTE), 
	"LOGGED_IN_SOEID" VARCHAR2(25 CHAR), 
	"OUTPUT_TYPE_CODE" VARCHAR2(30 BYTE), 
	"IS_QRY_EXTRCT_TIME_EXCEED" CHAR(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("FAILED_REASON") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;


   COMMENT ON COLUMN "RPTAPP"."RA_REPORT_INSTANCES"."TEMPLATE_ID" IS 'If a user runs a variant, then variant id is also populated.';
--------------------------------------------------------

--  DDL for Table RA_REPORT_INSTANCES_SS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_INSTANCES_SS" 
   (	"RUN_ID" NUMBER(*,0), 
	"REPORT_ID" NUMBER(38,0), 
	"BI_INSTANCE_ID" NUMBER, 
	"INSTANCE_NAME" VARCHAR2(150 BYTE), 
	"OUTPUT_TYPE" VARCHAR2(30 BYTE), 
	"OUTPUT_PATH" VARCHAR2(4000 BYTE), 
	"SUBMITTED_BY_SOEID" VARCHAR2(25 CHAR), 
	"STATUS" NUMBER(38,0), 
	"START_TIME" DATE, 
	"END_TIME" DATE, 
	"TEMPLATE_ID" NUMBER(*,0), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"FAILED_REASON" CLOB, 
	"ORIGINAL_RUN_ID" NUMBER(*,0), 
	"PROCESSING_STATUS" NUMBER(*,0), 
	"EVENT_INSTANCE_ID" NUMBER(*,0), 
	"SUBSCRIPTION_ID" NUMBER(*,0), 
	"REASON" VARCHAR2(500 CHAR), 
	"USER_SCHEDULE_ID" NUMBER(38,0), 
	"TRIGGERED_BY" VARCHAR2(10 CHAR), 
	"USER_ID" VARCHAR2(25 CHAR), 
	"CONCATENATED_PROMPTS" VARCHAR2(4000 CHAR), 
	"OUTPUT_FILE_SIZE" NUMBER, 
	"OUTPUT_NUM_OF_ROWS" NUMBER, 
	"OUTPUT_COMPRESSED_FILE_SIZE" NUMBER, 
	"IS_MAXROWS_EXCEED" CHAR(1 BYTE), 
	"QUERY_START_TIME" TIMESTAMP (6), 
	"QUERY_END_TIME" TIMESTAMP (6), 
	"ACTIVE_IND" CHAR(1 BYTE), 
	"IS_SUBMITTED_BY_EXTR_SYS" CHAR(1 BYTE), 
	"IS_ONLINE_AVAILABLE" CHAR(1 BYTE), 
	"ONLINE_ERROR" VARCHAR2(500 BYTE), 
	"EXTR_SYS_CALLBACK_URL" VARCHAR2(500 CHAR), 
	"MONGO_DOC_SIZE" NUMBER, 
	"IS_PARTIAL_RESULT" CHAR(1 BYTE), 
	"IS_STOPPED" CHAR(1 BYTE), 
	"IS_QURY_EXEC_TIMED_OUT" CHAR(1 BYTE), 
	"IS_QURY_EXTRACT_TIMED_OUT" CHAR(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("FAILED_REASON") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_INSTANCES_SSS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_INSTANCES_SSS" 
   (	"RUN_ID" NUMBER(*,0), 
	"REPORT_ID" NUMBER(38,0), 
	"BI_INSTANCE_ID" NUMBER, 
	"INSTANCE_NAME" VARCHAR2(150 BYTE), 
	"OUTPUT_TYPE" VARCHAR2(30 BYTE), 
	"OUTPUT_PATH" VARCHAR2(4000 BYTE), 
	"SUBMITTED_BY_SOEID" VARCHAR2(25 CHAR), 
	"STATUS" NUMBER(38,0), 
	"START_TIME" DATE, 
	"END_TIME" DATE, 
	"TEMPLATE_ID" NUMBER(*,0), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"FAILED_REASON" CLOB, 
	"ORIGINAL_RUN_ID" NUMBER(*,0), 
	"PROCESSING_STATUS" NUMBER(*,0), 
	"EVENT_INSTANCE_ID" NUMBER(*,0), 
	"SUBSCRIPTION_ID" NUMBER(*,0), 
	"REASON" VARCHAR2(500 CHAR), 
	"USER_SCHEDULE_ID" NUMBER(38,0), 
	"TRIGGERED_BY" VARCHAR2(10 CHAR), 
	"USER_ID" VARCHAR2(25 CHAR), 
	"CONCATENATED_PROMPTS" VARCHAR2(4000 CHAR), 
	"OUTPUT_FILE_SIZE" NUMBER, 
	"OUTPUT_NUM_OF_ROWS" NUMBER, 
	"OUTPUT_COMPRESSED_FILE_SIZE" NUMBER, 
	"IS_MAXROWS_EXCEED" CHAR(1 BYTE), 
	"QUERY_START_TIME" TIMESTAMP (6), 
	"QUERY_END_TIME" TIMESTAMP (6), 
	"ACTIVE_IND" CHAR(1 BYTE), 
	"IS_SUBMITTED_BY_EXTR_SYS" CHAR(1 BYTE), 
	"IS_ONLINE_AVAILABLE" CHAR(1 BYTE), 
	"ONLINE_ERROR" VARCHAR2(500 BYTE), 
	"EXTR_SYS_CALLBACK_URL" VARCHAR2(500 CHAR), 
	"MONGO_DOC_SIZE" NUMBER, 
	"IS_PARTIAL_RESULT" CHAR(1 BYTE), 
	"IS_STOPPED" CHAR(1 BYTE), 
	"IS_QURY_EXEC_TIMED_OUT" CHAR(1 BYTE), 
	"IS_QURY_EXTRACT_TIMED_OUT" CHAR(1 BYTE), 
	"DS_DOMAIN_CODE" VARCHAR2(250 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("FAILED_REASON") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_INSTANCES_TEST

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_INSTANCES_TEST" 
   (	"RUN_ID" NUMBER(*,0), 
	"REPORT_ID" NUMBER(38,0), 
	"BI_INSTANCE_ID" NUMBER, 
	"INSTANCE_NAME" VARCHAR2(150 BYTE), 
	"OUTPUT_TYPE" VARCHAR2(30 BYTE), 
	"OUTPUT_PATH" VARCHAR2(4000 BYTE), 
	"SUBMITTED_BY_SOEID" VARCHAR2(25 CHAR), 
	"STATUS" NUMBER(38,0), 
	"START_TIME" DATE, 
	"END_TIME" DATE, 
	"TEMPLATE_ID" NUMBER(*,0), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"FAILED_REASON" CLOB, 
	"ORIGINAL_RUN_ID" NUMBER(*,0), 
	"PROCESSING_STATUS" NUMBER(*,0), 
	"EVENT_INSTANCE_ID" NUMBER(*,0), 
	"SUBSCRIPTION_ID" NUMBER(*,0), 
	"REASON" VARCHAR2(4000 BYTE), 
	"USER_SCHEDULE_ID" NUMBER(38,0), 
	"TRIGGERED_BY" VARCHAR2(10 CHAR), 
	"USER_ID" VARCHAR2(25 CHAR), 
	"CONCATENATED_PROMPTS" VARCHAR2(4000 CHAR), 
	"OUTPUT_FILE_SIZE" NUMBER, 
	"OUTPUT_NUM_OF_ROWS" NUMBER, 
	"OUTPUT_COMPRESSED_FILE_SIZE" NUMBER, 
	"IS_MAXROWS_EXCEED" CHAR(1 BYTE), 
	"QUERY_START_TIME" TIMESTAMP (6), 
	"QUERY_END_TIME" TIMESTAMP (6), 
	"ACTIVE_IND" CHAR(1 BYTE), 
	"IS_SUBMITTED_BY_EXTR_SYS" CHAR(1 BYTE), 
	"IS_ONLINE_AVAILABLE" CHAR(1 BYTE), 
	"ONLINE_ERROR" VARCHAR2(500 BYTE), 
	"EXTR_SYS_CALLBACK_URL" VARCHAR2(500 CHAR), 
	"MONGO_DOC_SIZE" NUMBER, 
	"IS_PARTIAL_RESULT" CHAR(1 BYTE), 
	"IS_STOPPED" CHAR(1 BYTE), 
	"IS_QURY_EXEC_TIMED_OUT" CHAR(1 BYTE), 
	"IS_QURY_EXTRACT_TIMED_OUT" CHAR(1 BYTE), 
	"DOMAIN_CODE" VARCHAR2(100 BYTE), 
	"HOST_NAME" VARCHAR2(100 BYTE), 
	"HOST_NODE" VARCHAR2(10 BYTE), 
	"PARENT_RUN_ID" NUMBER(38,0), 
	"IS_FORCE_RERUN" CHAR(1 CHAR), 
	"SUBMIT_HOST_NAME" VARCHAR2(100 BYTE), 
	"SUBMIT_HOST_NODE" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("FAILED_REASON") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_INST_INFO

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_INST_INFO" 
   (	"RUN_ID" NUMBER(38,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_PARAMS" CLOB, 
	"CREATED_BY" VARCHAR2(50 CHAR), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 CHAR), 
	"LAST_UPDATE_DTM" DATE, 
	"REPORT_ID" NUMBER(38,0), 
	"QUERY_ID" NUMBER(38,0), 
	"Q_START_TIME" TIMESTAMP (6), 
	"Q_END_TIME" TIMESTAMP (6), 
	"Q_RESULT_END_TIME" TIMESTAMP (6), 
	"Q_FAILED_TIME" TIMESTAMP (6), 
	"MONGODB_REPORT_SIZE" NUMBER(38,0), 
	"SQL_ERROR_CODE" VARCHAR2(50 BYTE), 
	"SQL_ERROR_MSG" VARCHAR2(1000 BYTE), 
	"FAILED_REASON" CLOB, 
	"DATASET_NAME" VARCHAR2(100 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("QUERY_PARAMS") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("FAILED_REASON") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_INST_QRY_PROGRESS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_INST_QRY_PROGRESS" 
   (	"RUN_ID" NUMBER(*,0), 
	"REPORT_ID" NUMBER(38,0), 
	"QUERY_ID" NUMBER(38,0), 
	"QUERY_ACTION_NAME" VARCHAR2(50 BYTE), 
	"QUERY_ACTION_TIME" TIMESTAMP (6), 
	"RECORD_COUNT" NUMBER(38,0), 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) DEFAULT systimestamp
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_LDAP_GROUPS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_LDAP_GROUPS" 
   (	"REPORT_ID" NUMBER(38,0), 
	"LDAP_GROUP_NAME" VARCHAR2(150 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_LDAP_GROUPS1

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_LDAP_GROUPS1" 
   (	"REPORT_ID" NUMBER(38,0), 
	"LDAP_GROUP_NAME" VARCHAR2(150 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_LDAP_GROUPS_1

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_LDAP_GROUPS_1" 
   (	"REPORT_ID" NUMBER(38,0), 
	"LDAP_GROUP_NAME" VARCHAR2(150 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_LDAP_GROUPS_20141009

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_LDAP_GROUPS_20141009" 
   (	"REPORT_ID" NUMBER(38,0), 
	"LDAP_GROUP_NAME" VARCHAR2(150 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_LDAP_GROUPS_20141092

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_LDAP_GROUPS_20141092" 
   (	"REPORT_ID" NUMBER(38,0), 
	"LDAP_GROUP_NAME" VARCHAR2(150 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_LDAP_GROUPS_BKP_KV

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_LDAP_GROUPS_BKP_KV" 
   (	"REPORT_ID" NUMBER(38,0), 
	"LDAP_GROUP_NAME" VARCHAR2(150 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_LDAP_GROUPS_CN

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_LDAP_GROUPS_CN" 
   (	"REPORT_ID" NUMBER(38,0), 
	"LDAP_GROUP_NAME" VARCHAR2(150 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_LDAP_GROUPS_OFS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_LDAP_GROUPS_OFS" 
   (	"REPORT_ID" NUMBER(38,0), 
	"LDAP_GROUP_NAME" VARCHAR2(150 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_LDAP_GROUPS_SOJI

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_LDAP_GROUPS_SOJI" 
   (	"REPORT_ID" NUMBER(38,0), 
	"LDAP_GROUP_NAME" VARCHAR2(150 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_LDAP_GRPS_BKP_SR

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_LDAP_GRPS_BKP_SR" 
   (	"REPORT_ID" NUMBER(38,0), 
	"LDAP_GROUP_NAME" VARCHAR2(150 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_META_DETAILS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_META_DETAILS" 
   (	"RPT_VERSION" NUMBER, 
	"TABLE_NAME" VARCHAR2(100 BYTE), 
	"COLUMN_NAME" VARCHAR2(100 BYTE), 
	"COMMENTS" VARCHAR2(200 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_META_DETAILS_T

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_META_DETAILS_T" 
   (	"RPT_VERSION" NUMBER, 
	"TABLE_NAME" VARCHAR2(100 BYTE), 
	"COLUMN_NAME" VARCHAR2(100 BYTE), 
	"COMMENTS" VARCHAR2(200 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"IS_REPORT_META" CHAR(1 BYTE) DEFAULT 'Y', 
	"IS_KEY_COLUMN" CHAR(1 BYTE) DEFAULT 'N'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_OUTPUT_TEMPLATES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_OUTPUT_TEMPLATES" 
   (	"REPORT_ID" NUMBER, 
	"DFLT_TEMPLATE_ID" NUMBER, 
	"TPL_TEXT" CLOB, 
	"TPL_TYPE" VARCHAR2(250 CHAR), 
	"QUERY_SEQ" NUMBER, 
	"TPL_LANGUAGE" VARCHAR2(100 CHAR), 
	"TPL_COMMENTS" VARCHAR2(500 CHAR), 
	"TPL_ADDL_PROPERTIES" VARCHAR2(4000 CHAR), 
	"TPL_FILE_NAME" VARCHAR2(200 CHAR), 
	"PAGE_NAME" VARCHAR2(50 CHAR), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" DATE DEFAULT SYSDATE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" DATE DEFAULT SYSDATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" 
 LOB ("TPL_TEXT") STORE AS BASICFILE (
  TABLESPACE "RPTAPP_DATA" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_OUTPUT_TYPE

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_OUTPUT_TYPE" 
   (	"REPORT_ID" NUMBER, 
	"OUTPUT_TYPE_CODE" VARCHAR2(40 CHAR), 
	"OUTPUT_TYPE_DESC" VARCHAR2(100 CHAR), 
	"DISPLAY_SEQ" NUMBER, 
	"CREATED_BY" VARCHAR2(50 CHAR) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 CHAR) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_PARAMETERS_0403

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_PARAMETERS_0403" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(2000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_PARAMETERS_15016

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_PARAMETERS_15016" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(2000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR), 
	"MULTI_VALUE_LIMIT" NUMBER(38,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_PARAMETERS_B

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_PARAMETERS_B" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(4000 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(4000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR), 
	"MULTI_VALUE_LIMIT" NUMBER(38,0), 
	"IS_MULTI_VALUE_NUMERIC" CHAR(1 CHAR) DEFAULT 'N', 
	"MULTI_VALUE_SEPARATOR" VARCHAR2(10 CHAR), 
	"MULTI_VALUE_OUT_SEPARATOR" VARCHAR2(10 CHAR), 
	"DS_ID2" NUMBER(38,0), 
	"LOV_QUERY2" VARCHAR2(4000 CHAR), 
	"EXT_PARAMETER_NAME" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;


   COMMENT ON COLUMN "RPTAPP"."RA_REPORT_PARAMETERS_B"."PARAMETER_ID" IS 'Unique id for the prompt.';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORT_PARAMETERS_B"."REPORT_ID" IS 'Report id to which the prompt belongs';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORT_PARAMETERS_B"."MANDATORY_IND" IS 'Y/N';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORT_PARAMETERS_B"."PARAMETER_DATA_TYPE" IS 'Char / Numeric / Date';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORT_PARAMETERS_B"."ORDERING_SEQUENCE" IS 'This is the position of the prompt in th UI';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORT_PARAMETERS_B"."ORDERING_SEQUENCE_IN_BI" IS 'This is the position of the prompt in BO Report.  Do not use this column unless absoutely necessary. ';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORT_PARAMETERS_B"."PARAMETER_NAME_BI" IS 'This is the text of the prompt in BI - (now BO).  Ex :  Enter GOC Name.  This is used for matching with the report parameter.  This is not a display name. ';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORT_PARAMETERS_B"."INPUT_TYPE_ID" IS 'Typeof display object.  (1,2,3,4,5,6,7)';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORT_PARAMETERS_B"."MULTIPLE_VALUE_ALLOWED" IS 'Y/N - Indicates if this prompt takes Multiple Values or single Value.';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORT_PARAMETERS_B"."PARAMETER_DEFAULT_VALUE" IS 'Default value when the user does not supply a value.  If a value is listed, show it in the UI.  If a default value is not required, this field should be NULL.';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORT_PARAMETERS_B"."INITIAL_DISPLAY_IND" IS 'Should this be displayed first or should be shown depending on providing a value to another prompt.';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORT_PARAMETERS_B"."DS_ID" IS 'JNDI Name of the data base connection.';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORT_PARAMETERS_B"."LOV_QUERY" IS 'use @variable(''BOUSER'') to implement security.';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORT_PARAMETERS_B"."PARAMETER_QUERY_TIMEOUT" IS 'The timeout seting for the prompt query.  If the query does not return within this timeframe, an error is thrown to the user.';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORT_PARAMETERS_B"."ACTIVE_FLAG" IS 'Active / Inactive - Y is active, N is inactive.';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORT_PARAMETERS_B"."USER_SEARCH_STRING_REQUIRED" IS 'If this value is Yes, then provide a search box in the UI for the LOV and make it always INSTRING.  Meaning LIKE ''%SEARCHSTRING%'',';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORT_PARAMETERS_B"."PARAM_NAME_IN_QUERY" IS 'It is nammed-parameter in mybatis query for dynamic query';
   COMMENT ON TABLE "RPTAPP"."RA_REPORT_PARAMETERS_B"  IS 'Prompt dependencies.';
--------------------------------------------------------

--  DDL for Table RA_REPORT_PARAMETERS_BSS_TMP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_PARAMETERS_BSS_TMP" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(4000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR), 
	"MULTI_VALUE_LIMIT" NUMBER(38,0), 
	"IS_MULTI_VALUE_NUMERIC" CHAR(1 CHAR), 
	"MULTI_VALUE_SEPARATOR" VARCHAR2(10 CHAR), 
	"MULTI_VALUE_OUT_SEPARATOR" VARCHAR2(10 CHAR), 
	"DS_ID2" NUMBER(38,0), 
	"LOV_QUERY2" VARCHAR2(4000 CHAR), 
	"EXT_PARAMETER_NAME" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_PARAMETERS_B_030814

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_PARAMETERS_B_030814" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(2000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_PARAMETERS_B_0324

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_PARAMETERS_B_0324" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(2000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_PARAMETERS_B_CM22692

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_PARAMETERS_B_CM22692" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(2000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR), 
	"MULTI_VALUE_LIMIT" NUMBER(38,0), 
	"IS_MULTI_VALUE_NUMERIC" CHAR(1 CHAR), 
	"MULTI_VALUE_SEPARATOR" CHAR(1 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_PARAMETERS_B_CN

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_PARAMETERS_B_CN" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(2000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_PARAMETERS_B_OFS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_PARAMETERS_B_OFS" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(2000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR), 
	"MULTI_VALUE_LIMIT" NUMBER(38,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_PARAMETERS_B_RAVI

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_PARAMETERS_B_RAVI" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(4000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR), 
	"MULTI_VALUE_LIMIT" NUMBER(38,0), 
	"IS_MULTI_VALUE_NUMERIC" CHAR(1 CHAR), 
	"MULTI_VALUE_SEPARATOR" VARCHAR2(10 CHAR), 
	"MULTI_VALUE_OUT_SEPARATOR" VARCHAR2(10 CHAR), 
	"DS_ID2" NUMBER(38,0), 
	"LOV_QUERY2" VARCHAR2(4000 CHAR), 
	"EXT_PARAMETER_NAME" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_PARAMETERS_B_TEST

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_PARAMETERS_B_TEST" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(2000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_PARAMETERS_TL

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_PARAMETERS_TL" 
   (	"PARAMETER_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"PARAMETER_ID" NUMBER(38,0), 
	"LANGUAGE" VARCHAR2(30 CHAR), 
	"BASE_LANGUAGE" VARCHAR2(30 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_PARAMETERS_UP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_PARAMETERS_UP" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(4000 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(4000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR), 
	"MULTI_VALUE_LIMIT" NUMBER(38,0), 
	"IS_MULTI_VALUE_NUMERIC" CHAR(1 CHAR), 
	"MULTI_VALUE_SEPARATOR" VARCHAR2(10 CHAR), 
	"MULTI_VALUE_OUT_SEPARATOR" VARCHAR2(10 CHAR), 
	"DS_ID2" NUMBER(38,0), 
	"LOV_QUERY2" VARCHAR2(4000 CHAR), 
	"EXT_PARAMETER_NAME" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_PARAM_B_IMP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_PARAM_B_IMP" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(2000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_PARAM_TMP_20150211

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_PARAM_TMP_20150211" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(4000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR), 
	"MULTI_VALUE_LIMIT" NUMBER(38,0), 
	"IS_MULTI_VALUE_NUMERIC" CHAR(1 CHAR), 
	"MULTI_VALUE_SEPARATOR" VARCHAR2(10 CHAR), 
	"MULTI_VALUE_OUT_SEPARATOR" VARCHAR2(10 CHAR), 
	"DS_ID2" NUMBER(38,0), 
	"LOV_QUERY2" VARCHAR2(4000 CHAR), 
	"EXT_PARAMETER_NAME" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_QUERY_MAP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_QUERY_MAP" 
   (	"REPORT_ID" NUMBER(38,0), 
	"QUERY_ID" NUMBER(38,0), 
	"QUERY_SEQ" NUMBER(38,0) DEFAULT 1, 
	"IS_ACTIVE" CHAR(1 CHAR) DEFAULT 'Y', 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"IS_NEW_PAGE" CHAR(1 CHAR) DEFAULT 'Y', 
	"RECORD_COUNT_TO_LOG" NUMBER(38,0), 
	"QUERY_EXEC_TIME_OUT_SECONDS" NUMBER(38,0), 
	"QUERY_EXTRACT_TIME_OUT_SECONDS" NUMBER(38,0), 
	"HTML_PAGE_MAX_RECORDS" NUMBER(38,0), 
	"JR_DS_NAME" VARCHAR2(250 CHAR), 
	"IS_ACTIVE_FOR_JASPER" CHAR(1 CHAR) DEFAULT 'N', 
	"MIN_DIMENSION_COUNT" NUMBER(38,0) DEFAULT 1, 
	"MIN_MEASURE_COUNT" NUMBER(38,0) DEFAULT 1, 
	"MAX_DIMENSION_COUNT" NUMBER(38,0), 
	"MAX_MEASURE_COUNT" NUMBER(38,0), 
	"MAX_SUBTOTAL_COUNT" NUMBER(38,0), 
	"HTML_TPL_NAME" VARCHAR2(250 CHAR), 
	"EXTRA_META_DATA" CLOB, 
	"IS_STORE_OUTPUT" CHAR(1 CHAR) DEFAULT 'N', 
	"IS_RENDER_OUTPUT" CHAR(1 CHAR) DEFAULT 'Y'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("EXTRA_META_DATA") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;


   COMMENT ON COLUMN "RPTAPP"."RA_REPORT_QUERY_MAP"."REPORT_ID" IS 'Report Id. One report id can have mulitple query ids.';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORT_QUERY_MAP"."QUERY_ID" IS 'Query Id. One report id can have mulitple query ids.';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORT_QUERY_MAP"."QUERY_SEQ" IS 'This sequence will decide the order of the queries for a given report id ';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORT_QUERY_MAP"."IS_STORE_OUTPUT" IS 'Indicator to store temporary output in a CSV file -> to feed JasperPDF or MultiphaseInquiryQuery';
   COMMENT ON COLUMN "RPTAPP"."RA_REPORT_QUERY_MAP"."IS_RENDER_OUTPUT" IS 'Indicator to render the output. Introduced to help MultiphaseInquiry';
--------------------------------------------------------

--  DDL for Table RA_REPORT_QUERY_MAP_CN

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_QUERY_MAP_CN" 
   (	"REPORT_ID" NUMBER(38,0), 
	"QUERY_ID" NUMBER(38,0), 
	"QUERY_SEQ" NUMBER(38,0), 
	"IS_ACTIVE" CHAR(1 CHAR), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"IS_NEW_PAGE" CHAR(1 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_QUERY_MAP_OFS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_QUERY_MAP_OFS" 
   (	"REPORT_ID" NUMBER(38,0), 
	"QUERY_ID" NUMBER(38,0), 
	"QUERY_SEQ" NUMBER(38,0) DEFAULT 1, 
	"IS_ACTIVE" CHAR(1 CHAR) DEFAULT 'Y', 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"IS_NEW_PAGE" CHAR(1 CHAR) DEFAULT 'Y', 
	"RECORD_COUNT_TO_LOG" NUMBER(38,0), 
	"QUERY_EXEC_TIME_OUT_SECONDS" NUMBER(38,0), 
	"QUERY_EXTRACT_TIME_OUT_SECONDS" NUMBER(38,0), 
	"HTML_PAGE_MAX_RECORDS" NUMBER(38,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_QUERY_PARAMETERS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_QUERY_PARAMETERS" 
   (	"REPORT_ID" NUMBER(38,0), 
	"QUERY_ID" NUMBER, 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 BYTE), 
	"PARAM_INOUT_TYPE" VARCHAR2(5 BYTE) DEFAULT 'IN', 
	"PARAM_SEQ_IN_PROC" NUMBER(*,0), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_REPORT_USER_DOWNLOADS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_REPORT_USER_DOWNLOADS" 
   (	"RUN_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"DOWNLOADED_BY_SOEID" VARCHAR2(300 BYTE), 
	"FILE_PATH" VARCHAR2(300 BYTE), 
	"FILE_NAME" VARCHAR2(300 BYTE), 
	"DOWNLOAD_DTM" DATE, 
	"DOWNLOAD_STATUS" VARCHAR2(10 BYTE), 
	"DOWNLOAD_ERROR_MESSAGE" VARCHAR2(3000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_ROLES_FEATURES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_ROLES_FEATURES" 
   (	"LDAP_ROLE" VARCHAR2(200 CHAR), 
	"APP_FEATURES" VARCHAR2(200 CHAR), 
	"ENABLED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" DATE DEFAULT systimestamp, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" DATE DEFAULT systimestamp
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_RPT_LDAP_GROUPS_BKP2208

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_RPT_LDAP_GROUPS_BKP2208" 
   (	"REPORT_ID" NUMBER(38,0), 
	"LDAP_GROUP_NAME" VARCHAR2(150 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_RP_LDAP_GRP_BKUP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_RP_LDAP_GRP_BKUP" 
   (	"REPORT_ID" NUMBER(38,0), 
	"LDAP_GROUP_NAME" VARCHAR2(150 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_SCHEDULING_INFO_TEMP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SCHEDULING_INFO_TEMP" 
   (	"SCHEDULE_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"INSTANCE_TITLE" VARCHAR2(300 CHAR), 
	"FREQUENCY_ID" VARCHAR2(150 CHAR), 
	"START_DATE" DATE, 
	"END_DATE" DATE, 
	"HOUR" NUMBER(38,0), 
	"MINUTE" NUMBER(38,0), 
	"DAY_NO" NUMBER(38,0), 
	"DAYS_OF_WEEK" VARCHAR2(200 BYTE), 
	"PARAMETER_SET_ID" NUMBER(38,0), 
	"RPT_OUTPUT_TYPE" VARCHAR2(30 CHAR), 
	"DESTINATION_TYPE" NUMBER(38,0), 
	"TRIGGERED_BY_EVENT_ID" NUMBER(38,0), 
	"SUBMITTED_BY_SOEID" VARCHAR2(7 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT USER, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT USER, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate, 
	"CALENDAR_TYPE" VARCHAR2(20 BYTE), 
	"END_AFTER_N_RUNS" NUMBER(38,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_SED_QUERY_COLS_BKP1415

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SED_QUERY_COLS_BKP1415" 
   (	"QUERY_ID" NUMBER(*,0), 
	"COLUMN_ORDER" NUMBER(3,0), 
	"COLUMN_NAME" VARCHAR2(50 BYTE), 
	"COLUMN_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"COLUMN_TYPE" VARCHAR2(30 CHAR), 
	"COLUMN_SUB_TYPE" VARCHAR2(30 BYTE), 
	"COLUMN_TYPE_FORMAT_MASK" VARCHAR2(30 CHAR), 
	"REQUIRED_IN_SELECT_CLAUSE" VARCHAR2(1 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"COLUMN_DATA_TYPE" VARCHAR2(10 CHAR), 
	"MEASURE_FUNCTION" VARCHAR2(30 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QC_COLUMNS_IMP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QC_COLUMNS_IMP" 
   (	"QUERY_ID" NUMBER(*,0), 
	"COLUMN_ORDER" NUMBER(3,0), 
	"COLUMN_NAME" VARCHAR2(50 BYTE), 
	"COLUMN_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"COLUMN_TYPE" VARCHAR2(30 CHAR), 
	"COLUMN_SUB_TYPE" VARCHAR2(30 BYTE), 
	"COLUMN_TYPE_FORMAT_MASK" VARCHAR2(30 CHAR), 
	"REQUIRED_IN_SELECT_CLAUSE" VARCHAR2(1 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"COLUMN_DATA_TYPE" VARCHAR2(10 CHAR), 
	"MEASURE_FUNCTION" VARCHAR2(30 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERIES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERIES" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE DEFAULT TO_DATE('31-DEC-9999','DD-MON-YYYY'), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"DYNAMIC_QUERY_TEMPLATE_ID" NUMBER(38,0), 
	"QUERY_EXEC_TIME_OUT_SECONDS" NUMBER(38,0), 
	"QUERY_EXTRACT_TIME_OUT_SECONDS" NUMBER(38,0), 
	"HTML_PAGE_MAX_RECORDS" NUMBER(38,0), 
	"QUERY_TYPE" VARCHAR2(10 BYTE) DEFAULT 'Q'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;


   COMMENT ON COLUMN "RPTAPP"."RA_SEEDED_QUERIES"."DS_ID" IS 'Data source id to execute this query';
   COMMENT ON COLUMN "RPTAPP"."RA_SEEDED_QUERIES"."MAX_RECORD_COUNT" IS 'To limit the no of records to read. If not null,this will override MAX_RECORD_COUNT in RA_REPORTS_B & RA_APPS';
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERIES_030814

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERIES_030814" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERIES_0324

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERIES_0324" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERIES_0403

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERIES_0403" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERIES_0418131630

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERIES_0418131630" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE DEFAULT TO_DATE('31-DEC-9999','DD-MON-YYYY'), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"DYNAMIC_QUERY_TEMPLATE_ID" NUMBER(38,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;


   COMMENT ON COLUMN "RPTAPP"."RA_SEEDED_QUERIES_0418131630"."DS_ID" IS 'Data source id to execute this query';
   COMMENT ON COLUMN "RPTAPP"."RA_SEEDED_QUERIES_0418131630"."MAX_RECORD_COUNT" IS 'To limit the no of records to read. If not null,this will override MAX_RECORD_COUNT in RA_REPORTS_B & RA_APPS';
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERIES_14103

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERIES_14103" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"DYNAMIC_QUERY_TEMPLATE_ID" NUMBER(38,0), 
	"QUERY_EXEC_TIME_OUT_SECONDS" NUMBER(38,0), 
	"QUERY_EXTRACT_TIME_OUT_SECONDS" NUMBER(38,0), 
	"HTML_PAGE_MAX_RECORDS" NUMBER(38,0), 
	"QUERY_TYPE" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "RPTAPP_DATA" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERIES_15016

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERIES_15016" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"DYNAMIC_QUERY_TEMPLATE_ID" NUMBER(38,0), 
	"QUERY_EXEC_TIME_OUT_SECONDS" NUMBER(38,0), 
	"QUERY_EXTRACT_TIME_OUT_SECONDS" NUMBER(38,0), 
	"HTML_PAGE_MAX_RECORDS" NUMBER(38,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERIES_6072

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERIES_6072" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"DYNAMIC_QUERY_TEMPLATE_ID" NUMBER(38,0), 
	"QUERY_EXEC_TIME_OUT_SECONDS" NUMBER(38,0), 
	"QUERY_EXTRACT_TIME_OUT_SECONDS" NUMBER(38,0), 
	"HTML_PAGE_MAX_RECORDS" NUMBER(38,0), 
	"QUERY_TYPE" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERIES_CM22692

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERIES_CM22692" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"DYNAMIC_QUERY_TEMPLATE_ID" NUMBER(38,0), 
	"QUERY_EXEC_TIME_OUT_SECONDS" NUMBER(38,0), 
	"QUERY_EXTRACT_TIME_OUT_SECONDS" NUMBER(38,0), 
	"HTML_PAGE_MAX_RECORDS" NUMBER(38,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERIES_CN

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERIES_CN" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"DYNAMIC_QUERY_TEMPLATE_ID" NUMBER(38,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERIES_GC41405

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERIES_GC41405" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"DYNAMIC_QUERY_TEMPLATE_ID" NUMBER(38,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERIES_HIST_CM22692

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERIES_HIST_CM22692" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"DYNAMIC_QUERY_TEMPLATE_ID" NUMBER(38,0), 
	"QUERY_EXEC_TIME_OUT_SECONDS" NUMBER(38,0), 
	"QUERY_EXTRACT_TIME_OUT_SECONDS" NUMBER(38,0), 
	"HTML_PAGE_MAX_RECORDS" NUMBER(38,0), 
	"SNAP_SHOT_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERIES_IMP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERIES_IMP" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERIES_OFS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERIES_OFS" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE DEFAULT TO_DATE('31-DEC-9999','DD-MON-YYYY'), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"DYNAMIC_QUERY_TEMPLATE_ID" NUMBER(38,0), 
	"QUERY_EXEC_TIME_OUT_SECONDS" NUMBER(38,0), 
	"QUERY_EXTRACT_TIME_OUT_SECONDS" NUMBER(38,0), 
	"HTML_PAGE_MAX_RECORDS" NUMBER(38,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERIES_RAJEEV

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERIES_RAJEEV" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"DYNAMIC_QUERY_TEMPLATE_ID" NUMBER(38,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERIES_RAVI

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERIES_RAVI" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"DYNAMIC_QUERY_TEMPLATE_ID" NUMBER(38,0), 
	"QUERY_EXEC_TIME_OUT_SECONDS" NUMBER(38,0), 
	"QUERY_EXTRACT_TIME_OUT_SECONDS" NUMBER(38,0), 
	"HTML_PAGE_MAX_RECORDS" NUMBER(38,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERIES_TEST

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERIES_TEST" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERIES_TOP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERIES_TOP" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"DYNAMIC_QUERY_TEMPLATE_ID" NUMBER(38,0), 
	"QUERY_EXEC_TIME_OUT_SECONDS" NUMBER(38,0), 
	"QUERY_EXTRACT_TIME_OUT_SECONDS" NUMBER(38,0), 
	"HTML_PAGE_MAX_RECORDS" NUMBER(38,0), 
	"QUERY_TYPE" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERY_ATTR

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERY_ATTR" 
   (	"QUERY_ATTR_ID" NUMBER, 
	"ATTR_ID" NUMBER, 
	"QUERY_ID" NUMBER, 
	"COLUMN_TYPE" VARCHAR2(2 CHAR), 
	"REQUIRED_IN_SELECT_CLAUSE" VARCHAR2(2 CHAR), 
	"AGGR_FUNC" VARCHAR2(50 BYTE), 
	"DISP_ORD" NUMBER(9,0), 
	"SORT_ORD" NUMBER(9,0), 
	"SORT_TYP_ID" NUMBER(9,0), 
	"QUERY_ATTR_ALS_NM" VARCHAR2(100 BYTE), 
	"QUERY_DISP_NM" VARCHAR2(100 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERY_ATTR_EXPR

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERY_ATTR_EXPR" 
   (	"QUERY_ATTR_ID" NUMBER, 
	"QUERY_ATTR_EXPR" CLOB
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "RPTAPP_DATA" 
 LOB ("QUERY_ATTR_EXPR") STORE AS BASICFILE (
  TABLESPACE "RPTAPP_DATA" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING ) ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERY_COLUMNS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS" 
   (	"QUERY_ID" NUMBER(*,0), 
	"COLUMN_ORDER" NUMBER(3,0), 
	"COLUMN_NAME" VARCHAR2(50 BYTE), 
	"COLUMN_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"COLUMN_TYPE" VARCHAR2(30 CHAR), 
	"COLUMN_SUB_TYPE" VARCHAR2(30 BYTE), 
	"COLUMN_TYPE_FORMAT_MASK" VARCHAR2(30 CHAR), 
	"REQUIRED_IN_SELECT_CLAUSE" VARCHAR2(1 CHAR) DEFAULT 'Y', 
	"EFFECTIVE_FROM" DATE DEFAULT sysdate, 
	"EFFECTIVE_TO" DATE DEFAULT TO_DATE('31-DEC-9999','DD-MON-YYYY'), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp, 
	"COLUMN_DATA_TYPE" VARCHAR2(10 CHAR), 
	"MEASURE_FUNCTION" VARCHAR2(30 CHAR) DEFAULT 'SUM'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;


   COMMENT ON COLUMN "RPTAPP"."RA_SEEDED_QUERY_COLUMNS"."COLUMN_ORDER" IS 'Used to construct default order by clause or to order columns available to select ';
   COMMENT ON COLUMN "RPTAPP"."RA_SEEDED_QUERY_COLUMNS"."COLUMN_TYPE" IS '''D'' - For Dimension
''M'' - For measure';
   COMMENT ON COLUMN "RPTAPP"."RA_SEEDED_QUERY_COLUMNS"."COLUMN_SUB_TYPE" IS 'e.g. Amount';
   COMMENT ON COLUMN "RPTAPP"."RA_SEEDED_QUERY_COLUMNS"."COLUMN_DATA_TYPE" IS 'NUMBER, STRING, DATE';
   COMMENT ON COLUMN "RPTAPP"."RA_SEEDED_QUERY_COLUMNS"."MEASURE_FUNCTION" IS 'Measure columns are aggreagted using this function. For example, if measure column is trans_amt and this column is SUM. then the query should be transformed as SUM(trans_amt). 
';
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERY_COLUMNS_030814

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_030814" 
   (	"QUERY_ID" NUMBER(*,0), 
	"COLUMN_ORDER" NUMBER(3,0), 
	"COLUMN_NAME" VARCHAR2(50 BYTE), 
	"COLUMN_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"COLUMN_TYPE" VARCHAR2(30 CHAR), 
	"COLUMN_SUB_TYPE" VARCHAR2(30 BYTE), 
	"COLUMN_TYPE_FORMAT_MASK" VARCHAR2(30 CHAR), 
	"REQUIRED_IN_SELECT_CLAUSE" VARCHAR2(1 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"COLUMN_DATA_TYPE" VARCHAR2(10 CHAR), 
	"MEASURE_FUNCTION" VARCHAR2(30 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERY_COLUMNS_2212

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_2212" 
   (	"QUERY_ID" NUMBER(*,0), 
	"COLUMN_ORDER" NUMBER(3,0), 
	"COLUMN_NAME" VARCHAR2(50 BYTE), 
	"COLUMN_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"COLUMN_TYPE" VARCHAR2(30 CHAR), 
	"COLUMN_SUB_TYPE" VARCHAR2(30 BYTE), 
	"COLUMN_TYPE_FORMAT_MASK" VARCHAR2(30 CHAR), 
	"REQUIRED_IN_SELECT_CLAUSE" VARCHAR2(1 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"COLUMN_DATA_TYPE" VARCHAR2(10 CHAR), 
	"MEASURE_FUNCTION" VARCHAR2(30 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERY_COLUMNS_CN

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_CN" 
   (	"QUERY_ID" NUMBER(*,0), 
	"COLUMN_ORDER" NUMBER(3,0), 
	"COLUMN_NAME" VARCHAR2(50 BYTE), 
	"COLUMN_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"COLUMN_TYPE" VARCHAR2(30 CHAR), 
	"COLUMN_SUB_TYPE" VARCHAR2(30 BYTE), 
	"COLUMN_TYPE_FORMAT_MASK" VARCHAR2(30 CHAR), 
	"REQUIRED_IN_SELECT_CLAUSE" VARCHAR2(1 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"COLUMN_DATA_TYPE" VARCHAR2(10 CHAR), 
	"MEASURE_FUNCTION" VARCHAR2(30 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERY_COLUMNS_OFS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_OFS" 
   (	"QUERY_ID" NUMBER(*,0), 
	"COLUMN_ORDER" NUMBER(3,0), 
	"COLUMN_NAME" VARCHAR2(50 BYTE), 
	"COLUMN_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"COLUMN_TYPE" VARCHAR2(30 CHAR), 
	"COLUMN_SUB_TYPE" VARCHAR2(30 BYTE), 
	"COLUMN_TYPE_FORMAT_MASK" VARCHAR2(30 CHAR), 
	"REQUIRED_IN_SELECT_CLAUSE" VARCHAR2(1 CHAR) DEFAULT 'Y', 
	"EFFECTIVE_FROM" DATE DEFAULT sysdate, 
	"EFFECTIVE_TO" DATE DEFAULT TO_DATE('31-DEC-9999','DD-MON-YYYY'), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp, 
	"COLUMN_DATA_TYPE" VARCHAR2(10 CHAR), 
	"MEASURE_FUNCTION" VARCHAR2(30 CHAR) DEFAULT 'SUM'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERY_COLUMNS_SOJI

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_SOJI" 
   (	"QUERY_ID" NUMBER(*,0), 
	"COLUMN_ORDER" NUMBER(3,0), 
	"COLUMN_NAME" VARCHAR2(50 BYTE), 
	"COLUMN_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"COLUMN_TYPE" VARCHAR2(30 CHAR), 
	"COLUMN_SUB_TYPE" VARCHAR2(30 BYTE), 
	"COLUMN_TYPE_FORMAT_MASK" VARCHAR2(30 CHAR), 
	"REQUIRED_IN_SELECT_CLAUSE" VARCHAR2(1 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"COLUMN_DATA_TYPE" VARCHAR2(10 CHAR), 
	"MEASURE_FUNCTION" VARCHAR2(30 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERY_COLUMN_FORMAT

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMN_FORMAT" 
   (	"REPORT_ID" NUMBER(38,5), 
	"QUERY_ID" NUMBER(38,5), 
	"QUERY_OUTPUT_COLUMN_NAME" VARCHAR2(500 CHAR), 
	"REPORT_OUTPUT_COLUMN_NAME" VARCHAR2(500 CHAR), 
	"NEW_COLUMN_ORDER" NUMBER(38,5), 
	"CONVERSION_TYPE" VARCHAR2(500 CHAR), 
	"SOURCE_COLUMN_FORMAT" VARCHAR2(4000 CHAR), 
	"TARGET_COLUMN_FORMAT" VARCHAR2(4000 CHAR), 
	"PDF_STYLE" VARCHAR2(4000 CHAR), 
	"XLSX_STYLE" VARCHAR2(4000 CHAR), 
	"HTML_STYLE" VARCHAR2(4000 CHAR), 
	"CREATED_BY" VARCHAR2(25 CHAR) DEFAULT 'RPTAPP', 
	"CREATION_TIME" TIMESTAMP (6) DEFAULT systimestamp, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR) DEFAULT 'RPTAPP', 
	"LAST_UPDATE_TIME" TIMESTAMP (6) DEFAULT systimestamp
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERY_GENERATOR

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERY_GENERATOR" 
   (	"QUERY_ID" NUMBER(38,0), 
	"QUERY_ENGINE" VARCHAR2(50 CHAR), 
	"STORE_PROC_NM" VARCHAR2(100 CHAR), 
	"DATA_SOURCE" VARCHAR2(100 CHAR)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table RA_SEEDED_QUERY_PROD

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SEEDED_QUERY_PROD" 
   (	"QUERY_ID" NUMBER, 
	"PROD_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_SHARED_GROUPS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SHARED_GROUPS" 
   (	"GRP_ID" NUMBER(38,0), 
	"GROUP_NAME" VARCHAR2(200 CHAR), 
	"PUBLIC_FLAG" VARCHAR2(1 CHAR) DEFAULT 'N', 
	"EFFECTIVE_FROM" DATE DEFAULT SYSDATE, 
	"EFFECTIVE_TO" DATE DEFAULT TO_DATE('31-DEC-9999','DD-MON-YYYY'), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp, 
	"LOGGED_IN_SOEID" VARCHAR2(25 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_SHARED_GROUP_MEMBERS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SHARED_GROUP_MEMBERS" 
   (	"GRP_ID" NUMBER(38,0), 
	"USER_ID" VARCHAR2(25 CHAR), 
	"ADMIN_PRIVILEGE_FLAG" CHAR(1 CHAR) DEFAULT 'N', 
	"EFFECTIVE_FROM" DATE DEFAULT SYSDATE, 
	"EFFECTIVE_TO" DATE DEFAULT TO_DATE('31-DEC-9999','DD-MON-YYYY'), 
	"CREATION_DTM" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_DTM" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"LOGGED_IN_SOEID" VARCHAR2(25 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_SHARED_REPORTS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SHARED_REPORTS" 
   (	"RUN_ID" NUMBER(*,0), 
	"SHARED_BY" VARCHAR2(25 CHAR), 
	"SHARE_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"SHARED_TO_USER" VARCHAR2(25 CHAR), 
	"SHARED_TO_GROUP" NUMBER(*,0), 
	"SHARED_TO_PUBLIC" VARCHAR2(1 CHAR) DEFAULT 'N', 
	"EFFECTIVE_FROM" DATE DEFAULT sysdate, 
	"EFFECTIVE_TO" DATE DEFAULT TO_DATE('31-DEC-9999','DD-MON-YYYY'), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp, 
	"SHARED_TO_TYPE" VARCHAR2(1 CHAR), 
	"LOGGED_IN_SOEID" VARCHAR2(25 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;


   COMMENT ON COLUMN "RPTAPP"."RA_SHARED_REPORTS"."SHARE_DISPLAY_NAME" IS 'Default to the reprot''s title';
--------------------------------------------------------

--  DDL for Table RA_SHARED_TEMPLATES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SHARED_TEMPLATES" 
   (	"TEMPLATE_ID" NUMBER(38,0), 
	"SHARED_BY" VARCHAR2(25 CHAR), 
	"SHARE_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"SHARED_TO_USER" VARCHAR2(25 BYTE), 
	"SHARED_TO_GROUP" NUMBER(38,0), 
	"SHARED_TO_PUBLIC" CHAR(1 CHAR) DEFAULT 'N', 
	"EFFECTIVE_FROM" DATE DEFAULT sysdate, 
	"EFFECTIVE_TO" DATE DEFAULT TO_DATE('31-DEC-9999','DD-MON-YYYY'), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp, 
	"SHARED_TO_TYPE" VARCHAR2(1 CHAR), 
	"LOGGED_IN_SOEID" VARCHAR2(25 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;


   COMMENT ON COLUMN "RPTAPP"."RA_SHARED_TEMPLATES"."SHARE_DISPLAY_NAME" IS 'Default to the reprot''s title';
--------------------------------------------------------

--  DDL for Table RA_STATIC_ENUM

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_STATIC_ENUM" 
   (	"ID" NUMBER(*,0), 
	"NAME" VARCHAR2(50 CHAR), 
	"VALUE" VARCHAR2(100 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;


   COMMENT ON TABLE "RPTAPP"."RA_STATIC_ENUM"  IS 'To store static values such as Country Codes, Y/N Flags and Gender M/F';
--------------------------------------------------------

--  DDL for Table RA_STG_USER_DETAILS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_STG_USER_DETAILS" 
   (	"SOEID" VARCHAR2(50 BYTE), 
	"FULL_NAME" VARCHAR2(100 BYTE), 
	"GIVEN_NAME" VARCHAR2(100 BYTE), 
	"EMAIL" VARCHAR2(100 BYTE), 
	"ACTIVE" CHAR(1 BYTE), 
	"DEPT_NUMBER" VARCHAR2(50 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" TIMESTAMP (6), 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_STG_USER_LDAP_GROUPS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_STG_USER_LDAP_GROUPS" 
   (	"SOEID" VARCHAR2(50 BYTE), 
	"LDAP_GROUP_NAME" VARCHAR2(150 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_SUB_REPORT_MAP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SUB_REPORT_MAP" 
   (	"REPORT_ID" NUMBER(38,0), 
	"SUB_REPORT_ID" NUMBER(38,0), 
	"SUB_REPORT_SEQ" NUMBER(38,0), 
	"DISPLAY_NAME" VARCHAR2(250 CHAR), 
	"IS_ACTIVE" CHAR(1 CHAR) DEFAULT 'Y', 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"IS_ASYNC_DRILLDOWN" CHAR(1 CHAR) DEFAULT 'N', 
	"IS_SYNC_DRILLDOWN" CHAR(1 CHAR) DEFAULT 'N'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;


   COMMENT ON COLUMN "RPTAPP"."RA_SUB_REPORT_MAP"."REPORT_ID" IS 'Master report id.';
   COMMENT ON COLUMN "RPTAPP"."RA_SUB_REPORT_MAP"."SUB_REPORT_ID" IS 'Detail report id of master-detail drill down.';
   COMMENT ON COLUMN "RPTAPP"."RA_SUB_REPORT_MAP"."SUB_REPORT_SEQ" IS 'This sequence will decide the order of the display_name in the UI menu';
   COMMENT ON COLUMN "RPTAPP"."RA_SUB_REPORT_MAP"."DISPLAY_NAME" IS 'Label to show in the UI menu to choose the drilldown detail report';
--------------------------------------------------------

--  DDL for Table RA_SUB_RPT_PARAM_NAME_MAP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP" 
   (	"REPORT_ID" NUMBER(38,0), 
	"SUB_REPORT_ID" NUMBER(38,0), 
	"REPORT_COLUMN_NAME" VARCHAR2(250 CHAR), 
	"SUB_REPORT_PARAM_NAME_IN_QUERY" VARCHAR2(250 CHAR), 
	"IS_ACTIVE" CHAR(1 CHAR) DEFAULT 'Y', 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"SUB_REPORT_SEQ" NUMBER(38,0) DEFAULT 1, 
	"SUB_REPORT_PARAM_DEFAULT_VALUE" VARCHAR2(250 BYTE), 
	"CONVERSION_TYPE" VARCHAR2(250 BYTE), 
	"REPORT_COLUMN_FORMAT" VARCHAR2(4000 CHAR), 
	"SUB_REPORT_PARAM_FORMAT" VARCHAR2(4000 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;


   COMMENT ON COLUMN "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP"."REPORT_ID" IS 'Master(Parent) report''s report id';
   COMMENT ON COLUMN "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP"."SUB_REPORT_ID" IS 'Detail(Sub) report''s report id';
   COMMENT ON COLUMN "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP"."REPORT_COLUMN_NAME" IS 'Master(Parent) report''s column(field) name. Column name is from the master report''s result, which is nothing but the actual query''s column alias name';
   COMMENT ON COLUMN "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP"."SUB_REPORT_PARAM_NAME_IN_QUERY" IS 'Detail(Sub) report''s PARAMETER_NAME_IN_QUERY. Which is nothing but static query''s prompt parameter name inside the query, NOT THE PROMPT''s UI NAME';
--------------------------------------------------------

--  DDL for Table RA_SUB_RPT_PARAM_NAME_MAP_OFS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP_OFS" 
   (	"REPORT_ID" NUMBER(38,0), 
	"SUB_REPORT_ID" NUMBER(38,0), 
	"REPORT_COLUMN_NAME" VARCHAR2(250 CHAR), 
	"SUB_REPORT_PARAM_NAME_IN_QUERY" VARCHAR2(250 CHAR), 
	"IS_ACTIVE" CHAR(1 CHAR) DEFAULT 'Y', 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"SUB_REPORT_SEQ" NUMBER(38,0) DEFAULT 1, 
	"SUB_REPORT_PARAM_DEFAULT_VALUE" VARCHAR2(250 BYTE), 
	"CONVERSION_TYPE" VARCHAR2(250 BYTE), 
	"REPORT_COLUMN_FORMAT" VARCHAR2(4000 CHAR), 
	"SUB_REPORT_PARAM_FORMAT" VARCHAR2(4000 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_SUB_RUN_INSTANCES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_SUB_RUN_INSTANCES" 
   (	"SUB_RUN_ID" NUMBER(38,0), 
	"PARENT_RUN_ID" NUMBER(38,0), 
	"OBJECT_ID" VARCHAR2(250 CHAR), 
	"PARENT_REPORT_ID" NUMBER(38,0), 
	"SUB_REPORT_ID" NUMBER(38,0), 
	"SUB_REPORT_SEQ" NUMBER(38,0), 
	"DRILL_DOWN_ID" VARCHAR2(250 CHAR), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"LOGGED_IN_SOEID" VARCHAR2(25 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_TABLE_COMMENTS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_TABLE_COMMENTS" 
   (	"TABLE_NAME" VARCHAR2(30 BYTE), 
	"TABLE_TYPE" VARCHAR2(11 BYTE), 
	"COMMENTS" VARCHAR2(4000 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"CREATION_DTM" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE) DEFAULT user, 
	"LAST_UPDATE_DTM" DATE DEFAULT sysdate
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;


   COMMENT ON TABLE "RPTAPP"."RA_TABLE_COMMENTS"  IS 'Reporting Application table comments';
--------------------------------------------------------

--  DDL for Table RA_TABLE_META_DETAILS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_TABLE_META_DETAILS" 
   (	"RPT_VERSION" NUMBER, 
	"TABLE_NAME" VARCHAR2(100 BYTE), 
	"COLUMN_NAME" VARCHAR2(100 BYTE), 
	"COMMENTS" VARCHAR2(200 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"IS_KEY_COLUMN" CHAR(1 BYTE) DEFAULT 'N'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_TEMPLATES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_TEMPLATES" 
   (	"TEMPLATE_ID" NUMBER(38,0), 
	"TEMPLATE_NAME" VARCHAR2(200 CHAR), 
	"RUN_ID" NUMBER(*,0), 
	"OWNER_ID" VARCHAR2(25 CHAR), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"OUTPUT_TYPE" VARCHAR2(30 CHAR), 
	"REPORT_ID" NUMBER(38,0), 
	"EFFECTIVE_FROM" DATE DEFAULT sysdate, 
	"EFFECTIVE_TO" DATE DEFAULT TO_DATE('31-DEC-9999','DD-MON-YYYY'), 
	"DOMAIN_CODE" VARCHAR2(100 CHAR), 
	"LOGGED_IN_SOEID" VARCHAR2(25 CHAR), 
	"OUTPUT_TYPE_CODE" VARCHAR2(40 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;


   COMMENT ON COLUMN "RPTAPP"."RA_TEMPLATES"."REPORT_ID" IS 'pending - report_id should be mandatory';
--------------------------------------------------------

--  DDL for Table RA_TEMPLATE_LABELS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_TEMPLATE_LABELS" 
   (	"TEMPLATE_ID" NUMBER(*,0), 
	"OWNER_ID" VARCHAR2(25 CHAR), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT SYSTIMESTAMP, 
	"LABEL_PATH" VARCHAR2(250 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_TEMPLATE_PARAMS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_TEMPLATE_PARAMS" 
   (	"TEMPLATE_ID" NUMBER(38,0), 
	"PARAM_ID" NUMBER(38,0), 
	"PARAM_VALUE" VARCHAR2(4000 CHAR), 
	"IS_EXPRESSION" VARCHAR2(1 CHAR) DEFAULT 'N', 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_TEMPLATE_PARAMS_TST

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_TEMPLATE_PARAMS_TST" 
   (	"TEMPLATE_ID" NUMBER(38,0), 
	"PARAM_ID" NUMBER(38,0), 
	"PARAM_VALUE" VARCHAR2(4000 CHAR), 
	"IS_EXPRESSION" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_TEMPLATE_QUERY_COLUMNS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_TEMPLATE_QUERY_COLUMNS" 
   (	"TEMPLATE_ID" NUMBER(*,0), 
	"QUERY_ID" NUMBER(*,0), 
	"COLUMN_ORDER" NUMBER(3,0), 
	"COLUMN_NAME" VARCHAR2(50 BYTE), 
	"COLUMN_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"COLUMN_TYPE" VARCHAR2(30 CHAR), 
	"COLUMN_SUB_TYPE" VARCHAR2(30 BYTE), 
	"COLUMN_TYPE_FORMAT_MASK" VARCHAR2(30 CHAR), 
	"REQUIRED_IN_SELECT_CLAUSE" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"COLUMN_DATA_TYPE" VARCHAR2(10 CHAR), 
	"MEASURE_FUNCTION" VARCHAR2(30 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;


   COMMENT ON COLUMN "RPTAPP"."RA_TEMPLATE_QUERY_COLUMNS"."COLUMN_ORDER" IS 'Order by ';
--------------------------------------------------------

--  DDL for Table RA_TSEEDED_QUERIES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_TSEEDED_QUERIES" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RA_USER_APP_ROLES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_USER_APP_ROLES" 
   (	"SOEID" VARCHAR2(100 CHAR), 
	"ROLE" VARCHAR2(50 CHAR) DEFAULT 'USER', 
	"ACTIVE_FLAG" CHAR(1 CHAR) DEFAULT 'Y', 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) DEFAULT systimestamp, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) DEFAULT systimestamp
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;


   COMMENT ON COLUMN "RPTAPP"."RA_USER_APP_ROLES"."ROLE" IS '''USER'' -> regular user who can manage reports.''TECH_USER'' -> who can see his/her and other''s reports as well';
--------------------------------------------------------

--  DDL for Table RA_USER_APP_ROLE_MAP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_USER_APP_ROLE_MAP" 
   (	"SOEID" VARCHAR2(100 CHAR), 
	"ROLE" VARCHAR2(50 CHAR) DEFAULT 'USER', 
	"APP_ID" NUMBER, 
	"REPORT_ID" NUMBER, 
	"CREATED_BY" VARCHAR2(25 CHAR) DEFAULT SYS_CONTEXT('USERENV','OS_USER'), 
	"CREATION_TIME" TIMESTAMP (6) DEFAULT systimestamp, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR) DEFAULT SYS_CONTEXT('USERENV','OS_USER'), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) DEFAULT systimestamp
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_USER_DELEGATION_MASTER

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_USER_DELEGATION_MASTER" 
   (	"DELEGATED_BY_SOEID" VARCHAR2(50 BYTE), 
	"DELEGATED_TO_SOEID" VARCHAR2(50 BYTE), 
	"CAN_DOWNLOAD" CHAR(1 BYTE), 
	"CAN_SHARE" CHAR(1 BYTE), 
	"CAN_DELETE" CHAR(1 BYTE), 
	"CAN_USE_ONLINE_VIEWER" CHAR(1 BYTE), 
	"CAN_RERUN" CHAR(1 BYTE), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"LAST_LOGIN_DTM" DATE, 
	"IS_ACTIVE" CHAR(1 BYTE), 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_USER_DETAILS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_USER_DETAILS" 
   (	"SOEID" VARCHAR2(50 BYTE), 
	"FULL_NAME" VARCHAR2(100 BYTE), 
	"GIVEN_NAME" VARCHAR2(100 BYTE), 
	"LAST_NAME" VARCHAR2(100 BYTE), 
	"EMAIL" VARCHAR2(100 BYTE), 
	"ACTIVE" CHAR(1 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" TIMESTAMP (6), 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" TIMESTAMP (6), 
	"LAST_LOGIN_DTM" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_USER_EMAIL_PREFS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_USER_EMAIL_PREFS" 
   (	"SOEID" VARCHAR2(25 CHAR), 
	"REPORT_SUBMITTED" VARCHAR2(1 CHAR) DEFAULT 'Y', 
	"REPORT_COMPLETED" VARCHAR2(1 CHAR) DEFAULT 'Y', 
	"REPORT_FAILED" VARCHAR2(1 CHAR) DEFAULT 'Y', 
	"REPORT_DELETED" VARCHAR2(1 BYTE) DEFAULT 'Y', 
	"REPORT_PURGED" VARCHAR2(1 CHAR) DEFAULT 'Y', 
	"PURGED_FREQUENCY" NUMBER, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" DATE DEFAULT systimestamp, 
	"LAST_UPDATED_BY" VARCHAR2(25 BYTE), 
	"LAST_UPDATE_TIME" DATE DEFAULT systimestamp, 
	"REPORT_CANCELLED" VARCHAR2(1 CHAR) DEFAULT 'Y'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_USER_FAV_CATEGORY

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_USER_FAV_CATEGORY" 
   (	"CAT_ID" NUMBER, 
	"SOE_ID" VARCHAR2(50 BYTE), 
	"CAT_NAME" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table RA_USER_FAV_CAT_VALUE

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_USER_FAV_CAT_VALUE" 
   (	"CAT_ID" NUMBER, 
	"ID" VARCHAR2(100 BYTE), 
	"LABEL" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table RA_USER_LDAP_GROUPS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_USER_LDAP_GROUPS" 
   (	"LDAP_GROUP_NAME" VARCHAR2(150 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"SOEID" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_USER_LDAP_GROUPS_T

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_USER_LDAP_GROUPS_T" 
   (	"LDAP_GROUP_NAME" VARCHAR2(150 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"SOEID" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_USER_LOGIN_RECD

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_USER_LOGIN_RECD" 
   (	"SOEID" VARCHAR2(50 BYTE), 
	"LOGIN_TIME" TIMESTAMP (6) DEFAULT SYSDATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RA_USER_SCHEDULES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_USER_SCHEDULES" 
   (	"USER_SCHEDULE_ID" NUMBER(38,0), 
	"USER_ID" VARCHAR2(25 CHAR), 
	"TEMPLATE_ID" NUMBER(38,0), 
	"FROM_DATE" TIMESTAMP (6) WITH TIME ZONE DEFAULT current_timestamp, 
	"TO_DATE" TIMESTAMP (6) WITH TIME ZONE DEFAULT NULL, 
	"FREQ" VARCHAR2(10 CHAR) DEFAULT 'DAILY', 
	"INTERVAL" VARCHAR2(2 CHAR) DEFAULT '1', 
	"BYHOUR" VARCHAR2(2 CHAR), 
	"BYMINUTE" VARCHAR2(2 CHAR), 
	"BYDAY" VARCHAR2(100 CHAR), 
	"BYMONTH" VARCHAR2(100 CHAR), 
	"BYDATE" VARCHAR2(100 CHAR), 
	"BYMONTHDAY" VARCHAR2(100 CHAR), 
	"BYSETPOS" VARCHAR2(4 CHAR), 
	"PERIODS" VARCHAR2(1 BYTE), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(25 BYTE), 
	"LAST_UPDATE_TIME" DATE DEFAULT sysdate, 
	"BYSECOND" VARCHAR2(2 CHAR) DEFAULT 00, 
	"SCHEDULE_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"JOB_NAME" VARCHAR2(200 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;


   COMMENT ON COLUMN "RPTAPP"."RA_USER_SCHEDULES"."BYHOUR" IS 'from 0 to 23';
   COMMENT ON COLUMN "RPTAPP"."RA_USER_SCHEDULES"."BYMINUTE" IS '00 to 59';
--------------------------------------------------------

--  DDL for Table RA_XML_REPORT_ID

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RA_XML_REPORT_ID" 
   (	"REPORT_ID" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table REPAIR_START_TIME

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."REPAIR_START_TIME" 
   (	"RUN_ID" NUMBER(*,0), 
	"CREATION_DTM" DATE, 
	"START_TIME" DATE, 
	"END_TIME" DATE, 
	"QUERY_START_TIME" TIMESTAMP (6), 
	"QUERY_END_TIME" TIMESTAMP (6), 
	"FAILED_REASON" CLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("FAILED_REASON") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table REPORT_NAME_TABLE_DMG

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."REPORT_NAME_TABLE_DMG" 
   (	"REPORT_ID" NUMBER(10,0), 
	"REPORT_NAME" VARCHAR2(500 BYTE), 
	"TABLE_NAME" VARCHAR2(30 BYTE), 
	"ERROR_MSG" VARCHAR2(500 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RF_SEEDED_QUERIES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RF_SEEDED_QUERIES" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE DEFAULT sysdate, 
	"EFFECTIVE_TO" DATE DEFAULT '31-DEC-9999', 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT systimestamp, 
	"QUERY_NAME" VARCHAR2(200 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table RLM_QUERY_TEST

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RLM_QUERY_TEST" 
   (	"ID" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RLM_QUERY_TEST2

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RLM_QUERY_TEST2" 
   (	"ID" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table RPT_ENV_PROP

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."RPT_ENV_PROP" 
   (	"KEY" VARCHAR2(50 BYTE), 
	"VALUE" VARCHAR2(1000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table SCHEMA_LOG

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."SCHEMA_LOG" 
   (	"OPERATION" VARCHAR2(25 BYTE), 
	"NAME" VARCHAR2(25 BYTE), 
	"TYPE" VARCHAR2(25 BYTE), 
	"OWNER" VARCHAR2(25 BYTE), 
	"EXECUTER" VARCHAR2(25 BYTE), 
	"EXTRA" VARCHAR2(4000 BYTE), 
	"EVENT_TIME" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table SEEDED_QRY_COLS1415

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."SEEDED_QRY_COLS1415" 
   (	"QUERY_ID" NUMBER(*,0), 
	"COLUMN_ORDER" NUMBER(3,0), 
	"COLUMN_NAME" VARCHAR2(50 BYTE), 
	"COLUMN_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"COLUMN_TYPE" VARCHAR2(30 CHAR), 
	"COLUMN_SUB_TYPE" VARCHAR2(30 BYTE), 
	"COLUMN_TYPE_FORMAT_MASK" VARCHAR2(30 CHAR), 
	"REQUIRED_IN_SELECT_CLAUSE" VARCHAR2(1 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"COLUMN_DATA_TYPE" VARCHAR2(10 CHAR), 
	"MEASURE_FUNCTION" VARCHAR2(30 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table SIT1_DTLS_V

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."SIT1_DTLS_V" 
   (	"SIT1_REPORT_ID" NUMBER(38,0), 
	"SIT1_REPORT_NAME" VARCHAR2(150 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table SLA_DATA

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."SLA_DATA" 
   (	"SOURCE" VARCHAR2(200 BYTE), 
	"REGION" VARCHAR2(200 BYTE), 
	"VALUE" VARCHAR2(200 BYTE), 
	"DATES" DATE, 
	"DETAIL" VARCHAR2(200 BYTE), 
	"STAT" VARCHAR2(200 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table SNOW_HEADER

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."SNOW_HEADER" 
   (	"RQST_ID" VARCHAR2(100 CHAR), 
	"INCIDENT_ID" VARCHAR2(20 CHAR), 
	"INCIDENT_TITLE" VARCHAR2(250 CHAR), 
	"INCIDENT_DESC" VARCHAR2(1000 CHAR), 
	"AFFECTED_USER_ID" VARCHAR2(30 CHAR), 
	"SOURCE_SYSTEM" VARCHAR2(50 CHAR), 
	"PRIMARY_APP_CSIID" VARCHAR2(20 CHAR), 
	"PRIORITY" VARCHAR2(20 CHAR), 
	"OWNER_GROUP" VARCHAR2(100 CHAR), 
	"STATUS" VARCHAR2(20 CHAR), 
	"TYPE" VARCHAR2(20 CHAR), 
	"COMMENTS" VARCHAR2(1000 CHAR), 
	"CREATED_BY" VARCHAR2(30 CHAR), 
	"CREATED_DTTM" TIMESTAMP (6), 
	"LAST_UPDATED_BY" VARCHAR2(30 CHAR), 
	"LAST_UPDATED_DTTM" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table SNOW_INCIDENT_HISTORY

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."SNOW_INCIDENT_HISTORY" 
   (	"INCIDENT_ID" VARCHAR2(20 CHAR), 
	"WORK_NOTES" VARCHAR2(250 CHAR), 
	"UPDATED_BY" VARCHAR2(30 CHAR), 
	"UPDATED_DTTM" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table SNOW_RESOLVED_DETAILS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."SNOW_RESOLVED_DETAILS" 
   (	"INCIDENT_ID" VARCHAR2(20 CHAR), 
	"RESOLVED_METHOD" VARCHAR2(100 CHAR), 
	"RESOLVER_GROUP" VARCHAR2(100 CHAR), 
	"FIX_DESCRIPTION" VARCHAR2(250 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table T

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."T" 
   (	"OWNER" VARCHAR2(30 BYTE), 
	"OBJECT_NAME" VARCHAR2(128 BYTE), 
	"SUBOBJECT_NAME" VARCHAR2(30 BYTE), 
	"OBJECT_ID" NUMBER, 
	"DATA_OBJECT_ID" NUMBER, 
	"OBJECT_TYPE" VARCHAR2(19 BYTE), 
	"CREATED" DATE, 
	"LAST_DDL_TIME" DATE, 
	"TIMESTAMP" VARCHAR2(19 BYTE), 
	"STATUS" VARCHAR2(7 BYTE), 
	"TEMPORARY" VARCHAR2(1 BYTE), 
	"GENERATED" VARCHAR2(1 BYTE), 
	"SECONDARY" VARCHAR2(1 BYTE), 
	"NAMESPACE" NUMBER, 
	"EDITION_NAME" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table T1

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."T1" 
   (	"COL1" NUMBER, 
	"COL2" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table TABLE1

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TABLE1" 
   (	"COLUMN1" TIMESTAMP (6) WITH LOCAL TIME ZONE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table TABLE2

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TABLE2" 
   (	"COLUMN1" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table TABLE3

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TABLE3" 
   (	"COLUMN1" CLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("COLUMN1") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table TABLE4

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TABLE4" 
   (	"COLUMN1" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table TABLE_TS

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TABLE_TS" 
   (	"C_ID" NUMBER, 
	"C_TS" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table TAB_TEST

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TAB_TEST" 
   (	"ABC" VARCHAR2(5 BYTE), 
	"XYZ" NUMBER(2,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table TAPP_FEATURE

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TAPP_FEATURE" 
   (	"LDAP_ROLE" VARCHAR2(200 CHAR), 
	"APP_FEATURES" VARCHAR2(200 CHAR), 
	"ENABLED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table TEMP0001

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TEMP0001" 
   (	"FEED_ID" VARCHAR2(200 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table TEMP0002

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TEMP0002" 
   (	"AS_OF_DT" DATE, 
	"FEED_ID" VARCHAR2(200 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table TEMP1_FILES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TEMP1_FILES" 
   (	"NAME" VARCHAR2(400 BYTE), 
	"IS_EXCEL_SUPPORTED" CHAR(1 BYTE), 
	"EXCEL_TEMPLATE_NAME" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table TEMP_CHANDRA

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TEMP_CHANDRA" 
   (	"APPLY_GL_EXCLUSION_FILTER" CHAR(25 BYTE), 
	"AS_OF_DATE" CHAR(10 BYTE), 
	"GL_SYSTEM" CHAR(9 BYTE), 
	"PP_NAME" CHAR(7 BYTE), 
	"RECON_GROUP_ID" CHAR(14 BYTE), 
	"REGION" CHAR(6 BYTE), 
	"GL_SYS_ID" CHAR(9 BYTE), 
	"ACCOUNT_OWNER" CHAR(13 BYTE), 
	"PROOF_OWNER" CHAR(11 BYTE), 
	"FRS_ACCT" CHAR(8 BYTE), 
	"GOC" CHAR(3 BYTE), 
	"FRS_BSUNIT_CD" CHAR(13 BYTE), 
	"FRS_OPER_UNIT_CD" CHAR(16 BYTE), 
	"FRS_AFFL_CD" CHAR(11 BYTE), 
	"BKG_LDGR_CTRY_CD" CHAR(16 BYTE), 
	"GL_ACCT_1" CHAR(9 BYTE), 
	"GL_ACCT_2" CHAR(9 BYTE), 
	"GAAP_IND" CHAR(8 BYTE), 
	"TRAN_CCY_CD" CHAR(11 BYTE), 
	"USD_AMT_GL_THRESHOLD" CHAR(20 BYTE), 
	"USD_AMT_PP_THRESHOLD" CHAR(20 BYTE), 
	"USD_VAR_AMT_THRESHOLD" CHAR(21 BYTE), 
	"DISPLAY_CLEAN_BALANCE" CHAR(21 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table TEMP_CHANDRA_NZ

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TEMP_CHANDRA_NZ" 
   (	"AS_OF_DT" DATE, 
	"FEED_ID" VARCHAR2(100 BYTE), 
	"REGION" VARCHAR2(100 BYTE), 
	"PRODUCT" VARCHAR2(100 BYTE), 
	"COUNTRY" VARCHAR2(100 BYTE), 
	"FRS_BSUNIT_CD" VARCHAR2(100 BYTE), 
	"GOC" VARCHAR2(100 BYTE), 
	"FDL_ACCT" VARCHAR2(100 BYTE), 
	"UNIQ_ID_IN_SRC_SYS" VARCHAR2(100 BYTE), 
	"GFCID_TYPE" VARCHAR2(100 BYTE), 
	"NATIONALITY" VARCHAR2(100 BYTE), 
	"DOMICILE_COUNTRY_CODE" VARCHAR2(100 BYTE), 
	"DSMT_ATT_VAL_ID" VARCHAR2(100 BYTE), 
	"GL_ACTG_KEY_1" VARCHAR2(100 BYTE), 
	"GL_ACTG_KEY_2" VARCHAR2(100 BYTE), 
	"AFFL_CD" VARCHAR2(100 BYTE), 
	"CUST_LCL_ID" VARCHAR2(100 BYTE), 
	"MAT_TYP" VARCHAR2(100 BYTE), 
	"POST_GEN_ADJ_MAT_DT" DATE, 
	"POST_USER_ADJ_MAT_DT" DATE, 
	"POST_GEN_ADJ_LCL_PROD_CAT_CD" VARCHAR2(100 BYTE), 
	"POST_USER_ADJ_LCL_PROD_CAT_CD" VARCHAR2(100 BYTE), 
	"POST_GEN_ADJ_CUST_ID" VARCHAR2(100 BYTE), 
	"POST_USER_ADJ_CUST_ID" VARCHAR2(100 BYTE), 
	"POST_GEN_ADJ_IB_FLAG" VARCHAR2(100 BYTE), 
	"POST_USER_ADJ_IB_FLAG" VARCHAR2(100 BYTE), 
	"CHANGE_DESCRIPTION" VARCHAR2(100 BYTE), 
	"ENRICHED_MAT_DT_CONTRACTS" NUMBER(35,0), 
	"ENRICHED_MAT_DT_BAS_AMT" NUMBER(35,5), 
	"ENRCHD_LCL_PROD_CAT_CD_CNTRCTS" NUMBER(35,0), 
	"ENRCHD_LCL_PROD_CAT_CD_BAS_AMT" NUMBER(35,5), 
	"ENRICHED_CUST_ID_CONTRACTS" NUMBER(35,0), 
	"ENRICHED_CUST_ID_BAS_AMT" NUMBER(35,5), 
	"ENRICHED_IB_FLAG_CONTRACTS" NUMBER(35,0), 
	"ENRICHED_IB_FLAG_BAS_AMT" NUMBER(35,5)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table TEMP_CLOB_TAB

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TEMP_CLOB_TAB" 
   (	"XMLTEXT" CLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("XMLTEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table TEMP_RA_REPORTS_B1

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TEMP_RA_REPORTS_B1" 
   (	"REPORT_ID" NUMBER(38,0), 
	"APP_ID" NUMBER(38,0), 
	"ID_ON_BI_SERVER" VARCHAR2(200 CHAR), 
	"REPORT_NAME_ON_BI_SERVER" VARCHAR2(100 CHAR), 
	"REPORT_PATH_ON_BI_SERVER" VARCHAR2(500 CHAR), 
	"DISPLAY_REPORT_NAME" VARCHAR2(150 CHAR), 
	"REPORT_DESCRIPTION" VARCHAR2(200 CHAR), 
	"BI_CATEGORY_ID" VARCHAR2(30 CHAR), 
	"SCHEDULING_ALLOWED" VARCHAR2(1 CHAR), 
	"MOVE_TO_ARCHIVE_AFTER_DAYS" NUMBER(2,0), 
	"PURGE_AFTER_DAYS" NUMBER(3,0), 
	"ARCHIVE_ALLLOWED" VARCHAR2(1 CHAR), 
	"ARCHIVE_FORMAT_TYPE" VARCHAR2(10 BYTE), 
	"DATA_SECURITY_ENABLED" CHAR(1 CHAR), 
	"REPORT_SHORT_NAME" VARCHAR2(30 CHAR), 
	"REPORT_TYPE" VARCHAR2(30 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"BI_REPORT_DIRECT_QUERY" VARCHAR2(4000 CHAR), 
	"BI_SERVER" VARCHAR2(30 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"ACTIVE_IND" CHAR(1 BYTE), 
	"REPORT_TOOL" VARCHAR2(20 CHAR), 
	"QUERY_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"IS_EXCEL_SUPPORTED" VARCHAR2(1 BYTE), 
	"EXCEL_TEMPLATE_NAME" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table TEMP_RA_REPORT_PARAMETERS_B

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TEMP_RA_REPORT_PARAMETERS_B" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(2000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR), 
	"ACTIVE_IND" CHAR(1 BYTE) DEFAULT 'Y'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table TEMP_WORK

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TEMP_WORK" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(2000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR), 
	"MULTI_VALUE_LIMIT" NUMBER(38,0), 
	"IS_MULTI_VALUE_NUMERIC" CHAR(1 CHAR), 
	"MULTI_VALUE_SEPARATOR" VARCHAR2(10 CHAR), 
	"MULTI_VALUE_OUT_SEPARATOR" VARCHAR2(10 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table TEST

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TEST" 
   (	"IDX" NUMBER(*,0), 
	"TXT" CLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("TXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table TEST1

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TEST1" 
   (	"COL1" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table TEST_ADJUST_TEMPLATE_AM

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TEST_ADJUST_TEMPLATE_AM" 
   (	"TEMPLATE_NAME" VARCHAR2(100 BYTE), 
	"TEMPLATE_CONTENT" BLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" 
 LOB ("TEMPLATE_CONTENT") STORE AS BASICFILE (
  TABLESPACE "RPTAPP_DATA" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table TEST_INQ

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TEST_INQ" 
   (	"FRS_ACCT_ID" NUMBER(*,0), 
	"FRS_ACCT_NM" VARCHAR2(2000 BYTE), 
	"FRS_ACCT_DESC" NVARCHAR2(2000)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table TEST_PIVOT_NZ

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TEST_PIVOT_NZ" 
   (	"EMPNO" NUMBER(4,0), 
	"ENAME" VARCHAR2(10 BYTE), 
	"JOB" VARCHAR2(9 BYTE), 
	"MGR" NUMBER(4,0), 
	"HIREDATE" DATE, 
	"SAL" NUMBER(7,2), 
	"COMM" NUMBER(7,2), 
	"DEPTNO" NUMBER(2,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table TEST_RA_SEEDED_QUERY

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TEST_RA_SEEDED_QUERY" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"MAX_RECORD_COUNT" NUMBER(38,0), 
	"DYNAMIC_QUERY_TEMPLATE_ID" NUMBER(38,0), 
	"QUERY_EXEC_TIME_OUT_SECONDS" NUMBER(38,0), 
	"QUERY_EXTRACT_TIME_OUT_SECONDS" NUMBER(38,0), 
	"HTML_PAGE_MAX_RECORDS" NUMBER(38,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING ) ;
--------------------------------------------------------

--  DDL for Table TEST_TAB

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TEST_TAB" 
   (	"PARENT_ID" NUMBER(*,0), 
	"CHILD_ID" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table TEST_VK

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TEST_VK" 
   (	"NUM1" NUMBER(3,0), 
	"NUM2" NUMBER(3,0), 
	"NUM3" NUMBER(3,0), 
	"ID" NUMBER(5,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table TMP_RA_DATA_SOURCES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TMP_RA_DATA_SOURCES" 
   (	"DS_ID" NUMBER(38,0), 
	"DS_CONN_STRING" VARCHAR2(200 CHAR), 
	"DS_JNDI_NAME" VARCHAR2(30 BYTE), 
	"DS_USER_ID" VARCHAR2(30 BYTE), 
	"DS_PORT" NUMBER(5,0), 
	"DS_IP" VARCHAR2(15 BYTE), 
	"DS_ENCRYPT_PASSWD" VARCHAR2(20 BYTE), 
	"APP_ID" NUMBER(38,0), 
	"DS_TYPE" VARCHAR2(150 BYTE), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"DS_NAME" VARCHAR2(100 CHAR), 
	"DRIVER_CLASS" VARCHAR2(1024 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table TMP_RA_REPORT_INSTANCES

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TMP_RA_REPORT_INSTANCES" 
   (	"RUN_ID" NUMBER(*,0), 
	"REPORT_ID" NUMBER(38,0), 
	"BI_INSTANCE_ID" NUMBER, 
	"INSTANCE_NAME" VARCHAR2(150 BYTE), 
	"OUTPUT_TYPE" VARCHAR2(30 BYTE), 
	"OUTPUT_PATH" VARCHAR2(4000 BYTE), 
	"SUBMITTED_BY_SOEID" VARCHAR2(25 CHAR), 
	"STATUS" NUMBER(38,0), 
	"START_TIME" DATE, 
	"END_TIME" DATE, 
	"TEMPLATE_ID" NUMBER(*,0), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"FAILED_REASON" CLOB, 
	"ORIGINAL_RUN_ID" NUMBER(*,0), 
	"PROCESSING_STATUS" NUMBER(*,0), 
	"EVENT_INSTANCE_ID" NUMBER(*,0), 
	"SUBSCRIPTION_ID" NUMBER(*,0), 
	"REASON" VARCHAR2(500 CHAR), 
	"USER_SCHEDULE_ID" NUMBER(38,0), 
	"TRIGGERED_BY" VARCHAR2(10 CHAR), 
	"USER_ID" VARCHAR2(25 CHAR), 
	"CONCATENATED_PROMPTS" VARCHAR2(4000 CHAR), 
	"OUTPUT_FILE_SIZE" NUMBER, 
	"OUTPUT_NUM_OF_ROWS" NUMBER, 
	"OUTPUT_COMPRESSED_FILE_SIZE" NUMBER, 
	"IS_MAXROWS_EXCEED" CHAR(1 BYTE), 
	"QUERY_START_TIME" TIMESTAMP (6), 
	"QUERY_END_TIME" TIMESTAMP (6), 
	"ACTIVE_IND" CHAR(1 BYTE), 
	"IS_SUBMITTED_BY_EXTR_SYS" CHAR(1 BYTE), 
	"IS_ONLINE_AVAILABLE" CHAR(1 BYTE), 
	"ONLINE_ERROR" VARCHAR2(500 BYTE), 
	"EXTR_SYS_CALLBACK_URL" VARCHAR2(500 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("FAILED_REASON") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table TRACKER_DTLS_V

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TRACKER_DTLS_V" 
   (	"R_SEQ" NUMBER(38,0), 
	"TRACKER_REPORT_ID" NUMBER(38,0), 
	"TRACKER_REPORT_NAME" VARCHAR2(150 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table TRADE

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TRADE" 
   (	"ID" NUMBER, 
	"SYMBOL" VARCHAR2(5 BYTE), 
	"CREATED" DATE, 
	"QUANTITY" NUMBER, 
	"AMOUNT" NUMBER(8,2)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table TST123

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."TST123" 
   (	"QUERY_ID" NUMBER(*,0), 
	"QUERY_TEXT" CLOB, 
	"QUERY_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE DEFAULT TO_DATE('31-DEC-9999','DD-MON-YYYY'), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"QUERY_NAME" VARCHAR2(200 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("QUERY_TEXT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------

--  DDL for Table T_RA_REPORT_MIGRATION

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."T_RA_REPORT_MIGRATION" 
   (	"NEW_REPORT_ID" NUMBER, 
	"OLD_REPORT_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table T_RUNREPO

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."T_RUNREPO" 
   (	"LDAP_ROLE" VARCHAR2(200 CHAR), 
	"APP_FEATURES" VARCHAR2(200 CHAR), 
	"ENABLED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table UAT1_DTLS_V

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."UAT1_DTLS_V" 
   (	"UAT1_REPORT_ID" NUMBER(38,0), 
	"UAT1_REPORT_NAME" VARCHAR2(150 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table UATA_DTLS_V

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."UATA_DTLS_V" 
   (	"UATA_REPORT_ID" NUMBER(38,0), 
	"UATA_REPORT_NAME" VARCHAR2(150 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table UP_FFS_SHEET

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."UP_FFS_SHEET" 
   (	"SR_NO" NUMBER(4,0), 
	"REPORT_ID" NUMBER(6,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table VALID_VBK

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."VALID_VBK" 
   (	"REPORT_ID" NUMBER(38,0), 
	"SCRIPT_SEQ" NUMBER(38,0), 
	"SCRIPT_TEXT" VARCHAR2(4000 CHAR), 
	"SCRIPT_LANGUAGE" VARCHAR2(4000 CHAR), 
	"IS_ACTIVE" CHAR(1 CHAR), 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Table VBK_QC_1426

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."VBK_QC_1426" 
   (	"QUERY_ID" NUMBER(*,0), 
	"COLUMN_ORDER" NUMBER(3,0), 
	"COLUMN_NAME" VARCHAR2(50 BYTE), 
	"COLUMN_DISPLAY_NAME" VARCHAR2(200 CHAR), 
	"COLUMN_TYPE" VARCHAR2(30 CHAR), 
	"COLUMN_SUB_TYPE" VARCHAR2(30 BYTE), 
	"COLUMN_TYPE_FORMAT_MASK" VARCHAR2(30 CHAR), 
	"REQUIRED_IN_SELECT_CLAUSE" VARCHAR2(1 CHAR), 
	"EFFECTIVE_FROM" DATE, 
	"EFFECTIVE_TO" DATE, 
	"CREATED_BY" VARCHAR2(25 CHAR), 
	"CREATION_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"LAST_UPDATED_BY" VARCHAR2(25 CHAR), 
	"LAST_UPDATE_TIME" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"COLUMN_DATA_TYPE" VARCHAR2(10 CHAR), 
	"MEASURE_FUNCTION" VARCHAR2(30 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table VBK_RP_1426

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."VBK_RP_1426" 
   (	"PARAMETER_ID" NUMBER(38,0), 
	"REPORT_ID" NUMBER(38,0), 
	"MANDATORY_IND" VARCHAR2(2 CHAR), 
	"PARAMETER_DATA_TYPE" VARCHAR2(30 CHAR), 
	"ORDERING_SEQUENCE" NUMBER(38,0), 
	"ORDERING_SEQUENCE_IN_BI" NUMBER(38,0), 
	"PARAMETER_NAME_BI" VARCHAR2(200 CHAR), 
	"INPUT_TYPE_ID" NUMBER(38,0), 
	"MULTIPLE_VALUE_ALLOWED" VARCHAR2(1 CHAR), 
	"PARAMETER_DEFAULT_VALUE" VARCHAR2(100 CHAR), 
	"INITIAL_DISPLAY_IND" VARCHAR2(1 CHAR), 
	"DS_ID" NUMBER(38,0), 
	"LOV_QUERY" VARCHAR2(4000 CHAR), 
	"PARAMETER_QUERY_TIMEOUT" NUMBER(2,0), 
	"ACTIVE_FLAG" VARCHAR2(1 CHAR), 
	"USER_SEARCH_STRING_REQUIRED" VARCHAR2(1 CHAR), 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"CREATION_DTM" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(50 BYTE), 
	"LAST_UPDATE_DTM" DATE, 
	"PARAMETER_NAME_IN_UI" VARCHAR2(200 CHAR), 
	"EVENT_PARAMETER_NAME" VARCHAR2(25 CHAR), 
	"PARAM_NAME_IN_QUERY" VARCHAR2(200 CHAR), 
	"MULTI_VALUE_LIMIT" NUMBER(38,0), 
	"IS_MULTI_VALUE_NUMERIC" CHAR(1 CHAR), 
	"MULTI_VALUE_SEPARATOR" VARCHAR2(10 CHAR), 
	"MULTI_VALUE_OUT_SEPARATOR" VARCHAR2(10 CHAR), 
	"DS_ID2" NUMBER(38,0), 
	"LOV_QUERY2" VARCHAR2(4000 CHAR), 
	"EXT_PARAMETER_NAME" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Table XMLTYPETEST

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."XMLTYPETEST" 
   (	"ID" NUMBER, 
	"XMLDOC" "SYS"."XMLTYPE" 
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 XMLTYPE COLUMN "XMLDOC" STORE AS BASICFILE BINARY XML (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ALLOW NONSCHEMA DISALLOW ANYSCHEMA ;
--------------------------------------------------------

--  DDL for Table XYZ

--------------------------------------------------------


  CREATE TABLE "RPTAPP"."XYZ" 
   (	"NAME" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for View AQ$MYQUEUETABLE

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."AQ$MYQUEUETABLE" ("QUEUE", "MSG_ID", "CORR_ID", "MSG_PRIORITY", "MSG_STATE", "DELAY", "DELAY_TIMESTAMP", "EXPIRATION", "ENQ_TIME", "ENQ_TIMESTAMP", "ENQ_USER_ID", "ENQ_TXN_ID", "DEQ_TIME", "DEQ_TIMESTAMP", "DEQ_USER_ID", "DEQ_TXN_ID", "RETRY_COUNT", "EXCEPTION_QUEUE_OWNER", "EXCEPTION_QUEUE", "USER_DATA", "ORIGINAL_QUEUE_NAME", "ORIGINAL_QUEUE_OWNER", "EXPIRATION_REASON", "SENDER_NAME", "SENDER_ADDRESS", "SENDER_PROTOCOL", "ORIGINAL_MSGID") AS 
  SELECT q_name QUEUE, msgid MSG_ID, corrid CORR_ID, priority MSG_PRIORITY, decode(state, 0,   'READY',
                                1,   'WAIT',
                                2,   'PROCESSED',
                                3,   'EXPIRED',
                                10,  'BUFFERED_EXPIRED') MSG_STATE, cast(FROM_TZ(delay, '00:00')
                  at time zone sessiontimezone as date) DELAY, cast(FROM_TZ(delay, '00:00')
               at time zone sessiontimezone as timestamp) DELAY_TIMESTAMP, expiration, cast(FROM_TZ(enq_time, '00:00')
                  at time zone sessiontimezone as date) ENQ_TIME, cast(FROM_TZ(enq_time, '00:00')
                  at time zone sessiontimezone as timestamp) 
                  ENQ_TIMESTAMP, enq_uid ENQ_USER_ID, enq_tid ENQ_TXN_ID, cast(FROM_TZ(deq_time, '00:00')
                  at time zone sessiontimezone as date) DEQ_TIME, cast(FROM_TZ(deq_time, '00:00')
                  at time zone sessiontimezone as timestamp) 
                  DEQ_TIMESTAMP, deq_uid DEQ_USER_ID, deq_tid DEQ_TXN_ID, retry_count,  decode (state, 0, exception_qschema, 
                                  1, exception_qschema, 
                                  2, exception_qschema,  
                                  NULL) EXCEPTION_QUEUE_OWNER,  decode (state, 0, exception_queue, 
                                  1, exception_queue, 
                                  2, exception_queue,  
                                  NULL) EXCEPTION_QUEUE,  user_data,  decode (state, 3, 
                     decode (deq_tid, 'INVALID_TRANSACTION', NULL, 
                             exception_queue), NULL)
                                ORIGINAL_QUEUE_NAME,  decode (state, 3, 
                     decode (deq_tid, 'INVALID_TRANSACTION', NULL, 
                             exception_qschema), NULL)
                                ORIGINAL_QUEUE_OWNER,  decode(state, 3, 
                     decode(deq_time, NULL, 
                       decode(deq_tid, NULL,
                       decode (expiration , NULL , 'MAX_RETRY_EXCEEDED',
                            'TIME_EXPIRATION'),
                              'INVALID_TRANSACTION', NULL,
                              'MAX_RETRY_EXCEEDED'), NULL), NULL) 
                             EXPIRATION_REASON , sender_name SENDER_NAME, sender_address SENDER_ADDRESS, sender_protocol SENDER_PROTOCOL, dequeue_msgid ORIGINAL_MSGID  FROM "MYQUEUETABLE" WHERE state != 7 AND   state != 9 WITH READ ONLY;
--------------------------------------------------------

--  DDL for View AQ$QUE_RA_INST_PROMPT_VLUS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."AQ$QUE_RA_INST_PROMPT_VLUS" ("QUEUE", "MSG_ID", "CORR_ID", "MSG_PRIORITY", "MSG_STATE", "DELAY", "DELAY_TIMESTAMP", "EXPIRATION", "ENQ_TIME", "ENQ_TIMESTAMP", "ENQ_USER_ID", "ENQ_TXN_ID", "DEQ_TIME", "DEQ_TIMESTAMP", "DEQ_USER_ID", "DEQ_TXN_ID", "RETRY_COUNT", "EXCEPTION_QUEUE_OWNER", "EXCEPTION_QUEUE", "USER_DATA", "ORIGINAL_QUEUE_NAME", "ORIGINAL_QUEUE_OWNER", "EXPIRATION_REASON", "SENDER_NAME", "SENDER_ADDRESS", "SENDER_PROTOCOL", "ORIGINAL_MSGID") AS 
  SELECT q_name QUEUE, msgid MSG_ID, corrid CORR_ID, priority MSG_PRIORITY, decode(state, 0,   'READY',
                                1,   'WAIT',
                                2,   'PROCESSED',
                                3,   'EXPIRED',
                                10,  'BUFFERED_EXPIRED') MSG_STATE, cast(FROM_TZ(delay, '00:00')
                  at time zone sessiontimezone as date) DELAY, cast(FROM_TZ(delay, '00:00')
               at time zone sessiontimezone as timestamp) DELAY_TIMESTAMP, expiration, cast(FROM_TZ(enq_time, '00:00')
                  at time zone sessiontimezone as date) ENQ_TIME, cast(FROM_TZ(enq_time, '00:00')
                  at time zone sessiontimezone as timestamp) 
                  ENQ_TIMESTAMP, enq_uid ENQ_USER_ID, enq_tid ENQ_TXN_ID, cast(FROM_TZ(deq_time, '00:00')
                  at time zone sessiontimezone as date) DEQ_TIME, cast(FROM_TZ(deq_time, '00:00')
                  at time zone sessiontimezone as timestamp) 
                  DEQ_TIMESTAMP, deq_uid DEQ_USER_ID, deq_tid DEQ_TXN_ID, retry_count,  decode (state, 0, exception_qschema, 
                                  1, exception_qschema, 
                                  2, exception_qschema,  
                                  NULL) EXCEPTION_QUEUE_OWNER,  decode (state, 0, exception_queue, 
                                  1, exception_queue, 
                                  2, exception_queue,  
                                  NULL) EXCEPTION_QUEUE,  user_data,  decode (state, 3, 
                     decode (deq_tid, 'INVALID_TRANSACTION', NULL, 
                             exception_queue), NULL)
                                ORIGINAL_QUEUE_NAME,  decode (state, 3, 
                     decode (deq_tid, 'INVALID_TRANSACTION', NULL, 
                             exception_qschema), NULL)
                                ORIGINAL_QUEUE_OWNER,  decode(state, 3, 
                     decode(deq_time, NULL, 
                       decode(deq_tid, NULL,
                       decode (expiration , NULL , 'MAX_RETRY_EXCEEDED',
                            'TIME_EXPIRATION'),
                              'INVALID_TRANSACTION', NULL,
                              'MAX_RETRY_EXCEEDED'), NULL), NULL) 
                             EXPIRATION_REASON , sender_name SENDER_NAME, sender_address SENDER_ADDRESS, sender_protocol SENDER_PROTOCOL, dequeue_msgid ORIGINAL_MSGID  FROM "QUE_RA_INST_PROMPT_VLUS" WHERE state != 7 AND   state != 9 WITH READ ONLY;
--------------------------------------------------------

--  DDL for View AQ$TRADE_QUEUE_TABLE

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."AQ$TRADE_QUEUE_TABLE" ("QUEUE", "MSG_ID", "CORR_ID", "MSG_PRIORITY", "MSG_STATE", "DELAY", "DELAY_TIMESTAMP", "EXPIRATION", "ENQ_TIME", "ENQ_TIMESTAMP", "ENQ_USER_ID", "ENQ_TXN_ID", "DEQ_TIME", "DEQ_TIMESTAMP", "DEQ_USER_ID", "DEQ_TXN_ID", "RETRY_COUNT", "EXCEPTION_QUEUE_OWNER", "EXCEPTION_QUEUE", "USER_DATA", "ORIGINAL_QUEUE_NAME", "ORIGINAL_QUEUE_OWNER", "EXPIRATION_REASON", "SENDER_NAME", "SENDER_ADDRESS", "SENDER_PROTOCOL", "ORIGINAL_MSGID") AS 
  SELECT q_name QUEUE, msgid MSG_ID, corrid CORR_ID, priority MSG_PRIORITY, decode(state, 0,   'READY',
                                1,   'WAIT',
                                2,   'PROCESSED',
                                3,   'EXPIRED',
                                10,  'BUFFERED_EXPIRED') MSG_STATE, cast(FROM_TZ(delay, '00:00')
                  at time zone sessiontimezone as date) DELAY, cast(FROM_TZ(delay, '00:00')
               at time zone sessiontimezone as timestamp) DELAY_TIMESTAMP, expiration, cast(FROM_TZ(enq_time, '00:00')
                  at time zone sessiontimezone as date) ENQ_TIME, cast(FROM_TZ(enq_time, '00:00')
                  at time zone sessiontimezone as timestamp) 
                  ENQ_TIMESTAMP, enq_uid ENQ_USER_ID, enq_tid ENQ_TXN_ID, cast(FROM_TZ(deq_time, '00:00')
                  at time zone sessiontimezone as date) DEQ_TIME, cast(FROM_TZ(deq_time, '00:00')
                  at time zone sessiontimezone as timestamp) 
                  DEQ_TIMESTAMP, deq_uid DEQ_USER_ID, deq_tid DEQ_TXN_ID, retry_count,  decode (state, 0, exception_qschema, 
                                  1, exception_qschema, 
                                  2, exception_qschema,  
                                  NULL) EXCEPTION_QUEUE_OWNER,  decode (state, 0, exception_queue, 
                                  1, exception_queue, 
                                  2, exception_queue,  
                                  NULL) EXCEPTION_QUEUE,  user_data,  decode (state, 3, 
                     decode (deq_tid, 'INVALID_TRANSACTION', NULL, 
                             exception_queue), NULL)
                                ORIGINAL_QUEUE_NAME,  decode (state, 3, 
                     decode (deq_tid, 'INVALID_TRANSACTION', NULL, 
                             exception_qschema), NULL)
                                ORIGINAL_QUEUE_OWNER,  decode(state, 3, 
                     decode(deq_time, NULL, 
                       decode(deq_tid, NULL,
                       decode (expiration , NULL , 'MAX_RETRY_EXCEEDED',
                            'TIME_EXPIRATION'),
                              'INVALID_TRANSACTION', NULL,
                              'MAX_RETRY_EXCEEDED'), NULL), NULL) 
                             EXPIRATION_REASON , sender_name SENDER_NAME, sender_address SENDER_ADDRESS, sender_protocol SENDER_PROTOCOL, dequeue_msgid ORIGINAL_MSGID  FROM "TRADE_QUEUE_TABLE" WHERE state != 7 AND   state != 9 WITH READ ONLY;
--------------------------------------------------------

--  DDL for View AQ$_MYQUEUETABLE_F

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."AQ$_MYQUEUETABLE_F" ("Q_NAME", "ROW_ID", "MSGID", "CORRID", "PRIORITY", "STATE", "DELAY", "EXPIRATION", "ENQ_TIME", "ENQ_UID", "ENQ_TID", "DEQ_TIME", "DEQ_UID", "DEQ_TID", "RETRY_COUNT", "EXCEPTION_QSCHEMA", "EXCEPTION_QUEUE", "CSCN", "DSCN", "CHAIN_NO", "LOCAL_ORDER_NO", "TIME_MANAGER_INFO", "STEP_NO", "USER_DATA", "SENDER_NAME", "SENDER_ADDRESS", "SENDER_PROTOCOL", "DEQUEUE_MSGID", "DELIVERY_MODE", "SEQUENCE_NUM", "MSG_NUM", "QUEUE_ID", "USER_PROP") AS 
  SELECT  /*+ NO_MERGE (qo) USE_NL(qt) */ qt.q_name Q_NAME, qt.rowid ROW_ID, qt.msgid MSGID, qt.corrid CORRID, qt.priority PRIORITY, qt.state STATE, cast(FROM_TZ(qt.delay, '00:00') at time zone sessiontimezone as timestamp) DELAY, qt.expiration EXPIRATION, cast(FROM_TZ(qt.enq_time, '00:00') at time zone sessiontimezone as timestamp) ENQ_TIME, qt.enq_uid ENQ_UID, qt.enq_tid ENQ_TID, cast(FROM_TZ(qt.deq_time, '00:00') at time zone sessiontimezone as timestamp) DEQ_TIME, qt.deq_uid DEQ_UID, qt.deq_tid DEQ_TID, qt.retry_count RETRY_COUNT, qt.exception_qschema EXCEPTION_QSCHEMA, qt.exception_queue EXCEPTION_QUEUE, qt.cscn CSCN, qt.dscn DSCN, qt.chain_no CHAIN_NO, qt.local_order_no LOCAL_ORDER_NO, cast(FROM_TZ(qt.time_manager_info, '00:00') at time zone sessiontimezone as timestamp)   TIME_MANAGER_INFO, qt.step_no STEP_NO, qt.user_data USER_DATA ,qt.sender_name SENDER_NAME, qt.sender_address SENDER_ADDRESS, qt.sender_protocol SENDER_PROTOCOL, qt.dequeue_msgid DEQUEUE_MSGID, 'PERSISTENT' DELIVERY_MODE, 0 SEQUENCE_NUM, 0 MSG_NUM, qo.qid QUEUE_ID, qt.user_prop USER_PROP FROM "MYQUEUETABLE" qt, SYS.ALL_INT_DEQUEUE_QUEUES qo  WHERE qt.q_name = qo.name AND qo.owner = 'RPTAPP' WITH READ ONLY;
--------------------------------------------------------

--  DDL for View AQ$_QUE_RA_INST_PROMPT_VLUS_F

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."AQ$_QUE_RA_INST_PROMPT_VLUS_F" ("Q_NAME", "ROW_ID", "MSGID", "CORRID", "PRIORITY", "STATE", "DELAY", "EXPIRATION", "ENQ_TIME", "ENQ_UID", "ENQ_TID", "DEQ_TIME", "DEQ_UID", "DEQ_TID", "RETRY_COUNT", "EXCEPTION_QSCHEMA", "EXCEPTION_QUEUE", "CSCN", "DSCN", "CHAIN_NO", "LOCAL_ORDER_NO", "TIME_MANAGER_INFO", "STEP_NO", "USER_DATA", "SENDER_NAME", "SENDER_ADDRESS", "SENDER_PROTOCOL", "DEQUEUE_MSGID", "DELIVERY_MODE", "SEQUENCE_NUM", "MSG_NUM", "QUEUE_ID", "USER_PROP") AS 
  SELECT  /*+ NO_MERGE (qo) USE_NL(qt) */ qt.q_name Q_NAME, qt.rowid ROW_ID, qt.msgid MSGID, qt.corrid CORRID, qt.priority PRIORITY, qt.state STATE, cast(FROM_TZ(qt.delay, '00:00') at time zone sessiontimezone as timestamp) DELAY, qt.expiration EXPIRATION, cast(FROM_TZ(qt.enq_time, '00:00') at time zone sessiontimezone as timestamp) ENQ_TIME, qt.enq_uid ENQ_UID, qt.enq_tid ENQ_TID, cast(FROM_TZ(qt.deq_time, '00:00') at time zone sessiontimezone as timestamp) DEQ_TIME, qt.deq_uid DEQ_UID, qt.deq_tid DEQ_TID, qt.retry_count RETRY_COUNT, qt.exception_qschema EXCEPTION_QSCHEMA, qt.exception_queue EXCEPTION_QUEUE, qt.cscn CSCN, qt.dscn DSCN, qt.chain_no CHAIN_NO, qt.local_order_no LOCAL_ORDER_NO, cast(FROM_TZ(qt.time_manager_info, '00:00') at time zone sessiontimezone as timestamp)   TIME_MANAGER_INFO, qt.step_no STEP_NO, qt.user_data USER_DATA ,qt.sender_name SENDER_NAME, qt.sender_address SENDER_ADDRESS, qt.sender_protocol SENDER_PROTOCOL, qt.dequeue_msgid DEQUEUE_MSGID, 'PERSISTENT' DELIVERY_MODE, 0 SEQUENCE_NUM, 0 MSG_NUM, qo.qid QUEUE_ID, qt.user_prop USER_PROP FROM "QUE_RA_INST_PROMPT_VLUS" qt, SYS.ALL_INT_DEQUEUE_QUEUES qo  WHERE qt.q_name = qo.name AND qo.owner = 'RPTAPP' WITH READ ONLY;
--------------------------------------------------------

--  DDL for View AQ$_TRADE_QUEUE_TABLE_F

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."AQ$_TRADE_QUEUE_TABLE_F" ("Q_NAME", "ROW_ID", "MSGID", "CORRID", "PRIORITY", "STATE", "DELAY", "EXPIRATION", "ENQ_TIME", "ENQ_UID", "ENQ_TID", "DEQ_TIME", "DEQ_UID", "DEQ_TID", "RETRY_COUNT", "EXCEPTION_QSCHEMA", "EXCEPTION_QUEUE", "CSCN", "DSCN", "CHAIN_NO", "LOCAL_ORDER_NO", "TIME_MANAGER_INFO", "STEP_NO", "USER_DATA", "SENDER_NAME", "SENDER_ADDRESS", "SENDER_PROTOCOL", "DEQUEUE_MSGID", "DELIVERY_MODE", "SEQUENCE_NUM", "MSG_NUM", "QUEUE_ID", "USER_PROP") AS 
  SELECT  /*+ NO_MERGE (qo) USE_NL(qt) */ qt.q_name Q_NAME, qt.rowid ROW_ID, qt.msgid MSGID, qt.corrid CORRID, qt.priority PRIORITY, qt.state STATE, cast(FROM_TZ(qt.delay, '00:00') at time zone sessiontimezone as timestamp) DELAY, qt.expiration EXPIRATION, cast(FROM_TZ(qt.enq_time, '00:00') at time zone sessiontimezone as timestamp) ENQ_TIME, qt.enq_uid ENQ_UID, qt.enq_tid ENQ_TID, cast(FROM_TZ(qt.deq_time, '00:00') at time zone sessiontimezone as timestamp) DEQ_TIME, qt.deq_uid DEQ_UID, qt.deq_tid DEQ_TID, qt.retry_count RETRY_COUNT, qt.exception_qschema EXCEPTION_QSCHEMA, qt.exception_queue EXCEPTION_QUEUE, qt.cscn CSCN, qt.dscn DSCN, qt.chain_no CHAIN_NO, qt.local_order_no LOCAL_ORDER_NO, cast(FROM_TZ(qt.time_manager_info, '00:00') at time zone sessiontimezone as timestamp)   TIME_MANAGER_INFO, qt.step_no STEP_NO, qt.user_data USER_DATA ,qt.sender_name SENDER_NAME, qt.sender_address SENDER_ADDRESS, qt.sender_protocol SENDER_PROTOCOL, qt.dequeue_msgid DEQUEUE_MSGID, 'PERSISTENT' DELIVERY_MODE, 0 SEQUENCE_NUM, 0 MSG_NUM, qo.qid QUEUE_ID, qt.user_prop USER_PROP FROM "TRADE_QUEUE_TABLE" qt, SYS.ALL_INT_DEQUEUE_QUEUES qo  WHERE qt.q_name = qo.name AND qo.owner = 'RPTAPP' WITH READ ONLY;
--------------------------------------------------------

--  DDL for View DMRS_INSTALLATION

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRS_INSTALLATION" ("DMRS_PERSISTENCE_VERSION", "DMRS_REPORTS_VERSION", "CREATED_ON") AS 
  select 1.6 DMRS_Persistence_Version, 1.0 DMRS_Reports_Version, to_timestamp('2013/05/20 15:07:26','YYYY/MM/DD HH24:MI:SS') Created_On from dual with read only;
--------------------------------------------------------

--  DDL for View DMRS_VDIAGRAMS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRS_VDIAGRAMS" ("DIAGRAM_NAME", "OBJECT_ID", "OVID", "DIAGRAM_TYPE", "IS_DISPLAY", "VISIBLE", "MASTER_DIAGRAM_ID", "MASTER_DIAGRAM_OVID", "MODEL_ID", "MODEL_OVID", "MODEL_NAME", "NOTATION", "SHOW_ALL_DETAILS", "SHOW_NAMES_ONLY", "SHOW_ELEMENTS", "SHOW_DATATYPE", "SHOW_KEYS", "AUTOROUTE", "BOX_IN_BOX", "DIAGRAM_SVG", "DIAGRAM_PDF", "DESIGN_OVID", "PDF_NAME") AS 
  Select Diagram_Name, Object_Id, Ovid, Diagram_Type, Is_Display, Visible, Master_Diagram_Id, Master_Diagram_Ovid, Model_Id, Model_Ovid, Model_Name, Notation, Show_All_Details, Show_Names_Only, Show_Elements, Show_Datatype,Show_Keys, Autoroute, Box_In_Box, Diagram_Svg, Diagram_Pdf,  Design_Ovid, Diagram_Name||'.PDF' from DMRS_DIAGRAMS;
--------------------------------------------------------

--  DDL for View DMRV_AGGR_FUNC_DIMENSIONS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_AGGR_FUNC_DIMENSIONS" ("AGGREGATE_FUNCTION_ID", "AGGREGATE_FUNCTION_NAME", "AGGREGATE_FUNCTION_OVID", "DIMENSION_ID", "DIMENSION_NAME", "DIMENSION_OVID", "DESIGN_OVID") AS 
  select  Aggregate_Function_ID, Aggregate_Function_Name, Aggregate_Function_OVID, Dimension_ID, Dimension_Name, Dimension_OVID, Design_OVID from DMRS_AGGR_FUNC_DIMENSIONS;
--------------------------------------------------------

--  DDL for View DMRV_AGGR_FUNC_LEVELS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_AGGR_FUNC_LEVELS" ("AGGREGATE_FUNCTION_ID", "AGGREGATE_FUNCTION_NAME", "AGGREGATE_FUNCTION_OVID", "LEVEL_ID", "LEVEL_NAME", "LEVEL_OVID", "DESIGN_OVID") AS 
  select  Aggregate_Function_ID, Aggregate_Function_Name, Aggregate_Function_OVID, Level_ID, Level_Name, Level_OVID, Design_OVID from DMRS_AGGR_FUNC_LEVELS;
--------------------------------------------------------

--  DDL for View DMRV_ATTRIBUTES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_ATTRIBUTES" ("ATTRIBUTE_NAME", "OBJECT_ID", "OVID", "IMPORT_ID", "CONTAINER_ID", "CONTAINER_OVID", "MANDATORY", "DATATYPE_KIND", "VALUE_TYPE", "FORMULA", "SCOPEENTITY_ID", "SCOPEENTITY_OVID", "DOMAIN_ID", "DOMAIN_OVID", "LOGICAL_TYPE_ID", "LOGICAL_TYPE_OVID", "DISTINCT_TYPE_ID", "DISTINCT_TYPE_OVID", "STRUCTURED_TYPE_ID", "STRUCTURED_TYPE_OVID", "COLLECTION_TYPE_ID", "COLLECTION_TYPE_OVID", "CHECK_CONSTRAINT_NAME", "DEFAULT_VALUE", "USE_DOMAIN_CONSTRAINT", "DOMAIN_NAME", "LOGICAL_TYPE_NAME", "STRUCTURED_TYPE_NAME", "DISTINCT_TYPE_NAME", "COLLECTION_TYPE_NAME", "SYNONYMS", "PREFERRED_ABBREVIATION", "RELATIONSHIP_ID", "RELATIONSHIP_OVID", "ENTITY_NAME", "PK_FLAG", "FK_FLAG", "RELATIONSHIP_NAME", "SEQUENCE", "T_SIZE", "T_PRECISION", "CHAR_UNITS", "NATIVE_TYPE", "T_SCALE", "DATA_SOURCE", "SCOPEENTITY_NAME", "DESIGN_OVID") AS 
  select  Attribute_Name, Object_ID, OVID, Import_ID, Container_ID, Container_OVID, Mandatory, DataType_Kind, Value_Type, Formula, ScopeEntity_ID, ScopeEntity_OVID, Domain_ID, Domain_OVID, Logical_Type_ID, Logical_Type_OVID, Distinct_Type_ID, Distinct_Type_OVID, Structured_Type_ID, Structured_Type_OVID, Collection_Type_ID, Collection_Type_OVID, Check_Constraint_Name, Default_Value, Use_Domain_Constraint, Domain_Name, Logical_Type_Name, Structured_Type_Name, Distinct_Type_Name, Collection_Type_Name, Synonyms, Preferred_Abbreviation, Relationship_ID, Relationship_OVID, Entity_Name, PK_Flag, FK_Flag, Relationship_Name, Sequence, T_Size, T_Precision, Char_Units, Native_Type, T_Scale, Data_Source, ScopeEntity_Name, Design_OVID from DMRS_ATTRIBUTES;
--------------------------------------------------------

--  DDL for View DMRV_AVT

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_AVT" ("DATAELEMENT_ID", "DATAELEMENT_OVID", "TYPE", "SEQUENCE", "VALUE", "SHORT_DESCRIPTION", "CONTAINER_ID", "CONTAINER_OVID", "CONTAINER_NAME", "DATAELEMENT_NAME", "DESIGN_OVID") AS 
  select  DataElement_ID, DataElement_OVID, Type, Sequence, Value, Short_Description, Container_ID, Container_OVID, Container_Name, DataElement_Name, Design_OVID from DMRS_AVT;
--------------------------------------------------------

--  DDL for View DMRV_BUSINESS_INFO

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_BUSINESS_INFO" ("DESIGN_ID", "DESIGN_OVID", "DESIGN_NAME", "BUSINESS_INFO_ID", "BUSINESS_INFO_OVID", "BUSINESS_INFO_NAME") AS 
  select  Design_ID, Design_OVID, Design_Name, Business_Info_ID, Business_Info_OVID, Business_Info_Name from DMRS_BUSINESS_INFO;
--------------------------------------------------------

--  DDL for View DMRV_CHANGE_REQUESTS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_CHANGE_REQUESTS" ("DESIGN_ID", "DESIGN_OVID", "DESIGN_NAME", "CHANGE_REQUEST_ID", "CHANGE_REQUEST_OVID", "CHANGE_REQUEST_NAME", "REQUEST_STATUS", "REQUEST_DATE_STRING", "COMPLETION_DATE_STRING", "IS_COMPLETED", "REASON") AS 
  select  Design_ID, Design_OVID, Design_Name, Change_Request_ID, Change_Request_OVID, Change_Request_Name, Request_Status, Request_Date_String, Completion_Date_String, Is_Completed, Reason from DMRS_CHANGE_REQUESTS;
--------------------------------------------------------

--  DDL for View DMRV_CHANGE_REQUEST_ELEMENTS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_CHANGE_REQUEST_ELEMENTS" ("CHANGE_REQUEST_ID", "CHANGE_REQUEST_OVID", "CHANGE_REQUEST_NAME", "ELEMENT_ID", "ELEMENT_OVID", "ELEMENT_NAME", "ELEMENT_TYPE", "DESIGN_OVID") AS 
  select  Change_Request_ID, Change_Request_OVID, Change_Request_Name, Element_ID, Element_OVID, Element_Name, Element_Type, Design_OVID from DMRS_CHANGE_REQUEST_ELEMENTS;
--------------------------------------------------------

--  DDL for View DMRV_CHECK_CONSTRAINTS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_CHECK_CONSTRAINTS" ("DATAELEMENT_ID", "DATAELEMENT_OVID", "TYPE", "SEQUENCE", "CONSTRAINT_NAME", "TEXT", "DATABASE_TYPE", "CONTAINER_ID", "CONTAINER_OVID", "CONTAINER_NAME", "DATAELEMENT_NAME", "DESIGN_OVID") AS 
  select  DataElement_ID, DataElement_OVID, Type, Sequence, Constraint_Name, Text, Database_Type, Container_ID, Container_OVID, Container_Name, DataElement_Name, Design_OVID from DMRS_CHECK_CONSTRAINTS;
--------------------------------------------------------

--  DDL for View DMRV_CLASSIFICATION_TYPES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_CLASSIFICATION_TYPES" ("TYPE_ID", "TYPE_OVID", "TYPE_NAME", "DESIGN_ID", "DESIGN_OVID", "DESIGN_NAME") AS 
  select  Type_ID, Type_OVID, Type_Name, Design_ID, Design_OVID, Design_Name from DMRS_CLASSIFICATION_TYPES;
--------------------------------------------------------

--  DDL for View DMRV_COLLECTION_TYPES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_COLLECTION_TYPES" ("DESIGN_ID", "DESIGN_OVID", "DESIGN_NAME", "COLLECTION_TYPE_ID", "COLLECTION_TYPE_OVID", "COLLECTION_TYPE_NAME", "C_TYPE", "DATATYPE_ID", "DATATYPE_OVID", "DATATYPE_NAME", "DT_TYPE", "DT_REF", "MAX_ELEMENT", "PREDEFINED") AS 
  select  Design_ID, Design_OVID, Design_Name, Collection_Type_ID, Collection_Type_OVID, Collection_Type_Name, C_Type, DataType_ID, DataType_OVID, DataType_Name, DT_Type, DT_Ref, Max_Element, Predefined from DMRS_COLLECTION_TYPES;
--------------------------------------------------------

--  DDL for View DMRV_COLUMNS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_COLUMNS" ("COLUMN_NAME", "ABBREVIATION", "OBJECT_ID", "OVID", "IMPORT_ID", "CONTAINER_ID", "CONTAINER_OVID", "MANDATORY", "DATATYPE_KIND", "VALUE_TYPE", "COMPUTED", "FORMULA", "SCOPEENTITY_ID", "SCOPEENTITY_OVID", "DOMAIN_ID", "DOMAIN_OVID", "LOGICAL_TYPE_ID", "LOGICAL_TYPE_OVID", "DISTINCT_TYPE_ID", "DISTINCT_TYPE_OVID", "STRUCTURED_TYPE_ID", "STRUCTURED_TYPE_OVID", "COLLECTION_TYPE_ID", "COLLECTION_TYPE_OVID", "CHECK_CONSTRAINT_NAME", "DEFAULT_VALUE", "USE_DOMAIN_CONSTRAINT", "DOMAIN_NAME", "LOGICAL_TYPE_NAME", "STRUCTURED_TYPE_NAME", "DISTINCT_TYPE_NAME", "COLLECTION_TYPE_NAME", "USES_DEFAULT", "ENGINEER", "TABLE_NAME", "PK_FLAG", "FK_FLAG", "NATIVE_TYPE", "SEQUENCE", "MODEL_ID", "MODEL_OVID", "MODEL_NAME", "T_SIZE", "T_PRECISION", "T_SCALE", "CHAR_UNITS", "PERSONALLY_ID_INFORMATION", "SENSITIVE_INFORMATION", "MASK_FOR_NONE_PRODUCTION", "SCOPEENTITY_NAME", "AUTO_INCREMENT_COLUMN", "IDENTITY_COLUMN", "AUTO_INCREMENT_GENERATE_ALWAYS", "AUTO_INCREMENT_START_WITH", "AUTO_INCREMENT_INCREMENT_BY", "AUTO_INCREMENT_MIN_VALUE", "AUTO_INCREMENT_MAX_VALUE", "AUTO_INCREMENT_CYCLE", "AUTO_INCREMENT_DISABLE_CACHE", "AUTO_INCREMENT_CACHE", "AUTO_INCREMENT_ORDER", "AUTO_INCREMENT_SEQUENCE_NAME", "AUTO_INCREMENT_TRIGGER_NAME", "DESIGN_OVID") AS 
  select  Column_Name, Abbreviation, Object_ID, OVID, Import_ID, Container_ID, Container_OVID, Mandatory, DataType_Kind, Value_Type, Computed, Formula, ScopeEntity_ID, ScopeEntity_OVID, Domain_ID, Domain_OVID, Logical_Type_ID, Logical_Type_OVID, Distinct_Type_ID, Distinct_Type_OVID, Structured_Type_ID, Structured_Type_OVID, Collection_Type_ID, Collection_Type_OVID, Check_Constraint_Name, Default_Value, Use_Domain_Constraint, Domain_Name, Logical_Type_Name, Structured_Type_Name, Distinct_Type_Name, Collection_Type_Name, Uses_Default, Engineer, Table_Name, PK_Flag, FK_Flag, Native_Type, Sequence, Model_ID, Model_OVID, Model_Name, T_Size, T_Precision, T_Scale, Char_Units, Personally_ID_Information, Sensitive_Information, Mask_For_None_Production, ScopeEntity_Name, Auto_Increment_Column, Identity_Column, Auto_Increment_Generate_Always, Auto_Increment_Start_With, Auto_Increment_Increment_By, Auto_Increment_Min_Value, Auto_Increment_Max_Value, Auto_Increment_Cycle, Auto_Increment_Disable_Cache, Auto_Increment_Cache, Auto_Increment_Order, Auto_Increment_Sequence_Name, Auto_Increment_Trigger_Name, Design_OVID from DMRS_COLUMNS;
--------------------------------------------------------

--  DDL for View DMRV_COLUMN_GROUPS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_COLUMN_GROUPS" ("TABLE_ID", "TABLE_OVID", "SEQUENCE", "COLUMNGROUP_ID", "COLUMNGROUP_OVID", "COLUMNGROUP_NAME", "COLUMNS", "NOTES", "TABLE_NAME", "DESIGN_OVID") AS 
  select  Table_ID, Table_OVID, Sequence, ColumnGroup_ID, ColumnGroup_OVID, ColumnGroup_Name, Columns, Notes, Table_Name, Design_OVID from DMRS_COLUMN_GROUPS;
--------------------------------------------------------

--  DDL for View DMRV_COLUMN_UI

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_COLUMN_UI" ("LABEL", "FORMAT_MASK", "FORM_DISPLAY_WIDTH", "FORM_MAXIMUM_WIDTH", "DISPLAY_AS", "FORM_HEIGHT", "DISPLAYED_ON_FORMS", "DISPLAYED_ON_REPORTS", "READ_ONLY", "HELP_TEXT", "OBJECT_ID", "OBJECT_OVID", "OBJECT_NAME", "DESIGN_OVID") AS 
  select  Label, Format_Mask, Form_Display_Width, Form_Maximum_Width, Display_As, Form_Height, Displayed_On_Forms, Displayed_On_Reports, Read_Only, Help_Text, Object_ID, Object_OVID, Object_Name, Design_OVID from DMRS_COLUMN_UI;
--------------------------------------------------------

--  DDL for View DMRV_CONSTR_INDEX_COLUMNS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_CONSTR_INDEX_COLUMNS" ("INDEX_ID", "INDEX_OVID", "COLUMN_ID", "COLUMN_OVID", "TABLE_ID", "TABLE_OVID", "INDEX_NAME", "TABLE_NAME", "COLUMN_NAME", "SEQUENCE", "SORT_ORDER", "DESIGN_OVID") AS 
  select  Index_ID, Index_OVID, Column_ID, Column_OVID, Table_ID, Table_OVID, Index_Name, Table_Name, Column_Name, Sequence, Sort_Order, Design_OVID from DMRS_CONSTR_INDEX_COLUMNS;
--------------------------------------------------------

--  DDL for View DMRV_CONTACTS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_CONTACTS" ("CONTACT_ID", "CONTACT_OVID", "CONTACT_NAME", "BUSINESS_INFO_ID", "BUSINESS_INFO_OVID", "BUSINESS_INFO_NAME", "DESIGN_OVID") AS 
  select  Contact_ID, Contact_OVID, Contact_Name, Business_Info_ID, Business_Info_OVID, Business_Info_Name, Design_OVID from DMRS_CONTACTS;
--------------------------------------------------------

--  DDL for View DMRV_CONTACT_EMAILS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_CONTACT_EMAILS" ("CONTACT_ID", "CONTACT_OVID", "CONTACT_NAME", "EMAIL_ID", "EMAIL_OVID", "EMAIL_NAME", "DESIGN_OVID") AS 
  select  Contact_ID, Contact_OVID, Contact_Name, Email_ID, Email_OVID, Email_Name, Design_OVID from DMRS_CONTACT_EMAILS;
--------------------------------------------------------

--  DDL for View DMRV_CONTACT_LOCATIONS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_CONTACT_LOCATIONS" ("CONTACT_ID", "CONTACT_OVID", "CONTACT_NAME", "LOCATION_ID", "LOCATION_OVID", "LOCATION_NAME", "DESIGN_OVID") AS 
  select  Contact_ID, Contact_OVID, Contact_Name, Location_ID, Location_OVID, Location_Name, Design_OVID from DMRS_CONTACT_LOCATIONS;
--------------------------------------------------------

--  DDL for View DMRV_CONTACT_RES_LOCATORS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_CONTACT_RES_LOCATORS" ("CONTACT_ID", "CONTACT_OVID", "CONTACT_NAME", "RESOURCE_LOCATOR_ID", "RESOURCE_LOCATOR_OVID", "RESOURCE_LOCATOR_NAME", "DESIGN_OVID") AS 
  select  Contact_ID, Contact_OVID, Contact_Name, Resource_Locator_ID, Resource_Locator_OVID, Resource_Locator_Name, Design_OVID from DMRS_CONTACT_RES_LOCATORS;
--------------------------------------------------------

--  DDL for View DMRV_CONTACT_TELEPHONES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_CONTACT_TELEPHONES" ("CONTACT_ID", "CONTACT_OVID", "CONTACT_NAME", "TELEPHONE_ID", "TELEPHONE_OVID", "TELEPHONE_NAME", "DESIGN_OVID") AS 
  select  Contact_ID, Contact_OVID, Contact_Name, Telephone_ID, Telephone_OVID, Telephone_Name, Design_OVID from DMRS_CONTACT_TELEPHONES;
--------------------------------------------------------

--  DDL for View DMRV_CUBES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_CUBES" ("CUBE_ID", "CUBE_NAME", "CUBE_OVID", "MODEL_ID", "MODEL_NAME", "MODEL_OVID", "PART_DIMENSION_ID", "PART_DIMENSION_NAME", "PART_DIMENSION_OVID", "PART_HIERARCHY_ID", "PART_HIERARCHY_NAME", "PART_HIERARCHY_OVID", "PART_LEVEL_ID", "PART_LEVEL_NAME", "PART_LEVEL_OVID", "FULL_CUBE_SLICE_ID", "FULL_CUBE_SLICE_NAME", "FULL_CUBE_SLICE_OVID", "ORACLE_LONG_NAME", "ORACLE_PLURAL_NAME", "ORACLE_SHORT_NAME", "IS_COMPRESSED_COMPOSITES", "IS_GLOBAL_COMPOSITES", "IS_PARTITIONED", "IS_VIRTUAL", "PART_DESCRIPTION", "DESCRIPTION", "DESIGN_OVID") AS 
  select  Cube_ID, Cube_Name, Cube_OVID, Model_ID, Model_Name, Model_OVID, Part_Dimension_ID, Part_Dimension_Name, Part_Dimension_OVID, Part_Hierarchy_ID, Part_Hierarchy_Name, Part_Hierarchy_OVID, Part_Level_ID, Part_Level_Name, Part_Level_OVID, Full_Cube_Slice_ID, Full_Cube_Slice_Name, Full_Cube_Slice_OVID, Oracle_Long_Name, Oracle_Plural_Name, Oracle_Short_Name, Is_Compressed_Composites, Is_Global_Composites, Is_Partitioned, Is_Virtual, Part_Description, Description, Design_OVID from DMRS_CUBES;
--------------------------------------------------------

--  DDL for View DMRV_CUBE_DIMENSIONS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_CUBE_DIMENSIONS" ("CUBE_ID", "CUBE_NAME", "CUBE_OVID", "DIMENSION_ID", "DIMENSION_NAME", "DIMENSION_OVID", "DESIGN_OVID") AS 
  select  Cube_ID, Cube_Name, Cube_OVID, Dimension_ID, Dimension_Name, Dimension_OVID, Design_OVID from DMRS_CUBE_DIMENSIONS;
--------------------------------------------------------

--  DDL for View DMRV_DATA_FLOW_DIAGRAM_INFOS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_DATA_FLOW_DIAGRAM_INFOS" ("DIAGRAM_ID", "DIAGRAM_OVID", "DIAGRAM_NAME", "INFO_STORE_ID", "INFO_STORE_OVID", "INFO_STORE_NAME", "DESIGN_OVID") AS 
  select  Diagram_ID, Diagram_OVID, Diagram_Name, Info_Store_ID, Info_Store_OVID, Info_Store_Name, Design_OVID from DMRS_DATA_FLOW_DIAGRAM_INFOS;
--------------------------------------------------------

--  DDL for View DMRV_DESIGNS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_DESIGNS" ("DESIGN_ID", "DESIGN_OVID", "DESIGN_NAME", "DATE_PUBLISHED", "PUBLISHED_BY", "PERSISTENCE_VERSION", "VERSION_COMMENTS") AS 
  select  Design_ID, Design_OVID, Design_Name, Date_Published, Published_By, Persistence_Version, Version_Comments from DMRS_DESIGNS;
--------------------------------------------------------

--  DDL for View DMRV_DIAGRAMS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_DIAGRAMS" ("DIAGRAM_NAME", "OBJECT_ID", "OVID", "DIAGRAM_TYPE", "IS_DISPLAY", "VISIBLE", "MASTER_DIAGRAM_ID", "MASTER_DIAGRAM_OVID", "MODEL_ID", "MODEL_OVID", "MODEL_NAME", "SUBVIEW_ID", "SUBVIEW_OVID", "SUBVIEW_NAME", "DISPLAY_ID", "DISPLAY_OVID", "DISPLAY_NAME", "NOTATION", "SHOW_ALL_DETAILS", "SHOW_NAMES_ONLY", "SHOW_ELEMENTS", "SHOW_DATATYPE", "SHOW_KEYS", "AUTOROUTE", "BOX_IN_BOX", "MASTER_DIAGRAM_NAME", "DIAGRAM_SVG", "DIAGRAM_PDF", "DESIGN_OVID") AS 
  select  Diagram_Name, Object_ID, OVID, Diagram_Type, Is_Display, Visible, Master_Diagram_ID, Master_Diagram_OVID, Model_ID, Model_OVID, Model_Name, Subview_ID, Subview_OVID, Subview_Name, Display_ID, Display_OVID, Display_Name, Notation, Show_All_Details, Show_Names_Only, Show_Elements, Show_Datatype, Show_Keys, Autoroute, Box_In_box, Master_Diagram_Name, Diagram_SVG, Diagram_PDF, Design_OVID from DMRS_DIAGRAMS;
--------------------------------------------------------

--  DDL for View DMRV_DIAGRAM_ELEMENTS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_DIAGRAM_ELEMENTS" ("NAME", "TYPE", "GEOMETRY_TYPE", "OBJECT_ID", "OVID", "VIEW_ID", "SOURCE_ID", "SOURCE_OVID", "SOURCE_VIEW_ID", "TARGET_ID", "TARGET_OVID", "TARGET_VIEW_ID", "MODEL_ID", "MODEL_OVID", "LOCATION_X", "HEIGHT", "WIDTH", "BG_COLOR", "FG_COLOR", "USE_DEFAULT_COLOR", "FORMATTING", "POINTS", "DIAGRAM_OVID", "DIAGRAM_ID", "DIAGRAM_NAME", "SOURCE_NAME", "TARGET_NAME", "MODEL_NAME", "DESIGN_OVID") AS 
  select  Name, Type, Geometry_Type, Object_ID, OVID, View_ID, Source_ID, Source_OVID, Source_View_ID, Target_ID, Target_OVID, Target_View_ID, Model_ID, Model_OVID, Location_X, Height, Width, BG_Color, FG_Color, Use_Default_Color, Formatting, Points, Diagram_OVID, Diagram_ID, Diagram_Name, Source_Name, Target_Name, Model_Name, Design_OVID from DMRS_DIAGRAM_ELEMENTS;
--------------------------------------------------------

--  DDL for View DMRV_DIMENSIONS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_DIMENSIONS" ("DIMENSION_ID", "DIMENSION_NAME", "DIMENSION_OVID", "MODEL_ID", "MODEL_NAME", "MODEL_OVID", "BASE_ENTITY_ID", "BASE_ENTITY_NAME", "BASE_ENTITY_OVID", "BASE_LEVEL_ID", "BASE_LEVEL_NAME", "BASE_LEVEL_OVID", "ORACLE_LONG_NAME", "ORACLE_PLURAL_NAME", "ORACLE_SHORT_NAME", "DESCRIPTION", "DESIGN_OVID") AS 
  select  Dimension_ID, Dimension_Name, Dimension_OVID, Model_ID, Model_Name, Model_OVID, Base_Entity_ID, Base_Entity_Name, Base_Entity_OVID, Base_Level_ID, Base_Level_Name, Base_Level_OVID, Oracle_Long_Name, Oracle_Plural_Name, Oracle_Short_Name, Description, Design_OVID from DMRS_DIMENSIONS;
--------------------------------------------------------

--  DDL for View DMRV_DIMENSION_CALC_ATTRS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_DIMENSION_CALC_ATTRS" ("DIMENSION_ID", "DIMENSION_NAME", "DIMENSION_OVID", "CALC_ATTRIBUTE_ID", "CALC_ATTRIBUTE_NAME", "CALC_ATTRIBUTE_OVID", "CALCULATED_EXPR", "DESIGN_OVID") AS 
  select  Dimension_ID, Dimension_Name, Dimension_OVID, Calc_Attribute_ID, Calc_Attribute_Name, Calc_Attribute_OVID, Calculated_Expr, Design_OVID from DMRS_DIMENSION_CALC_ATTRS;
--------------------------------------------------------

--  DDL for View DMRV_DIMENSION_LEVELS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_DIMENSION_LEVELS" ("DIMENSION_ID", "DIMENSION_NAME", "DIMENSION_OVID", "LEVEL_ID", "LEVEL_NAME", "LEVEL_OVID", "DESIGN_OVID") AS 
  select  Dimension_ID, Dimension_Name, Dimension_OVID, Level_ID, Level_Name, Level_OVID, Design_OVID from DMRS_DIMENSION_LEVELS;
--------------------------------------------------------

--  DDL for View DMRV_DISTINCT_TYPES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_DISTINCT_TYPES" ("DESIGN_ID", "DESIGN_OVID", "DESIGN_NAME", "DISTINCT_TYPE_ID", "DISTINCT_TYPE_OVID", "DISTINCT_TYPE_NAME", "LOGICAL_TYPE_ID", "LOGICAL_TYPE_OVID", "LOGICAL_TYPE_NAME", "T_SIZE", "T_PRECISION", "T_SCALE") AS 
  select  Design_ID, Design_OVID, Design_Name, Distinct_Type_ID, Distinct_Type_OVID, Distinct_Type_Name, Logical_Type_ID, Logical_Type_OVID, Logical_Type_Name, T_Size, T_Precision, T_Scale from DMRS_DISTINCT_TYPES;
--------------------------------------------------------

--  DDL for View DMRV_DOCUMENTS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_DOCUMENTS" ("DOCUMENT_ID", "DOCUMENT_OVID", "DOCUMENT_NAME", "BUSINESS_INFO_ID", "BUSINESS_INFO_OVID", "BUSINESS_INFO_NAME", "PARENT_ID", "PARENT_OVID", "PARENT_NAME", "DOC_REFERENCE", "DOC_TYPE", "DESIGN_OVID") AS 
  select  Document_ID, Document_OVID, Document_Name, Business_Info_ID, Business_Info_OVID, Business_Info_Name, Parent_ID, Parent_OVID, Parent_Name, Doc_Reference, Doc_Type, Design_OVID from DMRS_DOCUMENTS;
--------------------------------------------------------

--  DDL for View DMRV_DOCUMENT_ELEMENTS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_DOCUMENT_ELEMENTS" ("DOCUMENT_ID", "DOCUMENT_OVID", "DOCUMENT_NAME", "ELEMENT_ID", "ELEMENT_OVID", "ELEMENT_NAME", "ELEMENT_TYPE", "DESIGN_OVID") AS 
  select  Document_ID, Document_OVID, Document_Name, Element_ID, Element_OVID, Element_Name, Element_Type, Design_OVID from DMRS_DOCUMENT_ELEMENTS;
--------------------------------------------------------

--  DDL for View DMRV_DOMAINS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_DOMAINS" ("DOMAIN_ID", "DOMAIN_NAME", "OVID", "SYNONYMS", "LOGICAL_TYPE_ID", "LOGICAL_TYPE_OVID", "T_SIZE", "T_PRECISION", "T_SCALE", "NATIVE_TYPE", "LT_NAME", "DESIGN_ID", "DESIGN_OVID", "DESIGN_NAME", "DEFAULT_VALUE", "UNIT_OF_MEASURE", "CHAR_UNITS") AS 
  select  Domain_ID, Domain_Name, OVID, Synonyms, Logical_Type_ID, Logical_Type_OVID, T_Size, T_Precision, T_Scale, Native_Type, LT_Name, Design_ID, Design_OVID, Design_Name, Default_Value, Unit_Of_Measure, Char_Units from DMRS_DOMAINS;
--------------------------------------------------------

--  DDL for View DMRV_DOMAIN_AVT

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_DOMAIN_AVT" ("DOMAIN_ID", "DOMAIN_OVID", "SEQUENCE", "VALUE", "SHORT_DESCRIPTION", "DOMAIN_NAME", "DESIGN_OVID") AS 
  select  Domain_ID, Domain_OVID, Sequence, Value, Short_Description, Domain_Name, Design_OVID from DMRS_DOMAIN_AVT;
--------------------------------------------------------

--  DDL for View DMRV_DOMAIN_CHECK_CONSTRAINTS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_DOMAIN_CHECK_CONSTRAINTS" ("DOMAIN_ID", "DOMAIN_OVID", "SEQUENCE", "TEXT", "DATABASE_TYPE", "DOMAIN_NAME", "DESIGN_OVID") AS 
  select  Domain_ID, Domain_OVID, Sequence, Text, Database_Type, Domain_Name, Design_OVID from DMRS_DOMAIN_CHECK_CONSTRAINTS;
--------------------------------------------------------

--  DDL for View DMRV_DOMAIN_VALUE_RANGES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_DOMAIN_VALUE_RANGES" ("DOMAIN_ID", "DOMAIN_OVID", "SEQUENCE", "BEGIN_VALUE", "END_VALUE", "SHORT_DESCRIPTION", "DOMAIN_NAME", "DESIGN_OVID") AS 
  select  Domain_ID, Domain_OVID, Sequence, Begin_Value, End_Value, Short_Description, Domain_Name, Design_OVID from DMRS_DOMAIN_VALUE_RANGES;
--------------------------------------------------------

--  DDL for View DMRV_EMAILS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_EMAILS" ("EMAIL_ID", "EMAIL_OVID", "EMAIL_NAME", "BUSINESS_INFO_ID", "BUSINESS_INFO_OVID", "BUSINESS_INFO_NAME", "EMAIL_ADDRESS", "EMAIL_TYPE", "DESIGN_OVID") AS 
  select  Email_ID, Email_OVID, Email_Name, Business_Info_ID, Business_Info_OVID, Business_Info_Name, Email_Address, Email_Type, Design_OVID from DMRS_EMAILS;
--------------------------------------------------------

--  DDL for View DMRV_ENTITIES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_ENTITIES" ("ENTITY_NAME", "OBJECT_ID", "OVID", "IMPORT_ID", "MODEL_ID", "MODEL_OVID", "STRUCTURED_TYPE_ID", "STRUCTURED_TYPE_OVID", "STRUCTURED_TYPE_NAME", "NUMBER_DATA_ELEMENTS", "CLASSIFICATION_TYPE_ID", "CLASSIFICATION_TYPE_OVID", "CLASSIFICATION_TYPE_NAME", "ALLOW_TYPE_SUBSTITUTION", "MIN_VOLUME", "EXPECTED_VOLUME", "MAX_VOLUME", "GROWTH_RATE_PERCENTS", "GROWTH_RATE_INTERVAL", "NORMAL_FORM", "TEMPORARY_OBJECT_SCOPE", "ADEQUATELY_NORMALIZED", "SUBSTITUTION_PARENT", "SUBSTITUTION_PARENT_OVID", "SYNONYMS", "SYNONYM_TO_DISPLAY", "PREFERRED_ABBREVIATION", "SUPERTYPEENTITY_ID", "SUPERTYPEENTITY_OVID", "ENGINEERING_STRATEGY", "OWNER", "ENTITY_SOURCE", "MODEL_NAME", "SUBSTITUTION_PARENT_NAME", "SUPERTYPEENTITY_NAME", "DESIGN_OVID") AS 
  select  Entity_Name, Object_ID, OVID, Import_ID, Model_ID, Model_OVID, Structured_Type_ID, Structured_Type_OVID, Structured_Type_Name, Number_Data_Elements, Classification_Type_ID, Classification_Type_OVID, Classification_Type_Name, Allow_Type_Substitution, Min_Volume, Expected_Volume, Max_Volume, Growth_Rate_Percents, Growth_Rate_Interval, Normal_Form, Temporary_Object_Scope, Adequately_Normalized, Substitution_Parent, Substitution_Parent_OVID, Synonyms, Synonym_To_Display, Preferred_Abbreviation, SuperTypeEntity_ID, SuperTypeEntity_OVID, Engineering_Strategy, Owner, Entity_Source, Model_Name, Substitution_Parent_Name, SuperTypeEntity_Name, Design_OVID from DMRS_ENTITIES;
--------------------------------------------------------

--  DDL for View DMRV_ENTITYVIEWS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_ENTITYVIEWS" ("ENTITYVIEW_NAME", "OBJECT_ID", "OVID", "MODEL_ID", "MODEL_OVID", "IMPORT_ID", "STRUCTURED_TYPE_ID", "STRUCTURED_TYPE_OVID", "STRUCTURED_TYPE_NAME", "USER_DEFINED", "VIEW_TYPE", "MODEL_NAME", "DESIGN_OVID") AS 
  select  EntityView_Name, Object_ID, OVID, Model_ID, Model_OVID, Import_ID, Structured_Type_ID, Structured_Type_OVID, Structured_Type_Name, User_Defined, View_Type, Model_Name, Design_OVID from DMRS_ENTITYVIEWS;
--------------------------------------------------------

--  DDL for View DMRV_EVENTS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_EVENTS" ("EVENT_ID", "EVENT_OVID", "EVENT_NAME", "MODEL_ID", "MODEL_OVID", "MODEL_NAME", "FLOW_ID", "FLOW_OVID", "FLOW_NAME", "EVENT_TYPE", "TIMES_WHEN_RUN", "DAY_OF_WEEK", "MONTHS", "FREQUENCY", "TIME_FREQUENCY", "MINUTE", "HOUR", "DAY_OF_MONTH", "QUARTER", "YEAR", "ON_DAY", "AT_TIME", "FISCAL", "TEXT", "DESIGN_OVID") AS 
  select  Event_ID, Event_OVID, Event_Name, Model_ID, Model_OVID, Model_Name, Flow_ID, Flow_OVID, Flow_Name, Event_Type, Times_When_Run, Day_Of_Week, Months, Frequency, Time_Frequency, Minute, Hour, Day_Of_Month, Quarter, Year, On_Day, At_Time, Fiscal, Text, Design_OVID from DMRS_EVENTS;
--------------------------------------------------------

--  DDL for View DMRV_EXTERNAL_AGENTS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_EXTERNAL_AGENTS" ("EXTERNAL_AGENT_ID", "EXTERNAL_AGENT_OVID", "EXTERNAL_AGENT_NAME", "DIAGRAM_ID", "DIAGRAM_OVID", "DIAGRAM_NAME", "EXTERNAL_AGENT_TYPE", "FILE_LOCATION", "FILE_SOURCE", "FILE_NAME", "FILE_TYPE", "FILE_OWNER", "DATA_CAPTURE_TYPE", "FIELD_SEPARATOR", "TEXT_DELIMITER", "SKIP_RECORDS", "SELF_DESCRIBING", "DESIGN_OVID") AS 
  select  External_Agent_ID, External_Agent_OVID, External_Agent_Name, Diagram_ID, Diagram_OVID, Diagram_Name, External_Agent_Type, File_Location, File_Source, File_Name, File_Type, File_Owner, Data_Capture_Type, Field_Separator, Text_Delimiter, Skip_Records, Self_Describing, Design_OVID from DMRS_EXTERNAL_AGENTS;
--------------------------------------------------------

--  DDL for View DMRV_EXTERNAL_DATAS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_EXTERNAL_DATAS" ("EXTERNAL_DATA_ID", "EXTERNAL_DATA_OVID", "EXTERNAL_DATA_NAME", "MODEL_ID", "MODEL_OVID", "MODEL_NAME", "LOGICAL_TYPE_ID", "LOGICAL_TYPE_OVID", "LOGICAL_TYPE_NAME", "STARTING_POS", "DESCRIPTION", "DESIGN_OVID") AS 
  select  External_Data_ID, External_Data_OVID, External_Data_Name, Model_ID, Model_OVID, Model_Name, Logical_Type_ID, Logical_Type_OVID, Logical_Type_Name, Starting_Pos, Description, Design_OVID from DMRS_EXTERNAL_DATAS;
--------------------------------------------------------

--  DDL for View DMRV_EXT_AGENT_EXT_DATAS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_EXT_AGENT_EXT_DATAS" ("EXTERNAL_AGENT_ID", "EXTERNAL_AGENT_OVID", "EXTERNAL_AGENT_NAME", "EXTERNAL_DATA_ID", "EXTERNAL_DATA_OVID", "EXTERNAL_DATA_NAME", "DESIGN_OVID") AS 
  select  External_Agent_ID, External_Agent_OVID, External_Agent_Name, External_Data_ID, External_Data_OVID, External_Data_Name, Design_OVID from DMRS_EXT_AGENT_EXT_DATAS;
--------------------------------------------------------

--  DDL for View DMRV_EXT_AGENT_FLOWS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_EXT_AGENT_FLOWS" ("EXTERNAL_AGENT_ID", "EXTERNAL_AGENT_OVID", "EXTERNAL_AGENT_NAME", "FLOW_ID", "FLOW_OVID", "FLOW_NAME", "INCOMING_OUTGOING_FLAG", "DESIGN_OVID") AS 
  select  External_Agent_ID, External_Agent_OVID, External_Agent_Name, Flow_ID, Flow_OVID, Flow_Name, Incoming_Outgoing_Flag, Design_OVID from DMRS_EXT_AGENT_FLOWS;
--------------------------------------------------------

--  DDL for View DMRV_FACT_ENTITIES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_FACT_ENTITIES" ("CUBE_ID", "CUBE_NAME", "CUBE_OVID", "ENTITY_ID", "ENTITY_NAME", "ENTITY_OVID", "DESIGN_OVID") AS 
  select  Cube_ID, Cube_Name, Cube_OVID, Entity_ID, Entity_Name, Entity_OVID, Design_OVID from DMRS_FACT_ENTITIES;
--------------------------------------------------------

--  DDL for View DMRV_FACT_ENTITIES_JOINS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_FACT_ENTITIES_JOINS" ("JOIN_ID", "JOIN_NAME", "JOIN_OVID", "CUBE_ID", "CUBE_NAME", "CUBE_OVID", "LEFT_ENTITY_ID", "LEFT_ENTITY_NAME", "LEFT_ENTITY_OVID", "RIGHT_ENTITY_ID", "RIGHT_ENTITY_NAME", "RIGHT_ENTITY_OVID", "DESIGN_OVID") AS 
  select  Join_ID, Join_Name, Join_OVID, Cube_ID, Cube_Name, Cube_OVID, Left_Entity_ID, Left_Entity_Name, Left_Entity_OVID, Right_Entity_ID, Right_Entity_Name, Right_Entity_OVID, Design_OVID from DMRS_FACT_ENTITIES_JOINS;
--------------------------------------------------------

--  DDL for View DMRV_FLOWS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_FLOWS" ("FLOW_ID", "FLOW_OVID", "FLOW_NAME", "DIAGRAM_ID", "DIAGRAM_OVID", "DIAGRAM_NAME", "EVENT_ID", "EVENT_OVID", "EVENT_NAME", "SOURCE_ID", "SOURCE_OVID", "SOURCE_NAME", "DESTINATION_ID", "DESTINATION_OVID", "DESTINATION_NAME", "PARENT_ID", "PARENT_OVID", "PARENT_NAME", "SOURCE_TYPE", "DESTINATION_TYPE", "SYSTEM_OBJECTIVE", "LOGGING", "OP_CREATE", "OP_READ", "OP_UPDATE", "OP_DELETE", "CRUD_CODE", "DESIGN_OVID") AS 
  select  Flow_ID, Flow_OVID, Flow_Name, Diagram_ID, Diagram_OVID, Diagram_Name, Event_ID, Event_OVID, Event_Name, Source_ID, Source_OVID, Source_Name, Destination_ID, Destination_OVID, Destination_Name, Parent_ID, Parent_OVID, Parent_Name, Source_Type, Destination_Type, System_Objective, Logging, Op_Create, Op_Read, Op_Update, Op_Delete, CRUD_Code, Design_OVID from DMRS_FLOWS;
--------------------------------------------------------

--  DDL for View DMRV_FLOW_INFO_STRUCTURES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_FLOW_INFO_STRUCTURES" ("FLOW_ID", "FLOW_OVID", "FLOW_NAME", "INFO_STRUCTURE_ID", "INFO_STRUCTURE_OVID", "INFO_STRUCTURE_NAME", "DESIGN_OVID") AS 
  select  Flow_ID, Flow_OVID, Flow_Name, Info_Structure_ID, Info_Structure_OVID, Info_Structure_Name, Design_OVID from DMRS_FLOW_INFO_STRUCTURES;
--------------------------------------------------------

--  DDL for View DMRV_FOREIGNKEYS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_FOREIGNKEYS" ("FK_NAME", "MODEL_ID", "MODEL_OVID", "OBJECT_ID", "OVID", "IMPORT_ID", "CHILD_TABLE_NAME", "REFERRED_TABLE_NAME", "ENGINEER", "DELETE_RULE", "CHILD_TABLE_ID", "CHILD_TABLE_OVID", "REFERRED_TABLE_ID", "REFERRED_TABLE_OVID", "REFERRED_KEY_ID", "REFERRED_KEY_OVID", "NUMBER_OF_COLUMNS", "MANDATORY", "TRANSFERABLE", "IN_ARC", "ARC_ID", "MODEL_NAME", "REFERRED_KEY_NAME", "DESIGN_OVID") AS 
  select  FK_Name, Model_ID, Model_OVID, Object_ID, OVID, Import_ID, Child_Table_Name, Referred_Table_Name, Engineer, Delete_Rule, Child_Table_ID, Child_Table_OVID, Referred_Table_ID, Referred_Table_OVID, Referred_Key_ID, Referred_Key_OVID, Number_Of_Columns, Mandatory, Transferable, In_Arc, Arc_ID, Model_Name, Referred_Key_Name, Design_OVID from DMRS_FOREIGNKEYS;
--------------------------------------------------------

--  DDL for View DMRV_GLOSSARIES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_GLOSSARIES" ("GLOSSARY_ID", "GLOSSARY_OVID", "GLOSSARY_NAME", "FILE_NAME", "DESCRIPTION", "INCOMPLETE_MODIFIERS", "CASE_SENSITIVE", "UNIQUE_ABBREVS", "SEPARATOR_TYPE", "SEPARATOR_CHAR", "DATE_PUBLISHED", "PUBLISHED_BY", "PERSISTENCE_VERSION", "VERSION_COMMENTS") AS 
  select  Glossary_ID, Glossary_OVID, Glossary_Name, File_Name, Description, Incomplete_Modifiers, Case_Sensitive, Unique_Abbrevs, Separator_Type, Separator_Char, Date_Published, Published_By, Persistence_Version, Version_Comments from DMRS_GLOSSARIES;
--------------------------------------------------------

--  DDL for View DMRV_GLOSSARY_TERMS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_GLOSSARY_TERMS" ("TERM_ID", "TERM_OVID", "TERM_NAME", "SHORT_DESCRIPTION", "ABBREV", "ALT_ABBREV", "PRIME_WORD", "CLASS_WORD", "MODIFIER", "QUALIFIER", "GLOSSARY_ID", "GLOSSARY_OVID", "GLOSSARY_NAME") AS 
  select  Term_ID, Term_OVID, Term_Name, Short_Description, Abbrev, Alt_Abbrev, Prime_Word, Class_Word, Modifier, Qualifier, Glossary_ID, Glossary_OVID, Glossary_Name from DMRS_GLOSSARY_TERMS;
--------------------------------------------------------

--  DDL for View DMRV_HIERARCHIES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_HIERARCHIES" ("HIERARCHY_ID", "HIERARCHY_NAME", "HIERARCHY_OVID", "MODEL_ID", "MODEL_NAME", "MODEL_OVID", "DIMENSION_ID", "DIMENSION_NAME", "DIMENSION_OVID", "ORACLE_LONG_NAME", "ORACLE_PLURAL_NAME", "ORACLE_SHORT_NAME", "IS_DEFAULT_HIERARCHY", "IS_RAGGED_HIERARCHY", "IS_VALUE_BASED_HIERARCHY", "DESCRIPTION", "DESIGN_OVID") AS 
  select  Hierarchy_ID, Hierarchy_Name, Hierarchy_OVID, Model_ID, Model_Name, Model_OVID, Dimension_ID, Dimension_Name, Dimension_OVID, Oracle_Long_Name, Oracle_Plural_Name, Oracle_Short_Name, Is_Default_Hierarchy, Is_Ragged_Hierarchy, Is_Value_Based_Hierarchy, Description, Design_OVID from DMRS_HIERARCHIES;
--------------------------------------------------------

--  DDL for View DMRV_HIERARCHY_LEVELS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_HIERARCHY_LEVELS" ("HIERARCHY_ID", "HIERARCHY_NAME", "HIERARCHY_OVID", "LEVEL_ID", "LEVEL_NAME", "LEVEL_OVID", "DESIGN_OVID") AS 
  select  Hierarchy_ID, Hierarchy_Name, Hierarchy_OVID, Level_ID, Level_Name, Level_OVID, Design_OVID from DMRS_HIERARCHY_LEVELS;
--------------------------------------------------------

--  DDL for View DMRV_HIERARCHY_ROLLUP_LINKS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_HIERARCHY_ROLLUP_LINKS" ("HIERARCHY_ID", "HIERARCHY_NAME", "HIERARCHY_OVID", "ROLLUP_LINK_ID", "ROLLUP_LINK_NAME", "ROLLUP_LINK_OVID", "DESIGN_OVID") AS 
  select  Hierarchy_ID, Hierarchy_Name, Hierarchy_OVID, Rollup_Link_ID, Rollup_Link_Name, Rollup_Link_OVID, Design_OVID from DMRS_HIERARCHY_ROLLUP_LINKS;
--------------------------------------------------------

--  DDL for View DMRV_INDEXES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_INDEXES" ("INDEX_NAME", "OBJECT_ID", "OVID", "IMPORT_ID", "CONTAINER_ID", "CONTAINER_OVID", "STATE", "FUNCTIONAL", "EXPRESSION", "ENGINEER", "TABLE_NAME", "SPATIAL_INDEX", "SPATIAL_LAYER_TYPE", "GEODETIC_INDEX", "NUMBER_OF_DIMENSIONS", "DESIGN_OVID") AS 
  select  Index_Name, Object_ID, OVID, Import_ID, Container_ID, Container_OVID, State, Functional, Expression, Engineer, Table_Name, Spatial_Index, Spatial_Layer_Type, Geodetic_Index, Number_Of_Dimensions, Design_OVID from DMRS_INDEXES;
--------------------------------------------------------

--  DDL for View DMRV_INFO_STORES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_INFO_STORES" ("INFO_STORE_ID", "INFO_STORE_OVID", "INFO_STORE_NAME", "MODEL_ID", "MODEL_OVID", "MODEL_NAME", "INFO_STORE_TYPE", "OBJECT_TYPE", "IMPLEMENTATION_NAME", "LOCATION", "SOURCE", "FILE_NAME", "FILE_TYPE", "OWNER", "RDBMS_SITE", "SCOPE", "TRANSFER_TYPE", "FIELD_SEPARATOR", "TEXT_DELIMITER", "SKIP_RECORDS", "SELF_DESCRIBING", "SYSTEM_OBJECTIVE", "DESIGN_OVID") AS 
  select  Info_Store_ID, Info_Store_OVID, Info_Store_Name, Model_ID, Model_OVID, Model_Name, Info_Store_Type, Object_Type, Implementation_Name, Location, Source, File_Name, File_Type, Owner, Rdbms_Site, Scope, Transfer_Type, Field_Separator, Text_Delimiter, Skip_Records, Self_Describing, System_Objective, Design_OVID from DMRS_INFO_STORES;
--------------------------------------------------------

--  DDL for View DMRV_INFO_STRUCTURES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_INFO_STRUCTURES" ("INFO_STRUCTURE_ID", "INFO_STRUCTURE_OVID", "INFO_STRUCTURE_NAME", "MODEL_ID", "MODEL_OVID", "MODEL_NAME", "GROWTH_RATE_UNIT", "GROWTH_RATE_PERCENT", "VOLUME", "DESIGN_OVID") AS 
  select  Info_Structure_ID, Info_Structure_OVID, Info_Structure_Name, Model_ID, Model_OVID, Model_Name, Growth_Rate_Unit, Growth_Rate_Percent, Volume, Design_OVID from DMRS_INFO_STRUCTURES;
--------------------------------------------------------

--  DDL for View DMRV_KEYS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_KEYS" ("KEY_NAME", "OBJECT_ID", "OVID", "IMPORT_ID", "CONTAINER_ID", "CONTAINER_OVID", "STATE", "SYNONYMS", "ENTITY_NAME", "DESIGN_OVID") AS 
  select  Key_Name, Object_ID, OVID, Import_ID, Container_ID, Container_OVID, State, Synonyms, Entity_Name, Design_OVID from DMRS_KEYS;
--------------------------------------------------------

--  DDL for View DMRV_KEY_ATTRIBUTES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_KEY_ATTRIBUTES" ("KEY_ID", "KEY_OVID", "ATTRIBUTE_ID", "ATTRIBUTE_OVID", "ENTITY_ID", "ENTITY_OVID", "KEY_NAME", "ENTITY_NAME", "ATTRIBUTE_NAME", "SEQUENCE", "RELATIONSHIP_ID", "RELATIONSHIP_OVID", "RELATIONSHIP_NAME", "DESIGN_OVID") AS 
  select  Key_ID, Key_OVID, Attribute_ID, Attribute_OVID, Entity_ID, Entity_OVID, Key_Name, Entity_Name, Attribute_Name, Sequence, Relationship_ID, Relationship_OVID, Relationship_Name, Design_OVID from DMRS_KEY_ATTRIBUTES;
--------------------------------------------------------

--  DDL for View DMRV_KEY_ELEMENTS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_KEY_ELEMENTS" ("KEY_ID", "KEY_OVID", "TYPE", "ELEMENT_ID", "ELEMENT_OVID", "ELEMENT_NAME", "SEQUENCE", "SOURCE_LABEL", "TARGET_LABEL", "ENTITY_ID", "KEY_NAME", "ENTITY_OVID", "ENTITY_NAME", "DESIGN_OVID") AS 
  select  Key_ID, Key_OVID, Type, Element_ID, Element_OVID, Element_Name, Sequence, Source_Label, Target_Label, Entity_ID, Key_Name, Entity_OVID, Entity_Name, Design_OVID from DMRS_KEY_ELEMENTS;
--------------------------------------------------------

--  DDL for View DMRV_LARGE_TEXT

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_LARGE_TEXT" ("OBJECT_ID", "OVID", "OBJECT_NAME", "TYPE", "TEXT", "DESIGN_OVID") AS 
  select  Object_ID, OVID, Object_Name, Type, Text, Design_OVID from DMRS_LARGE_TEXT;
--------------------------------------------------------

--  DDL for View DMRV_LEVELS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_LEVELS" ("LEVEL_ID", "LEVEL_NAME", "LEVEL_OVID", "MODEL_ID", "MODEL_NAME", "MODEL_OVID", "ENTITY_ID", "ENTITY_NAME", "ENTITY_OVID", "NAME_COLUMN_ID", "NAME_COLUMN_NAME", "NAME_COLUMN_OVID", "VALUE_COLUMN_ID", "VALUE_COLUMN_NAME", "VALUE_COLUMN_OVID", "ORACLE_LONG_NAME", "ORACLE_PLURAL_NAME", "ORACLE_SHORT_NAME", "ROOT_IDENTIFICATION", "IDENTIFICATION_VALUE", "SELECTION_CRITERIA", "SELECTION_CRITERIA_DESCRIPTION", "IS_VALUE_BASED_HIERARCHY", "DESCRIPTION", "DESIGN_OVID") AS 
  select  Level_ID, Level_Name, Level_OVID, Model_ID, Model_Name, Model_OVID, Entity_ID, Entity_Name, Entity_OVID, Name_Column_ID, Name_Column_Name, Name_Column_OVID, Value_Column_ID, Value_Column_Name, Value_Column_OVID, Oracle_Long_Name, Oracle_Plural_Name, Oracle_Short_Name, Root_Identification, Identification_Value, Selection_Criteria, Selection_Criteria_Description, Is_Value_Based_Hierarchy, Description, Design_OVID from DMRS_LEVELS;
--------------------------------------------------------

--  DDL for View DMRV_LEVEL_ATTRS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_LEVEL_ATTRS" ("LEVEL_ID", "LEVEL_NAME", "LEVEL_OVID", "ATTRIBUTE_ID", "ATTRIBUTE_NAME", "ATTRIBUTE_OVID", "IS_DEFAULT_ATTR", "IS_LEVEL_KEY_ATTR", "IS_PARENT_KEY_ATTR", "IS_DESCRIPTIVE_KEY_ATTR", "IS_CALCULATED_ATTR", "DESCRIPTIVE_NAME", "DESCRIPTIVE_IS_INDEXED", "DESCRIPTIVE_SLOW_CHANGING", "CALCULATED_EXPR", "DESIGN_OVID") AS 
  select  Level_ID, Level_Name, Level_OVID, Attribute_ID, Attribute_Name, Attribute_OVID, Is_Default_Attr, Is_Level_Key_Attr, Is_Parent_Key_Attr, Is_Descriptive_Key_Attr, Is_Calculated_Attr, Descriptive_Name, Descriptive_Is_Indexed, Descriptive_Slow_Changing, Calculated_Expr, Design_OVID from DMRS_LEVEL_ATTRS;
--------------------------------------------------------

--  DDL for View DMRV_LOCATIONS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_LOCATIONS" ("LOCATION_ID", "LOCATION_OVID", "LOCATION_NAME", "BUSINESS_INFO_ID", "BUSINESS_INFO_OVID", "BUSINESS_INFO_NAME", "LOC_ADDRESS", "LOC_CITY", "LOC_POST_CODE", "LOC_AREA", "LOC_COUNTRY", "LOC_TYPE", "DESIGN_OVID") AS 
  select  Location_ID, Location_OVID, Location_Name, Business_Info_ID, Business_Info_OVID, Business_Info_Name, Loc_Address, Loc_City, Loc_Post_Code, Loc_Area, Loc_Country, Loc_Type, Design_OVID from DMRS_LOCATIONS;
--------------------------------------------------------

--  DDL for View DMRV_LOGICAL_TO_NATIVE

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_LOGICAL_TO_NATIVE" ("DESIGN_ID", "DESIGN_OVID", "DESIGN_NAME", "LOGICAL_TYPE_ID", "LOGICAL_TYPE_OVID", "LT_NAME", "NATIVE_TYPE", "RDBMS_TYPE", "RDBMS_VERSION", "HAS_SIZE", "HAS_PRECISION", "HAS_SCALE") AS 
  select  Design_ID, Design_OVID, Design_Name, Logical_Type_ID, Logical_Type_OVID, LT_Name, Native_Type, RDBMS_Type, RDBMS_Version, Has_Size, Has_Precision, Has_Scale from DMRS_LOGICAL_TO_NATIVE;
--------------------------------------------------------

--  DDL for View DMRV_LOGICAL_TYPES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_LOGICAL_TYPES" ("DESIGN_ID", "DESIGN_OVID", "DESIGN_NAME", "LOGICAL_TYPE_ID", "OVID", "LT_NAME") AS 
  select  Design_ID, Design_OVID, Design_Name, Logical_Type_ID, OVID, LT_Name from DMRS_LOGICAL_TYPES;
--------------------------------------------------------

--  DDL for View DMRV_MAPPINGS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_MAPPINGS" ("LOGICAL_MODEL_ID", "LOGICAL_MODEL_OVID", "LOGICAL_MODEL_NAME", "LOGICAL_OBJECT_ID", "LOGICAL_OBJECT_OVID", "LOGICAL_OBJECT_NAME", "LOGICAL_OBJECT_TYPE", "RELATIONAL_MODEL_ID", "RELATIONAL_MODEL_OVID", "RELATIONAL_MODEL_NAME", "RELATIONAL_OBJECT_ID", "RELATIONAL_OBJECT_OVID", "RELATIONAL_OBJECT_NAME", "RELATIONAL_OBJECT_TYPE", "ENTITY_ID", "ENTITY_OVID", "ENTITY_NAME", "TABLE_ID", "TABLE_OVID", "TABLE_NAME", "DESIGN_ID", "DESIGN_OVID", "DESIGN_NAME") AS 
  select  Logical_Model_ID, Logical_Model_OVID, Logical_Model_Name, Logical_Object_ID, Logical_Object_OVID, Logical_Object_Name, Logical_Object_Type, Relational_Model_ID, Relational_Model_OVID, Relational_Model_Name, Relational_Object_ID, Relational_Object_OVID, Relational_Object_Name, Relational_Object_Type, Entity_ID, Entity_OVID, Entity_Name, Table_ID, Table_OVID, Table_Name, Design_ID, Design_OVID, Design_Name from DMRS_MAPPINGS;
--------------------------------------------------------

--  DDL for View DMRV_MAPPING_TARGETS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_MAPPING_TARGETS" ("OBJECT_ID", "OBJECT_OVID", "OBJECT_NAME", "TARGET_ID", "TARGET_OVID", "TARGET_NAME", "OBJECT_TYPE", "TARGET_TYPE", "TRANSFORMATION_TYPE", "DESCRIPTION", "DESIGN_OVID") AS 
  select  Object_ID, Object_OVID, Object_Name, Target_ID, Target_OVID, Target_Name, Object_Type, Target_Type, Transformation_Type, Description, Design_OVID from DMRS_MAPPING_TARGETS;
--------------------------------------------------------

--  DDL for View DMRV_MAPPING_TARGET_SOURCES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_MAPPING_TARGET_SOURCES" ("OBJECT_ID", "OBJECT_OVID", "OBJECT_NAME", "TARGET_ID", "TARGET_OVID", "TARGET_NAME", "SOURCE_ID", "SOURCE_OVID", "SOURCE_NAME", "OBJECT_TYPE", "TARGET_TYPE", "SOURCE_TYPE", "DESIGN_OVID") AS 
  select  Object_ID, Object_OVID, Object_Name, Target_ID, Target_OVID, Target_Name, Source_ID, Source_OVID, Source_Name, Object_Type, Target_Type, Source_Type, Design_OVID from DMRS_MAPPING_TARGET_SOURCES;
--------------------------------------------------------

--  DDL for View DMRV_MEASURES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_MEASURES" ("MEASURE_ID", "MEASURE_NAME", "MEASURE_OVID", "MODEL_ID", "MODEL_NAME", "MODEL_OVID", "CUBE_ID", "CUBE_NAME", "CUBE_OVID", "FACT_OBJECT_ID", "FACT_OBJECT_NAME", "FACT_OBJECT_OVID", "ORACLE_LONG_NAME", "ORACLE_PLURAL_NAME", "ORACLE_SHORT_NAME", "FACT_OBJECT_TYPE", "ADDITIVITY_TYPE", "IS_FACT_DIMENSION", "IS_FORMULA", "IS_CUSTOM_FORMULA", "FORMULA", "WHERE_CLAUSE", "DESCRIPTION", "DESIGN_OVID") AS 
  select  Measure_ID, Measure_Name, Measure_OVID, Model_ID, Model_Name, Model_OVID, Cube_ID, Cube_Name, Cube_OVID, Fact_Object_ID, Fact_Object_Name, Fact_Object_OVID, Oracle_Long_Name, Oracle_Plural_Name, Oracle_Short_Name, Fact_Object_Type, Additivity_Type, Is_Fact_Dimension, Is_Formula, Is_Custom_Formula, Formula, Where_Clause, Description, Design_OVID from DMRS_MEASURES;
--------------------------------------------------------

--  DDL for View DMRV_MEASURE_AGGR_FUNCS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_MEASURE_AGGR_FUNCS" ("MEASURE_ID", "MEASURE_NAME", "MEASURE_OVID", "AGGREGATE_FUNCTION_ID", "AGGREGATE_FUNCTION_NAME", "AGGREGATE_FUNCTION_OVID", "MEASURE_ALIAS", "IS_DEFAULT", "DESIGN_OVID") AS 
  select  Measure_ID, Measure_Name, Measure_OVID, Aggregate_Function_ID, Aggregate_Function_Name, Aggregate_Function_OVID, Measure_Alias, Is_Default, Design_OVID from DMRS_MEASURE_AGGR_FUNCS;
--------------------------------------------------------

--  DDL for View DMRV_MEASURE_FOLDERS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_MEASURE_FOLDERS" ("MEASURE_FOLDER_ID", "MEASURE_FOLDER_NAME", "MEASURE_FOLDER_OVID", "MODEL_ID", "MODEL_NAME", "MODEL_OVID", "PARENT_FOLDER_ID", "PARENT_FOLDER_NAME", "PARENT_FOLDER_OVID", "ORACLE_LONG_NAME", "ORACLE_PLURAL_NAME", "ORACLE_SHORT_NAME", "IS_LEAF", "DESCRIPTION", "DESIGN_OVID") AS 
  select  Measure_Folder_ID, Measure_Folder_Name, Measure_Folder_OVID, Model_ID, Model_Name, Model_OVID, Parent_Folder_ID, Parent_Folder_Name, Parent_Folder_OVID, Oracle_Long_Name, Oracle_Plural_Name, Oracle_Short_Name, Is_Leaf, Description, Design_OVID from DMRS_MEASURE_FOLDERS;
--------------------------------------------------------

--  DDL for View DMRV_MEASURE_FOLDER_MEASURES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_MEASURE_FOLDER_MEASURES" ("MEASURE_FOLDER_ID", "MEASURE_FOLDER_NAME", "MEASURE_FOLDER_OVID", "MEASURE_ID", "MEASURE_NAME", "MEASURE_OVID", "PARENT_OBJECT_ID", "PARENT_OBJECT_NAME", "PARENT_OBJECT_OVID", "PARENT_OBJECT_TYPE", "DESIGN_OVID") AS 
  select  Measure_Folder_ID, Measure_Folder_Name, Measure_Folder_OVID, Measure_ID, Measure_Name, Measure_OVID, Parent_Object_ID, Parent_Object_Name, Parent_Object_OVID, Parent_Object_Type, Design_OVID from DMRS_MEASURE_FOLDER_MEASURES;
--------------------------------------------------------

--  DDL for View DMRV_MODELS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_MODELS" ("DESIGN_ID", "DESIGN_OVID", "DESIGN_NAME", "MODEL_ID", "MODEL_OVID", "MODEL_NAME", "MODEL_TYPE", "RDBMS_TYPE") AS 
  select  Design_ID, Design_OVID, Design_Name, Model_ID, Model_OVID, Model_Name, Model_Type, RDBMS_Type from DMRS_MODELS;
--------------------------------------------------------

--  DDL for View DMRV_MODEL_DISPLAYS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_MODEL_DISPLAYS" ("DISPLAY_ID", "DISPLAY_OVID", "DISPLAY_NAME", "MODEL_ID", "MODEL_OVID", "MODEL_NAME", "DESIGN_OVID") AS 
  select  Display_ID, Display_OVID, Display_Name, Model_ID, Model_OVID, Model_Name, Design_OVID from DMRS_MODEL_DISPLAYS;
--------------------------------------------------------

--  DDL for View DMRV_MODEL_NAMING_OPTIONS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_MODEL_NAMING_OPTIONS" ("OBJECT_TYPE", "MAX_NAME_LENGTH", "CHARACTER_CASE", "VALID_CHARACTERS", "MODEL_ID", "MODEL_OVID", "MODEL_NAME", "MODEL_TYPE", "DESIGN_OVID") AS 
  select  Object_type, Max_Name_Length, Character_Case, Valid_Characters, Model_ID, Model_OVID, Model_Name, Model_Type, Design_OVID from DMRS_MODEL_NAMING_OPTIONS;
--------------------------------------------------------

--  DDL for View DMRV_MODEL_SUBVIEWS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_MODEL_SUBVIEWS" ("SUBVIEW_ID", "SUBVIEW_OVID", "SUBVIEW_NAME", "MODEL_ID", "MODEL_OVID", "MODEL_NAME", "DESIGN_OVID") AS 
  select  Subview_ID, Subview_OVID, Subview_Name, Model_ID, Model_OVID, Model_Name, Design_OVID from DMRS_MODEL_SUBVIEWS;
--------------------------------------------------------

--  DDL for View DMRV_NATIVE_TO_LOGICAL

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_NATIVE_TO_LOGICAL" ("RDBMS_TYPE", "RDBMS_VERSION", "NATIVE_TYPE", "LT_NAME", "LOGICAL_TYPE_ID", "LOGICAL_TYPE_OVID", "DESIGN_ID", "DESIGN_OVID", "DESIGN_NAME") AS 
  select  RDBMS_Type, RDBMS_Version, Native_Type, LT_Name, Logical_Type_ID, Logical_Type_OVID, Design_ID, Design_OVID, Design_Name from DMRS_NATIVE_TO_LOGICAL;
--------------------------------------------------------

--  DDL for View DMRV_NOTES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_NOTES" ("OBJECT_ID", "OVID", "OBJECT_NAME", "MODEL_OVID", "MODEL_ID", "MODEL_NAME", "DESIGN_OVID") AS 
  select  Object_ID, OVID, Object_Name, Model_OVID, Model_ID, Model_Name, Design_OVID from DMRS_NOTES;
--------------------------------------------------------

--  DDL for View DMRV_PK_OID_COLUMNS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_PK_OID_COLUMNS" ("COLUMN_ID", "COLUMN_OVID", "TABLE_ID", "TABLE_OVID", "TABLE_NAME", "COLUMN_NAME", "DESIGN_OVID") AS 
  select  Column_ID, Column_OVID, Table_ID, Table_OVID, Table_Name, Column_Name, Design_OVID from DMRS_PK_OID_COLUMNS;
--------------------------------------------------------

--  DDL for View DMRV_PROCESSES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_PROCESSES" ("PROCESS_ID", "PROCESS_OVID", "PROCESS_NAME", "DIAGRAM_ID", "DIAGRAM_OVID", "DIAGRAM_NAME", "TRANSFORMATION_TASK_ID", "TRANSFORMATION_TASK_OVID", "TRANSFORMATION_TASK_NAME", "PARENT_PROCESS_ID", "PARENT_PROCESS_OVID", "PARENT_PROCESS_NAME", "PROCESS_NUMBER", "PROCESS_TYPE", "PROCESS_MODE", "PRIORITY", "FREQUENCY_TIMES", "FREQUENCY_TIME_UNIT", "PEAK_PERIODS_STRING", "PARAMETERS_WRAPPERS_STRING", "INTERACTIVE_MAX_RESPONSE_TIME", "INTERACTIVE_RESPONSE_TIME_UNIT", "BATCH_MIN_TRANSACTIONS", "BATCH_TIME_UNIT", "DESIGN_OVID") AS 
  select  Process_ID, Process_OVID, Process_Name, Diagram_ID, Diagram_OVID, Diagram_Name, Transformation_Task_ID, Transformation_Task_OVID, Transformation_Task_Name, Parent_Process_ID, Parent_Process_OVID, Parent_Process_Name, Process_Number, Process_Type, Process_Mode, Priority, Frequency_Times, Frequency_Time_Unit, Peak_Periods_String, Parameters_Wrappers_String, Interactive_Max_Response_Time, Interactive_Response_Time_Unit, Batch_Min_Transactions, Batch_Time_Unit, Design_OVID from DMRS_PROCESSES;
--------------------------------------------------------

--  DDL for View DMRV_PROCESS_ATTRIBUTES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_PROCESS_ATTRIBUTES" ("PROCESS_ID", "PROCESS_OVID", "ENTITY_ID", "ENTITY_OVID", "FLOW_ID", "FLOW_OVID", "DFD_ID", "DFD_OVID", "PROCESS_NAME", "ENTITY_NAME", "FLOW_NAME", "DFD_NAME", "OP_READ", "OP_CREATE", "OP_UPDATE", "OP_DELETE", "CRUD_CODE", "FLOW_DIRECTION", "ATTRIBUTE_ID", "ATTRIBUTE_OVID", "ATTRIBUTE_NAME", "DESIGN_OVID") AS 
  select  Process_ID, Process_OVID, Entity_ID, Entity_OVID, Flow_ID, Flow_OVID, DFD_ID, DFD_OVID, Process_Name, Entity_Name, Flow_Name, DFD_Name, OP_Read, OP_Create, OP_Update, OP_Delete, CRUD_Code, Flow_Direction, Attribute_ID, Attribute_OVID, Attribute_Name, Design_OVID from DMRS_PROCESS_ATTRIBUTES;
--------------------------------------------------------

--  DDL for View DMRV_PROCESS_ENTITIES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_PROCESS_ENTITIES" ("PROCESS_ID", "PROCESS_OVID", "ENTITY_ID", "ENTITY_OVID", "FLOW_ID", "FLOW_OVID", "DFD_ID", "DFD_OVID", "PROCESS_NAME", "ENTITY_NAME", "FLOW_NAME", "DFD_NAME", "OP_READ", "OP_CREATE", "OP_UPDATE", "OP_DELETE", "CRUD_CODE", "FLOW_DIRECTION", "MODEL_ID", "MODEL_OVID", "MODEL_NAME", "DESIGN_OVID") AS 
  select  Process_ID, Process_OVID, Entity_ID, Entity_OVID, Flow_ID, Flow_OVID, DFD_ID, DFD_OVID, Process_Name, Entity_Name, Flow_Name, DFD_Name, OP_Read, OP_Create, OP_Update, OP_Delete, CRUD_Code, Flow_Direction, Model_ID, Model_OVID, Model_Name, Design_OVID from DMRS_PROCESS_ENTITIES;
--------------------------------------------------------

--  DDL for View DMRV_RAGGED_HIER_LINKS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_RAGGED_HIER_LINKS" ("RAGGED_HIER_LINK_ID", "RAGGED_HIER_LINK_NAME", "RAGGED_HIER_LINK_OVID", "MODEL_ID", "MODEL_NAME", "MODEL_OVID", "PARENT_LEVEL_ID", "PARENT_LEVEL_NAME", "PARENT_LEVEL_OVID", "CHILD_LEVEL_ID", "CHILD_LEVEL_NAME", "CHILD_LEVEL_OVID", "DESCRIPTION", "DESIGN_OVID") AS 
  select  Ragged_Hier_Link_ID, Ragged_Hier_Link_Name, Ragged_Hier_Link_OVID, Model_ID, Model_Name, Model_OVID, Parent_Level_ID, Parent_Level_Name, Parent_Level_OVID, Child_Level_ID, Child_Level_Name, Child_Level_OVID, Description, Design_OVID from DMRS_RAGGED_HIER_LINKS;
--------------------------------------------------------

--  DDL for View DMRV_RAGGED_HIER_LINK_ATTRS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_RAGGED_HIER_LINK_ATTRS" ("RAGGED_HIER_LINK_ID", "RAGGED_HIER_LINK_NAME", "RAGGED_HIER_LINK_OVID", "ATTRIBUTE_ID", "ATTRIBUTE_NAME", "ATTRIBUTE_OVID", "DESIGN_OVID") AS 
  select  Ragged_Hier_Link_ID, Ragged_Hier_Link_Name, Ragged_Hier_Link_OVID, Attribute_ID, Attribute_Name, Attribute_OVID, Design_OVID from DMRS_RAGGED_HIER_LINK_ATTRS;
--------------------------------------------------------

--  DDL for View DMRV_RDBMS_SITES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_RDBMS_SITES" ("SITE_NAME", "SITE_ID", "SITE_OVID", "RDBMS_TYPE", "DESIGN_OVID") AS 
  select  Site_Name, Site_ID, Site_OVID, RDBMS_Type, Design_OVID from DMRS_RDBMS_SITES;
--------------------------------------------------------

--  DDL for View DMRV_RECORD_STRUCTURES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_RECORD_STRUCTURES" ("RECORD_STRUCTURE_ID", "RECORD_STRUCTURE_OVID", "RECORD_STRUCTURE_NAME", "MODEL_ID", "MODEL_OVID", "MODEL_NAME", "DESIGN_OVID") AS 
  select  Record_Structure_ID, Record_Structure_OVID, Record_Structure_Name, Model_ID, Model_OVID, Model_Name, Design_OVID from DMRS_RECORD_STRUCTURES;
--------------------------------------------------------

--  DDL for View DMRV_RECORD_STRUCT_EXT_DATAS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_RECORD_STRUCT_EXT_DATAS" ("RECORD_STRUCTURE_ID", "RECORD_STRUCTURE_OVID", "RECORD_STRUCTURE_NAME", "EXTERNAL_DATA_ID", "EXTERNAL_DATA_OVID", "EXTERNAL_DATA_NAME", "DESIGN_OVID") AS 
  select  Record_Structure_ID, Record_Structure_OVID, Record_Structure_Name, External_Data_ID, External_Data_OVID, External_Data_Name, Design_OVID from DMRS_RECORD_STRUCT_EXT_DATAS;
--------------------------------------------------------

--  DDL for View DMRV_RELATIONSHIPS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_RELATIONSHIPS" ("RELATIONSHIP_NAME", "MODEL_ID", "MODEL_OVID", "OBJECT_ID", "OVID", "IMPORT_ID", "SOURCE_ENTITY_NAME", "TARGET_ENTITY_NAME", "SOURCE_LABEL", "TARGET_LABEL", "SOURCETO_TARGET_CARDINALITY", "TARGETTO_SOURCE_CARDINALITY", "SOURCE_OPTIONAL", "TARGET_OPTIONAL", "DOMINANT_ROLE", "IDENTIFYING", "SOURCE_ID", "SOURCE_OVID", "TARGET_ID", "TARGET_OVID", "NUMBER_OF_ATTRIBUTES", "TRANSFERABLE", "IN_ARC", "ARC_ID", "MODEL_NAME", "DESIGN_OVID") AS 
  select  Relationship_Name, Model_ID, Model_OVID, Object_ID, OVID, Import_ID, Source_Entity_Name, Target_Entity_Name, Source_Label, Target_Label, SourceTo_Target_Cardinality, TargetTo_Source_Cardinality, Source_Optional, Target_Optional, Dominant_Role, Identifying, Source_ID, Source_OVID, Target_ID, Target_OVID, Number_Of_Attributes, Transferable, In_Arc, Arc_ID, Model_Name, Design_OVID from DMRS_RELATIONSHIPS;
--------------------------------------------------------

--  DDL for View DMRV_REPORTS_VERSION_1_0

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_REPORTS_VERSION_1_0" ("DMRS_PERSISTENCE_VERSION", "DMRS_REPORTS_VERSION", "CREATED_ON") AS 
  select 1.6 DMRS_Persistence_Version, 1.0 DMRS_Reports_Version, to_timestamp('2013/05/20 15:07:26','YYYY/MM/DD HH24:MI:SS') Created_On from dual with read only;
--------------------------------------------------------

--  DDL for View DMRV_RESOURCE_LOCATORS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_RESOURCE_LOCATORS" ("RESOURCE_LOCATOR_ID", "RESOURCE_LOCATOR_OVID", "RESOURCE_LOCATOR_NAME", "BUSINESS_INFO_ID", "BUSINESS_INFO_OVID", "BUSINESS_INFO_NAME", "URL", "DESIGN_OVID") AS 
  select  Resource_Locator_ID, Resource_Locator_OVID, Resource_Locator_Name, Business_Info_ID, Business_Info_OVID, Business_Info_Name, Url, Design_OVID from DMRS_RESOURCE_LOCATORS;
--------------------------------------------------------

--  DDL for View DMRV_RESPONSIBLE_PARTIES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_RESPONSIBLE_PARTIES" ("RESPONSIBLE_PARTY_ID", "RESPONSIBLE_PARTY_OVID", "RESPONSIBLE_PARTY_NAME", "BUSINESS_INFO_ID", "BUSINESS_INFO_OVID", "BUSINESS_INFO_NAME", "PARENT_ID", "PARENT_OVID", "PARENT_NAME", "RESPONSIBILITY", "DESIGN_OVID") AS 
  select  Responsible_Party_ID, Responsible_Party_OVID, Responsible_Party_Name, Business_Info_ID, Business_Info_OVID, Business_Info_Name, Parent_ID, Parent_OVID, Parent_Name, Responsibility, Design_OVID from DMRS_RESPONSIBLE_PARTIES;
--------------------------------------------------------

--  DDL for View DMRV_RES_PARTY_CONTACTS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_RES_PARTY_CONTACTS" ("RESPONSIBLE_PARTY_ID", "RESPONSIBLE_PARTY_OVID", "RESPONSIBLE_PARTY_NAME", "CONTACT_ID", "CONTACT_OVID", "CONTACT_NAME", "DESIGN_OVID") AS 
  select  Responsible_Party_ID, Responsible_Party_OVID, Responsible_Party_Name, Contact_ID, Contact_OVID, Contact_Name, Design_OVID from DMRS_RES_PARTY_CONTACTS;
--------------------------------------------------------

--  DDL for View DMRV_RES_PARTY_ELEMENTS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_RES_PARTY_ELEMENTS" ("RESPONSIBLE_PARTY_ID", "RESPONSIBLE_PARTY_OVID", "RESPONSIBLE_PARTY_NAME", "ELEMENT_ID", "ELEMENT_OVID", "ELEMENT_NAME", "ELEMENT_TYPE", "DESIGN_OVID") AS 
  select  Responsible_Party_ID, Responsible_Party_OVID, Responsible_Party_Name, Element_ID, Element_OVID, Element_Name, Element_Type, Design_OVID from DMRS_RES_PARTY_ELEMENTS;
--------------------------------------------------------

--  DDL for View DMRV_ROLES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_ROLES" ("ROLE_ID", "ROLE_OVID", "ROLE", "MODEL_ID", "MODEL_OVID", "MODEL_NAME", "DESCRIPTION", "DESIGN_OVID") AS 
  select  Role_ID, Role_OVID, Role_Name, Model_ID, Model_OVID, Model_Name, Description, Design_OVID from DMRS_ROLES;
--------------------------------------------------------

--  DDL for View DMRV_ROLE_PROCESSES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_ROLE_PROCESSES" ("ROLE_ID", "ROLE_OVID", "ROLE", "PROCESS_ID", "PROCESS_OVID", "PROCESS_NAME", "DESIGN_OVID") AS 
  select  Role_ID, Role_OVID, Role_Name, Process_ID, Process_OVID, Process_Name, Design_OVID from DMRS_ROLE_PROCESSES;
--------------------------------------------------------

--  DDL for View DMRV_ROLLUP_LINKS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_ROLLUP_LINKS" ("ROLLUP_LINK_ID", "ROLLUP_LINK_NAME", "ROLLUP_LINK_OVID", "MODEL_ID", "MODEL_NAME", "MODEL_OVID", "PARENT_OBJECT_ID", "PARENT_OBJECT_NAME", "PARENT_OBJECT_OVID", "CHILD_OBJECT_ID", "CHILD_OBJECT_NAME", "CHILD_OBJECT_OVID", "FACT_ENTITY_ID", "FACT_ENTITY_NAME", "FACT_ENTITY_OVID", "PARENT_OBJECT_TYPE", "CHILD_OBJECT_TYPE", "ORACLE_LONG_NAME", "ORACLE_PLURAL_NAME", "ORACLE_SHORT_NAME", "DEFAULT_AGGR_OPERATOR", "IS_ROLE_PLAYING", "IS_SPARSE_DIMENSION", "DESCRIPTION", "DESIGN_OVID") AS 
  select  Rollup_Link_ID, Rollup_Link_Name, Rollup_Link_OVID, Model_ID, Model_Name, Model_OVID, Parent_Object_ID, Parent_Object_Name, Parent_Object_OVID, Child_Object_ID, Child_Object_Name, Child_Object_OVID, Fact_Entity_ID, Fact_Entity_Name, Fact_Entity_OVID, Parent_Object_Type, Child_Object_Type, Oracle_Long_Name, Oracle_Plural_Name, Oracle_Short_Name, Default_Aggr_Operator, Is_Role_Playing, Is_Sparse_Dimension, Description, Design_OVID from DMRS_ROLLUP_LINKS;
--------------------------------------------------------

--  DDL for View DMRV_ROLLUP_LINK_ATTRS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_ROLLUP_LINK_ATTRS" ("ROLLUP_LINK_ID", "ROLLUP_LINK_NAME", "ROLLUP_LINK_OVID", "ATTRIBUTE_ID", "ATTRIBUTE_NAME", "ATTRIBUTE_OVID", "DESIGN_OVID") AS 
  select  Rollup_Link_ID, Rollup_Link_Name, Rollup_Link_OVID, Attribute_ID, Attribute_Name, Attribute_OVID, Design_OVID from DMRS_ROLLUP_LINK_ATTRS;
--------------------------------------------------------

--  DDL for View DMRV_SLICES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_SLICES" ("SLICE_ID", "SLICE_NAME", "SLICE_OVID", "MODEL_ID", "MODEL_NAME", "MODEL_OVID", "CUBE_ID", "CUBE_NAME", "CUBE_OVID", "ENTITY_ID", "ENTITY_NAME", "ENTITY_OVID", "ORACLE_LONG_NAME", "ORACLE_PLURAL_NAME", "ORACLE_SHORT_NAME", "IS_FULLY_REALIZED", "IS_READ_ONLY", "DESCRIPTION", "DESIGN_OVID") AS 
  select  Slice_ID, Slice_Name, Slice_OVID, Model_ID, Model_Name, Model_OVID, Cube_ID, Cube_Name, Cube_OVID, Entity_ID, Entity_Name, Entity_OVID, Oracle_Long_Name, Oracle_Plural_Name, Oracle_Short_Name, Is_Fully_Realized, Is_Read_Only, Description, Design_OVID from DMRS_SLICES;
--------------------------------------------------------

--  DDL for View DMRV_SLICE_DIM_HIER_LEVEL

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_SLICE_DIM_HIER_LEVEL" ("SLICE_ID", "SLICE_NAME", "SLICE_OVID", "DIMENSION_ID", "DIMENSION_NAME", "DIMENSION_OVID", "HIERARCHY_ID", "HIERARCHY_NAME", "HIERARCHY_OVID", "LEVEL_ID", "LEVEL_NAME", "LEVEL_OVID", "DESIGN_OVID") AS 
  select  Slice_ID, Slice_Name, Slice_OVID, Dimension_ID, Dimension_Name, Dimension_OVID, Hierarchy_ID, Hierarchy_Name, Hierarchy_OVID, Level_ID, Level_Name, Level_OVID, Design_OVID from DMRS_SLICE_DIM_HIER_LEVEL;
--------------------------------------------------------

--  DDL for View DMRV_SLICE_MEASURES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_SLICE_MEASURES" ("SLICE_ID", "SLICE_NAME", "SLICE_OVID", "MEASURE_ID", "MEASURE_NAME", "MEASURE_OVID", "AGGREGATE_FUNCTION_ID", "AGGREGATE_FUNCTION_NAME", "AGGREGATE_FUNCTION_OVID", "MEASURE_ALIAS", "DESIGN_OVID") AS 
  select  Slice_ID, Slice_Name, Slice_OVID, Measure_ID, Measure_Name, Measure_OVID, Aggregate_Function_ID, Aggregate_Function_Name, Aggregate_Function_OVID, Measure_Alias, Design_OVID from DMRS_SLICE_MEASURES;
--------------------------------------------------------

--  DDL for View DMRV_SOURCE_INFO

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_SOURCE_INFO" ("SOURCE_INFO_OVID", "SOURCE_INFO_TYPE", "DDL_FILE_NAME", "DDL_PATH_NAME", "DDL_DB_TYPE", "DATADICT_CONNECTION_NAME", "DATADICT_CONNECTION_URL", "DATADICT_DB_TYPE", "MODEL_ID", "MODEL_OVID", "MODEL_NAME", "DESIGN_OVID") AS 
  select  Source_Info_OVID, Source_Info_Type, DDL_File_Name, DDL_Path_Name, DDL_DB_Type, DataDict_Connection_Name, DataDict_Connection_Url, DataDict_DB_Type, Model_ID, Model_OVID, Model_Name, Design_OVID from DMRS_SOURCE_INFO;
--------------------------------------------------------

--  DDL for View DMRV_SPATIAL_COLUMN_DEFINITION

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_SPATIAL_COLUMN_DEFINITION" ("TABLE_ID", "TABLE_OVID", "DEFINITION_ID", "DEFINITION_OVID", "DEFINITION_NAME", "TABLE_NAME", "COLUMN_ID", "COLUMN_OVID", "COLUMN_NAME", "USE_FUNCTION", "FUNCTION_EXPRESSION", "COORDINATE_SYSTEM_ID", "HAS_SPATIAL_INDEX", "SPATIAL_INDEX_ID", "SPATIAL_INDEX_OVID", "SPATIAL_INDEX_NAME", "DESIGN_OVID") AS 
  select  Table_ID, Table_OVID, Definition_ID, Definition_OVID, Definition_Name, Table_Name, Column_ID, Column_OVID, Column_Name, Use_Function, Function_Expression, Coordinate_System_ID, Has_Spatial_Index, Spatial_Index_ID, Spatial_Index_OVID, Spatial_Index_Name, Design_OVID from DMRS_SPATIAL_COLUMN_DEFINITION;
--------------------------------------------------------

--  DDL for View DMRV_SPATIAL_DIMENSIONS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_SPATIAL_DIMENSIONS" ("DEFINITION_ID", "DEFINITION_OVID", "DEFINITION_NAME", "DIMENSION_NAME", "LOW_BOUNDARY", "UPPER_BOUNDARY", "TOLERANCE", "DESIGN_OVID") AS 
  select  Definition_ID, Definition_OVID, Definition_Name, Dimension_Name, Low_Boundary, Upper_Boundary, Tolerance, Design_OVID from DMRS_SPATIAL_DIMENSIONS;
--------------------------------------------------------

--  DDL for View DMRV_STRUCTURED_TYPES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_STRUCTURED_TYPES" ("DESIGN_ID", "DESIGN_OVID", "DESIGN_NAME", "MODEL_OVID", "MODEL_NAME", "STRUCTURED_TYPE_ID", "STRUCTURED_TYPE_OVID", "STRUCTURED_TYPE_NAME", "SUPER_TYPE_ID", "SUPER_TYPE_OVID", "SUPER_TYPE_NAME", "PREDEFINED", "ST_FINAL", "ST_INSTANTIABLE") AS 
  select  Design_ID, Design_OVID, Design_Name, Model_OVID, Model_Name, Structured_Type_ID, Structured_Type_OVID, Structured_Type_Name, Super_Type_ID, Super_Type_OVID, Super_Type_Name, Predefined, ST_Final, ST_Instantiable from DMRS_STRUCTURED_TYPES;
--------------------------------------------------------

--  DDL for View DMRV_STRUCT_TYPE_ATTRS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_STRUCT_TYPE_ATTRS" ("ATTRIBUTE_ID", "ATTRIBUTE_OVID", "ATTRIBUTE_NAME", "STRUCTURED_TYPE_ID", "STRUCTURED_TYPE_OVID", "STRUCTURED_TYPE_NAME", "MANDATORY", "REFERENCE", "T_SIZE", "T_PRECISION", "T_SCALE", "TYPE_ID", "TYPE_OVID", "TYPE_NAME", "DESIGN_OVID") AS 
  SELECT Attribute_ID, Attribute_OVID, Attribute_Name, Structured_Type_ID, Structured_Type_OVID, Structured_Type_Name, Mandatory, Reference, T_Size, T_Precision, T_Scale, Type_ID, Type_OVID, Type_Name, Design_OVID FROM DMRS_STRUCT_TYPE_ATTRS;
--------------------------------------------------------

--  DDL for View DMRV_STRUCT_TYPE_METHODS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_STRUCT_TYPE_METHODS" ("METHOD_ID", "METHOD_OVID", "METHOD_NAME", "STRUCTURED_TYPE_ID", "STRUCTURED_TYPE_OVID", "STRUCTURED_TYPE_NAME", "BODY", "CONSTRUCTOR", "OVERRIDDEN_METHOD_ID", "OVERRIDDEN_METHOD_OVID", "OVERRIDDEN_METHOD_NAME", "DESIGN_OVID") AS 
  SELECT stm.Method_ID, stm.Method_OVID, stm.Method_Name, stm.Structured_Type_ID, stm.Structured_Type_OVID, stm.Structured_Type_Name, lt.Text, stm.Constructor, stm.Overridden_Method_ID, stm.Overridden_Method_OVID, stm.Overridden_Method_Name, stm.Design_OVID FROM DMRS_STRUCT_TYPE_METHODS stm, DMRS_LARGE_TEXT lt WHERE stm.Method_id  = lt.Object_id;
--------------------------------------------------------

--  DDL for View DMRV_STRUCT_TYPE_METHOD_PARS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_STRUCT_TYPE_METHOD_PARS" ("PARAMETER_ID", "PARAMETER_OVID", "PARAMETER_NAME", "METHOD_ID", "METHOD_OVID", "METHOD_NAME", "RETURN_VALUE", "REFERENCE", "SEQ", "T_SIZE", "T_PRECISION", "T_SCALE", "TYPE_ID", "TYPE_OVID", "TYPE_NAME", "DESIGN_OVID") AS 
  SELECT  Parameter_ID, Parameter_OVID, Parameter_Name, Method_ID, Method_OVID, Method_Name, Return_Value, Reference, Seq, T_Size, T_Precision, T_Scale, Type_ID, Type_OVID, Type_Name, Design_OVID FROM DMRS_STRUCT_TYPE_METHOD_PARS;
--------------------------------------------------------

--  DDL for View DMRV_TABLES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_TABLES" ("TABLE_NAME", "ABBREVIATION", "OBJECT_ID", "OVID", "IMPORT_ID", "MODEL_ID", "MODEL_OVID", "STRUCTURED_TYPE_ID", "STRUCTURED_TYPE_OVID", "STRUCTURED_TYPE_NAME", "NUMBER_DATA_ELEMENTS", "CLASSIFICATION_TYPE_ID", "CLASSIFICATION_TYPE_OVID", "CLASSIFICATION_TYPE_NAME", "ALLOW_TYPE_SUBSTITUTION", "MIN_VOLUME", "EXPECTED_VOLUME", "MAX_VOLUME", "GROWTH_RATE_PERCENTS", "GROWTH_RATE_INTERVAL", "NORMAL_FORM", "TEMPORARY_OBJECT_SCOPE", "ADEQUATELY_NORMALIZED", "SUBSTITUTION_PARENT", "SUBSTITUTION_PARENT_OVID", "ENGINEER", "SPATIAL_TABLE", "OID_IS_PK", "OID_IS_USER_DEFINED", "INCLUDE_SCRIPTS_INTO_DDL", "MODEL_NAME", "SUBSTITUTION_PARENT_NAME", "SOURCE_INFO_OVID", "SOURCE_DATADICT_SCHEMA_NAME", "SOURCE_DATADICT_OBJECT_NAME", "DESIGN_OVID") AS 
  select  Table_Name, Abbreviation, Object_ID, OVID, Import_ID, Model_ID, Model_OVID, Structured_Type_ID, Structured_Type_OVID, Structured_Type_Name, Number_Data_Elements, Classification_Type_ID, Classification_Type_OVID, Classification_Type_Name, Allow_Type_Substitution, Min_Volume, Expected_Volume, Max_Volume, Growth_Rate_Percents, Growth_Rate_Interval, Normal_Form, Temporary_Object_Scope, Adequately_Normalized, Substitution_Parent, Substitution_Parent_OVID, Engineer, Spatial_Table, OID_is_PK, OID_is_User_Defined, Include_Scripts_Into_DDL, Model_Name, Substitution_Parent_Name, Source_Info_OVID, Source_DataDict_Schema_Name, Source_DataDict_Object_Name, Design_OVID from DMRS_TABLES;
--------------------------------------------------------

--  DDL for View DMRV_TABLEVIEWS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_TABLEVIEWS" ("TABLEVIEW_NAME", "OBJECT_ID", "OVID", "IMPORT_ID", "MODEL_ID", "MODEL_OVID", "STRUCTURED_TYPE_ID", "STRUCTURED_TYPE_OVID", "STRUCTURED_TYPE_NAME", "WHERE_CLAUSE", "HAVING_CLAUSE", "USER_DEFINED", "ENGINEER", "ALLOW_TYPE_SUBSTITUTION", "OID_COLUMNS", "MODEL_NAME", "DESIGN_OVID") AS 
  select  TableView_Name, Object_ID, OVID, Import_ID, Model_ID, Model_OVID, Structured_Type_ID, Structured_Type_OVID, Structured_Type_Name, Where_Clause, Having_Clause, User_Defined, Engineer, Allow_Type_Substitution, OID_Columns, Model_Name, Design_OVID from DMRS_TABLEVIEWS;
--------------------------------------------------------

--  DDL for View DMRV_TABLE_CONSTRAINTS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_TABLE_CONSTRAINTS" ("TABLE_ID", "TABLE_OVID", "SEQUENCE", "CONSTRAINT_ID", "CONSTRAINT_OVID", "CONSTRAINT_NAME", "TEXT", "TABLE_NAME", "DESIGN_OVID") AS 
  select  Table_ID, Table_OVID, Sequence, Constraint_ID, Constraint_OVID, Constraint_Name, Text, Table_Name, Design_OVID from DMRS_TABLE_CONSTRAINTS;
--------------------------------------------------------

--  DDL for View DMRV_TABLE_INCLUDE_SCRIPTS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_TABLE_INCLUDE_SCRIPTS" ("TABLE_ID", "TABLE_OVID", "TABLE_NAME", "TYPE", "SEQUENCE", "TEXT", "DESIGN_OVID") AS 
  select  Table_ID, Table_OVID, Table_Name, Type, Sequence, Text, Design_OVID from DMRS_TABLE_INCLUDE_SCRIPTS;
--------------------------------------------------------

--  DDL for View DMRV_TASK_PARAMS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_TASK_PARAMS" ("TASK_PARAMS_ID", "TASK_PARAMS_OVID", "TASK_PARAMS_NAME", "TRANSFORMATION_TASK_ID", "TRANSFORMATION_TASK_OVID", "TRANSFORMATION_TASK_NAME", "TASK_PARAMS_TYPE", "MULTIPLICITY", "SYSTEM_OBJECTIVE", "DESIGN_OVID") AS 
  select  Task_Params_ID, Task_Params_OVID, Task_Params_Name, Transformation_Task_ID, Transformation_Task_OVID, Transformation_Task_Name, Task_Params_Type, Multiplicity, System_Objective, Design_OVID from DMRS_TASK_PARAMS;
--------------------------------------------------------

--  DDL for View DMRV_TASK_PARAMS_ITEMS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_TASK_PARAMS_ITEMS" ("TASK_PARAMS_ITEM_ID", "TASK_PARAMS_ITEM_OVID", "TASK_PARAMS_ITEM_NAME", "TASK_PARAMS_ID", "TASK_PARAMS_OVID", "TASK_PARAMS_NAME", "LOGICAL_TYPE_ID", "LOGICAL_TYPE_OVID", "LOGICAL_TYPE_NAME", "TASK_PARAMS_ITEM_TYPE", "DESIGN_OVID") AS 
  select  Task_Params_Item_ID, Task_Params_Item_OVID, Task_Params_Item_Name, Task_Params_ID, Task_Params_OVID, Task_Params_Name, Logical_Type_ID, Logical_Type_OVID, Logical_Type_Name, Task_Params_Item_Type, Design_OVID from DMRS_TASK_PARAMS_ITEMS;
--------------------------------------------------------

--  DDL for View DMRV_TELEPHONES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_TELEPHONES" ("TELEPHONE_ID", "TELEPHONE_OVID", "TELEPHONE_NAME", "BUSINESS_INFO_ID", "BUSINESS_INFO_OVID", "BUSINESS_INFO_NAME", "PHONE_NUMBER", "PHONE_TYPE", "DESIGN_OVID") AS 
  select  Telephone_ID, Telephone_OVID, Telephone_Name, Business_Info_ID, Business_Info_OVID, Business_Info_Name, Phone_Number, Phone_Type, Design_OVID from DMRS_TELEPHONES;
--------------------------------------------------------

--  DDL for View DMRV_TRANSFORMATIONS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_TRANSFORMATIONS" ("TRANSFORMATION_ID", "TRANSFORMATION_OVID", "TRANSFORMATION_NAME", "TRANSFORMATION_TASK_ID", "TRANSFORMATION_TASK_OVID", "TRANSFORMATION_TASK_NAME", "FILTER_CONDITION", "JOIN_CONDITION", "PRIMARY", "DESIGN_OVID") AS 
  select  Transformation_ID, Transformation_OVID, Transformation_Name, Transformation_Task_ID, Transformation_Task_OVID, Transformation_Task_Name, Filter_Condition, Join_Condition, Primary, Design_OVID from DMRS_TRANSFORMATIONS;
--------------------------------------------------------

--  DDL for View DMRV_TRANSFORMATION_FLOWS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_TRANSFORMATION_FLOWS" ("TRANSFORMATION_FLOW_ID", "TRANSFORMATION_FLOW_OVID", "TRANSFORMATION_FLOW_NAME", "TRANSFORMATION_TASK_ID", "TRANSFORMATION_TASK_OVID", "TRANSFORMATION_TASK_NAME", "SOURCE_ID", "SOURCE_OVID", "SOURCE_NAME", "DESTINATION_ID", "DESTINATION_OVID", "DESTINATION_NAME", "SOURCE_TYPE", "DESTINATION_TYPE", "SYSTEM_OBJECTIVE", "LOGGING", "OP_CREATE", "OP_READ", "OP_UPDATE", "OP_DELETE", "CRUD_CODE", "DESIGN_OVID") AS 
  select  Transformation_Flow_ID, Transformation_Flow_OVID, Transformation_Flow_Name, Transformation_Task_ID, Transformation_Task_OVID, Transformation_Task_Name, Source_ID, Source_OVID, Source_Name, Destination_ID, Destination_OVID, Destination_Name, Source_Type, Destination_Type, System_Objective, Logging, Op_Create, Op_Read, Op_Update, Op_Delete, CRUD_Code, Design_OVID from DMRS_TRANSFORMATION_FLOWS;
--------------------------------------------------------

--  DDL for View DMRV_TRANSFORMATION_PACKAGES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_TRANSFORMATION_PACKAGES" ("TRANSFORMATION_PACKAGE_ID", "TRANSFORMATION_PACKAGE_OVID", "TRANSFORMATION_PACKAGE_NAME", "MODEL_ID", "MODEL_OVID", "MODEL_NAME", "SYSTEM_OBJECTIVE", "DESIGN_OVID") AS 
  select  Transformation_Package_ID, Transformation_Package_OVID, Transformation_Package_Name, Model_ID, Model_OVID, Model_Name, System_Objective, Design_OVID from DMRS_TRANSFORMATION_PACKAGES;
--------------------------------------------------------

--  DDL for View DMRV_TRANSFORMATION_TASKS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_TRANSFORMATION_TASKS" ("TRANSFORMATION_TASK_ID", "TRANSFORMATION_TASK_OVID", "TRANSFORMATION_TASK_NAME", "TRANSFORMATION_PACKAGE_ID", "TRANSFORMATION_PACKAGE_OVID", "TRANSFORMATION_PACKAGE_NAME", "PROCESS_ID", "PROCESS_OVID", "PROCESS_NAME", "TOP_LEVEL", "DESIGN_OVID") AS 
  select  Transformation_Task_ID, Transformation_Task_OVID, Transformation_Task_Name, Transformation_Package_ID, Transformation_Package_OVID, Transformation_Package_Name, Process_ID, Process_OVID, Process_Name, Top_Level, Design_OVID from DMRS_TRANSFORMATION_TASKS;
--------------------------------------------------------

--  DDL for View DMRV_TRANSFORMATION_TASK_INFOS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_TRANSFORMATION_TASK_INFOS" ("TRANSFORMATION_TASK_ID", "TRANSFORMATION_TASK_OVID", "TRANSFORMATION_TASK_NAME", "INFO_STORE_ID", "INFO_STORE_OVID", "INFO_STORE_NAME", "SOURCE_TARGET_FLAG", "DESIGN_OVID") AS 
  select  Transformation_Task_ID, Transformation_Task_OVID, Transformation_Task_Name, Info_Store_ID, Info_Store_OVID, Info_Store_Name, Source_Target_Flag, Design_OVID from DMRS_TRANSFORMATION_TASK_INFOS;
--------------------------------------------------------

--  DDL for View DMRV_VALUE_RANGES

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_VALUE_RANGES" ("DATAELEMENT_ID", "DATAELEMENT_OVID", "TYPE", "SEQUENCE", "BEGIN_VALUE", "END_VALUE", "SHORT_DESCRIPTION", "CONTAINER_ID", "CONTAINER_OVID", "CONTAINER_NAME", "DATAELEMENT_NAME", "DESIGN_OVID") AS 
  select  DataElement_ID, DataElement_OVID, Type, Sequence, Begin_Value, End_Value, Short_Description, Container_ID, Container_OVID, Container_Name, DataElement_Name, Design_OVID from DMRS_VALUE_RANGES;
--------------------------------------------------------

--  DDL for View DMRV_VIEW_COLUMNS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_VIEW_COLUMNS" ("VIEW_OVID", "VIEW_ID", "VIEW_NAME", "CONTAINER_ID", "CONTAINER_OVID", "CONTAINER_NAME", "CONTAINER_ALIAS", "IS_EXPRESSION", "COLUMN_ID", "COLUMN_OVID", "COLUMN_NAME", "COLUMN_ALIAS", "NATIVE_TYPE", "TYPE", "EXPRESSION", "SEQUENCE", "PERSONALLY_ID_INFORMATION", "SENSITIVE_INFORMATION", "MASK_FOR_NONE_PRODUCTION", "MODEL_ID", "MODEL_OVID", "MODEL_NAME", "DESIGN_OVID") AS 
  select  View_OVID, View_ID, View_Name, Container_ID, Container_OVID, Container_Name, Container_Alias, Is_Expression, Column_ID, Column_OVID, Column_Name, Column_Alias, Native_Type, Type, Expression, Sequence, Personally_ID_Information, Sensitive_Information, Mask_For_None_Production, Model_ID, Model_OVID, Model_Name, Design_OVID from DMRS_VIEW_COLUMNS;
--------------------------------------------------------

--  DDL for View DMRV_VIEW_CONTAINERS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_VIEW_CONTAINERS" ("VIEW_OVID", "VIEW_ID", "VIEW_NAME", "CONTAINER_ID", "CONTAINER_OVID", "CONTAINER_NAME", "TYPE", "ALIAS", "SEQUENCE", "MODEL_ID", "MODEL_OVID", "MODEL_NAME", "DESIGN_OVID") AS 
  select  View_OVID, View_ID, View_Name, Container_ID, Container_OVID, Container_Name, Type, Alias, Sequence, Model_ID, Model_OVID, Model_Name, Design_OVID from DMRS_VIEW_CONTAINERS;
--------------------------------------------------------

--  DDL for View DMRV_VIEW_ORDER_GROUPBY

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."DMRV_VIEW_ORDER_GROUPBY" ("VIEW_OVID", "VIEW_ID", "VIEW_NAME", "CONTAINER_ID", "CONTAINER_OVID", "CONTAINER_NAME", "CONTAINER_ALIAS", "IS_EXPRESSION", "USAGE", "SEQUENCE", "COLUMN_ID", "COLUMN_OVID", "COLUMN_NAME", "COLUMN_ALIAS", "SORT_ORDER", "EXPRESSION", "DESIGN_OVID") AS 
  select  View_OVID, View_ID, View_Name, Container_ID, Container_OVID, Container_Name, Container_Alias, Is_Expression, Usage, Sequence, Column_ID, Column_OVID, Column_Name, Column_Alias, Sort_Order, Expression, Design_OVID from DMRS_VIEW_ORDER_GROUPBY;
--------------------------------------------------------

--  DDL for View RA_PARAM_EXPRSN_RSLVD_VALUES_V

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."RA_PARAM_EXPRSN_RSLVD_VALUES_V" ("PARAM_EXPRESSION_TYPE", "PARAM_EXPRESSION", "PARAM_EXPRESSION_DISPLAY_NAME", "RESOLVED_VALUE") AS 
  SELECT lookup_type param_expression_type, 
         lookup_code param_expression,
         lookup_code_display_name param_expression_display_name,
    (
    CASE
      WHEN lookup_code = 'current_day'
      THEN TO_CHAR(CURRENT_DATE,'YYYY-MM-DD')
      WHEN lookup_code = '1_day_before_current_day'
      THEN TO_CHAR((CURRENT_DATE - 1),'YYYY-MM-DD')
      WHEN lookup_code = '2_days_before_current_day'
      THEN TO_CHAR((CURRENT_DATE - 2),'YYYY-MM-DD')
      WHEN lookup_code = '3_days_before_current_day'
      THEN TO_CHAR((CURRENT_DATE - 3),'YYYY-MM-DD')
      WHEN lookup_code = '4_days_before_current_day'
      THEN TO_CHAR((CURRENT_DATE - 4),'YYYY-MM-DD')
      WHEN lookup_code = '5_days_before_current_day'
      THEN TO_CHAR((CURRENT_DATE - 5),'YYYY-MM-DD')
      ELSE lookup_code
    END ) AS resolved_VALUE
  FROM RA_LOOKUP_CODES
  WHERE RA_LOOKUP_CODES.lookup_type IN ('DATE_PARAM_EXPRESSION')
  and   sysdate between RA_LOOKUP_CODES.effective_from and RA_LOOKUP_CODES.effective_to;
--------------------------------------------------------

--  DDL for View RA_REPORTS

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."RA_REPORTS" ("REPORT_ID", "APP_ID", "ID_ON_BI_SERVER", "REPORT_NAME_ON_BI_SERVER", "REPORT_PATH_ON_BI_SERVER", "DISPLAY_REPORT_NAME", "REPORT_DESCRIPTION", "BI_CATEGORY_ID", "SCHEDULING_ALLOWED", "MOVE_TO_ARCHIVE_AFTER_DAYS", "PURGE_AFTER_DAYS", "ARCHIVE_ALLLOWED", "ARCHIVE_FORMAT_TYPE", "DATA_SECURITY_ENABLED", "REPORT_SHORT_NAME", "BI_RPT_TYPE") AS 
  SELECT 
  A.REPORT_ID,
  APP_ID,
  ID_ON_BI_SERVER,
  REPORT_NAME_ON_BI_SERVER,
  REPORT_PATH_ON_BI_SERVER,
  B.DISPLAY_REPORT_NAME,
  B.REPORT_DESCRIPTION,
  BI_CATEGORY_ID,
  SCHEDULING_ALLOWED,
  MOVE_TO_ARCHIVE_AFTER_DAYS,
  PURGE_AFTER_DAYS,
  ARCHIVE_ALLLOWED,
  ARCHIVE_FORMAT_TYPE,
  DATA_SECURITY_ENABLED,
  REPORT_SHORT_NAME,
  REPORT_TYPE
FROM RA_REPORTS_B A,
RA_REPORTS_TL B
WHERE A.REPORT_ID=B.REPORT_ID AND B.LANGUAGE = USERENV('LANG');
--------------------------------------------------------

--  DDL for View RA_REPORT_PARAMETERS_V

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."RA_REPORT_PARAMETERS_V" ("PARAMETER_ID", "REPORT_ID", "MANDATORY_IND", "PARAMETER_DATA_TYPE", "ORDERING_SEQUENCE", "ORDERING_SEQUENCE_IN_BI", "PARAMETER_NAME_BI", "INPUT_TYPE_ID", "MULTIPLE_VALUE_ALLOWED", "PARAMETER_DEFAULT_VALUE", "INITIAL_DISPLAY_IND", "DS_ID", "LOV_QUERY", "PARAMETER_QUERY_TIMEOUT", "ACTIVE_FLAG", "USER_SEARCH_STRING_REQUIRED", "PARAMETER_DISPLAY_NAME") AS 
  select 
    a.PARAMETER_ID                ,
    REPORT_ID                   ,
    MANDATORY_IND               ,
    PARAMETER_DATA_TYPE         ,
    ORDERING_SEQUENCE           ,
    ORDERING_SEQUENCE_IN_BI     ,
    PARAMETER_NAME_BI           ,
    INPUT_TYPE_ID               ,
    MULTIPLE_VALUE_ALLOWED      ,
    PARAMETER_DEFAULT_VALUE     ,
    INITIAL_DISPLAY_IND         ,
    DS_ID                       ,
    LOV_QUERY                   ,
    PARAMETER_QUERY_TIMEOUT     ,
    ACTIVE_FLAG                 ,
    USER_SEARCH_STRING_REQUIRED ,
    PARAMETER_DISPLAY_NAME
    from
    ra_report_parameters_b  a,
    ra_report_parameters_tl b
    where
    a.parameter_id = b.parameter_id and
    language = userenv('LANG');
--------------------------------------------------------

--  DDL for View RA_REPORT_RUN_DETAILS_V

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."RA_REPORT_RUN_DETAILS_V" ("RUN_ID", "APP_ID", "APP_NAME", "REPORT_ID", "DISPLAY_REPORT_NAME", "SUBMITTED_BY_SOEID", "STATUS", "START_TIME", "END_TIME", "EXECUTION_TIME", "IS_SHARABLE", "IS_ENTITLED", "IS_PARTIAL_RESULT") AS 
  (SELECT a.run_id,
    b.app_id,
    c.app_name,
    a.report_id,
    b.display_report_name,
    a.submitted_by_soeid,
    a.status,
    a.start_time,
    a.end_time,
    (case 
      when status IN (3,4) then
        (cast(a.end_time as timestamp) - cast(a.start_time as timestamp))
      else
        (systimestamp - cast(a.start_time as timestamp))
      END
    ) AS EXECUTION_TIME,
    (CASE WHEN B.DATA_SECURITY_ENABLED='Y' THEN 'N' ELSE 'Y' END)  IS_SHARABLE,
		(CASE WHEN B.DATA_SECURITY_ENABLED='Y' THEN 'Y' ELSE 'N' END)  IS_ENTITLED,
	CASE NVL(a.IS_MAXROWS_EXCEED,'N') 
	    WHEN 'N' THEN NVL(a.IS_QURY_EXTRACT_TIMED_OUT, 'N')
	    WHEN 'Y' THEN 'Y'
    END IS_PARTIAL_RESULT 
   
        
  FROM ra_report_instances a,
    ra_reports_b b,
    ra_apps c
  WHERE b.report_id = a.report_id
  AND c.app_id      = b.app_id
  );
--------------------------------------------------------

--  DDL for View RA_TEMPLATE_PARAM_VALUES_V

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."RA_TEMPLATE_PARAM_VALUES_V" ("USER_SCHEDULE_ID", "TEMPLATE_ID", "PARAM_ID", "PARAM_VALUE") AS 
  SELECT schedules.user_schedule_id,
    RA_TEMPLATE_PARAMS.TEMPLATE_ID,
    RA_TEMPLATE_PARAMS.PARAM_ID,
    (
    CASE NVL(RA_TEMPLATE_PARAMS.IS_EXPRESSION, 'N')
      WHEN 'N'
      THEN RA_TEMPLATE_PARAMS.PARAM_VALUE
      WHEN 'Y'
      THEN
        CASE
          WHEN RA_TEMPLATE_PARAMS.param_value = 'current_day'
          THEN TO_CHAR(CAST(SYSTIMESTAMP AT TIME ZONE schedules.TZR AS TIMESTAMP
        WITH TIME zone),'YYYY-MM-DD')
          WHEN RA_TEMPLATE_PARAMS.param_value = '1_day_before_current_day'
          THEN TO_CHAR((CAST(SYSTIMESTAMP AT TIME ZONE schedules.TZR AS TIMESTAMP
        WITH TIME zone) - INTERVAL '1'DAY),'YYYY-MM-DD')
          WHEN RA_TEMPLATE_PARAMS.param_value = '2_days_before_current_day'
          THEN TO_CHAR(CAST(SYSTIMESTAMP AT TIME ZONE schedules.TZR AS TIMESTAMP
        WITH TIME zone) - INTERVAL '2'DAY,'YYYY-MM-DD')
          WHEN RA_TEMPLATE_PARAMS.param_value = '3_days_before_current_day'
          THEN TO_CHAR(CAST(SYSTIMESTAMP AT TIME ZONE schedules.TZR AS TIMESTAMP
        WITH TIME zone) - INTERVAL '3'DAY,'YYYY-MM-DD')
          WHEN RA_TEMPLATE_PARAMS.param_value = '4_days_before_current_day'
          THEN TO_CHAR(CAST(SYSTIMESTAMP AT TIME ZONE schedules.TZR AS TIMESTAMP
        WITH TIME zone) - INTERVAL '4'DAY,'YYYY-MM-DD')
          WHEN RA_TEMPLATE_PARAMS.param_value = '5_days_before_current_day'
          THEN TO_CHAR(CAST(SYSTIMESTAMP AT TIME ZONE schedules.TZR AS TIMESTAMP
        WITH TIME zone) - INTERVAL '5'DAY,'YYYY-MM-DD')
          ELSE RA_TEMPLATE_PARAMS.param_value
        END
    END) AS param_value
      FROM RA_TEMPLATE_PARAMS,
        (SELECT user_schedule_id,
          TEMPLATE_ID,
          EXTRACT(TIMEZONE_REGION FROM FROM_DATE) TZR
        FROM RA_USER_SCHEDULES
        ) SCHEDULES
      WHERE SCHEDULES.TEMPLATE_ID=RA_TEMPLATE_PARAMS.TEMPLATE_ID;
--------------------------------------------------------

--  DDL for View RA_UI_REPORT_EXECUTION_V

--------------------------------------------------------


  CREATE OR REPLACE FORCE VIEW "RPTAPP"."RA_UI_REPORT_EXECUTION_V" ("RUN_ID", "APP_ID", "APP_NAME", "REPORT_ID", "DISPLAY_REPORT_NAME", "SUBMITTED_BY_SOEID", "STATUS", "START_TIME", "END_TIME", "START_TIME_DISPLAY", "END_TIME_DISPLAY", "EXECUTION_TIME", "EXEC_TIME_DISPLAY_IN_HH_MI_SS", "IS_SHARABLE", "IS_ENTITLED", "IS_PARTIAL_RESULT") AS 
  SELECT RUN_ID,
    APP_ID,
    APP_NAME,
    REPORT_ID,
    DISPLAY_REPORT_NAME,
    SUBMITTED_BY_SOEID,
    STATUS,
    START_TIME,
    END_TIME,
    START_TIME_DISPLAY,
    END_TIME_DISPLAY,
    EXECUTION_TIME,
    EXEC_TIME_DISPLAY_IN_HH_MI_SS,
    IS_SHARABLE,
    IS_ENTITLED,
    IS_PARTIAL_RESULT
    
  FROM
    (SELECT RUN_ID,
      APP_ID,
      APP_NAME,
      REPORT_ID,
      DISPLAY_REPORT_NAME,
      SUBMITTED_BY_SOEID,
      STATUS,
      start_time,
      end_time,
      TO_CHAR(START_TIME,'YYYY/MM/DD HH24:MI:SS') start_time_display,
      TO_CHAR(END_TIME,'YYYY/MM/DD HH24:MI:SS') end_time_display,
      execution_time,
      (extract (hour FROM execution_time)
      ||':'
      || extract (minute FROM execution_time)
      || ':'
      || EXTRACT (SECOND FROM EXECUTION_TIME)) AS EXEC_TIME_DISPLAY_IN_HH_MI_SS,
      RA_REPORT_RUN_DETAILS_V.IS_SHARABLE,
      RA_REPORT_RUN_DETAILS_V.IS_ENTITLED,
      RA_REPORT_RUN_DETAILS_V.IS_PARTIAL_RESULT
      
    FROM RA_REPORT_RUN_DETAILS_V
    WHERE status IN (1,2,3,4)
    );
--------------------------------------------------------

--  DDL for Index RA_RA_SUB_RPT_INST_I1

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_RA_SUB_RPT_INST_I1" ON "RPTAPP"."RA_SUB_RUN_INSTANCES" ("DRILL_DOWN_ID", "OBJECT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index QRTZ_SIMPLE_TRIG_PK

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."QRTZ_SIMPLE_TRIG_PK" ON "RPTAPP"."QRTZ_SIMPLE_TRIGGERS" ("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_LOOKUPS_U1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_LOOKUPS_U1" ON "RPTAPP"."RA_LOOKUPS" ("LOOKUP_TYPE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_M_GLOBAL_ENV_PROP_PK

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_M_GLOBAL_ENV_PROP_PK" ON "RPTAPP"."RA_GLOBAL_ENV_PROP" ("ENV_PROP_ID", "NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_APPS_PK

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_APPS_PK" ON "RPTAPP"."RA_APPS" ("APP_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_INPUT_VALIDATION_PK

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_INPUT_VALIDATION_PK" ON "RPTAPP"."RA_INPUT_VALIDATION" ("REPORT_ID", "SCRIPT_SEQ") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index SYS_C007177

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."SYS_C007177" ON "RPTAPP"."RA_REPORT_INSTANCES" ("RUN_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index IDX_QRTZ_FT_TRIG_INST_NAME

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."IDX_QRTZ_FT_TRIG_INST_NAME" ON "RPTAPP"."QRTZ_FIRED_TRIGGERS" ("SCHED_NAME", "INSTANCE_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index PK_RA_META_JOIN_CRTA_001

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."PK_RA_META_JOIN_CRTA_001" ON "RPTAPP"."RA_META_JOIN_CRTA" ("ENT_ALS_NM", "PROD_NM") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index PK_RA_META_PROD_ATTR_001

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."PK_RA_META_PROD_ATTR_001" ON "RPTAPP"."RA_META_PROD_ATTR" ("PROD_ATTR_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_REPORT_QUERY_MAP_UI1_OFS

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_REPORT_QUERY_MAP_UI1_OFS" ON "RPTAPP"."RA_REPORT_QUERY_MAP_OFS" ("REPORT_ID", "QUERY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_USER_SCHEDULES_UI1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_USER_SCHEDULES_UI1" ON "RPTAPP"."RA_USER_SCHEDULES" ("USER_SCHEDULE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_DOMAIN_DATA_SOURCES_UK

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_DOMAIN_DATA_SOURCES_UK" ON "RPTAPP"."RA_DOMAIN_DATA_SOURCES" ("DOMAIN_CODE", "DS_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index QRTZ_SIMPROP_TRIG_PK

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."QRTZ_SIMPROP_TRIG_PK" ON "RPTAPP"."QRTZ_SIMPROP_TRIGGERS" ("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_SEEDED_QUERY_COLUMNS_U1_OFS

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_U1_OFS" ON "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_OFS" ("QUERY_ID", "COLUMN_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_SHARED_GROUP_MEMBERS_N1

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_SHARED_GROUP_MEMBERS_N1" ON "RPTAPP"."RA_SHARED_GROUP_MEMBERS" ("USER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_REPORT_OUTPUT_TYPE_U1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_REPORT_OUTPUT_TYPE_U1" ON "RPTAPP"."RA_REPORT_OUTPUT_TYPE" ("REPORT_ID", "OUTPUT_TYPE_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Index IDX_QRTZ_T_NFT_ST

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."IDX_QRTZ_T_NFT_ST" ON "RPTAPP"."QRTZ_TRIGGERS" ("SCHED_NAME", "TRIGGER_STATE", "NEXT_FIRE_TIME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_SUBRPTPARAMNAMEMAP_I1

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_SUBRPTPARAMNAMEMAP_I1" ON "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP" ("REPORT_ID", "SUB_REPORT_ID", "SUB_REPORT_SEQ") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index IDX_QRTZ_T_NFT_MISFIRE

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."IDX_QRTZ_T_NFT_MISFIRE" ON "RPTAPP"."QRTZ_TRIGGERS" ("SCHED_NAME", "MISFIRE_INSTR", "NEXT_FIRE_TIME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_LOOKUP_CODES_N1

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_LOOKUP_CODES_N1" ON "RPTAPP"."RA_LOOKUP_CODES" ("LOOKUP_TYPE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_SUB_REPORT_MAP_UI1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_SUB_REPORT_MAP_UI1" ON "RPTAPP"."RA_SUB_REPORT_MAP" ("REPORT_ID", "SUB_REPORT_ID", "SUB_REPORT_SEQ") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_REPORT_QUERY_MAP_UI1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_REPORT_QUERY_MAP_UI1" ON "RPTAPP"."RA_REPORT_QUERY_MAP" ("REPORT_ID", "QUERY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_APP_DATA_SOURCES

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_APP_DATA_SOURCES" ON "RPTAPP"."RA_APP_DATA_SOURCES" ("APP_ID", "DS_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index PK_RA_META_ATTR_GRP_001

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."PK_RA_META_ATTR_GRP_001" ON "RPTAPP"."RA_META_ATTR_GRP" ("ATTR_GRP_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_APP_NODE_MAPPING_U1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_APP_NODE_MAPPING_U1" ON "RPTAPP"."RA_APP_NODE_MAPPING" ("NODE_ID", "APP_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_ROLES_FEATURES_U1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_ROLES_FEATURES_U1" ON "RPTAPP"."RA_ROLES_FEATURES" ("LDAP_ROLE", "APP_FEATURES") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index QRTZ_PAUSED_TRIG_GRPS_PK

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."QRTZ_PAUSED_TRIG_GRPS_PK" ON "RPTAPP"."QRTZ_PAUSED_TRIGGER_GRPS" ("SCHED_NAME", "TRIGGER_GROUP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_REPORT_LDAP_GROUPS_U1_OFS

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_REPORT_LDAP_GROUPS_U1_OFS" ON "RPTAPP"."RA_REPORT_LDAP_GROUPS_OFS" ("REPORT_ID", "LDAP_GROUP_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_APP_APPROVER_PK

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_APP_APPROVER_PK" ON "RPTAPP"."RA_APP_APPROVER" ("APP_ID", "APRVL_SOE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Index RA_REPORT_INST_QRY_PROGRESS_I1

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_REPORT_INST_QRY_PROGRESS_I1" ON "RPTAPP"."RA_REPORT_INST_QRY_PROGRESS" ("RUN_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_REPORT_LDAP_GROUPS_U1_1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_REPORT_LDAP_GROUPS_U1_1" ON "RPTAPP"."RA_REPORT_LDAP_GROUPS_1" ("REPORT_ID", "LDAP_GROUP_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_APPS_PK_OFS

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_APPS_PK_OFS" ON "RPTAPP"."RA_APPS_OFS" ("APP_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_RA_SUB_RPT_INST_I2

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_RA_SUB_RPT_INST_I2" ON "RPTAPP"."RA_SUB_RUN_INSTANCES" ("PARENT_REPORT_ID", "SUB_REPORT_ID", "SUB_REPORT_SEQ", "OBJECT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index IDX_QRTZ_T_C

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."IDX_QRTZ_T_C" ON "RPTAPP"."QRTZ_TRIGGERS" ("SCHED_NAME", "CALENDAR_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_REPORTS_TL_PK

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_REPORTS_TL_PK" ON "RPTAPP"."RA_REPORTS_TL" ("REPORT_ID", "LANGUAGE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index IDX_QRTZ_FT_INST_JOB_REQ_RCVRY

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."IDX_QRTZ_FT_INST_JOB_REQ_RCVRY" ON "RPTAPP"."QRTZ_FIRED_TRIGGERS" ("SCHED_NAME", "INSTANCE_NAME", "REQUESTS_RECOVERY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index PK_RA_REPORT_FILT_CRTA_001

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."PK_RA_REPORT_FILT_CRTA_001" ON "RPTAPP"."RA_REPORT_FILT_CRTA" ("RPT_FILT_CRTA_ID", "REPORT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Index IDX_QRTZ_T_N_STATE

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."IDX_QRTZ_T_N_STATE" ON "RPTAPP"."QRTZ_TRIGGERS" ("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP", "TRIGGER_STATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_EXT_REPORT_INSTANCE_U1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_EXT_REPORT_INSTANCE_U1" ON "RPTAPP"."RA_EXT_REPORT_INSTANCE" ("EXT_RUN_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Index RA_SHARED_TEMPLATES_N2

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_SHARED_TEMPLATES_N2" ON "RPTAPP"."RA_SHARED_TEMPLATES" ("SHARED_TO_TYPE", "SHARED_TO_GROUP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index QRTZ_JOB_DETAILS_PK

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."QRTZ_JOB_DETAILS_PK" ON "RPTAPP"."QRTZ_JOB_DETAILS" ("SCHED_NAME", "JOB_NAME", "JOB_GROUP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index IDX_QRTZ_T_JG

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."IDX_QRTZ_T_JG" ON "RPTAPP"."QRTZ_TRIGGERS" ("SCHED_NAME", "JOB_GROUP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_SHARED_REPORTS_N2

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_SHARED_REPORTS_N2" ON "RPTAPP"."RA_SHARED_REPORTS" ("SHARED_TO_TYPE", "SHARED_TO_GROUP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_FREEMARKER_TEMPLATES_PK

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_FREEMARKER_TEMPLATES_PK" ON "RPTAPP"."RA_FREEMARKER_TEMPLATES" ("FM_TEMPLATE_ID", "FM_TEMPLATE_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_SHARED_TEMPLATES_N1

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_SHARED_TEMPLATES_N1" ON "RPTAPP"."RA_SHARED_TEMPLATES" ("SHARED_TO_TYPE", "SHARED_TO_USER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index UK_RA_REPORT_PARAMETERS_B_01

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."UK_RA_REPORT_PARAMETERS_B_01" ON "RPTAPP"."RA_REPORT_PARAMETERS_B" ("REPORT_ID", "PARAMETER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_APP_LDAP_GROUPS_U1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_APP_LDAP_GROUPS_U1" ON "RPTAPP"."RA_APP_LDAP_GROUPS" ("APP_ID", "LDAP_GROUP_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_REPORT_INSTANCES_U2

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_REPORT_INSTANCES_U2" ON "RPTAPP"."RA_REPORT_INSTANCES" ("SUBMITTED_BY_SOEID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
  ALTER INDEX "RPTAPP"."RA_REPORT_INSTANCES_U2"  UNUSABLE;
--------------------------------------------------------

--  DDL for Index UNIQUE_SOEID_LDAP_GRP

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."UNIQUE_SOEID_LDAP_GRP" ON "RPTAPP"."RA_USER_LDAP_GROUPS" ("SOEID", "LDAP_GROUP_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_IMAGES_PK

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_IMAGES_PK" ON "RPTAPP"."RA_IMAGES" ("IMAGE_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_APP_ENV_PROP_U1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_APP_ENV_PROP_U1" ON "RPTAPP"."RA_APP_ENV_PROP" ("APP_ID", "REPORT_ID", "NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index IDX_QRTZ_T_STATE

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."IDX_QRTZ_T_STATE" ON "RPTAPP"."QRTZ_TRIGGERS" ("SCHED_NAME", "TRIGGER_STATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index QRTZ_SCHEDULER_STATE_PK

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."QRTZ_SCHEDULER_STATE_PK" ON "RPTAPP"."QRTZ_SCHEDULER_STATE" ("SCHED_NAME", "INSTANCE_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_TEMPLATE_LABELS_N1

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_TEMPLATE_LABELS_N1" ON "RPTAPP"."RA_TEMPLATE_LABELS" ("OWNER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_EXT_REPORT_MAPPING_U1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_EXT_REPORT_MAPPING_U1" ON "RPTAPP"."RA_EXT_REPORT_MAPPING" ("REPORT_ID", "EXT_REPORT_ID", "EXT_SYSTEM_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Index RA_REPORT_LDAP_GROUPS_U1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_REPORT_LDAP_GROUPS_U1" ON "RPTAPP"."RA_REPORT_LDAP_GROUPS_20141009" ("REPORT_ID", "LDAP_GROUP_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index IDX_QRTZ_T_NEXT_FIRE_TIME

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."IDX_QRTZ_T_NEXT_FIRE_TIME" ON "RPTAPP"."QRTZ_TRIGGERS" ("SCHED_NAME", "NEXT_FIRE_TIME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_REPORT_INSTANCES_U1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_REPORT_INSTANCES_U1" ON "RPTAPP"."RA_REPORT_INSTANCES" ("RUN_ID" DESC) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_USER_SCHEDULES_N1

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_USER_SCHEDULES_N1" ON "RPTAPP"."RA_USER_SCHEDULES" ("USER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index IDX_QRTZ_T_NFT_ST_MISFIRE_GRP

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."IDX_QRTZ_T_NFT_ST_MISFIRE_GRP" ON "RPTAPP"."QRTZ_TRIGGERS" ("SCHED_NAME", "MISFIRE_INSTR", "NEXT_FIRE_TIME", "TRIGGER_GROUP", "TRIGGER_STATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_SEEDED_QUERY_COLUMNS_U1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_U1" ON "RPTAPP"."RA_SEEDED_QUERY_COLUMNS" ("QUERY_ID", "COLUMN_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_SUB_REPORT_MAP_I1

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_SUB_REPORT_MAP_I1" ON "RPTAPP"."RA_SUB_REPORT_MAP" ("REPORT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index PK_RA_SEEDED_QUERY_ATTR_001

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."PK_RA_SEEDED_QUERY_ATTR_001" ON "RPTAPP"."RA_SEEDED_QUERY_ATTR" ("QUERY_ATTR_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Index IDX_QRTZ_J_REQ_RECOVERY

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."IDX_QRTZ_J_REQ_RECOVERY" ON "RPTAPP"."QRTZ_JOB_DETAILS" ("SCHED_NAME", "REQUESTS_RECOVERY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index IDX_QRTZ_FT_J_G

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."IDX_QRTZ_FT_J_G" ON "RPTAPP"."QRTZ_FIRED_TRIGGERS" ("SCHED_NAME", "JOB_NAME", "JOB_GROUP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index PK_RA_META_ENTITY_ALS_001

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."PK_RA_META_ENTITY_ALS_001" ON "RPTAPP"."RA_META_ENTITY_ALS" ("ENT_ALS_NM", "DM_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index IDX_QRTZ_T_J

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."IDX_QRTZ_T_J" ON "RPTAPP"."QRTZ_TRIGGERS" ("SCHED_NAME", "JOB_NAME", "JOB_GROUP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index UX_RA_SEEDED_QUERY_GEN_01

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."UX_RA_SEEDED_QUERY_GEN_01" ON "RPTAPP"."RA_SEEDED_QUERY_GENERATOR" ("QUERY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Index PK_RA_META_ATTR_001

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."PK_RA_META_ATTR_001" ON "RPTAPP"."RA_META_ATTR" ("ATTR_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index QRTZ_FIRED_TRIGGER_PK

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."QRTZ_FIRED_TRIGGER_PK" ON "RPTAPP"."QRTZ_FIRED_TRIGGERS" ("SCHED_NAME", "ENTRY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index PK_EMP

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."PK_EMP" ON "RPTAPP"."TEST_PIVOT_NZ" ("EMPNO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Index RA_SEEDED_QUERIES_U1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_SEEDED_QUERIES_U1" ON "RPTAPP"."RA_SEEDED_QUERIES" ("QUERY_ID" DESC) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index INDEX_FULL_NAME

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."INDEX_FULL_NAME" ON "RPTAPP"."RA_USER_DETAILS" ("FULL_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_OUTPUT_TEMPLATES_PK

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_OUTPUT_TEMPLATES_PK" ON "RPTAPP"."RA_OUTPUT_TEMPLATES" ("TPL_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_TEMPLATE_QUERY_COLUMNS_N1

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_TEMPLATE_QUERY_COLUMNS_N1" ON "RPTAPP"."RA_TEMPLATE_QUERY_COLUMNS" ("TEMPLATE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index QRTZ_TRIGGERS_PK

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."QRTZ_TRIGGERS_PK" ON "RPTAPP"."QRTZ_TRIGGERS" ("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_REPORT_QUERY_MAP_I1

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_REPORT_QUERY_MAP_I1" ON "RPTAPP"."RA_REPORT_QUERY_MAP" ("REPORT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_OUTPUT_TYPE_U1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_OUTPUT_TYPE_U1" ON "RPTAPP"."RA_OUTPUT_TYPE" ("REPORT_TOOL", "OUTPUT_FORMAT", "OUTPUT_TYPE_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Index RA_APPS_DS_DOMAIN_U1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_APPS_DS_DOMAIN_U1" ON "RPTAPP"."RA_APPS_DS_DOMAIN" ("APP_ID", "DOMAIN_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index IDX_QRTZ_T_NFT_ST_MISFIRE

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."IDX_QRTZ_T_NFT_ST_MISFIRE" ON "RPTAPP"."QRTZ_TRIGGERS" ("SCHED_NAME", "MISFIRE_INSTR", "NEXT_FIRE_TIME", "TRIGGER_STATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_SEEDED_QUERY_COLUMNFORMATU1

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_SEEDED_QUERY_COLUMNFORMATU1" ON "RPTAPP"."RA_SEEDED_QUERY_COLUMN_FORMAT" ("REPORT_ID", "QUERY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index PK_RA_META_PROD_TYP_001

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."PK_RA_META_PROD_TYP_001" ON "RPTAPP"."RA_META_PROD_TYP" ("PROD_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index IDX_QRTZ_J_GRP

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."IDX_QRTZ_J_GRP" ON "RPTAPP"."QRTZ_JOB_DETAILS" ("SCHED_NAME", "JOB_GROUP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index IDX_QRTZ_T_G

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."IDX_QRTZ_T_G" ON "RPTAPP"."QRTZ_TRIGGERS" ("SCHED_NAME", "TRIGGER_GROUP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index QRTZ_CALENDARS_PK

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."QRTZ_CALENDARS_PK" ON "RPTAPP"."QRTZ_CALENDARS" ("SCHED_NAME", "CALENDAR_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_INSTANCE_QUERY_COLUMNS_N1

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_INSTANCE_QUERY_COLUMNS_N1" ON "RPTAPP"."RA_INSTANCE_QUERY_COLUMNS" ("RUN_ID" DESC) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_DATA_SOURCES_U1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_DATA_SOURCES_U1" ON "RPTAPP"."RA_DATA_SOURCES" ("DS_ID", "DOMAIN_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_USER_APP_ROLES_PK

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_USER_APP_ROLES_PK" ON "RPTAPP"."RA_USER_APP_ROLES" ("SOEID", "ROLE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index IDX_QRTZ_T_N_G_STATE

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."IDX_QRTZ_T_N_G_STATE" ON "RPTAPP"."QRTZ_TRIGGERS" ("SCHED_NAME", "TRIGGER_GROUP", "TRIGGER_STATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index QRTZ_BLOB_TRIG_PK

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."QRTZ_BLOB_TRIG_PK" ON "RPTAPP"."QRTZ_BLOB_TRIGGERS" ("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index IX_RA_USER_FAV_CATEGORY_001

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."IX_RA_USER_FAV_CATEGORY_001" ON "RPTAPP"."RA_USER_FAV_CATEGORY" ("SOE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Index RA_SUBRPTPARAMNAMEMAP_I1_OFS

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_SUBRPTPARAMNAMEMAP_I1_OFS" ON "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP_OFS" ("REPORT_ID", "SUB_REPORT_ID", "SUB_REPORT_SEQ") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_REPORT_INST_INFO_U1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_REPORT_INST_INFO_U1" ON "RPTAPP"."RA_REPORT_INST_INFO" ("RUN_ID", "QUERY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index IDX_QRTZ_FT_T_G

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."IDX_QRTZ_FT_T_G" ON "RPTAPP"."QRTZ_FIRED_TRIGGERS" ("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index PK_DSMT_ENTRPS_PROD_HIER1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."PK_DSMT_ENTRPS_PROD_HIER1" ON "RPTAPP"."DSMT_ENTRPS_PROD_HIER" ("SETID", "PRNT_ENTRPS_PROD_ID", "ENTRPS_PROD_ID", "DA_REC_EFF_DT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index IX_RA_USER_FAV_CAT_VALUE_001

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."IX_RA_USER_FAV_CAT_VALUE_001" ON "RPTAPP"."RA_USER_FAV_CAT_VALUE" ("CAT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Index RA_TEMPLATES_U1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_TEMPLATES_U1" ON "RPTAPP"."RA_TEMPLATES" ("TEMPLATE_ID" DESC) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_REPORT_LDAP_GROUPS_U2

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_REPORT_LDAP_GROUPS_U2" ON "RPTAPP"."RA_REPORT_LDAP_GROUPS" ("REPORT_ID", "LDAP_GROUP_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_REPORT_META_DETAILS_U1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_REPORT_META_DETAILS_U1" ON "RPTAPP"."RA_REPORT_META_DETAILS" ("RPT_VERSION", "TABLE_NAME", "COLUMN_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_REPORTS_B_PK_OFS

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_REPORTS_B_PK_OFS" ON "RPTAPP"."RA_REPORTS_B_OFS" ("REPORT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_INSTANCE_PROMPT_VALUES_N1

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_INSTANCE_PROMPT_VALUES_N1" ON "RPTAPP"."RA_INSTANCE_PROMPT_VALUES" ("RUN_ID" DESC) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_REPORT_INST_QRY_PROGRESS_I4

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_REPORT_INST_QRY_PROGRESS_I4" ON "RPTAPP"."RA_REPORT_INST_QRY_PROGRESS" ("RUN_ID", "REPORT_ID", "QUERY_ID", "QUERY_ACTION_NAME", "QUERY_ACTION_TIME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_SHARED_REPORTS_N1

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_SHARED_REPORTS_N1" ON "RPTAPP"."RA_SHARED_REPORTS" ("SHARED_TO_TYPE", "SHARED_TO_USER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index PK_RA_META_ATTR_GRP_MBR_001

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."PK_RA_META_ATTR_GRP_MBR_001" ON "RPTAPP"."RA_META_ATTR_GRP_MBR" ("ATTR_GRP_MBR_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_EXCEPTIONS_U1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_EXCEPTIONS_U1" ON "RPTAPP"."RA_EXCEPTIONS" ("ERROR_TYPE", "ERROR_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_REPORT_QUERY_MAP_I1_OFS

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_REPORT_QUERY_MAP_I1_OFS" ON "RPTAPP"."RA_REPORT_QUERY_MAP_OFS" ("REPORT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_TEMPLATES_N1

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_TEMPLATES_N1" ON "RPTAPP"."RA_TEMPLATES" ("RUN_ID" DESC) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index PK_RA_META_DATA_MODEL_01

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."PK_RA_META_DATA_MODEL_01" ON "RPTAPP"."RA_META_DATA_MODEL" ("DM_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_SEEDED_QUERIES_U1_OFS

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_SEEDED_QUERIES_U1_OFS" ON "RPTAPP"."RA_SEEDED_QUERIES_OFS" ("QUERY_ID" DESC) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_REPORT_INST_QRY_PROGRESS_I2

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_REPORT_INST_QRY_PROGRESS_I2" ON "RPTAPP"."RA_REPORT_INST_QRY_PROGRESS" ("RUN_ID", "REPORT_ID", "QUERY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_USER_APP_ROLE_MAP_U1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_USER_APP_ROLE_MAP_U1" ON "RPTAPP"."RA_USER_APP_ROLE_MAP" ("SOEID", "ROLE", "APP_ID", "REPORT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_RA_SUB_RPT_INST_PK

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_RA_SUB_RPT_INST_PK" ON "RPTAPP"."RA_SUB_RUN_INSTANCES" ("SUB_RUN_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_EXT_REPORT_PARAM_MAPPING_U1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_EXT_REPORT_PARAM_MAPPING_U1" ON "RPTAPP"."RA_EXT_REPORT_PARAMETER_MAPING" ("REPORT_ID", "EXT_REPORT_ID", "EXT_SYSTEM_ID", "PARAMETER_NAME_IN_QUERY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "RPTAPP_DATA" ;
--------------------------------------------------------

--  DDL for Index RA_TEMPLATES_N2

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_TEMPLATES_N2" ON "RPTAPP"."RA_TEMPLATES" ("OWNER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_JR_TEMPLATES_PK

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_JR_TEMPLATES_PK" ON "RPTAPP"."RA_JR_TEMPLATES" ("REPORT_ID", "JR_TEMPLATE_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index UX_SNOW_HEADER1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."UX_SNOW_HEADER1" ON "RPTAPP"."SNOW_HEADER" ("RQST_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index UX_RA_META_FILT_OPER_01

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."UX_RA_META_FILT_OPER_01" ON "RPTAPP"."RA_META_FILT_OPER" ("FILT_OPER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index QRTZ_LOCKS_PK

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."QRTZ_LOCKS_PK" ON "RPTAPP"."QRTZ_LOCKS" ("SCHED_NAME", "LOCK_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RPTAPP_INST_STATUS_HIST__IDX

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RPTAPP_INST_STATUS_HIST__IDX" ON "RPTAPP"."RA_INSTANCE_STATUS_HIST" ("RUN_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index UK_RA_REPORT_PARAMETERS_B_OFS

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."UK_RA_REPORT_PARAMETERS_B_OFS" ON "RPTAPP"."RA_REPORT_PARAMETERS_B_OFS" ("REPORT_ID", "PARAMETER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index IDX_QRTZ_FT_TG

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."IDX_QRTZ_FT_TG" ON "RPTAPP"."QRTZ_FIRED_TRIGGERS" ("SCHED_NAME", "TRIGGER_GROUP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_REPORT_INST_QRY_PROGRESS_I3

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_REPORT_INST_QRY_PROGRESS_I3" ON "RPTAPP"."RA_REPORT_INST_QRY_PROGRESS" ("RUN_ID", "REPORT_ID", "QUERY_ID", "QUERY_ACTION_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index I

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."I" ON "RPTAPP"."T" ("OWNER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index QRTZ_CRON_TRIG_PK

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."QRTZ_CRON_TRIG_PK" ON "RPTAPP"."QRTZ_CRON_TRIGGERS" ("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index IDX_QRTZ_FT_JG

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."IDX_QRTZ_FT_JG" ON "RPTAPP"."QRTZ_FIRED_TRIGGERS" ("SCHED_NAME", "JOB_GROUP") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_TABLE_META_DETAILS_U1

--------------------------------------------------------


  CREATE UNIQUE INDEX "RPTAPP"."RA_TABLE_META_DETAILS_U1" ON "RPTAPP"."RA_TABLE_META_DETAILS" ("RPT_VERSION", "TABLE_NAME", "COLUMN_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  DDL for Index RA_TEMPLATE_PARAMS_N1

--------------------------------------------------------


  CREATE INDEX "RPTAPP"."RA_TEMPLATE_PARAMS_N1" ON "RPTAPP"."RA_TEMPLATE_PARAMS" ("TEMPLATE_ID" DESC) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------

--  Constraints for Table RA_META_DATA_MODEL

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_META_DATA_MODEL" ADD CONSTRAINT "PK_RA_META_DATA_MODEL_01" PRIMARY KEY ("DM_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_META_DATA_MODEL" MODIFY ("APP_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_META_DATA_MODEL" MODIFY ("DM_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_EXT_REPORT_INSTANCE

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_EXT_REPORT_INSTANCE" MODIFY ("EXT_RUN_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERY_COLUMNS_2212

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_2212" MODIFY ("COLUMN_DATA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_2212" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_2212" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_2212" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_2212" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_2212" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_2212" MODIFY ("REQUIRED_IN_SELECT_CLAUSE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_2212" MODIFY ("COLUMN_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_2212" MODIFY ("COLUMN_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_2212" MODIFY ("COLUMN_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_2212" MODIFY ("COLUMN_ORDER" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_2212" MODIFY ("QUERY_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SHARED_GROUP_MEMBERS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SHARED_GROUP_MEMBERS" MODIFY ("LAST_UPDATE_DTM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SHARED_GROUP_MEMBERS" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SHARED_GROUP_MEMBERS" MODIFY ("CREATION_DTM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SHARED_GROUP_MEMBERS" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SHARED_GROUP_MEMBERS" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table TEMP_RA_REPORTS_B1

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."TEMP_RA_REPORTS_B1" MODIFY ("ACTIVE_IND" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."TEMP_RA_REPORTS_B1" MODIFY ("REPORT_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."TEMP_RA_REPORTS_B1" MODIFY ("APP_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_EVENT_XPATH_DATA

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_EVENT_XPATH_DATA" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EVENT_XPATH_DATA" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EVENT_XPATH_DATA" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EVENT_XPATH_DATA" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EVENT_XPATH_DATA" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EVENT_XPATH_DATA" MODIFY ("EVENT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_EXT_REPORT_PARAMETER_MAPING

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_EXT_REPORT_PARAMETER_MAPING" MODIFY ("EXT_SYSTEM_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EXT_REPORT_PARAMETER_MAPING" MODIFY ("REPORT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_GLOBAL_ENV_PROP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_GLOBAL_ENV_PROP" ADD CONSTRAINT "RA_M_GLOBAL_ENV_PROP_PK" PRIMARY KEY ("ENV_PROP_ID", "NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_GLOBAL_ENV_PROP" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_GLOBAL_ENV_PROP" MODIFY ("ENV_PROP_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RAVI_TREE_TEST

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RAVI_TREE_TEST" MODIFY ("PARENT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_DATA_SOURCES_MD

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_DATA_SOURCES_MD" MODIFY ("DOMAIN_CODE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_DATA_SOURCES_MD" MODIFY ("DS_JNDI_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_DATA_SOURCES_MD" MODIFY ("DS_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table QRTZ_JOB_DETAILS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."QRTZ_JOB_DETAILS" ADD CONSTRAINT "QRTZ_JOB_DETAILS_PK" PRIMARY KEY ("SCHED_NAME", "JOB_NAME", "JOB_GROUP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."QRTZ_JOB_DETAILS" MODIFY ("REQUESTS_RECOVERY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_JOB_DETAILS" MODIFY ("IS_UPDATE_DATA" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_JOB_DETAILS" MODIFY ("IS_NONCONCURRENT" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_JOB_DETAILS" MODIFY ("IS_DURABLE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_JOB_DETAILS" MODIFY ("JOB_CLASS_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_JOB_DETAILS" MODIFY ("JOB_GROUP" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_JOB_DETAILS" MODIFY ("JOB_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_JOB_DETAILS" MODIFY ("SCHED_NAME" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_REPORT_OUTPUT_TYPE

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORT_OUTPUT_TYPE" MODIFY ("OUTPUT_TYPE_CODE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_OUTPUT_TYPE" MODIFY ("REPORT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table QRTZ_CALENDARS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."QRTZ_CALENDARS" ADD CONSTRAINT "QRTZ_CALENDARS_PK" PRIMARY KEY ("SCHED_NAME", "CALENDAR_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."QRTZ_CALENDARS" MODIFY ("CALENDAR" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_CALENDARS" MODIFY ("CALENDAR_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_CALENDARS" MODIFY ("SCHED_NAME" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table QRTZ_SIMPLE_TRIGGERS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."QRTZ_SIMPLE_TRIGGERS" ADD CONSTRAINT "QRTZ_SIMPLE_TRIG_PK" PRIMARY KEY ("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."QRTZ_SIMPLE_TRIGGERS" MODIFY ("TIMES_TRIGGERED" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_SIMPLE_TRIGGERS" MODIFY ("REPEAT_INTERVAL" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_SIMPLE_TRIGGERS" MODIFY ("REPEAT_COUNT" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_SIMPLE_TRIGGERS" MODIFY ("TRIGGER_GROUP" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_SIMPLE_TRIGGERS" MODIFY ("TRIGGER_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_SIMPLE_TRIGGERS" MODIFY ("SCHED_NAME" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_TEMPLATE_PARAMS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_TEMPLATE_PARAMS" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_PARAMS" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_PARAMS" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_PARAMS" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_PARAMS" MODIFY ("TEMPLATE_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_PARAMS" MODIFY ("PARAM_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_REPORTS_B

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORTS_B" ADD CONSTRAINT "RA_REPORTS_B_PK" PRIMARY KEY ("REPORT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_REPORTS_B" MODIFY ("ACTIVE_IND" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORTS_B" MODIFY ("APP_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORTS_B" MODIFY ("REPORT_TYPE" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_USER_FAV_CATEGORY

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_USER_FAV_CATEGORY" MODIFY ("CAT_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_FAV_CATEGORY" MODIFY ("SOE_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_FAV_CATEGORY" MODIFY ("CAT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_AUDIT_JMS_RESTART

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_AUDIT_JMS_RESTART" MODIFY ("SOEID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_META_ATTR_GRP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_META_ATTR_GRP" ADD CONSTRAINT "PK_RA_META_ATTR_GRP_001" PRIMARY KEY ("ATTR_GRP_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_META_ATTR_GRP" MODIFY ("ACTV_IND" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_META_ATTR_GRP" MODIFY ("GRP_NM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_META_ATTR_GRP" MODIFY ("ATTR_GRP_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERIES_CM22692

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_CM22692" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_CM22692" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_CM22692" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_CM22692" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_CM22692" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_CM22692" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_CM22692" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_APRVL_Q

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_APRVL_Q" MODIFY ("REPORT_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_APRVL_Q" MODIFY ("APP_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_APRVL_Q" MODIFY ("REPORT_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_APRVL_Q" MODIFY ("RUN_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_APRVL_Q" MODIFY ("UNIQUE_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_APPS_DS_DOMAIN

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_APPS_DS_DOMAIN" MODIFY ("DOMAIN_CODE" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_INSTANCE_READ_ACTIVITY

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_INSTANCE_READ_ACTIVITY" MODIFY ("VIEWED_BY_SOEID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INSTANCE_READ_ACTIVITY" MODIFY ("RUN_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_HIST_INSTANCE_READ_ACTIVITY

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_HIST_INSTANCE_READ_ACTIVITY" MODIFY ("VIEWED_BY_SOEID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_INSTANCE_READ_ACTIVITY" MODIFY ("RUN_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SCHEDULING_INFO_TEMP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SCHEDULING_INFO_TEMP" ADD PRIMARY KEY ("SCHEDULE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------

--  Constraints for Table RA_SED_QUERY_COLS_BKP1415

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SED_QUERY_COLS_BKP1415" MODIFY ("COLUMN_DATA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SED_QUERY_COLS_BKP1415" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SED_QUERY_COLS_BKP1415" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SED_QUERY_COLS_BKP1415" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SED_QUERY_COLS_BKP1415" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SED_QUERY_COLS_BKP1415" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SED_QUERY_COLS_BKP1415" MODIFY ("REQUIRED_IN_SELECT_CLAUSE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SED_QUERY_COLS_BKP1415" MODIFY ("COLUMN_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SED_QUERY_COLS_BKP1415" MODIFY ("COLUMN_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SED_QUERY_COLS_BKP1415" MODIFY ("COLUMN_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SED_QUERY_COLS_BKP1415" MODIFY ("COLUMN_ORDER" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SED_QUERY_COLS_BKP1415" MODIFY ("QUERY_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERY_COLUMNS_030814

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_030814" MODIFY ("COLUMN_DATA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_030814" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_030814" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_030814" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_030814" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_030814" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_030814" MODIFY ("REQUIRED_IN_SELECT_CLAUSE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_030814" MODIFY ("COLUMN_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_030814" MODIFY ("COLUMN_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_030814" MODIFY ("COLUMN_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_030814" MODIFY ("COLUMN_ORDER" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_030814" MODIFY ("QUERY_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERIES_OFS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_OFS" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_OFS" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_OFS" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_OFS" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_OFS" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_OFS" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_OFS" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_INSTANCE_PROMPT_VALUES_IMP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_INSTANCE_PROMPT_VALUES_IMP" MODIFY ("RUN_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_REPORTS_B_0324

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORTS_B_0324" MODIFY ("ACTIVE_IND" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORTS_B_0324" MODIFY ("REPORT_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORTS_B_0324" MODIFY ("APP_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_STG_USER_DETAILS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_STG_USER_DETAILS" ADD PRIMARY KEY ("SOEID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_STG_USER_DETAILS" MODIFY ("ACTIVE" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table TMP_RA_REPORT_INSTANCES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."TMP_RA_REPORT_INSTANCES" MODIFY ("TRIGGERED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."TMP_RA_REPORT_INSTANCES" MODIFY ("PROCESSING_STATUS" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."TMP_RA_REPORT_INSTANCES" MODIFY ("ORIGINAL_RUN_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."TMP_RA_REPORT_INSTANCES" MODIFY ("STATUS" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."TMP_RA_REPORT_INSTANCES" MODIFY ("REPORT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_EXT_REPORT_MAPPING

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_EXT_REPORT_MAPPING" MODIFY ("EXT_SYSTEM_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EXT_REPORT_MAPPING" MODIFY ("EXT_REPORT_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EXT_REPORT_MAPPING" MODIFY ("REPORT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_APP_EMAIL_PROPERTIES1

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_APP_EMAIL_PROPERTIES1" MODIFY ("APP_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table AUD_RA_REPORT_QUERY_MAP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."AUD_RA_REPORT_QUERY_MAP" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_REPORT_QUERY_MAP" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_REPORT_QUERY_MAP" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_REPORT_QUERY_MAP" MODIFY ("CREATED_BY" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_HIST_INSTANCE_QUERY_COLUMNS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_HIST_INSTANCE_QUERY_COLUMNS" MODIFY ("COLUMN_DATA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_INSTANCE_QUERY_COLUMNS" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_INSTANCE_QUERY_COLUMNS" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_INSTANCE_QUERY_COLUMNS" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_INSTANCE_QUERY_COLUMNS" MODIFY ("REQUIRED_IN_SELECT_CLAUSE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_INSTANCE_QUERY_COLUMNS" MODIFY ("COLUMN_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_INSTANCE_QUERY_COLUMNS" MODIFY ("COLUMN_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_INSTANCE_QUERY_COLUMNS" MODIFY ("COLUMN_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_INSTANCE_QUERY_COLUMNS" MODIFY ("COLUMN_ORDER" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_INSTANCE_QUERY_COLUMNS" MODIFY ("QUERY_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_INSTANCE_QUERY_COLUMNS" MODIFY ("RUN_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_REPORT_INST_QRY_PROGRESS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORT_INST_QRY_PROGRESS" MODIFY ("QUERY_ACTION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_INST_QRY_PROGRESS" MODIFY ("QUERY_ACTION_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_INST_QRY_PROGRESS" MODIFY ("RUN_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_HIST_SHARED_REPORTS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_HIST_SHARED_REPORTS" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_SHARED_REPORTS" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_SHARED_REPORTS" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_SHARED_REPORTS" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_SHARED_REPORTS" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_SHARED_REPORTS" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_SHARED_REPORTS" MODIFY ("RUN_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_APPS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_APPS" MODIFY ("APP_SHORT_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_APPS" MODIFY ("APP_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_APPS" ADD CONSTRAINT "RA_APPS_PK" PRIMARY KEY ("APP_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_APPS" MODIFY ("APP_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_APPS" MODIFY ("ACTIVE" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERY_COLUMNS_SOJI

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_SOJI" MODIFY ("COLUMN_DATA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_SOJI" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_SOJI" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_SOJI" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_SOJI" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_SOJI" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_SOJI" MODIFY ("REQUIRED_IN_SELECT_CLAUSE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_SOJI" MODIFY ("COLUMN_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_SOJI" MODIFY ("COLUMN_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_SOJI" MODIFY ("COLUMN_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_SOJI" MODIFY ("COLUMN_ORDER" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_SOJI" MODIFY ("QUERY_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_APP_EMAIL_PROPERTIES_1

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_APP_EMAIL_PROPERTIES_1" MODIFY ("APP_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_STATIC_ENUM

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_STATIC_ENUM" MODIFY ("VALUE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_STATIC_ENUM" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_STATIC_ENUM" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_LOOKUPS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_LOOKUPS" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_LOOKUPS" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_LOOKUPS" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_LOOKUPS" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_LOOKUPS" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_LOOKUPS" MODIFY ("LOOKUP_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_LOOKUPS" MODIFY ("LOOKUP_TYPE" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table VBK_QC_1426

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."VBK_QC_1426" MODIFY ("COLUMN_DATA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."VBK_QC_1426" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."VBK_QC_1426" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."VBK_QC_1426" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."VBK_QC_1426" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."VBK_QC_1426" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."VBK_QC_1426" MODIFY ("REQUIRED_IN_SELECT_CLAUSE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."VBK_QC_1426" MODIFY ("COLUMN_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."VBK_QC_1426" MODIFY ("COLUMN_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."VBK_QC_1426" MODIFY ("COLUMN_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."VBK_QC_1426" MODIFY ("COLUMN_ORDER" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."VBK_QC_1426" MODIFY ("QUERY_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERY_COLUMNS_CN

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_CN" MODIFY ("COLUMN_DATA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_CN" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_CN" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_CN" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_CN" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_CN" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_CN" MODIFY ("REQUIRED_IN_SELECT_CLAUSE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_CN" MODIFY ("COLUMN_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_CN" MODIFY ("COLUMN_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_CN" MODIFY ("COLUMN_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_CN" MODIFY ("COLUMN_ORDER" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_CN" MODIFY ("QUERY_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_LOOKUP_CODES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_LOOKUP_CODES" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_LOOKUP_CODES" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_LOOKUP_CODES" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_LOOKUP_CODES" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_LOOKUP_CODES" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_LOOKUP_CODES" MODIFY ("LOOKUP_CODE_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_LOOKUP_CODES" MODIFY ("LOOKUP_CODE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_LOOKUP_CODES" MODIFY ("LOOKUP_TYPE" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_REPORTS_B_030814

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORTS_B_030814" MODIFY ("ACTIVE_IND" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORTS_B_030814" MODIFY ("REPORT_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORTS_B_030814" MODIFY ("APP_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table HIST_RA_APPS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."HIST_RA_APPS" MODIFY ("ACTIVE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."HIST_RA_APPS" MODIFY ("APP_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."HIST_RA_APPS" MODIFY ("APP_SHORT_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."HIST_RA_APPS" MODIFY ("APP_NAME" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_REPORT_INSTANCES_TEST

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORT_INSTANCES_TEST" MODIFY ("TRIGGERED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_INSTANCES_TEST" MODIFY ("PROCESSING_STATUS" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_INSTANCES_TEST" MODIFY ("ORIGINAL_RUN_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_INSTANCES_TEST" MODIFY ("STATUS" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_INSTANCES_TEST" MODIFY ("REPORT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERIES_030814

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_030814" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_030814" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_030814" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_030814" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_030814" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_030814" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_030814" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERY_COLUMN_FORMAT

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMN_FORMAT" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMN_FORMAT" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMN_FORMAT" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMN_FORMAT" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMN_FORMAT" MODIFY ("QUERY_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMN_FORMAT" MODIFY ("REPORT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERIES_HIST_CM22692

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_HIST_CM22692" MODIFY ("SNAP_SHOT_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_HIST_CM22692" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_HIST_CM22692" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_HIST_CM22692" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_HIST_CM22692" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_HIST_CM22692" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_HIST_CM22692" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_HIST_CM22692" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERY_PROD

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_PROD" MODIFY ("PROD_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_PROD" MODIFY ("QUERY_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SUB_RUN_INSTANCES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SUB_RUN_INSTANCES" ADD CONSTRAINT "RA_RA_SUB_RPT_INST_PK" PRIMARY KEY ("SUB_RUN_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_SUB_RUN_INSTANCES" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SUB_RUN_INSTANCES" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SUB_RUN_INSTANCES" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SUB_RUN_INSTANCES" MODIFY ("CREATED_BY" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERY_ATTR_EXPR

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_ATTR_EXPR" MODIFY ("QUERY_ATTR_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_HIST_REPORT_INSTANCES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_HIST_REPORT_INSTANCES" MODIFY ("TRIGGERED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_REPORT_INSTANCES" MODIFY ("PROCESSING_STATUS" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_REPORT_INSTANCES" MODIFY ("ORIGINAL_RUN_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_REPORT_INSTANCES" MODIFY ("STATUS" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_REPORT_INSTANCES" MODIFY ("REPORT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_TABLE_COMMENTS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_TABLE_COMMENTS" MODIFY ("TABLE_NAME" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_REPORTS_B_OFS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORTS_B_OFS" ADD CONSTRAINT "RA_REPORTS_B_PK_OFS" PRIMARY KEY ("REPORT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_REPORTS_B_OFS" MODIFY ("ACTIVE_IND" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORTS_B_OFS" MODIFY ("REPORT_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORTS_B_OFS" MODIFY ("APP_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERIES_TOP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_TOP" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_TOP" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_TOP" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_TOP" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_TOP" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_TOP" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_TOP" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_DATA_SOURCES_BKP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_DATA_SOURCES_BKP" MODIFY ("DOMAIN_CODE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_DATA_SOURCES_BKP" MODIFY ("DS_JNDI_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_DATA_SOURCES_BKP" MODIFY ("DS_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_TEMPLATE_QUERY_COLUMNS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_TEMPLATE_QUERY_COLUMNS" MODIFY ("COLUMN_ORDER" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_QUERY_COLUMNS" MODIFY ("COLUMN_DATA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_QUERY_COLUMNS" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_QUERY_COLUMNS" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_QUERY_COLUMNS" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_QUERY_COLUMNS" MODIFY ("REQUIRED_IN_SELECT_CLAUSE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_QUERY_COLUMNS" MODIFY ("COLUMN_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_QUERY_COLUMNS" MODIFY ("COLUMN_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_QUERY_COLUMNS" MODIFY ("COLUMN_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_QUERY_COLUMNS" MODIFY ("QUERY_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_QUERY_COLUMNS" MODIFY ("TEMPLATE_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_JMS_LSTNR_RESTART_ACTIVITY

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_JMS_LSTNR_RESTART_ACTIVITY" MODIFY ("SOEID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RF_SEEDED_QUERIES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RF_SEEDED_QUERIES" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RF_SEEDED_QUERIES" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RF_SEEDED_QUERIES" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RF_SEEDED_QUERIES" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RF_SEEDED_QUERIES" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RF_SEEDED_QUERIES" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RF_SEEDED_QUERIES" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table QRTZ_BLOB_TRIGGERS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."QRTZ_BLOB_TRIGGERS" ADD CONSTRAINT "QRTZ_BLOB_TRIG_PK" PRIMARY KEY ("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."QRTZ_BLOB_TRIGGERS" MODIFY ("TRIGGER_GROUP" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_BLOB_TRIGGERS" MODIFY ("TRIGGER_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_BLOB_TRIGGERS" MODIFY ("SCHED_NAME" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_BI_SERVERS_TEMP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_BI_SERVERS_TEMP" MODIFY ("BI_SERVER_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_BI_SERVERS_TEMP" MODIFY ("BI_SERVER_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_APP_APPROVER

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_APP_APPROVER" ADD CONSTRAINT "RA_APP_APPROVER_PK" PRIMARY KEY ("APP_ID", "APRVL_SOE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "RPTAPP_DATA"  ENABLE;
--------------------------------------------------------

--  Constraints for Table RA_REPORTS_B_BKP_20140410

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORTS_B_BKP_20140410" MODIFY ("ACTIVE_IND" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORTS_B_BKP_20140410" MODIFY ("REPORT_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORTS_B_BKP_20140410" MODIFY ("APP_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table QRTZ_SCHEDULER_STATE

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."QRTZ_SCHEDULER_STATE" ADD CONSTRAINT "QRTZ_SCHEDULER_STATE_PK" PRIMARY KEY ("SCHED_NAME", "INSTANCE_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."QRTZ_SCHEDULER_STATE" MODIFY ("CHECKIN_INTERVAL" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_SCHEDULER_STATE" MODIFY ("LAST_CHECKIN_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_SCHEDULER_STATE" MODIFY ("INSTANCE_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_SCHEDULER_STATE" MODIFY ("SCHED_NAME" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_INPUT_TYPES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_INPUT_TYPES" ADD PRIMARY KEY ("INPUT_TYPE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------

--  Constraints for Table RA_REPORTS_B_IMP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORTS_B_IMP" MODIFY ("ACTIVE_IND" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORTS_B_IMP" MODIFY ("REPORT_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORTS_B_IMP" MODIFY ("APP_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_TEMPLATE_PARAMS_TST

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_TEMPLATE_PARAMS_TST" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_PARAMS_TST" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_PARAMS_TST" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_PARAMS_TST" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_PARAMS_TST" MODIFY ("PARAM_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_PARAMS_TST" MODIFY ("TEMPLATE_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_REPORT_INSTANCES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORT_INSTANCES" MODIFY ("REPORT_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_INSTANCES" MODIFY ("ORIGINAL_RUN_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_INSTANCES" MODIFY ("TRIGGERED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_INSTANCES" MODIFY ("PROCESSING_STATUS" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_INSTANCES" MODIFY ("STATUS" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERIES_14103

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_14103" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_14103" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_14103" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_14103" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_14103" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_14103" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_14103" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_META_AGGR_FUNC

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_META_AGGR_FUNC" MODIFY ("AGGR_FUNC_NM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_META_AGGR_FUNC" MODIFY ("AGGR_FUNC_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_EVENT_SUBS_REPORT_MAPPING

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_EVENT_SUBS_REPORT_MAPPING" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EVENT_SUBS_REPORT_MAPPING" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EVENT_SUBS_REPORT_MAPPING" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EVENT_SUBS_REPORT_MAPPING" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EVENT_SUBS_REPORT_MAPPING" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EVENT_SUBS_REPORT_MAPPING" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERY_COLUMNS_OFS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_OFS" MODIFY ("COLUMN_DATA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_OFS" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_OFS" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_OFS" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_OFS" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_OFS" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_OFS" MODIFY ("REQUIRED_IN_SELECT_CLAUSE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_OFS" MODIFY ("COLUMN_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_OFS" MODIFY ("COLUMN_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_OFS" MODIFY ("COLUMN_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_OFS" MODIFY ("COLUMN_ORDER" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS_OFS" MODIFY ("QUERY_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_REPORT_USER_DOWNLOADS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORT_USER_DOWNLOADS" MODIFY ("REPORT_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_USER_DOWNLOADS" MODIFY ("RUN_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table HIST_RA_SEEDED_QUERY_COLUMNS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."HIST_RA_SEEDED_QUERY_COLUMNS" MODIFY ("COLUMN_DATA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."HIST_RA_SEEDED_QUERY_COLUMNS" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."HIST_RA_SEEDED_QUERY_COLUMNS" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."HIST_RA_SEEDED_QUERY_COLUMNS" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."HIST_RA_SEEDED_QUERY_COLUMNS" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."HIST_RA_SEEDED_QUERY_COLUMNS" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."HIST_RA_SEEDED_QUERY_COLUMNS" MODIFY ("REQUIRED_IN_SELECT_CLAUSE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."HIST_RA_SEEDED_QUERY_COLUMNS" MODIFY ("COLUMN_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."HIST_RA_SEEDED_QUERY_COLUMNS" MODIFY ("COLUMN_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."HIST_RA_SEEDED_QUERY_COLUMNS" MODIFY ("COLUMN_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."HIST_RA_SEEDED_QUERY_COLUMNS" MODIFY ("COLUMN_ORDER" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."HIST_RA_SEEDED_QUERY_COLUMNS" MODIFY ("QUERY_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_HIST_SUB_RUN_INSTANCES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_HIST_SUB_RUN_INSTANCES" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_SUB_RUN_INSTANCES" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_SUB_RUN_INSTANCES" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_SUB_RUN_INSTANCES" MODIFY ("CREATED_BY" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table QRTZ_LOCKS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."QRTZ_LOCKS" ADD CONSTRAINT "QRTZ_LOCKS_PK" PRIMARY KEY ("SCHED_NAME", "LOCK_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."QRTZ_LOCKS" MODIFY ("LOCK_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_LOCKS" MODIFY ("SCHED_NAME" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table AUD_RA_SUB_REPORT_MAP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."AUD_RA_SUB_REPORT_MAP" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_SUB_REPORT_MAP" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_SUB_REPORT_MAP" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_SUB_REPORT_MAP" MODIFY ("CREATED_BY" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SHARED_GROUPS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SHARED_GROUPS" ADD PRIMARY KEY ("GRP_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_SHARED_GROUPS" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SHARED_GROUPS" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SHARED_GROUPS" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SHARED_GROUPS" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SHARED_GROUPS" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SHARED_GROUPS" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_REPORT_INST_INFO

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORT_INST_INFO" MODIFY ("RUN_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_DATA_SOURCES_CN

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_DATA_SOURCES_CN" MODIFY ("DS_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_IMAGES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_IMAGES" ADD CONSTRAINT "RA_IMAGES_PK" PRIMARY KEY ("IMAGE_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_IMAGES" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_IMAGES" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_IMAGES" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_IMAGES" MODIFY ("CREATED_BY" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_FREQUENCY_TYPES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_FREQUENCY_TYPES" ADD PRIMARY KEY ("FREQUENCY_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------

--  Constraints for Table RA_INPUT_VALIDATION_BKP0506

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_INPUT_VALIDATION_BKP0506" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INPUT_VALIDATION_BKP0506" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INPUT_VALIDATION_BKP0506" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INPUT_VALIDATION_BKP0506" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INPUT_VALIDATION_BKP0506" MODIFY ("SCRIPT_LANGUAGE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INPUT_VALIDATION_BKP0506" MODIFY ("SCRIPT_SEQ" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INPUT_VALIDATION_BKP0506" MODIFY ("REPORT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table AAA_TEST_RA_SEEDED_QRY_COL

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."AAA_TEST_RA_SEEDED_QRY_COL" MODIFY ("COLUMN_DATA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AAA_TEST_RA_SEEDED_QRY_COL" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AAA_TEST_RA_SEEDED_QRY_COL" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AAA_TEST_RA_SEEDED_QRY_COL" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AAA_TEST_RA_SEEDED_QRY_COL" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AAA_TEST_RA_SEEDED_QRY_COL" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AAA_TEST_RA_SEEDED_QRY_COL" MODIFY ("REQUIRED_IN_SELECT_CLAUSE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AAA_TEST_RA_SEEDED_QRY_COL" MODIFY ("COLUMN_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AAA_TEST_RA_SEEDED_QRY_COL" MODIFY ("COLUMN_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AAA_TEST_RA_SEEDED_QRY_COL" MODIFY ("COLUMN_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AAA_TEST_RA_SEEDED_QRY_COL" MODIFY ("COLUMN_ORDER" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AAA_TEST_RA_SEEDED_QRY_COL" MODIFY ("QUERY_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_USER_SCHEDULES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_USER_SCHEDULES" MODIFY ("BYSECOND" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_SCHEDULES" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_SCHEDULES" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_SCHEDULES" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_SCHEDULES" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_SCHEDULES" MODIFY ("BYMINUTE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_SCHEDULES" MODIFY ("BYHOUR" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_SCHEDULES" MODIFY ("INTERVAL" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_SCHEDULES" MODIFY ("FREQ" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_SCHEDULES" MODIFY ("TO_DATE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_SCHEDULES" MODIFY ("FROM_DATE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_SCHEDULES" MODIFY ("TEMPLATE_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_SCHEDULES" MODIFY ("USER_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_SCHEDULES" MODIFY ("USER_SCHEDULE_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_USER_APP_ROLE_MAP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_USER_APP_ROLE_MAP" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_APP_ROLE_MAP" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_APP_ROLE_MAP" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_APP_ROLE_MAP" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_APP_ROLE_MAP" MODIFY ("ROLE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_APP_ROLE_MAP" MODIFY ("SOEID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_REPORTS_TL

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORTS_TL" ADD CONSTRAINT "RA_REPORTS_TL_PK" PRIMARY KEY ("REPORT_ID", "LANGUAGE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_REPORTS_TL" MODIFY ("LANGUAGE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORTS_TL" MODIFY ("REPORT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_META_FILT_OPER

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_META_FILT_OPER" ADD CONSTRAINT "UX_RA_META_FILT_OPER_01" UNIQUE ("FILT_OPER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_META_FILT_OPER" MODIFY ("FILT_OPER_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_REPORT_QUERY_MAP_OFS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORT_QUERY_MAP_OFS" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_QUERY_MAP_OFS" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_QUERY_MAP_OFS" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_QUERY_MAP_OFS" MODIFY ("CREATED_BY" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_HIST_REPORT_INST_INFO

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_HIST_REPORT_INST_INFO" MODIFY ("RUN_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table DSMT_ENTRPS_PROD_HIER

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."DSMT_ENTRPS_PROD_HIER" ADD CONSTRAINT "PK_DSMT_ENTRPS_PROD_HIER1" PRIMARY KEY ("SETID", "PRNT_ENTRPS_PROD_ID", "ENTRPS_PROD_ID", "DA_REC_EFF_DT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."DSMT_ENTRPS_PROD_HIER" MODIFY ("DA_REC_EFF_DT" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DSMT_ENTRPS_PROD_HIER" MODIFY ("EFFDT" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DSMT_ENTRPS_PROD_HIER" MODIFY ("ENTRPS_PROD_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DSMT_ENTRPS_PROD_HIER" MODIFY ("PRNT_ENTRPS_PROD_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DSMT_ENTRPS_PROD_HIER" MODIFY ("SETID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table MONGO_DOC_SIZE_TEST

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."MONGO_DOC_SIZE_TEST" MODIFY ("REPORT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERIES_IMP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_IMP" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_IMP" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_IMP" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_IMP" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_IMP" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_IMP" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_IMP" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SHARED_TEMPLATES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SHARED_TEMPLATES" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SHARED_TEMPLATES" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SHARED_TEMPLATES" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SHARED_TEMPLATES" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SHARED_TEMPLATES" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SHARED_TEMPLATES" MODIFY ("SHARED_BY" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERIES_CN

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_CN" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_CN" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_CN" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_CN" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_CN" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_CN" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_CN" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_EVENT_XML

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_EVENT_XML" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EVENT_XML" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EVENT_XML" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EVENT_XML" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EVENT_XML" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table AUD_RA_JR_TEMPLATES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."AUD_RA_JR_TEMPLATES" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_JR_TEMPLATES" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_JR_TEMPLATES" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_JR_TEMPLATES" MODIFY ("CREATED_BY" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QC_COLUMNS_IMP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QC_COLUMNS_IMP" MODIFY ("COLUMN_DATA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QC_COLUMNS_IMP" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QC_COLUMNS_IMP" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QC_COLUMNS_IMP" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QC_COLUMNS_IMP" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QC_COLUMNS_IMP" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QC_COLUMNS_IMP" MODIFY ("REQUIRED_IN_SELECT_CLAUSE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QC_COLUMNS_IMP" MODIFY ("COLUMN_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QC_COLUMNS_IMP" MODIFY ("COLUMN_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QC_COLUMNS_IMP" MODIFY ("COLUMN_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QC_COLUMNS_IMP" MODIFY ("COLUMN_ORDER" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QC_COLUMNS_IMP" MODIFY ("QUERY_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_REPORT_QUERY_MAP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORT_QUERY_MAP" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_QUERY_MAP" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_QUERY_MAP" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_QUERY_MAP" MODIFY ("CREATED_BY" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_DATA_SOURCES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_DATA_SOURCES" MODIFY ("DOMAIN_CODE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_DATA_SOURCES" MODIFY ("DS_JNDI_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_DATA_SOURCES" MODIFY ("DS_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table TEST_RA_SEEDED_QUERY

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."TEST_RA_SEEDED_QUERY" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."TEST_RA_SEEDED_QUERY" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."TEST_RA_SEEDED_QUERY" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."TEST_RA_SEEDED_QUERY" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."TEST_RA_SEEDED_QUERY" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."TEST_RA_SEEDED_QUERY" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."TEST_RA_SEEDED_QUERY" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_JR_TEMPLATES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_JR_TEMPLATES" ADD CONSTRAINT "RA_JR_TEMPLATES_PK" PRIMARY KEY ("REPORT_ID", "JR_TEMPLATE_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_JR_TEMPLATES" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_JR_TEMPLATES" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_JR_TEMPLATES" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_JR_TEMPLATES" MODIFY ("CREATED_BY" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_USER_APP_ROLES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_USER_APP_ROLES" ADD CONSTRAINT "RA_USER_APP_ROLES_PK" PRIMARY KEY ("SOEID", "ROLE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_USER_APP_ROLES" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_APP_ROLES" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_APP_ROLES" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_APP_ROLES" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_APP_ROLES" MODIFY ("ACTIVE_FLAG" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_APP_ROLES" MODIFY ("ROLE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_APP_ROLES" MODIFY ("SOEID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table AUD_RA_OUTPUT_TEMPLATES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."AUD_RA_OUTPUT_TEMPLATES" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_OUTPUT_TEMPLATES" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_OUTPUT_TEMPLATES" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_OUTPUT_TEMPLATES" MODIFY ("CREATED_BY" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_TEMPLATES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_TEMPLATES" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATES" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATES" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATES" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATES" MODIFY ("OWNER_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATES" MODIFY ("TEMPLATE_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATES" MODIFY ("TEMPLATE_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_DATA_SOURCES_BCK

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_DATA_SOURCES_BCK" MODIFY ("DOMAIN_CODE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_DATA_SOURCES_BCK" MODIFY ("DS_JNDI_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_DATA_SOURCES_BCK" MODIFY ("DS_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table SEEDED_QRY_COLS1415

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."SEEDED_QRY_COLS1415" MODIFY ("COLUMN_DATA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."SEEDED_QRY_COLS1415" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."SEEDED_QRY_COLS1415" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."SEEDED_QRY_COLS1415" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."SEEDED_QRY_COLS1415" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."SEEDED_QRY_COLS1415" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."SEEDED_QRY_COLS1415" MODIFY ("REQUIRED_IN_SELECT_CLAUSE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."SEEDED_QRY_COLS1415" MODIFY ("COLUMN_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."SEEDED_QRY_COLS1415" MODIFY ("COLUMN_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."SEEDED_QRY_COLS1415" MODIFY ("COLUMN_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."SEEDED_QRY_COLS1415" MODIFY ("COLUMN_ORDER" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."SEEDED_QRY_COLS1415" MODIFY ("QUERY_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_EVENT_SUBS_MATCHING

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_EVENT_SUBS_MATCHING" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EVENT_SUBS_MATCHING" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EVENT_SUBS_MATCHING" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EVENT_SUBS_MATCHING" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EVENT_SUBS_MATCHING" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EVENT_SUBS_MATCHING" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table HIST_RA_SEEDED_QUERIES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."HIST_RA_SEEDED_QUERIES" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."HIST_RA_SEEDED_QUERIES" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."HIST_RA_SEEDED_QUERIES" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."HIST_RA_SEEDED_QUERIES" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."HIST_RA_SEEDED_QUERIES" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."HIST_RA_SEEDED_QUERIES" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."HIST_RA_SEEDED_QUERIES" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_REPORTS_SOJI

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORTS_SOJI" MODIFY ("ACTIVE_IND" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORTS_SOJI" MODIFY ("REPORT_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORTS_SOJI" MODIFY ("APP_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table D1_TEST123

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."D1_TEST123" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_DATA_SOURCES_SUBRA

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_DATA_SOURCES_SUBRA" MODIFY ("DS_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_DATA_SOURCES_SOJI

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_DATA_SOURCES_SOJI" MODIFY ("DS_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table QC_25013_BKP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."QC_25013_BKP" MODIFY ("COLUMN_DATA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QC_25013_BKP" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QC_25013_BKP" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QC_25013_BKP" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QC_25013_BKP" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QC_25013_BKP" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QC_25013_BKP" MODIFY ("REQUIRED_IN_SELECT_CLAUSE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QC_25013_BKP" MODIFY ("COLUMN_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QC_25013_BKP" MODIFY ("COLUMN_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QC_25013_BKP" MODIFY ("COLUMN_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QC_25013_BKP" MODIFY ("COLUMN_ORDER" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QC_25013_BKP" MODIFY ("QUERY_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table QC_25013

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."QC_25013" MODIFY ("COLUMN_DATA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QC_25013" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QC_25013" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QC_25013" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QC_25013" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QC_25013" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QC_25013" MODIFY ("REQUIRED_IN_SELECT_CLAUSE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QC_25013" MODIFY ("COLUMN_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QC_25013" MODIFY ("COLUMN_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QC_25013" MODIFY ("COLUMN_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QC_25013" MODIFY ("COLUMN_ORDER" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QC_25013" MODIFY ("QUERY_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_APP_ENV_PROP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_APP_ENV_PROP" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_APP_ENV_PROP" MODIFY ("APP_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_BI_SERVERS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_BI_SERVERS" MODIFY ("BI_SERVER_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_BI_SERVERS" MODIFY ("BI_SERVER_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table QRTZ_FIRED_TRIGGERS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."QRTZ_FIRED_TRIGGERS" ADD CONSTRAINT "QRTZ_FIRED_TRIGGER_PK" PRIMARY KEY ("SCHED_NAME", "ENTRY_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."QRTZ_FIRED_TRIGGERS" MODIFY ("STATE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_FIRED_TRIGGERS" MODIFY ("PRIORITY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_FIRED_TRIGGERS" MODIFY ("SCHED_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_FIRED_TRIGGERS" MODIFY ("FIRED_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_FIRED_TRIGGERS" MODIFY ("INSTANCE_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_FIRED_TRIGGERS" MODIFY ("TRIGGER_GROUP" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_FIRED_TRIGGERS" MODIFY ("TRIGGER_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_FIRED_TRIGGERS" MODIFY ("ENTRY_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_FIRED_TRIGGERS" MODIFY ("SCHED_NAME" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_OUTPUT_TEMPLATES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_OUTPUT_TEMPLATES" ADD CONSTRAINT "RA_OUTPUT_TEMPLATES_PK" PRIMARY KEY ("TPL_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_OUTPUT_TEMPLATES" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_OUTPUT_TEMPLATES" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_OUTPUT_TEMPLATES" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_OUTPUT_TEMPLATES" MODIFY ("CREATED_BY" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_REPORT_QUERY_MAP_CN

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORT_QUERY_MAP_CN" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_QUERY_MAP_CN" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_QUERY_MAP_CN" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_QUERY_MAP_CN" MODIFY ("CREATED_BY" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table SNOW_HEADER

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."SNOW_HEADER" ADD CONSTRAINT "UX_SNOW_HEADER1" UNIQUE ("RQST_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."SNOW_HEADER" MODIFY ("RQST_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_USER_DETAILS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_USER_DETAILS" ADD PRIMARY KEY ("SOEID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_USER_DETAILS" MODIFY ("ACTIVE" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table HIST_RA_DATA_SOURCES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."HIST_RA_DATA_SOURCES" MODIFY ("DS_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SUB_REPORT_MAP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SUB_REPORT_MAP" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SUB_REPORT_MAP" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SUB_REPORT_MAP" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SUB_REPORT_MAP" MODIFY ("CREATED_BY" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_META_PROD_ATTR

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_META_PROD_ATTR" ADD CONSTRAINT "PK_RA_META_PROD_ATTR_001" PRIMARY KEY ("PROD_ATTR_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_META_PROD_ATTR" MODIFY ("ACTV_IND" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_META_PROD_ATTR" MODIFY ("PROD_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_META_PROD_ATTR" MODIFY ("ATTR_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_META_PROD_ATTR" MODIFY ("PROD_ATTR_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table AUD_RA_IMAGES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."AUD_RA_IMAGES" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_IMAGES" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_IMAGES" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_IMAGES" MODIFY ("CREATED_BY" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_OUTPUT_TEMPLATES_T1

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_OUTPUT_TEMPLATES_T1" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_OUTPUT_TEMPLATES_T1" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_OUTPUT_TEMPLATES_T1" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_OUTPUT_TEMPLATES_T1" MODIFY ("CREATED_BY" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SHARED_REPORTS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SHARED_REPORTS" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SHARED_REPORTS" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SHARED_REPORTS" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SHARED_REPORTS" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SHARED_REPORTS" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SHARED_REPORTS" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SHARED_REPORTS" MODIFY ("RUN_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_OUTPUT_FORMAT

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_OUTPUT_FORMAT" ADD CHECK ( rpt_output_type IN ('CSV', 'L_HTML', 'PDF', 'S_HTML', 'XLS')) ENABLE;
  ALTER TABLE "RPTAPP"."RA_OUTPUT_FORMAT" MODIFY ("RPT_OUTPUT_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_OUTPUT_FORMAT" MODIFY ("REPORT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_APP_DATA_SOURCES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_APP_DATA_SOURCES" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_APP_DATA_SOURCES" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_TSEEDED_QUERIES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_TSEEDED_QUERIES" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TSEEDED_QUERIES" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TSEEDED_QUERIES" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TSEEDED_QUERIES" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TSEEDED_QUERIES" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TSEEDED_QUERIES" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table SNOW_RESOLVED_DETAILS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."SNOW_RESOLVED_DETAILS" MODIFY ("INCIDENT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERIES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table DMG_10_BFR

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."DMG_10_BFR" MODIFY ("COLUMN_DATA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10_BFR" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10_BFR" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10_BFR" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10_BFR" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10_BFR" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10_BFR" MODIFY ("REQUIRED_IN_SELECT_CLAUSE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10_BFR" MODIFY ("COLUMN_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10_BFR" MODIFY ("COLUMN_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10_BFR" MODIFY ("COLUMN_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10_BFR" MODIFY ("COLUMN_ORDER" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10_BFR" MODIFY ("QUERY_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table QRTZ_CRON_TRIGGERS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."QRTZ_CRON_TRIGGERS" ADD CONSTRAINT "QRTZ_CRON_TRIG_PK" PRIMARY KEY ("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."QRTZ_CRON_TRIGGERS" MODIFY ("CRON_EXPRESSION" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_CRON_TRIGGERS" MODIFY ("TRIGGER_GROUP" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_CRON_TRIGGERS" MODIFY ("TRIGGER_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_CRON_TRIGGERS" MODIFY ("SCHED_NAME" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERIES_TEST

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_TEST" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_TEST" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_TEST" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_TEST" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_TEST" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_TEST" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_TEST" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_REPORT_INSTANCES_SS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORT_INSTANCES_SS" MODIFY ("TRIGGERED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_INSTANCES_SS" MODIFY ("PROCESSING_STATUS" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_INSTANCES_SS" MODIFY ("ORIGINAL_RUN_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_INSTANCES_SS" MODIFY ("STATUS" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_INSTANCES_SS" MODIFY ("REPORT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_INSTANCE_PROMPT_VALUES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_INSTANCE_PROMPT_VALUES" MODIFY ("RUN_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table HIST_RA_RA_REPORTS_B

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."HIST_RA_RA_REPORTS_B" MODIFY ("ACTIVE_IND" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."HIST_RA_RA_REPORTS_B" MODIFY ("REPORT_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."HIST_RA_RA_REPORTS_B" MODIFY ("APP_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table TRADE

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."TRADE" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------

--  Constraints for Table RA_REPORTS_B_T

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORTS_B_T" MODIFY ("ACTIVE_IND" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORTS_B_T" MODIFY ("REPORT_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORTS_B_T" MODIFY ("APP_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table TEST_PIVOT_NZ

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."TEST_PIVOT_NZ" ADD CONSTRAINT "PK_EMP" PRIMARY KEY ("EMPNO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA"  ENABLE;
--------------------------------------------------------

--  Constraints for Table RA_REPORT_OUTPUT_TEMPLATES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORT_OUTPUT_TEMPLATES" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_OUTPUT_TEMPLATES" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_OUTPUT_TEMPLATES" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_OUTPUT_TEMPLATES" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_OUTPUT_TEMPLATES" MODIFY ("REPORT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_APPS_DS_DOMAIN_BCK

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_APPS_DS_DOMAIN_BCK" MODIFY ("DOMAIN_CODE" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SUB_RPT_PARAM_NAME_MAP_OFS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP_OFS" MODIFY ("SUB_REPORT_SEQ" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP_OFS" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP_OFS" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP_OFS" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP_OFS" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP_OFS" MODIFY ("SUB_REPORT_PARAM_NAME_IN_QUERY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP_OFS" MODIFY ("SUB_REPORT_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP_OFS" MODIFY ("REPORT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_USER_DELEGATION_MASTER

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_USER_DELEGATION_MASTER" MODIFY ("DELEGATED_TO_SOEID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_DELEGATION_MASTER" MODIFY ("DELEGATED_BY_SOEID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_INSTANCE_QUERY_COLUMNS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_INSTANCE_QUERY_COLUMNS" MODIFY ("COLUMN_ORDER" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INSTANCE_QUERY_COLUMNS" MODIFY ("COLUMN_DATA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INSTANCE_QUERY_COLUMNS" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INSTANCE_QUERY_COLUMNS" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INSTANCE_QUERY_COLUMNS" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INSTANCE_QUERY_COLUMNS" MODIFY ("REQUIRED_IN_SELECT_CLAUSE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INSTANCE_QUERY_COLUMNS" MODIFY ("COLUMN_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INSTANCE_QUERY_COLUMNS" MODIFY ("COLUMN_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INSTANCE_QUERY_COLUMNS" MODIFY ("COLUMN_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INSTANCE_QUERY_COLUMNS" MODIFY ("QUERY_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INSTANCE_QUERY_COLUMNS" MODIFY ("RUN_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table SNOW_INCIDENT_HISTORY

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."SNOW_INCIDENT_HISTORY" MODIFY ("INCIDENT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table DMG_10

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."DMG_10" MODIFY ("COLUMN_DATA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10" MODIFY ("REQUIRED_IN_SELECT_CLAUSE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10" MODIFY ("COLUMN_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10" MODIFY ("COLUMN_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10" MODIFY ("COLUMN_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10" MODIFY ("COLUMN_ORDER" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10" MODIFY ("QUERY_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_INPUT_VALIDATION_BKP0520

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_INPUT_VALIDATION_BKP0520" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INPUT_VALIDATION_BKP0520" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INPUT_VALIDATION_BKP0520" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INPUT_VALIDATION_BKP0520" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INPUT_VALIDATION_BKP0520" MODIFY ("SCRIPT_LANGUAGE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INPUT_VALIDATION_BKP0520" MODIFY ("SCRIPT_SEQ" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INPUT_VALIDATION_BKP0520" MODIFY ("REPORT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_INQUIRY_TABLE_DETAILS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_INQUIRY_TABLE_DETAILS" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INQUIRY_TABLE_DETAILS" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INQUIRY_TABLE_DETAILS" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INQUIRY_TABLE_DETAILS" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INQUIRY_TABLE_DETAILS" MODIFY ("C_SELECTION_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INQUIRY_TABLE_DETAILS" MODIFY ("COLUMN_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INQUIRY_TABLE_DETAILS" MODIFY ("TABLE_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INQUIRY_TABLE_DETAILS" MODIFY ("QUERY_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INQUIRY_TABLE_DETAILS" MODIFY ("REPORT_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INQUIRY_TABLE_DETAILS" MODIFY ("APP_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERIES_0418131630

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_0418131630" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_0418131630" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_0418131630" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_0418131630" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_0418131630" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_0418131630" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_0418131630" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_OUTPUT_TYPE

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_OUTPUT_TYPE" MODIFY ("OUTPUT_TYPE_DESC" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_OUTPUT_TYPE" MODIFY ("OUTPUT_TYPE_CODE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_OUTPUT_TYPE" MODIFY ("OUTPUT_FORMAT" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_OUTPUT_TYPE" MODIFY ("REPORT_TOOL" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERIES_RAJEEV

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_RAJEEV" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_RAJEEV" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_RAJEEV" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_RAJEEV" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_RAJEEV" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_RAJEEV" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_RAJEEV" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_HIST_RPT_INST_QRY_PROGRESS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_HIST_RPT_INST_QRY_PROGRESS" MODIFY ("QUERY_ACTION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_RPT_INST_QRY_PROGRESS" MODIFY ("QUERY_ACTION_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_HIST_RPT_INST_QRY_PROGRESS" MODIFY ("RUN_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERIES_15016

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_15016" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_15016" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_15016" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_15016" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_15016" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_15016" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_15016" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_APPS_OFS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_APPS_OFS" ADD CONSTRAINT "RA_APPS_PK_OFS" PRIMARY KEY ("APP_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_APPS_OFS" MODIFY ("ACTIVE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_APPS_OFS" MODIFY ("APP_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_APPS_OFS" MODIFY ("APP_SHORT_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_APPS_OFS" MODIFY ("APP_NAME" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERY_GENERATOR

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_GENERATOR" ADD CONSTRAINT "UX_RA_SEEDED_QUERY_GEN_01" UNIQUE ("QUERY_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "RPTAPP_DATA"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_GENERATOR" MODIFY ("QUERY_ENGINE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_GENERATOR" MODIFY ("QUERY_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_TEMPLATE_LABELS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_TEMPLATE_LABELS" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_LABELS" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_LABELS" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_LABELS" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_LABELS" MODIFY ("OWNER_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_TEMPLATE_LABELS" MODIFY ("TEMPLATE_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_INPUT_VALIDATION

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_INPUT_VALIDATION" ADD CONSTRAINT "RA_INPUT_VALIDATION_PK" PRIMARY KEY ("REPORT_ID", "SCRIPT_SEQ")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_INPUT_VALIDATION" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INPUT_VALIDATION" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INPUT_VALIDATION" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INPUT_VALIDATION" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INPUT_VALIDATION" MODIFY ("SCRIPT_LANGUAGE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INPUT_VALIDATION" MODIFY ("SCRIPT_SEQ" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INPUT_VALIDATION" MODIFY ("REPORT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_USER_FAV_CAT_VALUE

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_USER_FAV_CAT_VALUE" MODIFY ("LABEL" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_FAV_CAT_VALUE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_USER_FAV_CAT_VALUE" MODIFY ("CAT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_REPORTS_B_SOJI

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORTS_B_SOJI" MODIFY ("ACTIVE_IND" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORTS_B_SOJI" MODIFY ("REPORT_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORTS_B_SOJI" MODIFY ("APP_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERIES_GC41405

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_GC41405" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_GC41405" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_GC41405" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_GC41405" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_GC41405" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_GC41405" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_GC41405" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERIES_0324

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_0324" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_0324" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_0324" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_0324" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_0324" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_0324" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_0324" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table BCK_34

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."BCK_34" MODIFY ("DOMAIN_CODE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."BCK_34" MODIFY ("DS_JNDI_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."BCK_34" MODIFY ("DS_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table BACK_ANU

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."BACK_ANU" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."BACK_ANU" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."BACK_ANU" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."BACK_ANU" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."BACK_ANU" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."BACK_ANU" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."BACK_ANU" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_APPS_T

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_APPS_T" MODIFY ("ACTIVE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_APPS_T" MODIFY ("APP_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_APPS_T" MODIFY ("APP_SHORT_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_APPS_T" MODIFY ("APP_NAME" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_REPORTS_B_TEST

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORTS_B_TEST" MODIFY ("ACTIVE_IND" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORTS_B_TEST" MODIFY ("REPORT_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORTS_B_TEST" MODIFY ("APP_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table VALID_VBK

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."VALID_VBK" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."VALID_VBK" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."VALID_VBK" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."VALID_VBK" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."VALID_VBK" MODIFY ("SCRIPT_LANGUAGE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."VALID_VBK" MODIFY ("SCRIPT_SEQ" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."VALID_VBK" MODIFY ("REPORT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_HIST_INSTANCE_PROMPT_VALUES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_HIST_INSTANCE_PROMPT_VALUES" MODIFY ("RUN_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table AUD_RA_SUB_RPT_PARAM_MAP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."AUD_RA_SUB_RPT_PARAM_MAP" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_SUB_RPT_PARAM_MAP" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_SUB_RPT_PARAM_MAP" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_SUB_RPT_PARAM_MAP" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_SUB_RPT_PARAM_MAP" MODIFY ("SUB_REPORT_PARAM_NAME_IN_QUERY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_SUB_RPT_PARAM_MAP" MODIFY ("SUB_REPORT_SEQ" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_SUB_RPT_PARAM_MAP" MODIFY ("SUB_REPORT_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_SUB_RPT_PARAM_MAP" MODIFY ("REPORT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_USER_EMAIL_PREFS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_USER_EMAIL_PREFS" MODIFY ("SOEID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_INSTANCE_PROMPT_VAL_CM22692

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_INSTANCE_PROMPT_VAL_CM22692" MODIFY ("RUN_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_REPORT_FILT_CRTA

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORT_FILT_CRTA" ADD CONSTRAINT "PK_RA_REPORT_FILT_CRTA_001" PRIMARY KEY ("RPT_FILT_CRTA_ID", "REPORT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_REPORT_FILT_CRTA" MODIFY ("REPORT_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_FILT_CRTA" MODIFY ("ATTR_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_FILT_CRTA" MODIFY ("RPT_FILT_CRTA_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_META_ENTITY_ALS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_META_ENTITY_ALS" ADD CONSTRAINT "PK_RA_META_ENTITY_ALS_001" PRIMARY KEY ("ENT_ALS_NM", "DM_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_META_ENTITY_ALS" MODIFY ("ENT_PHY_NM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_META_ENTITY_ALS" MODIFY ("ENT_ALS_NM" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_APP_EMAIL_PROPERTIES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_APP_EMAIL_PROPERTIES" MODIFY ("APP_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table AAA_TEST_RA_REPORTS_B

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."AAA_TEST_RA_REPORTS_B" MODIFY ("ACTIVE_IND" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AAA_TEST_RA_REPORTS_B" MODIFY ("REPORT_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AAA_TEST_RA_REPORTS_B" MODIFY ("APP_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SUB_RPT_PARAM_NAME_MAP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP" MODIFY ("SUB_REPORT_PARAM_NAME_IN_QUERY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP" MODIFY ("SUB_REPORT_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP" MODIFY ("REPORT_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SUB_RPT_PARAM_NAME_MAP" MODIFY ("SUB_REPORT_SEQ" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table BACKUP_14083

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."BACKUP_14083" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."BACKUP_14083" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."BACKUP_14083" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."BACKUP_14083" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."BACKUP_14083" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."BACKUP_14083" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."BACKUP_14083" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_BI_SERVERS_BKP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_BI_SERVERS_BKP" MODIFY ("BI_SERVER_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_BI_SERVERS_BKP" MODIFY ("BI_SERVER_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERY_COLUMNS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS" MODIFY ("REQUIRED_IN_SELECT_CLAUSE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS" MODIFY ("COLUMN_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS" MODIFY ("COLUMN_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS" MODIFY ("COLUMN_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS" MODIFY ("QUERY_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS" MODIFY ("COLUMN_ORDER" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_COLUMNS" MODIFY ("COLUMN_DATA_TYPE" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_COLUMN_COMMENTS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_COLUMN_COMMENTS" MODIFY ("COLUMN_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_COLUMN_COMMENTS" MODIFY ("TABLE_NAME" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_INPUT_VAL_UP424

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_INPUT_VAL_UP424" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INPUT_VAL_UP424" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INPUT_VAL_UP424" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INPUT_VAL_UP424" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INPUT_VAL_UP424" MODIFY ("SCRIPT_LANGUAGE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INPUT_VAL_UP424" MODIFY ("SCRIPT_SEQ" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_INPUT_VAL_UP424" MODIFY ("REPORT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table QRTZ_SIMPROP_TRIGGERS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."QRTZ_SIMPROP_TRIGGERS" ADD CONSTRAINT "QRTZ_SIMPROP_TRIG_PK" PRIMARY KEY ("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."QRTZ_SIMPROP_TRIGGERS" MODIFY ("TRIGGER_GROUP" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_SIMPROP_TRIGGERS" MODIFY ("TRIGGER_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_SIMPROP_TRIGGERS" MODIFY ("SCHED_NAME" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_EVENT_SUBSCRIPTIONS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_EVENT_SUBSCRIPTIONS" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EVENT_SUBSCRIPTIONS" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EVENT_SUBSCRIPTIONS" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EVENT_SUBSCRIPTIONS" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EVENT_SUBSCRIPTIONS" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EVENT_SUBSCRIPTIONS" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_JR_UP_BKP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_JR_UP_BKP" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_JR_UP_BKP" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_JR_UP_BKP" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_JR_UP_BKP" MODIFY ("CREATED_BY" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_FREEMARKER_TEMPLATES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_FREEMARKER_TEMPLATES" ADD CONSTRAINT "RA_FREEMARKER_TEMPLATES_PK" PRIMARY KEY ("FM_TEMPLATE_ID", "FM_TEMPLATE_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_FREEMARKER_TEMPLATES" MODIFY ("FM_TEMPLATE_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_FREEMARKER_TEMPLATES" MODIFY ("FM_TEMPLATE_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table BCK_SEEDED_QUERIES_AP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."BCK_SEEDED_QUERIES_AP" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."BCK_SEEDED_QUERIES_AP" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."BCK_SEEDED_QUERIES_AP" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."BCK_SEEDED_QUERIES_AP" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."BCK_SEEDED_QUERIES_AP" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."BCK_SEEDED_QUERIES_AP" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."BCK_SEEDED_QUERIES_AP" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_EXT_REPORT_INSTANCE_PROMPTS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_EXT_REPORT_INSTANCE_PROMPTS" MODIFY ("EXT_RUN_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_LABELS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_LABELS" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_LABELS" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_LABELS" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_LABELS" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_LABELS" MODIFY ("OWNER_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_LABELS" MODIFY ("PARENT_PATH" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_LABELS" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_LABELS" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_DOMAIN_DATA_SOURCES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_DOMAIN_DATA_SOURCES" MODIFY ("DOMAIN_CODE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_DOMAIN_DATA_SOURCES" MODIFY ("DS_JNDI_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_DOMAIN_DATA_SOURCES" MODIFY ("DS_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_META_ATTR_GRP_MBR

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_META_ATTR_GRP_MBR" ADD CONSTRAINT "PK_RA_META_ATTR_GRP_MBR_001" PRIMARY KEY ("ATTR_GRP_MBR_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_META_ATTR_GRP_MBR" MODIFY ("ACTV_IND" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_META_ATTR_GRP_MBR" MODIFY ("ATTR_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_META_ATTR_GRP_MBR" MODIFY ("GRP_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_META_ATTR_GRP_MBR" MODIFY ("ATTR_GRP_MBR_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERIES_0403

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_0403" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_0403" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_0403" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_0403" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_0403" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_0403" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_0403" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table BCK_DATA_SOURCES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."BCK_DATA_SOURCES" MODIFY ("DOMAIN_CODE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."BCK_DATA_SOURCES" MODIFY ("DS_JNDI_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."BCK_DATA_SOURCES" MODIFY ("DS_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERIES_6072

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_6072" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_6072" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_6072" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_6072" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_6072" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_6072" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_6072" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table QRTZ_TRIGGERS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."QRTZ_TRIGGERS" ADD CONSTRAINT "QRTZ_TRIGGERS_PK" PRIMARY KEY ("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."QRTZ_TRIGGERS" MODIFY ("START_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_TRIGGERS" MODIFY ("TRIGGER_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_TRIGGERS" MODIFY ("TRIGGER_STATE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_TRIGGERS" MODIFY ("JOB_GROUP" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_TRIGGERS" MODIFY ("JOB_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_TRIGGERS" MODIFY ("TRIGGER_GROUP" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_TRIGGERS" MODIFY ("TRIGGER_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_TRIGGERS" MODIFY ("SCHED_NAME" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_REPORT_INSTANCES_SSS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORT_INSTANCES_SSS" MODIFY ("TRIGGERED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_INSTANCES_SSS" MODIFY ("PROCESSING_STATUS" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_INSTANCES_SSS" MODIFY ("ORIGINAL_RUN_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_INSTANCES_SSS" MODIFY ("STATUS" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORT_INSTANCES_SSS" MODIFY ("REPORT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_EXTERNAL_MESSAGES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_EXTERNAL_MESSAGES" MODIFY ("MESSAGE_TEXT" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EXTERNAL_MESSAGES" MODIFY ("MESSAGE_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_META_ATTR

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_META_ATTR" ADD CONSTRAINT "PK_RA_META_ATTR_001" PRIMARY KEY ("ATTR_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_META_ATTR" MODIFY ("ATTR_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_EXCEPTIONS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_EXCEPTIONS" MODIFY ("ERROR_CODE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_EXCEPTIONS" MODIFY ("ERROR_TYPE" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERIES_RAVI

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_RAVI" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_RAVI" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_RAVI" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_RAVI" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_RAVI" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_RAVI" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERIES_RAVI" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table DMG_10_AFTER

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."DMG_10_AFTER" MODIFY ("COLUMN_DATA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10_AFTER" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10_AFTER" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10_AFTER" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10_AFTER" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10_AFTER" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10_AFTER" MODIFY ("REQUIRED_IN_SELECT_CLAUSE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10_AFTER" MODIFY ("COLUMN_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10_AFTER" MODIFY ("COLUMN_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10_AFTER" MODIFY ("COLUMN_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10_AFTER" MODIFY ("COLUMN_ORDER" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."DMG_10_AFTER" MODIFY ("QUERY_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table TMP_RA_DATA_SOURCES

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."TMP_RA_DATA_SOURCES" MODIFY ("DS_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_META_JOIN_CRTA

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_META_JOIN_CRTA" ADD CONSTRAINT "PK_RA_META_JOIN_CRTA_001" PRIMARY KEY ("ENT_ALS_NM", "PROD_NM")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_META_JOIN_CRTA" MODIFY ("PROD_NM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_META_JOIN_CRTA" MODIFY ("ENT_ALS_NM" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table QRTZ_PAUSED_TRIGGER_GRPS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."QRTZ_PAUSED_TRIGGER_GRPS" ADD CONSTRAINT "QRTZ_PAUSED_TRIG_GRPS_PK" PRIMARY KEY ("SCHED_NAME", "TRIGGER_GROUP")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."QRTZ_PAUSED_TRIGGER_GRPS" MODIFY ("TRIGGER_GROUP" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."QRTZ_PAUSED_TRIGGER_GRPS" MODIFY ("SCHED_NAME" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_SEEDED_QUERY_ATTR

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_ATTR" ADD CONSTRAINT "PK_RA_SEEDED_QUERY_ATTR_001" PRIMARY KEY ("QUERY_ATTR_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "RPTAPP_DATA"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_ATTR" MODIFY ("QUERY_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_ATTR" MODIFY ("ATTR_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_ATTR" MODIFY ("QUERY_ATTR_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_DATA_SOURCES_TEST

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_DATA_SOURCES_TEST" MODIFY ("DS_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table TST123

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."TST123" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."TST123" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."TST123" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."TST123" MODIFY ("EFFECTIVE_TO" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."TST123" MODIFY ("EFFECTIVE_FROM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."TST123" MODIFY ("QUERY_DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."TST123" MODIFY ("QUERY_TEXT" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table AUD_RA_INPUT_VALIDATION

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."AUD_RA_INPUT_VALIDATION" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_INPUT_VALIDATION" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_INPUT_VALIDATION" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_INPUT_VALIDATION" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_INPUT_VALIDATION" MODIFY ("SCRIPT_SEQ" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."AUD_RA_INPUT_VALIDATION" MODIFY ("REPORT_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table ACTION_2

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."ACTION_2" MODIFY ("STATUS" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."ACTION_2" MODIFY ("APP" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."ACTION_2" MODIFY ("APP_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."ACTION_2" MODIFY ("ORIGINAL_RUN_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_JR_UP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_JR_UP" MODIFY ("LAST_UPDATE_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_JR_UP" MODIFY ("LAST_UPDATED_BY" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_JR_UP" MODIFY ("CREATION_TIME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_JR_UP" MODIFY ("CREATED_BY" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_GLOBAL_ENV_PROP_SIT_SVN

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_GLOBAL_ENV_PROP_SIT_SVN" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_GLOBAL_ENV_PROP_SIT_SVN" MODIFY ("ENV_PROP_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_META_PROD_TYP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_META_PROD_TYP" ADD CONSTRAINT "PK_RA_META_PROD_TYP_001" PRIMARY KEY ("PROD_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "RPTAPP"."RA_META_PROD_TYP" MODIFY ("ACTV_IND" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_META_PROD_TYP" MODIFY ("DM_ID" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_META_PROD_TYP" MODIFY ("PROD_NM" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_META_PROD_TYP" MODIFY ("PROD_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Constraints for Table RA_REPORTS_B_CN

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORTS_B_CN" MODIFY ("ACTIVE_IND" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORTS_B_CN" MODIFY ("REPORT_TYPE" NOT NULL ENABLE);
  ALTER TABLE "RPTAPP"."RA_REPORTS_B_CN" MODIFY ("APP_ID" NOT NULL ENABLE);
--------------------------------------------------------

--  Ref Constraints for Table QRTZ_BLOB_TRIGGERS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."QRTZ_BLOB_TRIGGERS" ADD CONSTRAINT "QRTZ_BLOB_TRIG_TO_TRIG_FK" FOREIGN KEY ("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP")
	  REFERENCES "RPTAPP"."QRTZ_TRIGGERS" ("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP") ENABLE;
--------------------------------------------------------

--  Ref Constraints for Table QRTZ_CRON_TRIGGERS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."QRTZ_CRON_TRIGGERS" ADD CONSTRAINT "QRTZ_CRON_TRIG_TO_TRIG_FK" FOREIGN KEY ("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP")
	  REFERENCES "RPTAPP"."QRTZ_TRIGGERS" ("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP") ENABLE;
--------------------------------------------------------

--  Ref Constraints for Table QRTZ_SIMPLE_TRIGGERS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."QRTZ_SIMPLE_TRIGGERS" ADD CONSTRAINT "QRTZ_SIMPLE_TRIG_TO_TRIG_FK" FOREIGN KEY ("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP")
	  REFERENCES "RPTAPP"."QRTZ_TRIGGERS" ("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP") ENABLE;
--------------------------------------------------------

--  Ref Constraints for Table QRTZ_SIMPROP_TRIGGERS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."QRTZ_SIMPROP_TRIGGERS" ADD CONSTRAINT "QRTZ_SIMPROP_TRIG_TO_TRIG_FK" FOREIGN KEY ("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP")
	  REFERENCES "RPTAPP"."QRTZ_TRIGGERS" ("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP") ENABLE;
--------------------------------------------------------

--  Ref Constraints for Table QRTZ_TRIGGERS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."QRTZ_TRIGGERS" ADD CONSTRAINT "QRTZ_TRIGGER_TO_JOBS_FK" FOREIGN KEY ("SCHED_NAME", "JOB_NAME", "JOB_GROUP")
	  REFERENCES "RPTAPP"."QRTZ_JOB_DETAILS" ("SCHED_NAME", "JOB_NAME", "JOB_GROUP") ENABLE;
--------------------------------------------------------

--  Ref Constraints for Table RA_APP_LDAP_GROUPS

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_APP_LDAP_GROUPS" ADD CONSTRAINT "RA_LDAP_ROLES_RA_APPS_FK1" FOREIGN KEY ("APP_ID")
	  REFERENCES "RPTAPP"."RA_APPS" ("APP_ID") ENABLE;
--------------------------------------------------------

--  Ref Constraints for Table RA_META_ATTR_GRP_MBR

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_META_ATTR_GRP_MBR" ADD CONSTRAINT "FK_RA_META_ATTR_GRP_MBR_TO_ATR" FOREIGN KEY ("ATTR_ID")
	  REFERENCES "RPTAPP"."RA_META_ATTR" ("ATTR_ID") ON DELETE SET NULL ENABLE;
  ALTER TABLE "RPTAPP"."RA_META_ATTR_GRP_MBR" ADD CONSTRAINT "FK_RA_META_ATTR_GRP_MBR_TO_GRP" FOREIGN KEY ("GRP_ID")
	  REFERENCES "RPTAPP"."RA_META_ATTR_GRP" ("ATTR_GRP_ID") ENABLE;
--------------------------------------------------------

--  Ref Constraints for Table RA_META_PROD_ATTR

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_META_PROD_ATTR" ADD CONSTRAINT "FK_RA_META_PROD_ATTR_001" FOREIGN KEY ("ATTR_ID")
	  REFERENCES "RPTAPP"."RA_META_ATTR" ("ATTR_ID") ENABLE;
  ALTER TABLE "RPTAPP"."RA_META_PROD_ATTR" ADD CONSTRAINT "FK_RA_META_PROD_ATTR_002" FOREIGN KEY ("PROD_ID")
	  REFERENCES "RPTAPP"."RA_META_PROD_TYP" ("PROD_ID") ENABLE;
--------------------------------------------------------

--  Ref Constraints for Table RA_META_PROD_TYP

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_META_PROD_TYP" ADD CONSTRAINT "FK_RA_META_PROD_TYP_001" FOREIGN KEY ("DM_ID")
	  REFERENCES "RPTAPP"."RA_META_DATA_MODEL" ("DM_ID") ENABLE;
--------------------------------------------------------

--  Ref Constraints for Table RA_OUTPUT_FORMAT

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_OUTPUT_FORMAT" ADD CONSTRAINT "RA_M_RPT_OUTPUT_RA_REPORT_FK1" FOREIGN KEY ("REPORT_ID")
	  REFERENCES "RPTAPP"."RA_REPORTS_B" ("REPORT_ID") ENABLE;
--------------------------------------------------------

--  Ref Constraints for Table RA_REPORTS_B

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORTS_B" ADD CONSTRAINT "RA_REPORTS_RA_APPS_FK1" FOREIGN KEY ("APP_ID")
	  REFERENCES "RPTAPP"."RA_APPS" ("APP_ID") DISABLE;
--------------------------------------------------------

--  Ref Constraints for Table RA_REPORTS_TL

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_REPORTS_TL" ADD CONSTRAINT "RA_REPORTS_TL_RA_REPORTS__FK1" FOREIGN KEY ("REPORT_ID")
	  REFERENCES "RPTAPP"."RA_REPORTS_B" ("REPORT_ID") ENABLE;
--------------------------------------------------------

--  Ref Constraints for Table RA_SEEDED_QUERY_ATTR_EXPR

--------------------------------------------------------


  ALTER TABLE "RPTAPP"."RA_SEEDED_QUERY_ATTR_EXPR" ADD CONSTRAINT "FK_RA_SD_QUERY_ATTR_EXPR_001" FOREIGN KEY ("QUERY_ATTR_ID")
	  REFERENCES "RPTAPP"."RA_SEEDED_QUERY_ATTR" ("QUERY_ATTR_ID") ENABLE;
--------------------------------------------------------

--  DDL for Trigger AF_RA_USER_SCHEDULES

--------------------------------------------------------


  CREATE OR REPLACE TRIGGER "RPTAPP"."AF_RA_USER_SCHEDULES" AFTER
  INSERT ON RA_USER_SCHEDULES FOR EACH ROW DECLARE l_job_id pls_integer;
BEGIN
  DBMS_JOB.SUBMIT ( job => l_job_id, what => 'ra_user_schedules_pkg.invoke_create_job (p_user_schedule_id =>'||:new.user_schedule_id||');', next_date => SYSDATE, interval => NULL );
END;
/
ALTER TRIGGER "RPTAPP"."AF_RA_USER_SCHEDULES" ENABLE;
--------------------------------------------------------

--  DDL for Trigger BI_RA_SEED_QUERIES

--------------------------------------------------------


  CREATE OR REPLACE TRIGGER "RPTAPP"."BI_RA_SEED_QUERIES" 
   before insert on RA_SEEDED_QUERIES 
   for each row 
begin  
   if inserting then 
      IF :NEW.QUERY_ID IS NULL THEN 
         select RF_SEED_QUERIES_S.nextval into :NEW.QUERY_ID from dual; 
      end if; 
   end if; 
end;
/
ALTER TRIGGER "RPTAPP"."BI_RA_SEED_QUERIES" ENABLE;
--------------------------------------------------------

--  DDL for Trigger DDL_TRIGGER

--------------------------------------------------------


  CREATE OR REPLACE TRIGGER "RPTAPP"."DDL_TRIGGER" 
    before create or alter or drop or truncate on SCHEMA
    declare
        l_sysevent varchar2(25);
    begin
        l_sysevent :=  ora_sysevent ;
    
        if ( l_sysevent in ('DROP','CREATE','TRUNCATE') )
        then
           insert into schema_log
           (OPERATION,name,type,OWNER,executer )
           select ora_sysevent, ora_dict_obj_name, 
                  ora_dict_obj_type, ora_dict_obj_owner,
                  sys_context('USERENV','OS_USER') 
             from dual;
       elsif ( l_sysevent = 'ALTER' )
       then
           insert into schema_log
           (OPERATION,name,type,OWNER,executer,EXTRA)
           select ora_sysevent, ora_dict_obj_name, 
                  ora_dict_obj_type, ora_dict_obj_owner, 
                  sys_context('USERENV','OS_USER'),sql_text
             from v$open_cursor
            where upper(sql_text) like 'ALTER%' ;
       end if;
end;
/
ALTER TRIGGER "RPTAPP"."DDL_TRIGGER" DISABLE;
--------------------------------------------------------

--  DDL for Trigger RA_INSTANCE_PROMPT_VALUES_TRG

--------------------------------------------------------


  CREATE OR REPLACE TRIGGER "RPTAPP"."RA_INSTANCE_PROMPT_VALUES_TRG" BEFORE
  INSERT OR
  UPDATE ON RA_INSTANCE_PROMPT_VALues REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW BEGIN BEGIN
  INSERT
  INTO RA_INSTANCE_PROMPT_VAL_cm22692
    (
      RUN_ID,
      INSTPRM_PROMPT_ID,
      INSTPRM_PROMPT_VALUE,
      CREATED_BY,
      CREATION_DTM,
      LAST_UPDATED_BY,
      LAST_UPDATE_DTM,
      IS_EXPRESSION,
      INSTPRM_EXPRESSION,
      EXPRESSION_TYPE,
      INSTPRM_PROMPT_VALUE_ORDER,
      INSTPRM_PROMPT_VAL_TRANSFORMED,
      SNAP_SHOT_DATE
    )
    VALUES
    (
      :NEW.RUN_ID,
      :NEW.INSTPRM_PROMPT_ID,
      :NEW.INSTPRM_PROMPT_VALUE,
      :NEW.CREATED_BY,
      :NEW.CREATION_DTM,
      :NEW.LAST_UPDATED_BY,
      :NEW.LAST_UPDATE_DTM,
      :NEW.IS_EXPRESSION,
      :NEW.INSTPRM_EXPRESSION,
      :NEW.EXPRESSION_TYPE,
      :NEW.INSTPRM_PROMPT_VALUE_ORDER,
      :NEW.INSTPRM_PROMPT_VAL_TRANSFORMED,
      SYSDATE
    );
EXCEPTION
WHEN OTHERS THEN
  NULL;
END;
END;
/
ALTER TRIGGER "RPTAPP"."RA_INSTANCE_PROMPT_VALUES_TRG" ENABLE;
--------------------------------------------------------

--  DDL for Trigger RA_SEEDED_QUERIES_TRG

--------------------------------------------------------


  CREATE OR REPLACE TRIGGER "RPTAPP"."RA_SEEDED_QUERIES_TRG" BEFORE
  INSERT OR
  UPDATE ON RA_seeded_queries REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW BEGIN BEGIN
  INSERT
  INTO RA_seeded_queries_hist_cm22692
    (
      QUERY_ID,
      QUERY_TEXT,
      QUERY_DISPLAY_NAME,
      EFFECTIVE_FROM,
      EFFECTIVE_TO,
      CREATED_BY,
      CREATION_TIME,
      LAST_UPDATED_BY,
      LAST_UPDATE_TIME,
      QUERY_NAME,
      DS_ID,
      MAX_RECORD_COUNT,
      DYNAMIC_QUERY_TEMPLATE_ID,
      QUERY_EXEC_TIME_OUT_SECONDS,
      QUERY_EXTRACT_TIME_OUT_SECONDS,
      HTML_PAGE_MAX_RECORDS,
      SNAP_SHOT_TIME
    )
    VALUES
    (
      :NEW.QUERY_ID,
      :NEW.QUERY_TEXT,
      :NEW.QUERY_DISPLAY_NAME,
      :NEW.EFFECTIVE_FROM,
      :NEW.EFFECTIVE_TO,
      :NEW.CREATED_BY,
      :NEW.CREATION_TIME,
      :NEW.LAST_UPDATED_BY,
      :NEW.LAST_UPDATE_TIME,
      :NEW.QUERY_NAME,
      :NEW.DS_ID,
      :NEW.MAX_RECORD_COUNT,
      :NEW.DYNAMIC_QUERY_TEMPLATE_ID,
      :NEW.QUERY_EXEC_TIME_OUT_SECONDS,
      :NEW.QUERY_EXTRACT_TIME_OUT_SECONDS,
      :NEW.HTML_PAGE_MAX_RECORDS,
      SYStimestamp
    );
EXCEPTION
WHEN OTHERS THEN
  NULL;
END;
END;
/
ALTER TRIGGER "RPTAPP"."RA_SEEDED_QUERIES_TRG" ENABLE;
--------------------------------------------------------

--  DDL for Trigger TRADEAQTRIGGER

--------------------------------------------------------


  CREATE OR REPLACE TRIGGER "RPTAPP"."TRADEAQTRIGGER" AFTER INSERT OR UPDATE ON Trade 
FOR EACH row DECLARE xml_complete VARCHAR2(1000); 
BEGIN 
    xml_complete := '<?xml version="1.0" encoding="UTF-8" ?>' || 
      '<TradeElement xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ' || 
      'xsi:schemaLocation="http://www.oracle.com/coherenceaq src/aq-object.xsd" ' || 
      'xmlns="http://www.oracle.com/coherenceaq">' || 
    '<Id>' || :new.ID || '</Id>' || 
    '<Symbol>' || :new.SYMBOL || '</Symbol>' || 
    '<Quantity>' || :new.QUANTITY || '</Quantity>' || 
    '<Amount>' || :new.AMOUNT || '</Amount>' || 
    '<Created>' || :new.CREATED || '</Created>' || 
    '</TradeElement>';    
    testmessage(xml_complete); 
END; 
/
ALTER TRIGGER "RPTAPP"."TRADEAQTRIGGER" ENABLE;
--------------------------------------------------------

--  DDL for Trigger TRG_AUD_RA_APPS

--------------------------------------------------------


  CREATE OR REPLACE TRIGGER "RPTAPP"."TRG_AUD_RA_APPS" 
AFTER UPDATE OR DELETE ON RA_APPS
FOR EACH ROW
DECLARE
	pragma autonomous_transaction;
	l_action AUD_RA_APPS.ACTION%TYPE;
	l_aud_ra_apps_id AUD_RA_APPS.AUD_RA_APPS_ID%TYPE;
  
BEGIN
	
  select nvl(max(aud_ra_apps_id)+1,1) 
  INTO l_aud_ra_apps_id
  FROM AUD_RA_APPS;
  
  IF UPDATING THEN
		l_action := 'UPDATE';
	ELSE
		l_action := 'DELETE';
	END IF;
	INSERT INTO AUD_RA_APPS
            (
              AUD_RA_APPS_ID,
              APP_NAME,
              APP_SHORT_NAME,
              APP_ID,
              CREATED_BY,
              CREATION_DTM,
              LAST_UPDATED_BY,
              LAST_UPDATE_DTM,
              ACTIVE,
              MAX_RECORD_COUNT,
              ACTION,
              MODIFIED_BY
            )
            VALUES
            ( 
              l_aud_ra_apps_id,
              :OLD.APP_NAME,
              :OLD.APP_SHORT_NAME,
              :OLD.APP_ID,
              :OLD.CREATED_BY,
              :OLD.CREATION_DTM,
              :OLD.LAST_UPDATED_BY,
              :OLD.LAST_UPDATE_DTM,
              :OLD.ACTIVE,
              :OLD.MAX_RECORD_COUNT,
              l_action,
              SYS_CONTEXT('USERENV','OS_USER') 
            );
	COMMIT;
END;
/
ALTER TRIGGER "RPTAPP"."TRG_AUD_RA_APPS" ENABLE;
--------------------------------------------------------

--  DDL for Trigger TRG_AUD_RA_IMAGES

--------------------------------------------------------


  CREATE OR REPLACE TRIGGER "RPTAPP"."TRG_AUD_RA_IMAGES" 
AFTER UPDATE OR DELETE ON RA_IMAGES
FOR EACH ROW
DECLARE
	pragma autonomous_transaction;
	l_action AUD_RA_IMAGES.ACTION%TYPE;
	l_AUD_RA_IMAGES_ID AUD_RA_IMAGES.AUD_RA_IMAGES_ID%TYPE;
  
BEGIN
	
  select nvl(max(l_AUD_RA_IMAGES_ID)+1,1) 
  INTO l_AUD_RA_IMAGES_ID
  FROM AUD_RA_IMAGES;
  
  IF UPDATING THEN
		l_action := 'UPDATE';
	ELSE
		l_action := 'DELETE';
	END IF;
	INSERT INTO AUD_RA_IMAGES
            (
              AUD_RA_IMAGES_ID,
              IMAGE_NAME,
              IMAGE_URL,
              CREATED_BY,
              CREATION_TIME,
              LAST_UPDATED_BY,
              LAST_UPDATE_TIME,              
              ACTION,
              MODIFIED_BY
            )
            VALUES
            ( 
              l_AUD_RA_IMAGES_ID,
              :OLD.IMAGE_NAME,
              :OLD.IMAGE_URL,
              :OLD.CREATED_BY,
              :OLD.CREATION_TIME,
              :OLD.LAST_UPDATED_BY,
              :OLD.LAST_UPDATE_TIME,              
              l_ACTION,
              SYS_CONTEXT('USERENV','OS_USER') 
            );
	COMMIT;
END;
/
ALTER TRIGGER "RPTAPP"."TRG_AUD_RA_IMAGES" ENABLE;
--------------------------------------------------------

--  DDL for Trigger TRG_AUD_RA_INPUT_VALIDATION

--------------------------------------------------------


  CREATE OR REPLACE TRIGGER "RPTAPP"."TRG_AUD_RA_INPUT_VALIDATION" 
AFTER UPDATE OR DELETE ON RA_INPUT_VALIDATION
FOR EACH ROW
DECLARE
	pragma autonomous_transaction;
	l_action AUD_RA_INPUT_VALIDATION.ACTION%TYPE;
	l_AUD_RA_INPUT_VALIDATION_ID AUD_RA_INPUT_VALIDATION.AUD_RA_INPUT_VALIDATION_ID%TYPE;
  
BEGIN
	
  select nvl(max(l_AUD_RA_INPUT_VALIDATION_ID)+1,1) 
  INTO l_AUD_RA_INPUT_VALIDATION_ID
  FROM AUD_RA_INPUT_VALIDATION;
  
  IF UPDATING THEN
		l_action := 'UPDATE';
	ELSE
		l_action := 'DELETE';
	END IF;
	INSERT INTO AUD_RA_INPUT_VALIDATION
            (
              AUD_RA_INPUT_VALIDATION_ID,
			  REPORT_ID,
			  SCRIPT_SEQ,
			  SCRIPT_TEXT,
			  SCRIPT_LANGUAGE,
			  IS_ACTIVE,
			  CREATED_BY,
              CREATION_TIME,
              LAST_UPDATED_BY,
              LAST_UPDATE_TIME,              
              ACTION,
              MODIFIED_BY
            )
            VALUES
            ( 
              l_AUD_RA_INPUT_VALIDATION_ID,
			  :OLD.REPORT_ID,
			  :OLD.SCRIPT_SEQ,
			  :OLD.SCRIPT_TEXT,
			  :OLD.SCRIPT_LANGUAGE,
			  :OLD.IS_ACTIVE,
              :OLD.CREATED_BY,
              :OLD.CREATION_TIME,
              :OLD.LAST_UPDATED_BY,
              :OLD.LAST_UPDATE_TIME,              
              l_ACTION,
              SYS_CONTEXT('USERENV','OS_USER') 
            );
	COMMIT;
END;
/
ALTER TRIGGER "RPTAPP"."TRG_AUD_RA_INPUT_VALIDATION" ENABLE;
--------------------------------------------------------

--  DDL for Trigger TRG_AUD_RA_JR_TEMPLATES

--------------------------------------------------------


  CREATE OR REPLACE TRIGGER "RPTAPP"."TRG_AUD_RA_JR_TEMPLATES" 
AFTER UPDATE OR DELETE ON RA_JR_TEMPLATES
FOR EACH ROW
DECLARE
	pragma autonomous_transaction;
	l_action AUD_RA_JR_TEMPLATES.ACTION%TYPE;
	l_AUD_RA_JR_TEMPLATES_ID AUD_RA_JR_TEMPLATES.AUD_RA_JR_TEMPLATES_ID%TYPE;
  
BEGIN
	
  select nvl(max(l_AUD_RA_JR_TEMPLATES_ID)+1,1) 
  INTO l_AUD_RA_JR_TEMPLATES_ID
  FROM AUD_RA_JR_TEMPLATES;
  
  IF UPDATING THEN
		l_action := 'UPDATE';
	ELSE
		l_action := 'DELETE';
	END IF;
	INSERT INTO AUD_RA_JR_TEMPLATES
            (
              AUD_RA_JR_TEMPLATES_ID,
              REPORT_ID,
              JR_TEMPLATE_NAME,
              JR_TEMPLATE,
              CREATED_BY,
              CREATION_TIME,
              LAST_UPDATED_BY,
              LAST_UPDATE_TIME,              
              ACTION,
              MODIFIED_BY
            )
            VALUES
            ( 
              l_AUD_RA_JR_TEMPLATES_ID,
              :OLD.REPORT_ID,
              :OLD.JR_TEMPLATE_NAME,
              :OLD.JR_TEMPLATE,
              :OLD.CREATED_BY,
              :OLD.CREATION_TIME,
              :OLD.LAST_UPDATED_BY,
              :OLD.LAST_UPDATE_TIME,              
              l_ACTION,
              SYS_CONTEXT('USERENV','OS_USER') 
            );
	COMMIT;
END;
/
ALTER TRIGGER "RPTAPP"."TRG_AUD_RA_JR_TEMPLATES" ENABLE;
--------------------------------------------------------

--  DDL for Trigger TRG_AUD_RA_OUTPUT_TEMPLATES

--------------------------------------------------------


  CREATE OR REPLACE TRIGGER "RPTAPP"."TRG_AUD_RA_OUTPUT_TEMPLATES" 
AFTER UPDATE OR DELETE ON RA_OUTPUT_TEMPLATES
FOR EACH ROW
DECLARE
	PRAGMA AUTONOMOUS_TRANSACTION;
  
	l_action aud_ra_output_templates.action%type;
	l_aud_ra_output_templates_id aud_ra_output_templates.aud_ra_output_templates_id%TYPE;
  
BEGIN
	IF UPDATING THEN
		l_action := 'UPDATE';
	ELSE
		l_action := 'DELETE';
	END IF;
  
  SELECT nvl(max(aud_ra_output_templates_id)+1,1) 
  into l_aud_ra_output_templates_id
  FROM AUD_RA_OUTPUT_TEMPLATES;
  
INSERT
INTO AUD_RA_OUTPUT_TEMPLATES
  (
    AUD_RA_OUTPUT_TEMPLATES_ID, 
	TPL_NAME,
	TPL_TEXT,
	TPL_TYPE,
	TPL_LANGUAGE,
	TPL_COMMENTS,
	CREATED_BY,
	CREATION_TIME,
	LAST_UPDATED_BY,
	LAST_UPDATE_TIME,
    ACTION,
    MODIFIED_BY
  )
  VALUES
  (
    l_aud_ra_output_templates_id,
	:OLD.TPL_NAME,
	:OLD.TPL_TEXT,
	:OLD.TPL_TYPE,
	:OLD.TPL_LANGUAGE,
	:OLD.TPL_COMMENTS,
	:OLD.CREATED_BY,
	:OLD.CREATION_TIME,
	:OLD.LAST_UPDATED_BY,
	:OLD.LAST_UPDATE_TIME,
	l_action,
    SYS_CONTEXT('USERENV','OS_USER') 
  );
COMMIT;
END;
/
ALTER TRIGGER "RPTAPP"."TRG_AUD_RA_OUTPUT_TEMPLATES" ENABLE;
--------------------------------------------------------

--  DDL for Trigger TRG_AUD_RA_REPORTS_B

--------------------------------------------------------


  CREATE OR REPLACE TRIGGER "RPTAPP"."TRG_AUD_RA_REPORTS_B" 
AFTER UPDATE OR DELETE ON RA_REPORTS_B
FOR EACH ROW
DECLARE
	PRAGMA AUTONOMOUS_TRANSACTION;
  
	l_action aud_ra_reports_b.action%type;
	l_aud_ra_report_id aud_ra_reports_b.aud_ra_report_id%TYPE;
  
BEGIN
	IF UPDATING THEN
		l_action := 'UPDATE';
	ELSE
		l_action := 'DELETE';
	END IF;
  
  SELECT nvl(max(aud_ra_report_id)+1,1) 
  into l_aud_ra_report_id
  FROM AUD_RA_REPORTS_B;
  
INSERT
INTO AUD_RA_REPORTS_B
  (
    AUD_RA_REPORT_ID, 
	REPORT_ID,
	APP_ID,
	ID_ON_BI_SERVER,
	REPORT_NAME_ON_BI_SERVER,
	REPORT_PATH_ON_BI_SERVER,
	DISPLAY_REPORT_NAME,
	REPORT_DESCRIPTION,
	BI_CATEGORY_ID,
	SCHEDULING_ALLOWED,
	MOVE_TO_ARCHIVE_AFTER_DAYS,
	PURGE_AFTER_DAYS,
	ARCHIVE_ALLLOWED,
	ARCHIVE_FORMAT_TYPE,
	DATA_SECURITY_ENABLED,
	REPORT_SHORT_NAME,
	REPORT_TYPE,
	CREATED_BY,
	CREATION_DTM,
	LAST_UPDATED_BY,
	LAST_UPDATE_DTM,
	BI_REPORT_DIRECT_QUERY,
	BI_SERVER,
	ACTIVE_IND,
	REPORT_TOOL,
	MAX_RECORD_COUNT,
	IS_EXCEL_SUPPORTED,
	EXCEL_TEMPLATE_NAME,
	OUTPUT_STORAGE_TYPE,
	DETAIL_REPORT_ID,
	USE_CACHE,
	IS_CSV_SUPPORTED,
	IS_PDF_SUPPORTED,
	IS_ONLINE_SUPPORTED,
	REPORT_OUTPUT_LOCATION,
	IS_HTML_SUPPORTED,
	IS_HTML_MULTIPAGE_SUPPORTED,
	HTML_PAGE_MAX_RECORDS,
	OUTPUT_STORAGE_LIMIT_IN_MB,
	HTML_TPL_NAME,
	EXTRA_META_DATA,
    ACTION,
    MODIFIED_BY
  )
  VALUES
  (
    l_aud_ra_report_id,
	:OLD.REPORT_ID,
	:OLD.APP_ID,
	:OLD.ID_ON_BI_SERVER,
	:OLD.REPORT_NAME_ON_BI_SERVER,
	:OLD.REPORT_PATH_ON_BI_SERVER,
	:OLD.DISPLAY_REPORT_NAME,
	:OLD.REPORT_DESCRIPTION,
	:OLD.BI_CATEGORY_ID,
	:OLD.SCHEDULING_ALLOWED,
	:OLD.MOVE_TO_ARCHIVE_AFTER_DAYS,
	:OLD.PURGE_AFTER_DAYS,
	:OLD.ARCHIVE_ALLLOWED,
	:OLD.ARCHIVE_FORMAT_TYPE,
	:OLD.DATA_SECURITY_ENABLED,
	:OLD.REPORT_SHORT_NAME,
	:OLD.REPORT_TYPE,
	:OLD.CREATED_BY,
	:OLD.CREATION_DTM,
	:OLD.LAST_UPDATED_BY,
	:OLD.LAST_UPDATE_DTM,
	:OLD.BI_REPORT_DIRECT_QUERY,
	:OLD.BI_SERVER,
	:OLD.ACTIVE_IND,
	:OLD.REPORT_TOOL,
	:OLD.MAX_RECORD_COUNT,
	:OLD.IS_EXCEL_SUPPORTED,
	:OLD.EXCEL_TEMPLATE_NAME,
	:OLD.OUTPUT_STORAGE_TYPE,
	:OLD.DETAIL_REPORT_ID,
	:OLD.USE_CACHE,
	:OLD.IS_CSV_SUPPORTED,
	:OLD.IS_PDF_SUPPORTED,
	:OLD.IS_ONLINE_SUPPORTED,
	:OLD.REPORT_OUTPUT_LOCATION,
	:OLD.IS_HTML_SUPPORTED,
	:OLD.IS_HTML_MULTIPAGE_SUPPORTED,
	:OLD.HTML_PAGE_MAX_RECORDS,
	:OLD.OUTPUT_STORAGE_LIMIT_IN_MB,
	:OLD.HTML_TPL_NAME,
	:OLD.EXTRA_META_DATA,
	l_action,
    SYS_CONTEXT('USERENV','OS_USER') 
  );
COMMIT;
END;
/
ALTER TRIGGER "RPTAPP"."TRG_AUD_RA_REPORTS_B" ENABLE;
--------------------------------------------------------

--  DDL for Trigger TRG_AUD_RA_REPORT_PARAMETERS_B

--------------------------------------------------------


  CREATE OR REPLACE TRIGGER "RPTAPP"."TRG_AUD_RA_REPORT_PARAMETERS_B" 
AFTER UPDATE OR DELETE ON RA_REPORT_PARAMETERS_B
FOR EACH ROW
DECLARE
	pragma autonomous_transaction;
	l_action AUD_RA_REPORT_PARAMETERS_B.ACTION%TYPE;
  l_aud_ra_report_param_id AUD_RA_REPORT_PARAMETERS_B.AUD_RA_REPORT_PARAM_ID%TYPE;
BEGIN
	IF UPDATING THEN
		l_action := 'UPDATE';
	ELSE
		l_action := 'DELETE';
	END IF;

  SELECT nvl(max(aud_ra_report_param_id)+1,1) 
  INTO l_aud_ra_report_param_id
  FROM AUD_RA_REPORT_PARAMETERS_B;


INSERT
INTO AUD_RA_REPORT_PARAMETERS_B
  (
    AUD_RA_REPORT_PARAM_ID,
    PARAMETER_ID,
    REPORT_ID,
    MANDATORY_IND,
    PARAMETER_DATA_TYPE,
    ORDERING_SEQUENCE,
    ORDERING_SEQUENCE_IN_BI,
    PARAMETER_NAME_BI,
    INPUT_TYPE_ID,
    MULTIPLE_VALUE_ALLOWED,
    PARAMETER_DEFAULT_VALUE,
    INITIAL_DISPLAY_IND,
    DS_ID,
    LOV_QUERY,
	DS_ID2,
    LOV_QUERY2,    
    PARAMETER_QUERY_TIMEOUT,
    ACTIVE_FLAG,
    USER_SEARCH_STRING_REQUIRED,
    CREATED_BY,
    CREATION_DTM,
    LAST_UPDATED_BY,
    LAST_UPDATE_DTM,
    PARAMETER_NAME_IN_UI,
    EVENT_PARAMETER_NAME,
    PARAM_NAME_IN_QUERY,
	MULTI_VALUE_LIMIT,
	IS_MULTI_VALUE_NUMERIC,
	MULTI_VALUE_SEPARATOR,
	MULTI_VALUE_OUT_SEPARATOR,
    ACTION,
    MODIFIED_BY
  )
  VALUES
  (
    l_aud_ra_report_param_id,
    :OLD.PARAMETER_ID,
    :OLD.REPORT_ID,
    :OLD.MANDATORY_IND,
    :OLD.PARAMETER_DATA_TYPE,
    :OLD.ORDERING_SEQUENCE,
    :OLD.ORDERING_SEQUENCE_IN_BI,
    :OLD.PARAMETER_NAME_BI,
    :OLD.INPUT_TYPE_ID,
    :OLD.MULTIPLE_VALUE_ALLOWED,
    :OLD.PARAMETER_DEFAULT_VALUE,
    :OLD.INITIAL_DISPLAY_IND,
    :OLD.DS_ID,
    :OLD.LOV_QUERY,
    :OLD.DS_ID2,
    :OLD.LOV_QUERY2,    
    :OLD.PARAMETER_QUERY_TIMEOUT,
    :OLD.ACTIVE_FLAG,
    :OLD.USER_SEARCH_STRING_REQUIRED,
    :OLD.CREATED_BY,
    :OLD.CREATION_DTM,
    :OLD.LAST_UPDATED_BY,
    :OLD.LAST_UPDATE_DTM,
    :OLD.PARAMETER_NAME_IN_UI,
    :OLD.EVENT_PARAMETER_NAME,
    :OLD.PARAM_NAME_IN_QUERY,
	:OLD.MULTI_VALUE_LIMIT,
	:OLD.IS_MULTI_VALUE_NUMERIC,
	:OLD.MULTI_VALUE_SEPARATOR,
	:OLD.MULTI_VALUE_OUT_SEPARATOR,    
    l_action,
    SYS_CONTEXT('USERENV','OS_USER') 
  );
COMMIT;
END;
/
ALTER TRIGGER "RPTAPP"."TRG_AUD_RA_REPORT_PARAMETERS_B" ENABLE;
--------------------------------------------------------

--  DDL for Trigger TRG_AUD_RA_REPORT_QRY_MAP

--------------------------------------------------------


  CREATE OR REPLACE TRIGGER "RPTAPP"."TRG_AUD_RA_REPORT_QRY_MAP" AFTER
  UPDATE OR
  DELETE ON RA_REPORT_QUERY_MAP FOR EACH ROW DECLARE pragma autonomous_transaction;
  l_action AUD_RA_REPORT_QUERY_MAP.ACTION%TYPE;
  l_AUD_RA_REPORT_QUERY_MAP_ID AUD_RA_REPORT_QUERY_MAP.AUD_RA_REPORT_QUERY_MAP_ID%TYPE;
  BEGIN
    SELECT NVL(MAX(AUD_RA_REPORT_QUERY_MAP_ID)+1,1)
    INTO l_AUD_RA_REPORT_QUERY_MAP_ID
    FROM AUD_RA_REPORT_QUERY_MAP;
    IF UPDATING THEN
      l_action := 'UPDATE';
    ELSE
      l_action := 'DELETE';
    END IF;
    INSERT
    INTO AUD_RA_REPORT_QUERY_MAP
      (
        AUD_RA_REPORT_QUERY_MAP_ID,
        REPORT_ID,
        QUERY_ID,
        QUERY_SEQ,
        IS_ACTIVE,
        IS_NEW_PAGE,
        RECORD_COUNT_TO_LOG,
        QUERY_EXEC_TIME_OUT_SECONDS,
        QUERY_EXTRACT_TIME_OUT_SECONDS,
        HTML_PAGE_MAX_RECORDS,
        JR_DS_NAME,
        CREATED_BY,
        CREATION_TIME,
        LAST_UPDATED_BY,
        LAST_UPDATE_TIME,
        ACTION,
        MODIFIED_BY,
        MIN_DIMENSION_COUNT,
        MIN_MEASURE_COUNT,
        MAX_DIMENSION_COUNT,
        MAX_MEASURE_COUNT,
        MAX_SUBTOTAL_COUNT,
        HTML_TPL_NAME,
        EXTRA_META_DATA
      )
      VALUES
      (
        l_AUD_RA_REPORT_QUERY_MAP_ID,
        :OLD.REPORT_ID,
        :OLD.QUERY_ID,
        :OLD.QUERY_SEQ,
        :OLD.IS_ACTIVE,
        :OLD.IS_NEW_PAGE,
        :OLD.RECORD_COUNT_TO_LOG,
        :OLD.QUERY_EXEC_TIME_OUT_SECONDS,
        :OLD.QUERY_EXTRACT_TIME_OUT_SECONDS,
        :OLD.HTML_PAGE_MAX_RECORDS,
        :OLD.JR_DS_NAME,
        :OLD.CREATED_BY,
        :OLD.CREATION_TIME,
        :OLD.LAST_UPDATED_BY,
        :OLD.LAST_UPDATE_TIME,
        l_ACTION,
        SYS_CONTEXT('USERENV','OS_USER'),
        :OLD.MIN_DIMENSION_COUNT,
        :OLD.MIN_MEASURE_COUNT,
        :OLD.MAX_DIMENSION_COUNT,
        :OLD.MAX_MEASURE_COUNT,
        :OLD.MAX_SUBTOTAL_COUNT,
        :OLD.HTML_TPL_NAME,
        :OLD.EXTRA_META_DATA
      );
    COMMIT;
END;
/
ALTER TRIGGER "RPTAPP"."TRG_AUD_RA_REPORT_QRY_MAP" ENABLE;
--------------------------------------------------------

--  DDL for Trigger TRG_AUD_RA_SEEDED_QUERIES

--------------------------------------------------------


  CREATE OR REPLACE TRIGGER "RPTAPP"."TRG_AUD_RA_SEEDED_QUERIES" 
AFTER UPDATE OR DELETE ON RA_SEEDED_QUERIES
FOR EACH ROW
DECLARE
	PRAGMA AUTONOMOUS_TRANSACTION;
	
  l_action aud_ra_seeded_queries.action%type;
  l_aud_ra_seeded_queries_id aud_ra_seeded_queries.aud_ra_seeded_queries_id%type;
	
BEGIN
	IF UPDATING THEN
		l_action := 'UPDATE';
	ELSE
		l_action := 'DELETE';
	END IF;

  SELECT nvl(max(aud_ra_seeded_queries_id)+1,1) 
  into l_aud_ra_seeded_queries_id
  FROM AUD_RA_SEEDED_QUERIES;
  
INSERT
INTO AUD_RA_SEEDED_QUERIES
  (
    AUD_RA_SEEDED_QUERIES_ID,
    QUERY_ID,
    QUERY_TEXT,
    QUERY_DISPLAY_NAME,
    EFFECTIVE_FROM,
    EFFECTIVE_TO,
    CREATED_BY,
    CREATION_TIME,
    LAST_UPDATED_BY,
    LAST_UPDATE_TIME,
    QUERY_NAME,
    DS_ID, 
    MAX_RECORD_COUNT,
    DYNAMIC_QUERY_TEMPLATE_ID,
    ACTION,
    MODIFIED_BY
  )
  values
  ( 
    l_aud_ra_seeded_queries_id,
    :OLD.QUERY_ID,
    :OLD.QUERY_TEXT,
    :OLD.QUERY_DISPLAY_NAME,
    :OLD.EFFECTIVE_FROM,
    :OLD.EFFECTIVE_TO,
    :OLD.CREATED_BY,
    :OLD.CREATION_TIME,
    :OLD.LAST_UPDATED_BY,
    :OLD.LAST_UPDATE_TIME,
    :OLD.QUERY_NAME,
    :OLD.DS_ID, 
    :OLD.MAX_RECORD_COUNT,
    :OLD.DYNAMIC_QUERY_TEMPLATE_ID,
    l_action,
    SYS_CONTEXT('USERENV','OS_USER') 
  );
COMMIT;
END;
/
ALTER TRIGGER "RPTAPP"."TRG_AUD_RA_SEEDED_QUERIES" ENABLE;
--------------------------------------------------------

--  DDL for Trigger TRG_AUD_RA_SEEDED_QUERY_COLS

--------------------------------------------------------


  CREATE OR REPLACE TRIGGER "RPTAPP"."TRG_AUD_RA_SEEDED_QUERY_COLS" 
AFTER UPDATE OR DELETE ON RA_SEEDED_QUERY_COLUMNS
FOR EACH ROW
DECLARE
	PRAGMA AUTONOMOUS_TRANSACTION;
  
	l_action aud_ra_seeded_query_columns.action%type;
	l_aud_ra_query_columns_id AUD_RA_SEEDED_QUERY_COLUMNS.AUD_RA_QUERY_COLUMNS_ID%TYPE;
  
BEGIN
	IF UPDATING THEN
		l_action := 'UPDATE';
	ELSE
		l_action := 'DELETE';
	END IF;
  
  SELECT nvl(max(aud_ra_query_columns_id)+1,1) 
  into l_aud_ra_query_columns_id
  FROM AUD_RA_SEEDED_QUERY_COLUMNS;
  
INSERT
INTO AUD_RA_SEEDED_QUERY_COLUMNS
  (
    AUD_RA_QUERY_COLUMNS_ID,
    QUERY_ID,
    COLUMN_ORDER,
    COLUMN_NAME,
    COLUMN_DISPLAY_NAME,
    COLUMN_TYPE,
    COLUMN_SUB_TYPE,
    COLUMN_TYPE_FORMAT_MASK,
    REQUIRED_IN_SELECT_CLAUSE,
    EFFECTIVE_FROM,
    EFFECTIVE_TO,
    CREATED_BY,
    CREATION_TIME,
    LAST_UPDATED_BY,
    LAST_UPDATE_TIME,
    COLUMN_DATA_TYPE,
    MEASURE_FUNCTION,
    ACTION,
    MODIFIED_BY
  )
  VALUES
  (
    l_aud_ra_query_columns_id,
    :OLD.QUERY_ID,
    :OLD.COLUMN_ORDER,
    :OLD.COLUMN_NAME,
    :OLD.COLUMN_DISPLAY_NAME,
    :OLD.COLUMN_TYPE,
    :OLD.COLUMN_SUB_TYPE,
    :OLD.COLUMN_TYPE_FORMAT_MASK,
    :OLD.REQUIRED_IN_SELECT_CLAUSE,
    :OLD.EFFECTIVE_FROM,
    :OLD.EFFECTIVE_TO,
    :OLD.CREATED_BY,
    :OLD.CREATION_TIME,
    :OLD.LAST_UPDATED_BY,
    :OLD.LAST_UPDATE_TIME,
    :OLD.COLUMN_DATA_TYPE,
    :OLD.MEASURE_FUNCTION,
    l_action,
    SYS_CONTEXT('USERENV','OS_USER') 
  );
COMMIT;
END;
/
ALTER TRIGGER "RPTAPP"."TRG_AUD_RA_SEEDED_QUERY_COLS" ENABLE;
--------------------------------------------------------

--  DDL for Trigger TRG_AUD_RA_SUB_REPORT_MAP

--------------------------------------------------------


  CREATE OR REPLACE TRIGGER "RPTAPP"."TRG_AUD_RA_SUB_REPORT_MAP" 
AFTER UPDATE OR DELETE ON RA_SUB_REPORT_MAP
FOR EACH ROW
DECLARE
	pragma autonomous_transaction;
	l_action AUD_RA_SUB_REPORT_MAP.ACTION%TYPE;
	l_AUD_RA_SUB_REPORT_MAP_ID AUD_RA_SUB_REPORT_MAP.AUD_RA_SUB_REPORT_MAP_ID%TYPE;
  
BEGIN
	
  select nvl(max(AUD_RA_SUB_REPORT_MAP_ID)+1,1) 
  INTO l_AUD_RA_SUB_REPORT_MAP_ID
  FROM AUD_RA_SUB_REPORT_MAP;
  
  IF UPDATING THEN
		l_action := 'UPDATE';
	ELSE
		l_action := 'DELETE';
	END IF;
	INSERT INTO AUD_RA_SUB_REPORT_MAP
            (
              AUD_RA_SUB_REPORT_MAP_ID,
              REPORT_ID,
              SUB_REPORT_ID,
              SUB_REPORT_SEQ,
              DISPLAY_NAME,
              IS_ACTIVE,
              IS_ASYNC_DRILLDOWN,
              IS_SYNC_DRILLDOWN,
              CREATED_BY,
              CREATION_TIME,
              LAST_UPDATED_BY,
              LAST_UPDATE_TIME,              
              ACTION,
              MODIFIED_BY
            )
            VALUES
            ( 
              l_AUD_RA_SUB_REPORT_MAP_ID,
              :OLD.REPORT_ID,
              :OLD.SUB_REPORT_ID,
              :OLD.SUB_REPORT_SEQ,
              :OLD.DISPLAY_NAME,
              :OLD.IS_ACTIVE,
              :OLD.IS_ASYNC_DRILLDOWN,
              :OLD.IS_SYNC_DRILLDOWN,
              :OLD.CREATED_BY,
              :OLD.CREATION_TIME,
              :OLD.LAST_UPDATED_BY,
              :OLD.LAST_UPDATE_TIME,          
              l_ACTION,
              SYS_CONTEXT('USERENV','OS_USER') 
            );
	COMMIT;
END;
/
ALTER TRIGGER "RPTAPP"."TRG_AUD_RA_SUB_REPORT_MAP" ENABLE;
--------------------------------------------------------

--  DDL for Trigger TRG_AUD_RA_SUB_RPT_PARAM

--------------------------------------------------------


  CREATE OR REPLACE TRIGGER "RPTAPP"."TRG_AUD_RA_SUB_RPT_PARAM" 
AFTER UPDATE OR DELETE ON RA_SUB_RPT_PARAM_NAME_MAP
FOR EACH ROW
DECLARE
	PRAGMA AUTONOMOUS_TRANSACTION;
	
  l_action AUD_RA_SUB_RPT_PARAM_MAP.action%type;
  l_AUD_RA_SUB_RPT_PARAM_ID AUD_RA_SUB_RPT_PARAM_MAP.AUD_RA_SUB_RPT_PARAM_ID%type;
	
BEGIN
	IF UPDATING THEN
		l_action := 'UPDATE';
	ELSE
		l_action := 'DELETE';
	END IF;

  SELECT nvl(max(AUD_RA_SUB_RPT_PARAM_ID)+1,1) 
  into l_AUD_RA_SUB_RPT_PARAM_ID
  FROM AUD_RA_SUB_RPT_PARAM_MAP;
  
INSERT
INTO AUD_RA_SUB_RPT_PARAM_MAP
  (
  AUD_RA_SUB_RPT_PARAM_ID, 
  REPORT_ID, 
  SUB_REPORT_ID, 
  SUB_REPORT_SEQ,
  REPORT_COLUMN_NAME, 
  SUB_REPORT_PARAM_NAME_IN_QUERY, 
  SUB_REPORT_PARAM_DEFAULT_VALUE,
  IS_ACTIVE,
  CONVERSION_TYPE,
  REPORT_COLUMN_FORMAT,
  SUB_REPORT_PARAM_FORMAT, 
  CREATED_BY  , 
  CREATION_TIME  , 
  LAST_UPDATED_BY  , 
  LAST_UPDATE_TIME , 
  ACTION,
  MODIFIED_BY
  )
  values
  ( 
  l_AUD_RA_SUB_RPT_PARAM_ID,
  :OLD.REPORT_ID, 
  :OLD.SUB_REPORT_ID, 
  :OLD.SUB_REPORT_SEQ,
  :OLD.REPORT_COLUMN_NAME, 
  :OLD.SUB_REPORT_PARAM_NAME_IN_QUERY, 
  :OLD.SUB_REPORT_PARAM_DEFAULT_VALUE,
  :OLD.IS_ACTIVE, 
  :OLD.CONVERSION_TYPE,
  :OLD.REPORT_COLUMN_FORMAT,
  :OLD.SUB_REPORT_PARAM_FORMAT, 
  :OLD.CREATED_BY  , 
  :OLD.CREATION_TIME  , 
  :OLD.LAST_UPDATED_BY  , 
  :OLD.LAST_UPDATE_TIME , 
  l_action,
  SYS_CONTEXT('USERENV','OS_USER') 
  );
COMMIT;
END;

-- ===========================================================
-- End: DDL changes for RA_SUB_RPT_PARAM_NAME_MAP & AUD_RA_SUB_RPT_PARAM_MAP
-- ===========================================================
/
ALTER TRIGGER "RPTAPP"."TRG_AUD_RA_SUB_RPT_PARAM" ENABLE;
--------------------------------------------------------

--  DDL for Function CAN_ACCESS_REPORT

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."CAN_ACCESS_REPORT" (

  P_REPORT_ID            IN      number,
  P_SOEID					       IN      VARCHAR2
  
)
return NUMBER
is

  l_action NUMBER := 0;

begin
	SELECT 1 INTO l_action FROM DUAL WHERE EXISTS (
	SELECT 1  FROM RA_USER_LDAP_GROUPS UG, RA_REPORT_LDAP_GROUPS RG
		WHERE UG.SOEID = LOWER(P_SOEID) AND RG.REPORT_ID = P_REPORT_ID 
  		AND UG.LDAP_GROUP_NAME = RG.LDAP_GROUP_NAME
 	UNION
 	SELECT 1  FROM RA_USER_APP_ROLES UG, RA_REPORT_LDAP_GROUPS RG
		WHERE UG.SOEID = LOWER(P_SOEID) AND RG.REPORT_ID = P_REPORT_ID 
  		AND UG.ROLE = RG.LDAP_GROUP_NAME
	);
  
  IF (l_action IS NULL ) THEN 
     l_action := 0 ;
  END IF;
  
  return NVL(l_action,0);
  
end;

/
--------------------------------------------------------

--  DDL for Function DEMO_RETURN

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."DEMO_RETURN" NUMBER
  IS
  BEGIN
    INSERT INTO log_dmg
      (cad
      ) VALUES
      ('JUST PROBE'
      );
    RETURN 1;
  END;

/
--------------------------------------------------------

--  DDL for Function FNCHECKDOMAINVALID

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."FNCHECKDOMAINVALID" (P_DS_ID IN NUMBER, P_DOMAIN_CODE IN VARCHAR2) 
RETURN NUMBER 
   IS chk_status NUMBER:=0;
   BEGIN 
    BEGIN
    SELECT  1 INTO chk_status FROM  DUAL WHERE P_DS_ID IN ( SELECT DISTINCT DS_ID FROM RA_APP_DATA_SOURCES)
    AND P_DOMAIN_CODE IN ( SELECT DISTINCT DOMAIN_CODE FROM RA_APPS_DS_DOMAIN);
     
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
    chk_status := 0;
    END;
    RETURN chk_status;
      
   
   END;

/
--------------------------------------------------------

--  DDL for Function FN_GEN_INSERTS

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."FN_GEN_INSERTS" 
(
  p_sql                        clob, 
  p_new_table_name             varchar2
)
return clob
is
  l_cur                        number;
  l_sql                        clob := p_sql;
  l_ret                        number;
  l_col_cnt                    number;
  l_rec_tab                    dbms_sql.desc_tab;

  l_separator                  char(1) := '!';
  l_clob                       clob;
  l_clob_line                  clob;
  l_clob_ins                   clob;
  l_clob_all                   clob;
  l_line                       clob := '-----------------------------------';

  cons_date_frm                varchar2(32) := 'DD.MM.YYYY HH24:MI:SS';
  cons_timestamp_frm           varchar2(32) := 'DD.MM.YYYY HH24:MI:SSXFF';
  cons_timestamp_wtz_frm       varchar2(32) := 'DD.MM.YYYY HH24:MI:SSXFF TZR';

  cons_varchar2_code           number := 1;
  cons_nvarchar2_code          number := 1;
  cons_number_code             number := 2;
  cons_float_code              number := 2;
  cons_long_code               number := 8;
  cons_date_code               number := 12;
  cons_binary_float_code       number := 100;
  cons_binary_double_code      number := 101;
  cons_timestamp_code          number := 180;
  cons_timestamp_wtz_code      number := 181;
  cons_timestamp_lwtz_code     number := 231;
  cons_interval_ytm_code       number := 182;
  cons_interval_dts_code       number := 183;
  cons_raw_code                number := 23;
  cons_long_raw_code           number := 24;
  cons_rowid_code              number := 11;
  cons_urowid_code             number := 208;
  cons_char_code               number := 96;
  cons_nchar_code              number := 96;
  cons_clob_code               number := 112;
  cons_nclob_code              number := 112;
  cons_blob_code               number := 113;
  cons_bfile_code              number := 114;

  -------------------------------------
  -- Supported types
  -------------------------------------
  l_varchar2_col                varchar2(32767); --1
  l_number_col                  number;          --2
  --l_long_col                    long;          --8 - not supported
  l_date_col                    date;            --12
  --l_raw_col                     raw(2000);     --23 - not supported
  l_rowid_col                   rowid;           --69
  l_char_col                    char(2000);      --96
  l_binary_float_col            binary_float;    --100
  l_binary_double_col           binary_double;   --101
  l_clob_col                    clob;            --112
  l_timestamp_col               timestamp(9);    --180
  l_timestamp_wtz_col           timestamp(9) with time zone;    --181
  l_interval_ytm_col            interval year(9) to month;      --182
  l_interval_dts_col            interval day(9) to second(2);   --183
  l_urowid_col                  urowid;                         --208
  l_timestamp_wltz_col          timestamp with local time zone; --231
  --l_nchar_col                   nchar(2000); --96 the same as char
  --l_nclob_col                   nclob; --112 the same as clob
  --l_blob_col - not supported
  --l_bfile_col - not supported
  --l_long_raw_col - not supported

  procedure print_rec(rec in dbms_sql.desc_rec) is
  begin
    l_clob_all := l_clob_all||chr(10)||
      'col_type            =    ' || rec.col_type||chr(10)||
      'col_maxlen          =    ' || rec.col_max_len||chr(10)||
      'col_name            =    ' || rec.col_name||chr(10)||
      'col_name_len        =    ' || rec.col_name_len||chr(10)||
      'col_schema_name     =    ' || rec.col_schema_name||chr(10)||
      'col_schema_name_len =    ' || rec.col_schema_name_len||chr(10)||
      'col_precision       =    ' || rec.col_precision||chr(10)||
      'col_scale           =    ' || rec.col_scale||chr(10)||
      'col_null_ok         =    ';

    if (rec.col_null_ok) then
      l_clob_all := l_clob_all||'true'||chr(10);
    else
      l_clob_all := l_clob_all||'false'||chr(10);
    end if;
  end;  
begin
  ---------------------------------------
  -- INSERT - header generation
  ---------------------------------------
  l_clob_all := 
  'declare'||chr(10)||
  '  type   t_clob is table of clob index by binary_integer;'||chr(10)||
  '  l_clob t_clob;'||chr(10)||
  '  type   t_varchar2 is table of varchar2(64) index by binary_integer;'||chr(10)||
  '  l_varchar2 t_varchar2;'||chr(10)||
  'begin'||chr(10)||
  '/*'||chr(10);

  ---------------------------------------
  -- Introduction
  ---------------------------------------
  l_clob_all := l_clob_all||l_line||chr(10)||'Parsing query:'||chr(10)||l_sql||chr(10);

  ---------------------------------------
  -- Open parse cursor
  ---------------------------------------
  l_cur := dbms_sql.open_cursor;
  dbms_sql.parse(l_cur, l_sql, dbms_sql.native);

  ---------------------------------------
  -- Describe columns
  ---------------------------------------
  l_clob_all := l_clob_all||l_line||chr(10)||'Describe columns:'||chr(10);

  dbms_sql.describe_columns(l_cur, l_col_cnt, l_rec_tab);

  for i in 1..l_rec_tab.count
  loop
    print_rec(l_rec_tab(i));
  end loop;

  l_clob_all := l_clob_all||chr(10)||
            '*/'||chr(10)||
            '  '||chr(10)||l_line||chr(10)||
            '  -- start generation of records'||chr(10)||
            '  '||l_line||chr(10);

  ---------------------------------------
  -- Define columns
  ---------------------------------------
  for i in 1..l_rec_tab.count
  loop
    if    l_rec_tab(i).col_type = cons_varchar2_code then --varchar2
      dbms_sql.define_column(l_cur, i, l_varchar2_col, l_rec_tab(i).col_max_len); 
    elsif l_rec_tab(i).col_type = cons_number_code then --number
      dbms_sql.define_column(l_cur, i, l_number_col); 
    --elsif l_rec_tab(i).col_type = cons_long_code then --long
    --  dbms_sql.define_column_long(l_cur, i); 
    elsif l_rec_tab(i).col_type = cons_date_code then --date
      dbms_sql.define_column(l_cur, i, l_date_col); 
    elsif l_rec_tab(i).col_type = cons_binary_float_code then --binary_float
      dbms_sql.define_column(l_cur, i, l_binary_float_col); 
    elsif l_rec_tab(i).col_type = cons_binary_double_code then --binary_double
      dbms_sql.define_column(l_cur, i, l_binary_double_col); 
--    elsif l_rec_tab(i).col_type = cons_raw_code then --raw
--      dbms_sql.define_column_raw(l_cur, i, l_raw_col, l_rec_tab(i).col_max_len); 
    elsif l_rec_tab(i).col_type = cons_rowid_code then  --rowid
      dbms_sql.define_column_rowid(l_cur, i, l_rowid_col); 
    elsif l_rec_tab(i).col_type = cons_char_code then  --char
      dbms_sql.define_column_char(l_cur, i, l_char_col, l_rec_tab(i).col_max_len); 
    elsif l_rec_tab(i).col_type = cons_clob_code then --clob
      dbms_sql.define_column(l_cur, i, l_clob_col); 
    elsif l_rec_tab(i).col_type = cons_timestamp_code then --timestamp
      dbms_sql.define_column(l_cur, i, l_timestamp_col); 
    elsif l_rec_tab(i).col_type = cons_timestamp_wtz_code then --timestamp with time zone
      dbms_sql.define_column(l_cur, i, l_timestamp_wtz_col); 
    elsif l_rec_tab(i).col_type = cons_rowid_code then --urowid
      dbms_sql.define_column(l_cur, i, l_urowid_col); 
    elsif l_rec_tab(i).col_type = cons_timestamp_lwtz_code then --timestamp with local time zone
      dbms_sql.define_column(l_cur, i, l_timestamp_wltz_col); 
    elsif l_rec_tab(i).col_type = cons_interval_ytm_code then --interval year to month
      dbms_sql.define_column(l_cur, i, l_interval_ytm_col); 
    elsif l_rec_tab(i).col_type = cons_interval_dts_code then --interval day to second
      dbms_sql.define_column(l_cur, i, l_interval_dts_col); 
    elsif l_rec_tab(i).col_type = cons_urowid_code then --urowid
      dbms_sql.define_column(l_cur, i, l_urowid_col); 
    else
      raise_application_error(-20001, 'Column: '||l_rec_tab(i).col_name||chr(10)||
                                      'Type not supported: '||l_rec_tab(i).col_type);
      --not supported
    end if;
  end loop;

  ---------------------------------------
  -- Execute cursor
  ---------------------------------------
  l_ret := dbms_sql.execute(l_cur);

  ---------------------------------------
  -- Fetch rows
  ---------------------------------------
  loop
    l_ret := dbms_sql.fetch_rows(l_cur);
    exit when l_ret = 0;

    ---------------------------------------
    -- Building INSERT - build column declarations
    ---------------------------------------
    l_clob_line := '';

    for i in 1..l_rec_tab.count
    loop
      if    l_rec_tab(i).col_type = cons_varchar2_code then --varchar2
        dbms_sql.column_value(l_cur, i, l_varchar2_col); 
        l_clob := l_varchar2_col;
      elsif l_rec_tab(i).col_type = cons_number_code then --number
        dbms_sql.column_value(l_cur, i, l_number_col); 
        l_clob := to_char(l_number_col);
--      elsif l_rec_tab(i).col_type = cons_long_code then --long
--        dbms_sql.column_value(l_cur, i, l_long_col); 
--        l_clob := l_long_col;
      elsif l_rec_tab(i).col_type = cons_date_code then --date
        dbms_sql.column_value(l_cur, i, l_date_col); 
        l_clob := to_char(l_date_col, cons_date_frm);
      elsif l_rec_tab(i).col_type = cons_binary_float_code then --binary_float
        dbms_sql.column_value(l_cur, i, l_binary_float_col); 
        l_clob := to_char(l_binary_float_col);
      elsif l_rec_tab(i).col_type = cons_binary_double_code then --binary_double
        dbms_sql.column_value(l_cur, i, l_binary_double_col); 
        l_clob := to_char(l_binary_double_col);
--      elsif l_rec_tab(i).col_type = cons_raw_code then --raw
--        dbms_sql.column_value(l_cur, i, l_raw_col); 
--        l_clob := to_char(l_raw_col);
      elsif l_rec_tab(i).col_type = cons_rowid_code then --rowid
        dbms_sql.column_value(l_cur, i, l_rowid_col); 
        l_clob := to_char(l_rowid_col);
      elsif l_rec_tab(i).col_type = cons_char_code then --char
        dbms_sql.column_value_char(l_cur, i, l_char_col); 
        l_clob := substr(l_char_col, 1, l_rec_tab(i).col_max_len - 1);
      elsif l_rec_tab(i).col_type = cons_clob_code then --clob
        dbms_sql.column_value(l_cur, i, l_clob_col); 
        l_clob := l_clob_col;
      elsif l_rec_tab(i).col_type = cons_timestamp_code then --timestamp
        dbms_sql.column_value(l_cur, i, l_timestamp_col); 
        l_clob := to_char(l_timestamp_col, cons_timestamp_frm);
      elsif l_rec_tab(i).col_type = cons_timestamp_wtz_code then --timestamp with time zone
        dbms_sql.column_value(l_cur, i, l_timestamp_wtz_col); 
        l_clob := to_char(l_timestamp_wtz_col, cons_timestamp_wtz_frm);
      elsif l_rec_tab(i).col_type = cons_interval_ytm_code then --interval year to month
        dbms_sql.column_value(l_cur, i, l_interval_ytm_col); 
        l_clob := to_char(l_interval_ytm_col);
      elsif l_rec_tab(i).col_type = cons_interval_dts_code then --interval day to second
        dbms_sql.column_value(l_cur, i, l_interval_dts_col); 
        l_clob := to_char(l_interval_dts_col);
      elsif l_rec_tab(i).col_type = cons_urowid_code then --urowid
        dbms_sql.column_value(l_cur, i, l_urowid_col); 
        l_clob := to_char(l_urowid_col);
      elsif l_rec_tab(i).col_type = cons_timestamp_lwtz_code then --timestamp with local time zone
        dbms_sql.column_value(l_cur, i, l_timestamp_wltz_col); 
        l_clob := to_char(l_timestamp_wltz_col, cons_timestamp_wtz_frm);
      end if;

      if l_rec_tab(i).col_type in (cons_clob_code, cons_char_code, cons_varchar2_code) then
        l_clob_line := l_clob_line||'  l_clob('||to_char(i)||') :=q'''||l_separator||l_clob||l_separator||''';'||chr(10);
      else
        l_clob_line := l_clob_line||'  l_varchar2('||to_char(i)||') :=q'''||l_separator||l_clob||l_separator||''';'||chr(10);
      end if;
    end loop;

    l_clob_all := l_clob_all||chr(10)||l_clob_line;

    ---------------------------------------
    -- Building INSERT - build column list
    ---------------------------------------
    l_clob_all := l_clob_all||chr(10)||
              '  insert into '||p_new_table_name||chr(10)||
              '  ('||chr(10);

    for i in 1..l_rec_tab.count
    loop
      if i = 1 then
        l_clob_all := l_clob_all||'     '||l_rec_tab(i).col_name||chr(10);
      else  
        l_clob_all := l_clob_all||'    ,'||l_rec_tab(i).col_name||chr(10);
      end if;  
    end loop;    

    l_clob_all := l_clob_all||
              '  )'||chr(10)||
              '  values'||chr(10)||
              '  ('||chr(10);

    ---------------------------------------
    -- Building INSERT - build values
    ---------------------------------------
    for i in 1..l_rec_tab.count
    loop
      if i!=1 then
        l_clob_all := l_clob_all||'    ,';
      else  
        l_clob_all := l_clob_all||'     ';
      end if;

      if l_rec_tab(i).col_type = cons_number_code then --number
        l_clob_all := l_clob_all||'to_number(l_varchar2('||to_char(i)||'))'||chr(10);
--      elsif l_rec_tab(i).col_type = cons_long_code then --long
--        l_clob := l_long_col;
      elsif l_rec_tab(i).col_type = cons_clob_code then --clob
        l_clob_all := l_clob_all||'l_clob('||to_char(i)||')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_char_code then --timestamp with local time zone
        l_clob_all := l_clob_all||'to_char(l_clob('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_varchar2_code then --timestamp with local time zone
        l_clob_all := l_clob_all||'to_char(l_clob('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_date_code then --date
        l_clob_all := l_clob_all||'to_date(l_varchar2('||to_char(i)||'),'''||cons_date_frm||''')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_timestamp_code then --timestamp
        l_clob_all := l_clob_all||'to_timestamp(l_varchar2('||to_char(i)||'),'''||cons_timestamp_frm||''')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_timestamp_wtz_code then --timestamp with time zone
        l_clob_all := l_clob_all||'to_timestamp_tz(l_varchar2('||to_char(i)||'),'''||cons_timestamp_wtz_frm||''')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_interval_ytm_code then --interval year to month
        l_clob_all := l_clob_all||'to_yminterval(l_varchar2('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_interval_dts_code then --interval day to second
        l_clob_all := l_clob_all||'to_dsinterval(l_varchar2('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_timestamp_lwtz_code then --timestamp with local time zone
        l_clob_all := l_clob_all||'to_timestamp_tz(l_varchar2('||to_char(i)||'),'''||cons_timestamp_wtz_frm||''')'||chr(10);
      else  
        l_clob_all := l_clob_all||'l_varchar2('||to_char(i)||')'||chr(10);
      end if;  
    end loop; 

    l_clob_all := l_clob_all||'  );'||chr(10);
  end loop;

  ---------------------------------------
  -- Building INSERT - end of code
  ---------------------------------------
  l_clob_all := l_clob_all||chr(10)||'end;';
  l_clob_all := l_clob_all||chr(10)||'/';

  ---------------------------------------
  -- Close cursor
  ---------------------------------------
  dbms_sql.close_cursor(l_cur);

  return l_clob_all;
end;

/
--------------------------------------------------------

--  DDL for Function FN_GET_METADATA_DELETES

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."FN_GET_METADATA_DELETES" 
(
  p_report_id                  number
  
)
return clob
is

  l_clob_all                   clob;

begin

  l_clob_all := 'SET DEFINE OFF;' || chr(10);
  
  l_clob_all := l_clob_all|| 'SET AUTO COMMIT OFF;' || chr(10)||chr(10);
  
   --queries
  l_clob_all := l_clob_all|| '-- DELETE FROM RA_SEEDED_QUERIES ' || chr(10);
  l_clob_all := l_clob_all|| 'DELETE FROM RA_SEEDED_QUERIES WHERE QUERY_ID = ( SELECT QUERY_ID FROM RA_REPORTS_B WHERE REPORT_ID = '||p_report_id||');'||chr(10)||'/' || chr(10);
    
  --query columns
  l_clob_all := l_clob_all|| '-- DELETE FROM RA_SEEDED_QUERY_COLUMNS ' || chr(10);
  l_clob_all := l_clob_all|| 'DELETE FROM RA_SEEDED_QUERY_COLUMNS WHERE QUERY_ID = ( SELECT QUERY_ID FROM RA_REPORTS_B WHERE REPORT_ID = '||p_report_id||');'||chr(10)||'/' || chr(10);
    
  --delete from RA_REPORTS_B
  l_clob_all := l_clob_all|| '-- DELETE FROM RA_REPORTS_B ' || chr(10);
  l_clob_all := l_clob_all|| 'DELETE FROM RA_REPORTS_B WHERE REPORT_ID = '||p_report_id||' ;'||chr(10)||'/' || chr(10);
  
  --prompts;
  l_clob_all := l_clob_all|| '-- DELETE FROM RA_REPORT_PARAMETERS_B ' ||chr(10);
  l_clob_all := l_clob_all|| 'DELETE FROM RA_REPORT_PARAMETERS_B WHERE REPORT_ID = '||p_report_id||' ;'||chr(10)||'/' || chr(10);
  
 
  return l_clob_all;
end;

/
--------------------------------------------------------

--  DDL for Function FN_GET_METADATA_INSERTS

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."FN_GET_METADATA_INSERTS" 
(
  p_sql                        clob, 
  p_new_table_name             varchar2
)

/*
 * This function generates the insert scripts for meta-data required for migrations.
 * Ex. SELECT FN_GET_METADATA_INSERTS('SELECT * FROM RA_SEEDED_QUERIES WHERE QUERY_ID = 9008','RA_SEEDED_QUERIES') FROM DUAL;
 * 
 * 
 * 					AUTHOR						Subra Minnal (sm45095)
 * 				    DATED						03/20/2014
 * 					MODIFIED					06/01/2015
 */
return clob
is
  l_cur                        number;
  l_sql                        clob := p_sql;
  l_ret                        number;
  l_col_cnt                    number;
  l_rec_tab                    dbms_sql.desc_tab;
  l_row_count                  number :=0;

  l_separator                  char(1) := '^';
  l_clob                       clob;
  l_clob_line                  clob;
  l_clob_ins                   clob;
  l_clob_all                   clob;
  l_line                       clob := '-----------------------------------';
  idxClob                      number;
  idxCount                     number :=1;
  clobSplitCount               number:=9000;
  tClobCount                   number;
   
  cons_date_frm                varchar2(32) := 'MM/DD/YYYY HH24:MI:SS';
  cons_timestamp_frm           varchar2(32) := 'MM/DD/YYYY HH24:MI:SSXFF';
  cons_timestamp_wtz_frm       varchar2(32) := 'MM/DD/YYYY HH24:MI:SSXFF TZR';

  cons_varchar2_code           number := 1;
  cons_nvarchar2_code          number := 1;
  cons_number_code             number := 2;
  cons_float_code              number := 2;
  cons_long_code               number := 8;
  cons_date_code               number := 12;
  cons_binary_float_code       number := 100;
  cons_binary_double_code      number := 101;
  cons_timestamp_code          number := 180;
  cons_timestamp_wtz_code      number := 181;
  cons_timestamp_lwtz_code     number := 231;
  cons_interval_ytm_code       number := 182;
  cons_interval_dts_code       number := 183;
  cons_raw_code                number := 23;
  cons_long_raw_code           number := 24;
  cons_rowid_code              number := 11;
  cons_urowid_code             number := 208;
  cons_char_code               number := 96;
  cons_nchar_code              number := 96;
  cons_clob_code               number := 112;
  cons_nclob_code              number := 112;
  cons_blob_code               number := 113;
  cons_bfile_code              number := 114;

  -------------------------------------
  -- Supported types
  -------------------------------------
  l_varchar2_col                varchar2(32767); --1
  l_number_col                  number;          --2
  --l_long_col                    long;          --8 - not supported
  l_date_col                    date;            --12
  --l_raw_col                     raw(2000);     --23 - not supported
  l_rowid_col                   rowid;           --69
  l_char_col                    char(2000);      --96
  l_binary_float_col            binary_float;    --100
  l_binary_double_col           binary_double;   --101
  l_clob_col                    clob;            --112
  l_timestamp_col               timestamp(9);    --180
  l_timestamp_wtz_col           timestamp(9) with time zone;    --181
  l_interval_ytm_col            interval year(9) to month;      --182
  l_interval_dts_col            interval day(9) to second(2);   --183
  l_urowid_col                  urowid;                         --208
  l_timestamp_wltz_col          timestamp with local time zone; --231
  --l_nchar_col                   nchar(2000); --96 the same as char
  --l_nclob_col                   nclob; --112 the same as clob
  --l_blob_col - not supported
  --l_bfile_col - not supported
  --l_long_raw_col - not supported

  procedure print_rec(rec in dbms_sql.desc_rec) is
  begin
    l_clob_all := l_clob_all||chr(10)||
      'col_type            =    ' || rec.col_type||chr(10)||
      'col_maxlen          =    ' || rec.col_max_len||chr(10)||
      'col_name            =    ' || rec.col_name||chr(10)||
      'col_name_len        =    ' || rec.col_name_len||chr(10)||
      'col_schema_name     =    ' || rec.col_schema_name||chr(10)||
      'col_schema_name_len =    ' || rec.col_schema_name_len||chr(10)||
      'col_precision       =    ' || rec.col_precision||chr(10)||
      'col_scale           =    ' || rec.col_scale||chr(10)||
      'col_null_ok         =    ';

    if (rec.col_null_ok) then
      l_clob_all := l_clob_all||'true'||chr(10);
    else
      l_clob_all := l_clob_all||'false'||chr(10);
    end if;
  end;  
begin
  ---------------------------------------
  -- INSERT - header generation
  ---------------------------------------
  l_clob_all := 
  'declare'||chr(10)||
  '  type   t_clob is table of clob index by binary_integer;'||chr(10)||
  '  l_clob t_clob;'||chr(10)||
  '  type   t_varchar2 is table of varchar2(64) index by binary_integer;'||chr(10)||
  '  l_varchar2 t_varchar2;'||chr(10)||
  'begin'||chr(10);

  ---------------------------------------
  -- Introduction
  ---------------------------------------
  --l_clob_all := l_clob_all||l_line||chr(10)||'Parsing query:'||chr(10)||l_sql||chr(10);

  ---------------------------------------
  -- Open parse cursor
  ---------------------------------------
  l_cur := dbms_sql.open_cursor;
  dbms_sql.parse(l_cur, l_sql, dbms_sql.native);

  ---------------------------------------
  -- Describe columns
  ---------------------------------------
  --l_clob_all := l_clob_all||l_line||chr(10)||'Describe columns:'||chr(10);

  dbms_sql.describe_columns(l_cur, l_col_cnt, l_rec_tab);

  /*
  for i in 1..l_rec_tab.count
  loop
    print_rec(l_rec_tab(i));
  end loop;

   */
  l_clob_all := l_clob_all||chr(10)||            
            '  '||chr(10)||l_line||chr(10)||
            '  -- start generation of records'||chr(10)||
            '  '||l_line||chr(10);

  ---------------------------------------
  -- Define columns
  ---------------------------------------
    --add null statement
  

  
  for i in 1..l_rec_tab.count
  loop
    if    l_rec_tab(i).col_type = cons_varchar2_code then --varchar2
      dbms_sql.define_column(l_cur, i, l_varchar2_col, l_rec_tab(i).col_max_len); 
    elsif l_rec_tab(i).col_type = cons_number_code then --number
      dbms_sql.define_column(l_cur, i, l_number_col); 
    --elsif l_rec_tab(i).col_type = cons_long_code then --long
    --  dbms_sql.define_column_long(l_cur, i); 
    elsif l_rec_tab(i).col_type = cons_date_code then --date
      dbms_sql.define_column(l_cur, i, l_date_col); 
    elsif l_rec_tab(i).col_type = cons_binary_float_code then --binary_float
      dbms_sql.define_column(l_cur, i, l_binary_float_col); 
    elsif l_rec_tab(i).col_type = cons_binary_double_code then --binary_double
      dbms_sql.define_column(l_cur, i, l_binary_double_col); 
--    elsif l_rec_tab(i).col_type = cons_raw_code then --raw
--      dbms_sql.define_column_raw(l_cur, i, l_raw_col, l_rec_tab(i).col_max_len); 
    elsif l_rec_tab(i).col_type = cons_rowid_code then  --rowid
      dbms_sql.define_column_rowid(l_cur, i, l_rowid_col); 
    elsif l_rec_tab(i).col_type = cons_char_code then  --char
      dbms_sql.define_column_char(l_cur, i, l_char_col, l_rec_tab(i).col_max_len); 
    elsif l_rec_tab(i).col_type = cons_clob_code then --clob
      dbms_sql.define_column(l_cur, i, l_clob_col); 
    elsif l_rec_tab(i).col_type = cons_timestamp_code then --timestamp
      dbms_sql.define_column(l_cur, i, l_timestamp_col); 
    elsif l_rec_tab(i).col_type = cons_timestamp_wtz_code then --timestamp with time zone
      dbms_sql.define_column(l_cur, i, l_timestamp_wtz_col); 
    elsif l_rec_tab(i).col_type = cons_rowid_code then --urowid
      dbms_sql.define_column(l_cur, i, l_urowid_col); 
    elsif l_rec_tab(i).col_type = cons_timestamp_lwtz_code then --timestamp with local time zone
      dbms_sql.define_column(l_cur, i, l_timestamp_wltz_col); 
    elsif l_rec_tab(i).col_type = cons_interval_ytm_code then --interval year to month
      dbms_sql.define_column(l_cur, i, l_interval_ytm_col); 
    elsif l_rec_tab(i).col_type = cons_interval_dts_code then --interval day to second
      dbms_sql.define_column(l_cur, i, l_interval_dts_col); 
    elsif l_rec_tab(i).col_type = cons_urowid_code then --urowid
      dbms_sql.define_column(l_cur, i, l_urowid_col); 
    else
      raise_application_error(-20001, 'Column: '||l_rec_tab(i).col_name||chr(10)||
                                      'Type not supported: '||l_rec_tab(i).col_type);
      --not supported
    end if;
  end loop;

  ---------------------------------------
  -- Execute cursor
  ---------------------------------------
  l_ret := dbms_sql.execute(l_cur);
  
 

    
  ---------------------------------------
  -- Fetch rows
  ---------------------------------------
  loop
    l_ret := dbms_sql.fetch_rows(l_cur);
    exit when l_ret=0;
    
    l_row_count := l_row_count + 1;

    ---------------------------------------
    -- Building INSERT - build column declarations
    ---------------------------------------
    l_clob_line := '';

    for i in 1..l_rec_tab.count
    loop
      if    l_rec_tab(i).col_type = cons_varchar2_code then --varchar2
        dbms_sql.column_value(l_cur, i, l_varchar2_col); 
        l_clob := l_varchar2_col;
      elsif l_rec_tab(i).col_type = cons_number_code then --number
        dbms_sql.column_value(l_cur, i, l_number_col); 
        l_clob := to_char(l_number_col);
--      elsif l_rec_tab(i).col_type = cons_long_code then --long
--        dbms_sql.column_value(l_cur, i, l_long_col); 
--        l_clob := l_long_col;
      elsif l_rec_tab(i).col_type = cons_date_code then --date
        dbms_sql.column_value(l_cur, i, l_date_col); 
        l_clob := to_char(l_date_col, cons_date_frm);
      elsif l_rec_tab(i).col_type = cons_binary_float_code then --binary_float
        dbms_sql.column_value(l_cur, i, l_binary_float_col); 
        l_clob := to_char(l_binary_float_col);
      elsif l_rec_tab(i).col_type = cons_binary_double_code then --binary_double
        dbms_sql.column_value(l_cur, i, l_binary_double_col); 
        l_clob := to_char(l_binary_double_col);
--      elsif l_rec_tab(i).col_type = cons_raw_code then --raw
--        dbms_sql.column_value(l_cur, i, l_raw_col); 
--        l_clob := to_char(l_raw_col);
      elsif l_rec_tab(i).col_type = cons_rowid_code then --rowid
        dbms_sql.column_value(l_cur, i, l_rowid_col); 
        l_clob := to_char(l_rowid_col);
      elsif l_rec_tab(i).col_type = cons_char_code then --char
        dbms_sql.column_value_char(l_cur, i, l_char_col); 
        l_clob := substr(l_char_col, 1, l_rec_tab(i).col_max_len);
      elsif l_rec_tab(i).col_type = cons_clob_code then --clob
        dbms_sql.column_value(l_cur, i, l_clob_col); 
        l_clob := l_clob_col;
      elsif l_rec_tab(i).col_type = cons_timestamp_code then --timestamp
        dbms_sql.column_value(l_cur, i, l_timestamp_col); 
        l_clob := to_char(l_timestamp_col, cons_timestamp_frm);
      elsif l_rec_tab(i).col_type = cons_timestamp_wtz_code then --timestamp with time zone
        dbms_sql.column_value(l_cur, i, l_timestamp_wtz_col); 
        l_clob := to_char(l_timestamp_wtz_col, cons_timestamp_wtz_frm);
      elsif l_rec_tab(i).col_type = cons_interval_ytm_code then --interval year to month
        dbms_sql.column_value(l_cur, i, l_interval_ytm_col); 
        l_clob := to_char(l_interval_ytm_col);
      elsif l_rec_tab(i).col_type = cons_interval_dts_code then --interval day to second
        dbms_sql.column_value(l_cur, i, l_interval_dts_col); 
        l_clob := to_char(l_interval_dts_col);
      elsif l_rec_tab(i).col_type = cons_urowid_code then --urowid
        dbms_sql.column_value(l_cur, i, l_urowid_col); 
        l_clob := to_char(l_urowid_col);
      elsif l_rec_tab(i).col_type = cons_timestamp_lwtz_code then --timestamp with local time zone
        dbms_sql.column_value(l_cur, i, l_timestamp_wltz_col); 
        l_clob := to_char(l_timestamp_wltz_col, cons_timestamp_wtz_frm);
      end if;
      
      if l_rec_tab(i).col_type in ( cons_clob_code) then 
           if ( length(l_clob) > clobSplitCount ) then
               while ( length(l_clob) >  (idxCount*clobSplitCount) ) loop
                 if (idxCount=1) then l_clob_line := l_clob_line||'  l_clob('||to_char(i)||') := q'''||l_separator||substr(l_clob,1,clobSplitCount)||l_separator||''';'||chr(10);
                 else l_clob_line := l_clob_line||'l_clob('||to_char(i)||') :=l_clob('||to_char(i)||')||q'''||l_separator||substr(l_clob, (idxCount-1)*clobSplitCount+1, clobSplitCount )||l_separator||''';'||chr(10);
                 end if;
                 idxCount :=idxCount+1;
               end loop;
                l_clob_line := l_clob_line||' l_clob('||to_char(i)||') :=l_clob('||to_char(i)||')|| q'''||l_separator||substr(l_clob, (idxCount-1)*clobSplitCount+1)||l_separator||''';'||chr(10);
                idxCount :=1;--reset idxCount to 1
           else 
             l_clob_line := l_clob_line||'  l_clob('||to_char(i)||') :=q'''||l_separator||TRIM(l_clob)||l_separator||''';'||chr(10);
          end if;
      elsif l_rec_tab(i).col_type in (  cons_char_code, cons_varchar2_code) then
        l_clob_line := l_clob_line||'  l_clob('||to_char(i)||') :=q'''||l_separator||TRIM(l_clob)||l_separator||''';'||chr(10); 
         else
        l_clob_line := l_clob_line||'  l_varchar2('||to_char(i)||') :=q'''||l_separator||l_clob||l_separator||''';'||chr(10);
      end if;
    
     
      
    end loop;

    l_clob_all := l_clob_all||chr(10)||l_clob_line;

    ---------------------------------------
    -- Building INSERT - build column list
    ---------------------------------------
    l_clob_all := l_clob_all||chr(10)||
              '  insert into '||p_new_table_name||chr(10)||
              '  ('||chr(10);

    for i in 1..l_rec_tab.count
    loop
      if i = 1 then
        l_clob_all := l_clob_all||'     '||l_rec_tab(i).col_name||chr(10);
      else  
        l_clob_all := l_clob_all||'    ,'||l_rec_tab(i).col_name||chr(10);
      end if;  
    end loop;    

    l_clob_all := l_clob_all||
              '  )'||chr(10)||
              '  values'||chr(10)||
              '  ('||chr(10);

    ---------------------------------------
    -- Building INSERT - build values
    ---------------------------------------
    for i in 1..l_rec_tab.count
    loop
      if i!=1 then
        l_clob_all := l_clob_all||'    ,';
      else  
        l_clob_all := l_clob_all||'     ';
      end if;

      if l_rec_tab(i).col_type = cons_number_code then --number
        l_clob_all := l_clob_all||'to_number(l_varchar2('||to_char(i)||'))'||chr(10);
--      elsif l_rec_tab(i).col_type = cons_long_code then --long
--        l_clob := l_long_col;
      elsif l_rec_tab(i).col_type = cons_clob_code then --clob 
        l_clob_all := l_clob_all||'l_clob('||to_char(i)||')'||chr(10);
        
      elsif l_rec_tab(i).col_type = cons_char_code then --timestamp with local time zone
        l_clob_all := l_clob_all||'to_char(l_clob('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_varchar2_code then --timestamp with local time zone
        l_clob_all := l_clob_all||'to_char(l_clob('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_date_code then --date
        l_clob_all := l_clob_all||'to_date(l_varchar2('||to_char(i)||'),'''||cons_date_frm||''')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_timestamp_code then --timestamp
        l_clob_all := l_clob_all||'to_timestamp(l_varchar2('||to_char(i)||'),'''||cons_timestamp_frm||''')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_timestamp_wtz_code then --timestamp with time zone
        l_clob_all := l_clob_all||'to_timestamp_tz(l_varchar2('||to_char(i)||'),'''||cons_timestamp_wtz_frm||''')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_interval_ytm_code then --interval year to month
        l_clob_all := l_clob_all||'to_yminterval(l_varchar2('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_interval_dts_code then --interval day to second
        l_clob_all := l_clob_all||'to_dsinterval(l_varchar2('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_timestamp_lwtz_code then --timestamp with local time zone
        l_clob_all := l_clob_all||'to_timestamp_tz(l_varchar2('||to_char(i)||'),'''||cons_timestamp_wtz_frm||''')'||chr(10);
      else  
        l_clob_all := l_clob_all||'l_varchar2('||to_char(i)||')'||chr(10);
      end if;  
    end loop; 

    l_clob_all := l_clob_all||'  );'||chr(10);
  end loop;
  
  if (l_row_count=0) then
    l_clob_all := l_clob_all|| 'NULL;'||chr(10);
  end if;
  ---------------------------------------
  -- Building INSERT - end of code
  ---------------------------------------
  l_clob_all := l_clob_all||chr(10)||'end;';
  l_clob_all := l_clob_all||chr(10)||'/';

  ---------------------------------------
  -- Close cursor
  ---------------------------------------
  dbms_sql.close_cursor(l_cur);

  return l_clob_all;
end;

/
--------------------------------------------------------

--  DDL for Function FN_GET_METADATA_INSERTS_NEW

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."FN_GET_METADATA_INSERTS_NEW" 
(
  p_sql                        clob, 
  p_new_table_name             varchar2
)
return clob
is
  l_cur                        number;
  l_sql                        clob := p_sql;
  l_ret                        number;
  l_col_cnt                    number;
  l_rec_tab                    dbms_sql.desc_tab;
  l_row_count                  number :=0;

  l_separator                  char(1) := '!';
  l_clob                       clob;
  l_clob_line                  clob;
  l_clob_ins                   clob;
  l_clob_all                   clob;
  l_line                       clob := '-----------------------------------';
  idxClob                      number;
  IDXCOUNT                     NUMBER :=1;
  clobSplitCount               number:=3000;
   
  cons_date_frm                varchar2(32) := 'MM/DD/YYYY HH24:MI:SS';
  cons_timestamp_frm           varchar2(32) := 'MM/DD/YYYY HH24:MI:SSXFF';
  cons_timestamp_wtz_frm       varchar2(32) := 'MM/DD/YYYY HH24:MI:SSXFF TZR';

  cons_varchar2_code           number := 1;
  cons_nvarchar2_code          number := 1;
  cons_number_code             number := 2;
  cons_float_code              number := 2;
  cons_long_code               number := 8;
  cons_date_code               number := 12;
  cons_binary_float_code       number := 100;
  cons_binary_double_code      number := 101;
  cons_timestamp_code          number := 180;
  cons_timestamp_wtz_code      number := 181;
  cons_timestamp_lwtz_code     number := 231;
  cons_interval_ytm_code       number := 182;
  cons_interval_dts_code       number := 183;
  cons_raw_code                number := 23;
  cons_long_raw_code           number := 24;
  cons_rowid_code              number := 11;
  cons_urowid_code             number := 208;
  cons_char_code               number := 96;
  cons_nchar_code              number := 96;
  cons_clob_code               number := 112;
  cons_nclob_code              number := 112;
  cons_blob_code               number := 113;
  cons_bfile_code              number := 114;

  -------------------------------------
  -- Supported types
  -------------------------------------
  l_varchar2_col                varchar2(32767); --1
  l_number_col                  number;          --2
  --l_long_col                    long;          --8 - not supported
  l_date_col                    date;            --12
  --l_raw_col                     raw(2000);     --23 - not supported
  l_rowid_col                   rowid;           --69
  l_char_col                    char(2000);      --96
  l_binary_float_col            binary_float;    --100
  l_binary_double_col           binary_double;   --101
  l_clob_col                    clob;            --112
  l_timestamp_col               timestamp(9);    --180
  l_timestamp_wtz_col           timestamp(9) with time zone;    --181
  l_interval_ytm_col            interval year(9) to month;      --182
  l_interval_dts_col            interval day(9) to second(2);   --183
  l_urowid_col                  urowid;                         --208
  l_timestamp_wltz_col          timestamp with local time zone; --231
  --l_nchar_col                   nchar(2000); --96 the same as char
  --l_nclob_col                   nclob; --112 the same as clob
  --l_blob_col - not supported
  --l_bfile_col - not supported
  --l_long_raw_col - not supported

  procedure print_rec(rec in dbms_sql.desc_rec) is
  begin
    l_clob_all := l_clob_all||chr(10)||
      'col_type            =    ' || rec.col_type||chr(10)||
      'col_maxlen          =    ' || rec.col_max_len||chr(10)||
      'col_name            =    ' || rec.col_name||chr(10)||
      'col_name_len        =    ' || rec.col_name_len||chr(10)||
      'col_schema_name     =    ' || rec.col_schema_name||chr(10)||
      'col_schema_name_len =    ' || rec.col_schema_name_len||chr(10)||
      'col_precision       =    ' || rec.col_precision||chr(10)||
      'col_scale           =    ' || rec.col_scale||chr(10)||
      'col_null_ok         =    ';

    if (rec.col_null_ok) then
      l_clob_all := l_clob_all||'true'||chr(10);
    else
      l_clob_all := l_clob_all||'false'||chr(10);
    end if;
  end;  
begin
  ---------------------------------------
  -- INSERT - header generation
  ---------------------------------------
  l_clob_all := 
  'declare'||chr(10)||
  '  type   t_clob is table of clob index by binary_integer;'||chr(10)||
  '  l_clob t_clob;'||chr(10)||
  '  type   t_varchar2 is table of varchar2(64) index by binary_integer;'||chr(10)||
  '  l_varchar2 t_varchar2;'||chr(10)||
  'begin'||chr(10);

  ---------------------------------------
  -- Introduction
  ---------------------------------------
  --l_clob_all := l_clob_all||l_line||chr(10)||'Parsing query:'||chr(10)||l_sql||chr(10);

  ---------------------------------------
  -- Open parse cursor
  ---------------------------------------
  l_cur := dbms_sql.open_cursor;
  dbms_sql.parse(l_cur, l_sql, dbms_sql.native);

  ---------------------------------------
  -- Describe columns
  ---------------------------------------
  --l_clob_all := l_clob_all||l_line||chr(10)||'Describe columns:'||chr(10);

  dbms_sql.describe_columns(l_cur, l_col_cnt, l_rec_tab);

  /*
  for i in 1..l_rec_tab.count
  loop
    print_rec(l_rec_tab(i));
  end loop;

   */
  l_clob_all := l_clob_all||chr(10)||            
            '  '||chr(10)||l_line||chr(10)||
            '  -- start generation of records'||chr(10)||
            '  '||l_line||chr(10);

  ---------------------------------------
  -- Define columns
  ---------------------------------------
    --add null statement
  

  
  for i in 1..l_rec_tab.count
  loop
    if    l_rec_tab(i).col_type = cons_varchar2_code then --varchar2
      dbms_sql.define_column(l_cur, i, l_varchar2_col, l_rec_tab(i).col_max_len); 
    elsif l_rec_tab(i).col_type = cons_number_code then --number
      dbms_sql.define_column(l_cur, i, l_number_col); 
    --elsif l_rec_tab(i).col_type = cons_long_code then --long
    --  dbms_sql.define_column_long(l_cur, i); 
    elsif l_rec_tab(i).col_type = cons_date_code then --date
      dbms_sql.define_column(l_cur, i, l_date_col); 
    elsif l_rec_tab(i).col_type = cons_binary_float_code then --binary_float
      dbms_sql.define_column(l_cur, i, l_binary_float_col); 
    elsif l_rec_tab(i).col_type = cons_binary_double_code then --binary_double
      dbms_sql.define_column(l_cur, i, l_binary_double_col); 
--    elsif l_rec_tab(i).col_type = cons_raw_code then --raw
--      dbms_sql.define_column_raw(l_cur, i, l_raw_col, l_rec_tab(i).col_max_len); 
    elsif l_rec_tab(i).col_type = cons_rowid_code then  --rowid
      dbms_sql.define_column_rowid(l_cur, i, l_rowid_col); 
    elsif l_rec_tab(i).col_type = cons_char_code then  --char
      dbms_sql.define_column_char(l_cur, i, l_char_col, l_rec_tab(i).col_max_len); 
    elsif l_rec_tab(i).col_type = cons_clob_code then --clob
      dbms_sql.define_column(l_cur, i, l_clob_col); 
    elsif l_rec_tab(i).col_type = cons_timestamp_code then --timestamp
      dbms_sql.define_column(l_cur, i, l_timestamp_col); 
    elsif l_rec_tab(i).col_type = cons_timestamp_wtz_code then --timestamp with time zone
      dbms_sql.define_column(l_cur, i, l_timestamp_wtz_col); 
    elsif l_rec_tab(i).col_type = cons_rowid_code then --urowid
      dbms_sql.define_column(l_cur, i, l_urowid_col); 
    elsif l_rec_tab(i).col_type = cons_timestamp_lwtz_code then --timestamp with local time zone
      dbms_sql.define_column(l_cur, i, l_timestamp_wltz_col); 
    elsif l_rec_tab(i).col_type = cons_interval_ytm_code then --interval year to month
      dbms_sql.define_column(l_cur, i, l_interval_ytm_col); 
    elsif l_rec_tab(i).col_type = cons_interval_dts_code then --interval day to second
      dbms_sql.define_column(l_cur, i, l_interval_dts_col); 
    elsif l_rec_tab(i).col_type = cons_urowid_code then --urowid
      dbms_sql.define_column(l_cur, i, l_urowid_col); 
    else
      raise_application_error(-20001, 'Column: '||l_rec_tab(i).col_name||chr(10)||
                                      'Type not supported: '||l_rec_tab(i).col_type);
      --not supported
    end if;
  end loop;

  ---------------------------------------
  -- Execute cursor
  ---------------------------------------
  l_ret := dbms_sql.execute(l_cur);
  
 

    
  ---------------------------------------
  -- Fetch rows
  ---------------------------------------
  loop
    l_ret := dbms_sql.fetch_rows(l_cur);
    exit when l_ret=0;
    
    l_row_count := l_row_count + 1;

    ---------------------------------------
    -- Building INSERT - build column declarations
    ---------------------------------------
    l_clob_line := '';

    for i in 1..l_rec_tab.count
    loop
      if    l_rec_tab(i).col_type = cons_varchar2_code then --varchar2
        dbms_sql.column_value(l_cur, i, l_varchar2_col); 
        l_clob := l_varchar2_col;
      elsif l_rec_tab(i).col_type = cons_number_code then --number
        dbms_sql.column_value(l_cur, i, l_number_col); 
        l_clob := to_char(l_number_col);
--      elsif l_rec_tab(i).col_type = cons_long_code then --long
--        dbms_sql.column_value(l_cur, i, l_long_col); 
--        l_clob := l_long_col;
      elsif l_rec_tab(i).col_type = cons_date_code then --date
        dbms_sql.column_value(l_cur, i, l_date_col); 
        l_clob := to_char(l_date_col, cons_date_frm);
      elsif l_rec_tab(i).col_type = cons_binary_float_code then --binary_float
        dbms_sql.column_value(l_cur, i, l_binary_float_col); 
        l_clob := to_char(l_binary_float_col);
      elsif l_rec_tab(i).col_type = cons_binary_double_code then --binary_double
        dbms_sql.column_value(l_cur, i, l_binary_double_col); 
        l_clob := to_char(l_binary_double_col);
--      elsif l_rec_tab(i).col_type = cons_raw_code then --raw
--        dbms_sql.column_value(l_cur, i, l_raw_col); 
--        l_clob := to_char(l_raw_col);
      elsif l_rec_tab(i).col_type = cons_rowid_code then --rowid
        dbms_sql.column_value(l_cur, i, l_rowid_col); 
        l_clob := to_char(l_rowid_col);
      elsif l_rec_tab(i).col_type = cons_char_code then --char
        dbms_sql.column_value_char(l_cur, i, l_char_col); 
        l_clob := substr(l_char_col, 1, l_rec_tab(i).col_max_len);
      elsif l_rec_tab(i).col_type = cons_clob_code then --clob
        dbms_sql.column_value(l_cur, i, l_clob_col); 
        l_clob := l_clob_col;
      elsif l_rec_tab(i).col_type = cons_timestamp_code then --timestamp
        dbms_sql.column_value(l_cur, i, l_timestamp_col); 
        l_clob := to_char(l_timestamp_col, cons_timestamp_frm);
      elsif l_rec_tab(i).col_type = cons_timestamp_wtz_code then --timestamp with time zone
        dbms_sql.column_value(l_cur, i, l_timestamp_wtz_col); 
        l_clob := to_char(l_timestamp_wtz_col, cons_timestamp_wtz_frm);
      elsif l_rec_tab(i).col_type = cons_interval_ytm_code then --interval year to month
        dbms_sql.column_value(l_cur, i, l_interval_ytm_col); 
        l_clob := to_char(l_interval_ytm_col);
      elsif l_rec_tab(i).col_type = cons_interval_dts_code then --interval day to second
        dbms_sql.column_value(l_cur, i, l_interval_dts_col); 
        l_clob := to_char(l_interval_dts_col);
      elsif l_rec_tab(i).col_type = cons_urowid_code then --urowid
        dbms_sql.column_value(l_cur, i, l_urowid_col); 
        l_clob := to_char(l_urowid_col);
      elsif l_rec_tab(i).col_type = cons_timestamp_lwtz_code then --timestamp with local time zone
        dbms_sql.column_value(l_cur, i, l_timestamp_wltz_col); 
        l_clob := to_char(l_timestamp_wltz_col, cons_timestamp_wtz_frm);
      end if;
      
      if l_rec_tab(i).col_type in ( cons_clob_code) then
           IF ( LENGTH(L_CLOB) > CLOBSPLITCOUNT ) THEN
             l_clob_line := l_clob_line||'  l_clob('||to_char(i)||') := to_clob( q'''||l_separator||substr(l_clob,0,clobSplitCount)||l_separator||''')';
             idxClob :=  trunc(length(l_clob)/clobSplitCount);
             --loop through and split every 25K chars from query string.
             WHILE (IDXCOUNT < IDXCLOB -1) LOOP              
                l_clob_line := l_clob_line||'||to_clob(q'''||l_separator||substr(l_clob, (idxCount*clobSplitCount)+1, clobSplitCount*(idxCount+1) )||l_separator||''')';
                idxCount := idxCount+1;
              END LOOP;  
                l_clob_line := l_clob_line||'||to_clob(q'''||l_separator||substr(l_clob, (clobSplitCount*idxCount) + 1 )||l_separator||''');'||chr(10);
           ELSE 
              l_clob_line := l_clob_line||'  l_clob('||to_char(i)||') :=to_clob(q'''||l_separator||TRIM(l_clob)||l_separator||''');'||chr(10);
           end if;
      elsif l_rec_tab(i).col_type in (  cons_char_code, cons_varchar2_code) then
        l_clob_line := l_clob_line||'  l_clob('||to_char(i)||') :=q'''||l_separator||TRIM(l_clob)||l_separator||''';'||chr(10); 
         else
        l_clob_line := l_clob_line||'  l_varchar2('||to_char(i)||') :=q'''||l_separator||l_clob||l_separator||''';'||chr(10);
      end if;
    
     
      
    end loop;

    l_clob_all := l_clob_all||chr(10)||l_clob_line;

    ---------------------------------------
    -- Building INSERT - build column list
    ---------------------------------------
    l_clob_all := l_clob_all||chr(10)||
              '  insert into '||p_new_table_name||chr(10)||
              '  ('||chr(10);

    for i in 1..l_rec_tab.count
    loop
      if i = 1 then
        l_clob_all := l_clob_all||'     '||l_rec_tab(i).col_name||chr(10);
      else  
        l_clob_all := l_clob_all||'    ,'||l_rec_tab(i).col_name||chr(10);
      end if;  
    end loop;    

    l_clob_all := l_clob_all||
              '  )'||chr(10)||
              '  values'||chr(10)||
              '  ('||chr(10);

    ---------------------------------------
    -- Building INSERT - build values
    ---------------------------------------
    for i in 1..l_rec_tab.count
    loop
      if i!=1 then
        l_clob_all := l_clob_all||'    ,';
      else  
        l_clob_all := l_clob_all||'     ';
      end if;

      if l_rec_tab(i).col_type = cons_number_code then --number
        l_clob_all := l_clob_all||'to_number(l_varchar2('||to_char(i)||'))'||chr(10);
--      elsif l_rec_tab(i).col_type = cons_long_code then --long
--        l_clob := l_long_col;
      elsif l_rec_tab(i).col_type = cons_clob_code then --clob
        l_clob_all := l_clob_all||'l_clob('||to_char(i)||')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_char_code then --timestamp with local time zone
        l_clob_all := l_clob_all||'to_char(l_clob('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_varchar2_code then --timestamp with local time zone
        l_clob_all := l_clob_all||'to_char(l_clob('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_date_code then --date
        l_clob_all := l_clob_all||'to_date(l_varchar2('||to_char(i)||'),'''||cons_date_frm||''')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_timestamp_code then --timestamp
        l_clob_all := l_clob_all||'to_timestamp(l_varchar2('||to_char(i)||'),'''||cons_timestamp_frm||''')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_timestamp_wtz_code then --timestamp with time zone
        l_clob_all := l_clob_all||'to_timestamp_tz(l_varchar2('||to_char(i)||'),'''||cons_timestamp_wtz_frm||''')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_interval_ytm_code then --interval year to month
        l_clob_all := l_clob_all||'to_yminterval(l_varchar2('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_interval_dts_code then --interval day to second
        l_clob_all := l_clob_all||'to_dsinterval(l_varchar2('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_timestamp_lwtz_code then --timestamp with local time zone
        l_clob_all := l_clob_all||'to_timestamp_tz(l_varchar2('||to_char(i)||'),'''||cons_timestamp_wtz_frm||''')'||chr(10);
      else  
        l_clob_all := l_clob_all||'l_varchar2('||to_char(i)||')'||chr(10);
      end if;  
    end loop; 

    l_clob_all := l_clob_all||'  );'||chr(10);
  end loop;
  
  if (l_row_count=0) then
    l_clob_all := l_clob_all|| 'NULL;'||chr(10);
  end if;
  ---------------------------------------
  -- Building INSERT - end of code
  ---------------------------------------
  l_clob_all := l_clob_all||chr(10)||'end;';
  l_clob_all := l_clob_all||chr(10)||'/';

  ---------------------------------------
  -- Close cursor
  ---------------------------------------
  dbms_sql.close_cursor(l_cur);

  return l_clob_all;
end;

/
--------------------------------------------------------

--  DDL for Function FN_GET_METADATA_INSERTS_Q1

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."FN_GET_METADATA_INSERTS_Q1" 
(
  p_sql                        clob, 
  p_new_table_name             varchar2
)
return clob
is
  l_cur                        number;
  l_sql                        clob := p_sql;
  l_ret                        number;
  l_col_cnt                    number;
  l_rec_tab                    dbms_sql.desc_tab;
  l_row_count                  number :=0;

  l_separator                  char(1) := '!';
  l_clob                       clob;
  l_clob_line                  clob;
  l_clob_ins                   clob;
  l_clob_all                   clob;
  l_line                       clob := '-----------------------------------';
  idxClob                      number;
  idxCount                     number :=1;
  clobSplitCount               number:=25000;
   
  cons_date_frm                varchar2(32) := 'MM/DD/YYYY HH24:MI:SS';
  cons_timestamp_frm           varchar2(32) := 'MM/DD/YYYY HH24:MI:SSXFF';
  cons_timestamp_wtz_frm       varchar2(32) := 'MM/DD/YYYY HH24:MI:SSXFF TZR';

  cons_varchar2_code           number := 1;
  cons_nvarchar2_code          number := 1;
  cons_number_code             number := 2;
  cons_float_code              number := 2;
  cons_long_code               number := 8;
  cons_date_code               number := 12;
  cons_binary_float_code       number := 100;
  cons_binary_double_code      number := 101;
  cons_timestamp_code          number := 180;
  cons_timestamp_wtz_code      number := 181;
  cons_timestamp_lwtz_code     number := 231;
  cons_interval_ytm_code       number := 182;
  cons_interval_dts_code       number := 183;
  cons_raw_code                number := 23;
  cons_long_raw_code           number := 24;
  cons_rowid_code              number := 11;
  cons_urowid_code             number := 208;
  cons_char_code               number := 96;
  cons_nchar_code              number := 96;
  cons_clob_code               number := 112;
  cons_nclob_code              number := 112;
  cons_blob_code               number := 113;
  cons_bfile_code              number := 114;

  -------------------------------------
  -- Supported types
  -------------------------------------
  l_varchar2_col                varchar2(32767); --1
  l_number_col                  number;          --2
  --l_long_col                    long;          --8 - not supported
  l_date_col                    date;            --12
  --l_raw_col                     raw(2000);     --23 - not supported
  l_rowid_col                   rowid;           --69
  l_char_col                    char(2000);      --96
  l_binary_float_col            binary_float;    --100
  l_binary_double_col           binary_double;   --101
  l_clob_col                    clob;            --112
  l_timestamp_col               timestamp(9);    --180
  l_timestamp_wtz_col           timestamp(9) with time zone;    --181
  l_interval_ytm_col            interval year(9) to month;      --182
  l_interval_dts_col            interval day(9) to second(2);   --183
  l_urowid_col                  urowid;                         --208
  l_timestamp_wltz_col          timestamp with local time zone; --231
  --l_nchar_col                   nchar(2000); --96 the same as char
  --l_nclob_col                   nclob; --112 the same as clob
  --l_blob_col - not supported
  --l_bfile_col - not supported
  --l_long_raw_col - not supported

  procedure print_rec(rec in dbms_sql.desc_rec) is
  begin
    l_clob_all := l_clob_all||chr(10)||
      'col_type            =    ' || rec.col_type||chr(10)||
      'col_maxlen          =    ' || rec.col_max_len||chr(10)||
      'col_name            =    ' || rec.col_name||chr(10)||
      'col_name_len        =    ' || rec.col_name_len||chr(10)||
      'col_schema_name     =    ' || rec.col_schema_name||chr(10)||
      'col_schema_name_len =    ' || rec.col_schema_name_len||chr(10)||
      'col_precision       =    ' || rec.col_precision||chr(10)||
      'col_scale           =    ' || rec.col_scale||chr(10)||
      'col_null_ok         =    ';

    if (rec.col_null_ok) then
      l_clob_all := l_clob_all||'true'||chr(10);
    else
      l_clob_all := l_clob_all||'false'||chr(10);
    end if;
  end;  
begin
  ---------------------------------------
  -- INSERT - header generation
  ---------------------------------------
  l_clob_all := 
  'declare'||chr(10)||
  '  type   t_clob is table of clob index by binary_integer;'||chr(10)||
  '  l_clob t_clob;'||chr(10)||
  '  type   t_varchar2 is table of varchar2(64) index by binary_integer;'||chr(10)||
  '  l_varchar2 t_varchar2;'||chr(10)||
  'begin'||chr(10);

  ---------------------------------------
  -- Introduction
  ---------------------------------------
  --l_clob_all := l_clob_all||l_line||chr(10)||'Parsing query:'||chr(10)||l_sql||chr(10);

  ---------------------------------------
  -- Open parse cursor
  ---------------------------------------
  l_cur := dbms_sql.open_cursor;
  dbms_sql.parse(l_cur, l_sql, dbms_sql.native);

  ---------------------------------------
  -- Describe columns
  ---------------------------------------
  --l_clob_all := l_clob_all||l_line||chr(10)||'Describe columns:'||chr(10);

  dbms_sql.describe_columns(l_cur, l_col_cnt, l_rec_tab);

  /*
  for i in 1..l_rec_tab.count
  loop
    print_rec(l_rec_tab(i));
  end loop;

   */
  l_clob_all := l_clob_all||chr(10)||            
            '  '||chr(10)||l_line||chr(10)||
            '  -- start generation of records'||chr(10)||
            '  '||l_line||chr(10);

  ---------------------------------------
  -- Define columns
  ---------------------------------------
    --add null statement
  

  
  for i in 1..l_rec_tab.count
  loop
    if    l_rec_tab(i).col_type = cons_varchar2_code then --varchar2
      dbms_sql.define_column(l_cur, i, l_varchar2_col, l_rec_tab(i).col_max_len); 
    elsif l_rec_tab(i).col_type = cons_number_code then --number
      dbms_sql.define_column(l_cur, i, l_number_col); 
    --elsif l_rec_tab(i).col_type = cons_long_code then --long
    --  dbms_sql.define_column_long(l_cur, i); 
    elsif l_rec_tab(i).col_type = cons_date_code then --date
      dbms_sql.define_column(l_cur, i, l_date_col); 
    elsif l_rec_tab(i).col_type = cons_binary_float_code then --binary_float
      dbms_sql.define_column(l_cur, i, l_binary_float_col); 
    elsif l_rec_tab(i).col_type = cons_binary_double_code then --binary_double
      dbms_sql.define_column(l_cur, i, l_binary_double_col); 
--    elsif l_rec_tab(i).col_type = cons_raw_code then --raw
--      dbms_sql.define_column_raw(l_cur, i, l_raw_col, l_rec_tab(i).col_max_len); 
    elsif l_rec_tab(i).col_type = cons_rowid_code then  --rowid
      dbms_sql.define_column_rowid(l_cur, i, l_rowid_col); 
    elsif l_rec_tab(i).col_type = cons_char_code then  --char
      dbms_sql.define_column_char(l_cur, i, l_char_col, l_rec_tab(i).col_max_len); 
    elsif l_rec_tab(i).col_type = cons_clob_code then --clob
      dbms_sql.define_column(l_cur, i, l_clob_col); 
    elsif l_rec_tab(i).col_type = cons_timestamp_code then --timestamp
      dbms_sql.define_column(l_cur, i, l_timestamp_col); 
    elsif l_rec_tab(i).col_type = cons_timestamp_wtz_code then --timestamp with time zone
      dbms_sql.define_column(l_cur, i, l_timestamp_wtz_col); 
    elsif l_rec_tab(i).col_type = cons_rowid_code then --urowid
      dbms_sql.define_column(l_cur, i, l_urowid_col); 
    elsif l_rec_tab(i).col_type = cons_timestamp_lwtz_code then --timestamp with local time zone
      dbms_sql.define_column(l_cur, i, l_timestamp_wltz_col); 
    elsif l_rec_tab(i).col_type = cons_interval_ytm_code then --interval year to month
      dbms_sql.define_column(l_cur, i, l_interval_ytm_col); 
    elsif l_rec_tab(i).col_type = cons_interval_dts_code then --interval day to second
      dbms_sql.define_column(l_cur, i, l_interval_dts_col); 
    elsif l_rec_tab(i).col_type = cons_urowid_code then --urowid
      dbms_sql.define_column(l_cur, i, l_urowid_col); 
    else
      raise_application_error(-20001, 'Column: '||l_rec_tab(i).col_name||chr(10)||
                                      'Type not supported: '||l_rec_tab(i).col_type);
      --not supported
    end if;
  end loop;

  ---------------------------------------
  -- Execute cursor
  ---------------------------------------
  l_ret := dbms_sql.execute(l_cur);
  
 

    
  ---------------------------------------
  -- Fetch rows
  ---------------------------------------
  loop
    l_ret := dbms_sql.fetch_rows(l_cur);
    exit when l_ret=0;
    
    l_row_count := l_row_count + 1;

    ---------------------------------------
    -- Building INSERT - build column declarations
    ---------------------------------------
    l_clob_line := '';

    for i in 1..l_rec_tab.count
    loop
      if    l_rec_tab(i).col_type = cons_varchar2_code then --varchar2
        dbms_sql.column_value(l_cur, i, l_varchar2_col); 
        l_clob := l_varchar2_col;
      elsif l_rec_tab(i).col_type = cons_number_code then --number
        dbms_sql.column_value(l_cur, i, l_number_col); 
        l_clob := to_char(l_number_col);
--      elsif l_rec_tab(i).col_type = cons_long_code then --long
--        dbms_sql.column_value(l_cur, i, l_long_col); 
--        l_clob := l_long_col;
      elsif l_rec_tab(i).col_type = cons_date_code then --date
        dbms_sql.column_value(l_cur, i, l_date_col); 
        l_clob := to_char(l_date_col, cons_date_frm);
      elsif l_rec_tab(i).col_type = cons_binary_float_code then --binary_float
        dbms_sql.column_value(l_cur, i, l_binary_float_col); 
        l_clob := to_char(l_binary_float_col);
      elsif l_rec_tab(i).col_type = cons_binary_double_code then --binary_double
        dbms_sql.column_value(l_cur, i, l_binary_double_col); 
        l_clob := to_char(l_binary_double_col);
--      elsif l_rec_tab(i).col_type = cons_raw_code then --raw
--        dbms_sql.column_value(l_cur, i, l_raw_col); 
--        l_clob := to_char(l_raw_col);
      elsif l_rec_tab(i).col_type = cons_rowid_code then --rowid
        dbms_sql.column_value(l_cur, i, l_rowid_col); 
        l_clob := to_char(l_rowid_col);
      elsif l_rec_tab(i).col_type = cons_char_code then --char
        dbms_sql.column_value_char(l_cur, i, l_char_col); 
        l_clob := substr(l_char_col, 1, l_rec_tab(i).col_max_len);
      elsif l_rec_tab(i).col_type = cons_clob_code then --clob
        dbms_sql.column_value(l_cur, i, l_clob_col); 
        l_clob := l_clob_col;
      elsif l_rec_tab(i).col_type = cons_timestamp_code then --timestamp
        dbms_sql.column_value(l_cur, i, l_timestamp_col); 
        l_clob := to_char(l_timestamp_col, cons_timestamp_frm);
      elsif l_rec_tab(i).col_type = cons_timestamp_wtz_code then --timestamp with time zone
        dbms_sql.column_value(l_cur, i, l_timestamp_wtz_col); 
        l_clob := to_char(l_timestamp_wtz_col, cons_timestamp_wtz_frm);
      elsif l_rec_tab(i).col_type = cons_interval_ytm_code then --interval year to month
        dbms_sql.column_value(l_cur, i, l_interval_ytm_col); 
        l_clob := to_char(l_interval_ytm_col);
      elsif l_rec_tab(i).col_type = cons_interval_dts_code then --interval day to second
        dbms_sql.column_value(l_cur, i, l_interval_dts_col); 
        l_clob := to_char(l_interval_dts_col);
      elsif l_rec_tab(i).col_type = cons_urowid_code then --urowid
        dbms_sql.column_value(l_cur, i, l_urowid_col); 
        l_clob := to_char(l_urowid_col);
      elsif l_rec_tab(i).col_type = cons_timestamp_lwtz_code then --timestamp with local time zone
        dbms_sql.column_value(l_cur, i, l_timestamp_wltz_col); 
        l_clob := to_char(l_timestamp_wltz_col, cons_timestamp_wtz_frm);
      end if;
      
      if l_rec_tab(i).col_type in ( cons_clob_code) then
        l_clob_line := l_clob_line||'  l_clob('||to_char(i)||') :=q'''||l_separator||TRIM(l_clob)||l_separator||''';'||chr(10);
      elsif l_rec_tab(i).col_type in (  cons_char_code, cons_varchar2_code) then
        l_clob_line := l_clob_line||'  l_clob('||to_char(i)||') :=q'''||l_separator||TRIM(l_clob)||l_separator||''';'||chr(10); 
         else
        l_clob_line := l_clob_line||'  l_varchar2('||to_char(i)||') :=q'''||l_separator||l_clob||l_separator||''';'||chr(10);
      end if;
    
     
      
    end loop;

    l_clob_all := l_clob_all||chr(10)||l_clob_line;

    ---------------------------------------
    -- Building INSERT - build column list
    ---------------------------------------
    l_clob_all := l_clob_all||chr(10)||
              '  insert into '||p_new_table_name||chr(10)||
              '  ('||chr(10);

    for i in 1..l_rec_tab.count
    loop
      if i = 1 then
        l_clob_all := l_clob_all||'     '||l_rec_tab(i).col_name||chr(10);
      else  
        l_clob_all := l_clob_all||'    ,'||l_rec_tab(i).col_name||chr(10);
      end if;  
    end loop;    

    l_clob_all := l_clob_all||
              '  )'||chr(10)||
              '  values'||chr(10)||
              '  ('||chr(10);

    ---------------------------------------
    -- Building INSERT - build values
    ---------------------------------------
    for i in 1..l_rec_tab.count
    loop
      if i!=1 then
        l_clob_all := l_clob_all||'    ,';
      else  
        l_clob_all := l_clob_all||'     ';
      end if;

      if l_rec_tab(i).col_type = cons_number_code then --number
        l_clob_all := l_clob_all||'to_number(l_varchar2('||to_char(i)||'))'||chr(10);
--      elsif l_rec_tab(i).col_type = cons_long_code then --long
--        l_clob := l_long_col;
      elsif l_rec_tab(i).col_type = cons_clob_code then --clob
        --l_clob_all := l_clob_all||'l_clob('||to_char(i)||')'||chr(10);
        l_clob_all := l_clob_all||'to_clob(substr(l_clob('||to_char(i)||'),0,30000))'||
          'to_clob(substr(l_clob('||to_char(i)||'),30001,60000))'||'to_clob(substr(l_clob('||to_char(i)||'),60001))'||chr(10);
      
      elsif l_rec_tab(i).col_type = cons_char_code then --timestamp with local time zone
        l_clob_all := l_clob_all||'to_char(l_clob('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_varchar2_code then --timestamp with local time zone
        l_clob_all := l_clob_all||'to_char(l_clob('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_date_code then --date
        l_clob_all := l_clob_all||'to_date(l_varchar2('||to_char(i)||'),'''||cons_date_frm||''')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_timestamp_code then --timestamp
        l_clob_all := l_clob_all||'to_timestamp(l_varchar2('||to_char(i)||'),'''||cons_timestamp_frm||''')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_timestamp_wtz_code then --timestamp with time zone
        l_clob_all := l_clob_all||'to_timestamp_tz(l_varchar2('||to_char(i)||'),'''||cons_timestamp_wtz_frm||''')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_interval_ytm_code then --interval year to month
        l_clob_all := l_clob_all||'to_yminterval(l_varchar2('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_interval_dts_code then --interval day to second
        l_clob_all := l_clob_all||'to_dsinterval(l_varchar2('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_timestamp_lwtz_code then --timestamp with local time zone
        l_clob_all := l_clob_all||'to_timestamp_tz(l_varchar2('||to_char(i)||'),'''||cons_timestamp_wtz_frm||''')'||chr(10);
      else  
        l_clob_all := l_clob_all||'l_varchar2('||to_char(i)||')'||chr(10);
      end if;  
    end loop; 

    l_clob_all := l_clob_all||'  );'||chr(10);
  end loop;
  
  if (l_row_count=0) then
    l_clob_all := l_clob_all|| 'NULL;'||chr(10);
  end if;
  ---------------------------------------
  -- Building INSERT - end of code
  ---------------------------------------
  l_clob_all := l_clob_all||chr(10)||'end;';
  l_clob_all := l_clob_all||chr(10)||'/';

  ---------------------------------------
  -- Close cursor
  ---------------------------------------
  dbms_sql.close_cursor(l_cur);

  return l_clob_all;
end;

/
--------------------------------------------------------

--  DDL for Function FN_GET_METADATA_INSERTS_SIT

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."FN_GET_METADATA_INSERTS_SIT" 
(
  p_sql                        clob, 
  p_new_table_name             varchar2
)
return clob
is
  l_cur                        number;
  l_sql                        clob := p_sql;
  l_ret                        number;
  l_col_cnt                    number;
  l_rec_tab                    dbms_sql.desc_tab;
  l_row_count                  number :=0;

  l_separator                  char(1) := '!';
  l_clob                       clob;
  l_clob_line                  clob;
  l_clob_ins                   clob;
  l_clob_all                   clob;
  l_line                       clob := '-----------------------------------';

  cons_date_frm                varchar2(32) := 'MM/DD/YYYY HH24:MI:SS';
  cons_timestamp_frm           varchar2(32) := 'MM/DD/YYYY HH24:MI:SSXFF';
  cons_timestamp_wtz_frm       varchar2(32) := 'MM/DD/YYYY HH24:MI:SSXFF TZR';

  cons_varchar2_code           number := 1;
  cons_nvarchar2_code          number := 1;
  cons_number_code             number := 2;
  cons_float_code              number := 2;
  cons_long_code               number := 8;
  cons_date_code               number := 12;
  cons_binary_float_code       number := 100;
  cons_binary_double_code      number := 101;
  cons_timestamp_code          number := 180;
  cons_timestamp_wtz_code      number := 181;
  cons_timestamp_lwtz_code     number := 231;
  cons_interval_ytm_code       number := 182;
  cons_interval_dts_code       number := 183;
  cons_raw_code                number := 23;
  cons_long_raw_code           number := 24;
  cons_rowid_code              number := 11;
  cons_urowid_code             number := 208;
  cons_char_code               number := 96;
  cons_nchar_code              number := 96;
  cons_clob_code               number := 112;
  cons_nclob_code              number := 112;
  cons_blob_code               number := 113;
  cons_bfile_code              number := 114;

  -------------------------------------
  -- Supported types
  -------------------------------------
  l_varchar2_col                varchar2(32767); --1
  l_number_col                  number;          --2
  --l_long_col                    long;          --8 - not supported
  l_date_col                    date;            --12
  --l_raw_col                     raw(2000);     --23 - not supported
  l_rowid_col                   rowid;           --69
  l_char_col                    char(2000);      --96
  l_binary_float_col            binary_float;    --100
  l_binary_double_col           binary_double;   --101
  l_clob_col                    clob;            --112
  l_timestamp_col               timestamp(9);    --180
  l_timestamp_wtz_col           timestamp(9) with time zone;    --181
  l_interval_ytm_col            interval year(9) to month;      --182
  l_interval_dts_col            interval day(9) to second(2);   --183
  l_urowid_col                  urowid;                         --208
  l_timestamp_wltz_col          timestamp with local time zone; --231
  --l_nchar_col                   nchar(2000); --96 the same as char
  --l_nclob_col                   nclob; --112 the same as clob
  --l_blob_col - not supported
  --l_bfile_col - not supported
  --l_long_raw_col - not supported

  procedure print_rec(rec in dbms_sql.desc_rec) is
  begin
    l_clob_all := l_clob_all||chr(10)||
      'col_type            =    ' || rec.col_type||chr(10)||
      'col_maxlen          =    ' || rec.col_max_len||chr(10)||
      'col_name            =    ' || rec.col_name||chr(10)||
      'col_name_len        =    ' || rec.col_name_len||chr(10)||
      'col_schema_name     =    ' || rec.col_schema_name||chr(10)||
      'col_schema_name_len =    ' || rec.col_schema_name_len||chr(10)||
      'col_precision       =    ' || rec.col_precision||chr(10)||
      'col_scale           =    ' || rec.col_scale||chr(10)||
      'col_null_ok         =    ';

    if (rec.col_null_ok) then
      l_clob_all := l_clob_all||'true'||chr(10);
    else
      l_clob_all := l_clob_all||'false'||chr(10);
    end if;
  end;  
begin
  ---------------------------------------
  -- INSERT - header generation
  ---------------------------------------
  l_clob_all := 
  'declare'||chr(10)||
  '  type   t_clob is table of clob index by binary_integer;'||chr(10)||
  '  l_clob t_clob;'||chr(10)||
  '  type   t_varchar2 is table of varchar2(64) index by binary_integer;'||chr(10)||
  '  l_varchar2 t_varchar2;'||chr(10)||
  'begin'||chr(10);

  ---------------------------------------
  -- Introduction
  ---------------------------------------
  --l_clob_all := l_clob_all||l_line||chr(10)||'Parsing query:'||chr(10)||l_sql||chr(10);

  ---------------------------------------
  -- Open parse cursor
  ---------------------------------------
  l_cur := dbms_sql.open_cursor;
  dbms_sql.parse(l_cur, l_sql, dbms_sql.native);

  ---------------------------------------
  -- Describe columns
  ---------------------------------------
  --l_clob_all := l_clob_all||l_line||chr(10)||'Describe columns:'||chr(10);

  dbms_sql.describe_columns(l_cur, l_col_cnt, l_rec_tab);

  /*
  for i in 1..l_rec_tab.count
  loop
    print_rec(l_rec_tab(i));
  end loop;

   */
  l_clob_all := l_clob_all||chr(10)||            
            '  '||chr(10)||l_line||chr(10)||
            '  -- start generation of records'||chr(10)||
            '  '||l_line||chr(10);

  ---------------------------------------
  -- Define columns
  ---------------------------------------
    --add null statement
  

  
  for i in 1..l_rec_tab.count
  loop
    if    l_rec_tab(i).col_type = cons_varchar2_code then --varchar2
      dbms_sql.define_column(l_cur, i, l_varchar2_col, l_rec_tab(i).col_max_len); 
    elsif l_rec_tab(i).col_type = cons_number_code then --number
      dbms_sql.define_column(l_cur, i, l_number_col); 
    --elsif l_rec_tab(i).col_type = cons_long_code then --long
    --  dbms_sql.define_column_long(l_cur, i); 
    elsif l_rec_tab(i).col_type = cons_date_code then --date
      dbms_sql.define_column(l_cur, i, l_date_col); 
    elsif l_rec_tab(i).col_type = cons_binary_float_code then --binary_float
      dbms_sql.define_column(l_cur, i, l_binary_float_col); 
    elsif l_rec_tab(i).col_type = cons_binary_double_code then --binary_double
      dbms_sql.define_column(l_cur, i, l_binary_double_col); 
--    elsif l_rec_tab(i).col_type = cons_raw_code then --raw
--      dbms_sql.define_column_raw(l_cur, i, l_raw_col, l_rec_tab(i).col_max_len); 
    elsif l_rec_tab(i).col_type = cons_rowid_code then  --rowid
      dbms_sql.define_column_rowid(l_cur, i, l_rowid_col); 
    elsif l_rec_tab(i).col_type = cons_char_code then  --char
      dbms_sql.define_column_char(l_cur, i, l_char_col, l_rec_tab(i).col_max_len); 
    elsif l_rec_tab(i).col_type = cons_clob_code then --clob
      dbms_sql.define_column(l_cur, i, l_clob_col); 
    elsif l_rec_tab(i).col_type = cons_timestamp_code then --timestamp
      dbms_sql.define_column(l_cur, i, l_timestamp_col); 
    elsif l_rec_tab(i).col_type = cons_timestamp_wtz_code then --timestamp with time zone
      dbms_sql.define_column(l_cur, i, l_timestamp_wtz_col); 
    elsif l_rec_tab(i).col_type = cons_rowid_code then --urowid
      dbms_sql.define_column(l_cur, i, l_urowid_col); 
    elsif l_rec_tab(i).col_type = cons_timestamp_lwtz_code then --timestamp with local time zone
      dbms_sql.define_column(l_cur, i, l_timestamp_wltz_col); 
    elsif l_rec_tab(i).col_type = cons_interval_ytm_code then --interval year to month
      dbms_sql.define_column(l_cur, i, l_interval_ytm_col); 
    elsif l_rec_tab(i).col_type = cons_interval_dts_code then --interval day to second
      dbms_sql.define_column(l_cur, i, l_interval_dts_col); 
    elsif l_rec_tab(i).col_type = cons_urowid_code then --urowid
      dbms_sql.define_column(l_cur, i, l_urowid_col); 
    else
      raise_application_error(-20001, 'Column: '||l_rec_tab(i).col_name||chr(10)||
                                      'Type not supported: '||l_rec_tab(i).col_type);
      --not supported
    end if;
  end loop;

  ---------------------------------------
  -- Execute cursor
  ---------------------------------------
  l_ret := dbms_sql.execute(l_cur);
  
 

    
  ---------------------------------------
  -- Fetch rows
  ---------------------------------------
  loop
    l_ret := dbms_sql.fetch_rows(l_cur);
    exit when l_ret=0;
    
    l_row_count := l_row_count + 1;

    ---------------------------------------
    -- Building INSERT - build column declarations
    ---------------------------------------
    l_clob_line := '';

    for i in 1..l_rec_tab.count
    loop
      if    l_rec_tab(i).col_type = cons_varchar2_code then --varchar2
        dbms_sql.column_value(l_cur, i, l_varchar2_col); 
        l_clob := l_varchar2_col;
      elsif l_rec_tab(i).col_type = cons_number_code then --number
        dbms_sql.column_value(l_cur, i, l_number_col); 
        l_clob := to_char(l_number_col);
--      elsif l_rec_tab(i).col_type = cons_long_code then --long
--        dbms_sql.column_value(l_cur, i, l_long_col); 
--        l_clob := l_long_col;
      elsif l_rec_tab(i).col_type = cons_date_code then --date
        dbms_sql.column_value(l_cur, i, l_date_col); 
        l_clob := to_char(l_date_col, cons_date_frm);
      elsif l_rec_tab(i).col_type = cons_binary_float_code then --binary_float
        dbms_sql.column_value(l_cur, i, l_binary_float_col); 
        l_clob := to_char(l_binary_float_col);
      elsif l_rec_tab(i).col_type = cons_binary_double_code then --binary_double
        dbms_sql.column_value(l_cur, i, l_binary_double_col); 
        l_clob := to_char(l_binary_double_col);
--      elsif l_rec_tab(i).col_type = cons_raw_code then --raw
--        dbms_sql.column_value(l_cur, i, l_raw_col); 
--        l_clob := to_char(l_raw_col);
      elsif l_rec_tab(i).col_type = cons_rowid_code then --rowid
        dbms_sql.column_value(l_cur, i, l_rowid_col); 
        l_clob := to_char(l_rowid_col);
      elsif l_rec_tab(i).col_type = cons_char_code then --char
        dbms_sql.column_value_char(l_cur, i, l_char_col); 
        l_clob := substr(l_char_col, 1, l_rec_tab(i).col_max_len);
      elsif l_rec_tab(i).col_type = cons_clob_code then --clob
        dbms_sql.column_value(l_cur, i, l_clob_col); 
        l_clob := l_clob_col;
      elsif l_rec_tab(i).col_type = cons_timestamp_code then --timestamp
        dbms_sql.column_value(l_cur, i, l_timestamp_col); 
        l_clob := to_char(l_timestamp_col, cons_timestamp_frm);
      elsif l_rec_tab(i).col_type = cons_timestamp_wtz_code then --timestamp with time zone
        dbms_sql.column_value(l_cur, i, l_timestamp_wtz_col); 
        l_clob := to_char(l_timestamp_wtz_col, cons_timestamp_wtz_frm);
      elsif l_rec_tab(i).col_type = cons_interval_ytm_code then --interval year to month
        dbms_sql.column_value(l_cur, i, l_interval_ytm_col); 
        l_clob := to_char(l_interval_ytm_col);
      elsif l_rec_tab(i).col_type = cons_interval_dts_code then --interval day to second
        dbms_sql.column_value(l_cur, i, l_interval_dts_col); 
        l_clob := to_char(l_interval_dts_col);
      elsif l_rec_tab(i).col_type = cons_urowid_code then --urowid
        dbms_sql.column_value(l_cur, i, l_urowid_col); 
        l_clob := to_char(l_urowid_col);
      elsif l_rec_tab(i).col_type = cons_timestamp_lwtz_code then --timestamp with local time zone
        dbms_sql.column_value(l_cur, i, l_timestamp_wltz_col); 
        l_clob := to_char(l_timestamp_wltz_col, cons_timestamp_wtz_frm);
      end if;

      if l_rec_tab(i).col_type in (cons_clob_code, cons_char_code, cons_varchar2_code) then
        l_clob_line := l_clob_line||'  l_clob('||to_char(i)||') :=q'''||l_separator||l_clob||l_separator||''';'||chr(10);
      else
        l_clob_line := l_clob_line||'  l_varchar2('||to_char(i)||') :=q'''||l_separator||l_clob||l_separator||''';'||chr(10);
      end if;
    end loop;

    l_clob_all := l_clob_all||chr(10)||l_clob_line;

    ---------------------------------------
    -- Building INSERT - build column list
    ---------------------------------------
    l_clob_all := l_clob_all||chr(10)||
              '  insert into '||p_new_table_name||chr(10)||
              '  ('||chr(10);

    for i in 1..l_rec_tab.count
    loop
      if i = 1 then
        l_clob_all := l_clob_all||'     '||l_rec_tab(i).col_name||chr(10);
      else  
        l_clob_all := l_clob_all||'    ,'||l_rec_tab(i).col_name||chr(10);
      end if;  
    end loop;    

    l_clob_all := l_clob_all||
              '  )'||chr(10)||
              '  values'||chr(10)||
              '  ('||chr(10);

    ---------------------------------------
    -- Building INSERT - build values
    ---------------------------------------
    for i in 1..l_rec_tab.count
    loop
      if i!=1 then
        l_clob_all := l_clob_all||'    ,';
      else  
        l_clob_all := l_clob_all||'     ';
      end if;

      if l_rec_tab(i).col_type = cons_number_code then --number
        l_clob_all := l_clob_all||'to_number(l_varchar2('||to_char(i)||'))'||chr(10);
--      elsif l_rec_tab(i).col_type = cons_long_code then --long
--        l_clob := l_long_col;
      elsif l_rec_tab(i).col_type = cons_clob_code then --clob
        l_clob_all := l_clob_all||'l_clob('||to_char(i)||')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_char_code then --timestamp with local time zone
        l_clob_all := l_clob_all||'to_char(l_clob('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_varchar2_code then --timestamp with local time zone
        l_clob_all := l_clob_all||'to_char(l_clob('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_date_code then --date
        l_clob_all := l_clob_all||'to_date(l_varchar2('||to_char(i)||'),'''||cons_date_frm||''')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_timestamp_code then --timestamp
        l_clob_all := l_clob_all||'to_timestamp(l_varchar2('||to_char(i)||'),'''||cons_timestamp_frm||''')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_timestamp_wtz_code then --timestamp with time zone
        l_clob_all := l_clob_all||'to_timestamp_tz(l_varchar2('||to_char(i)||'),'''||cons_timestamp_wtz_frm||''')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_interval_ytm_code then --interval year to month
        l_clob_all := l_clob_all||'to_yminterval(l_varchar2('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_interval_dts_code then --interval day to second
        l_clob_all := l_clob_all||'to_dsinterval(l_varchar2('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_timestamp_lwtz_code then --timestamp with local time zone
        l_clob_all := l_clob_all||'to_timestamp_tz(l_varchar2('||to_char(i)||'),'''||cons_timestamp_wtz_frm||''')'||chr(10);
      else  
        l_clob_all := l_clob_all||'l_varchar2('||to_char(i)||')'||chr(10);
      end if;  
    end loop; 

    l_clob_all := l_clob_all||'  );'||chr(10);
  end loop;
  
  if (l_row_count=0) then
    l_clob_all := l_clob_all|| 'NULL;'||chr(10);
  end if;
  ---------------------------------------
  -- Building INSERT - end of code
  ---------------------------------------
  l_clob_all := l_clob_all||chr(10)||'end;';
  l_clob_all := l_clob_all||chr(10)||'/';

  ---------------------------------------
  -- Close cursor
  ---------------------------------------
  dbms_sql.close_cursor(l_cur);

  return l_clob_all;
end;

/
--------------------------------------------------------

--  DDL for Function FN_GET_METAQUERY_INSERTS

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."FN_GET_METAQUERY_INSERTS" 
(
  p_sql                        clob, 
  p_new_table_name             varchar2
)
return clob
is
  l_cur                        number;
  l_sql                        clob := p_sql;
  l_ret                        number;
  l_col_cnt                    number;
  l_rec_tab                    dbms_sql.desc_tab;
  l_row_count                  number :=0;

  l_separator                  char(1) := '!';
  l_clob                       clob;
  l_clob_line                  clob;
  l_clob_ins                   clob;
  l_clob_all                   clob;
  l_line                       clob := '-----------------------------------';
  idxClob                      number;
  idxCount                     number :=1;
  clobSplitCount               number:=25000;
   
  cons_date_frm                varchar2(32) := 'MM/DD/YYYY HH24:MI:SS';
  cons_timestamp_frm           varchar2(32) := 'MM/DD/YYYY HH24:MI:SSXFF';
  cons_timestamp_wtz_frm       varchar2(32) := 'MM/DD/YYYY HH24:MI:SSXFF TZR';

  cons_varchar2_code           number := 1;
  cons_nvarchar2_code          number := 1;
  cons_number_code             number := 2;
  cons_float_code              number := 2;
  cons_long_code               number := 8;
  cons_date_code               number := 12;
  cons_binary_float_code       number := 100;
  cons_binary_double_code      number := 101;
  cons_timestamp_code          number := 180;
  cons_timestamp_wtz_code      number := 181;
  cons_timestamp_lwtz_code     number := 231;
  cons_interval_ytm_code       number := 182;
  cons_interval_dts_code       number := 183;
  cons_raw_code                number := 23;
  cons_long_raw_code           number := 24;
  cons_rowid_code              number := 11;
  cons_urowid_code             number := 208;
  cons_char_code               number := 96;
  cons_nchar_code              number := 96;
  cons_clob_code               number := 112;
  cons_nclob_code              number := 112;
  cons_blob_code               number := 113;
  cons_bfile_code              number := 114;

  -------------------------------------
  -- Supported types
  -------------------------------------
  l_varchar2_col                varchar2(32767); --1
  l_number_col                  number;          --2
  --l_long_col                    long;          --8 - not supported
  l_date_col                    date;            --12
  --l_raw_col                     raw(2000);     --23 - not supported
  l_rowid_col                   rowid;           --69
  l_char_col                    char(2000);      --96
  l_binary_float_col            binary_float;    --100
  l_binary_double_col           binary_double;   --101
  l_clob_col                    clob;            --112
  l_timestamp_col               timestamp(9);    --180
  l_timestamp_wtz_col           timestamp(9) with time zone;    --181
  l_interval_ytm_col            interval year(9) to month;      --182
  l_interval_dts_col            interval day(9) to second(2);   --183
  l_urowid_col                  urowid;                         --208
  l_timestamp_wltz_col          timestamp with local time zone; --231
  --l_nchar_col                   nchar(2000); --96 the same as char
  --l_nclob_col                   nclob; --112 the same as clob
  --l_blob_col - not supported
  --l_bfile_col - not supported
  --l_long_raw_col - not supported

  procedure print_rec(rec in dbms_sql.desc_rec) is
  begin
    l_clob_all := l_clob_all||chr(10)||
      'col_type            =    ' || rec.col_type||chr(10)||
      'col_maxlen          =    ' || rec.col_max_len||chr(10)||
      'col_name            =    ' || rec.col_name||chr(10)||
      'col_name_len        =    ' || rec.col_name_len||chr(10)||
      'col_schema_name     =    ' || rec.col_schema_name||chr(10)||
      'col_schema_name_len =    ' || rec.col_schema_name_len||chr(10)||
      'col_precision       =    ' || rec.col_precision||chr(10)||
      'col_scale           =    ' || rec.col_scale||chr(10)||
      'col_null_ok         =    ';

    if (rec.col_null_ok) then
      l_clob_all := l_clob_all||'true'||chr(10);
    else
      l_clob_all := l_clob_all||'false'||chr(10);
    end if;
  end;  
begin
  ---------------------------------------
  -- INSERT - header generation
  ---------------------------------------
  l_clob_all := 
  'declare'||chr(10)||
  '  type   t_clob is table of clob index by binary_integer;'||chr(10)||
  '  l_clob t_clob;'||chr(10)||
  '  type   t_varchar2 is table of varchar2(64) index by binary_integer;'||chr(10)||
  '  l_varchar2 t_varchar2;'||chr(10)||
  'begin'||chr(10);

  ---------------------------------------
  -- Introduction
  ---------------------------------------
  --l_clob_all := l_clob_all||l_line||chr(10)||'Parsing query:'||chr(10)||l_sql||chr(10);

  ---------------------------------------
  -- Open parse cursor
  ---------------------------------------
  l_cur := dbms_sql.open_cursor;
  dbms_sql.parse(l_cur, l_sql, dbms_sql.native);

  ---------------------------------------
  -- Describe columns
  ---------------------------------------
  --l_clob_all := l_clob_all||l_line||chr(10)||'Describe columns:'||chr(10);

  dbms_sql.describe_columns(l_cur, l_col_cnt, l_rec_tab);

  /*
  for i in 1..l_rec_tab.count
  loop
    print_rec(l_rec_tab(i));
  end loop;

   */
  l_clob_all := l_clob_all||chr(10)||            
            '  '||chr(10)||l_line||chr(10)||
            '  -- start generation of records'||chr(10)||
            '  '||l_line||chr(10);

  ---------------------------------------
  -- Define columns
  ---------------------------------------
    --add null statement
  

  
  for i in 1..l_rec_tab.count
  loop
    if    l_rec_tab(i).col_type = cons_varchar2_code then --varchar2
      dbms_sql.define_column(l_cur, i, l_varchar2_col, l_rec_tab(i).col_max_len); 
    elsif l_rec_tab(i).col_type = cons_number_code then --number
      dbms_sql.define_column(l_cur, i, l_number_col); 
    --elsif l_rec_tab(i).col_type = cons_long_code then --long
    --  dbms_sql.define_column_long(l_cur, i); 
    elsif l_rec_tab(i).col_type = cons_date_code then --date
      dbms_sql.define_column(l_cur, i, l_date_col); 
    elsif l_rec_tab(i).col_type = cons_binary_float_code then --binary_float
      dbms_sql.define_column(l_cur, i, l_binary_float_col); 
    elsif l_rec_tab(i).col_type = cons_binary_double_code then --binary_double
      dbms_sql.define_column(l_cur, i, l_binary_double_col); 
--    elsif l_rec_tab(i).col_type = cons_raw_code then --raw
--      dbms_sql.define_column_raw(l_cur, i, l_raw_col, l_rec_tab(i).col_max_len); 
    elsif l_rec_tab(i).col_type = cons_rowid_code then  --rowid
      dbms_sql.define_column_rowid(l_cur, i, l_rowid_col); 
    elsif l_rec_tab(i).col_type = cons_char_code then  --char
      dbms_sql.define_column_char(l_cur, i, l_char_col, l_rec_tab(i).col_max_len); 
    elsif l_rec_tab(i).col_type = cons_clob_code then --clob
      dbms_sql.define_column(l_cur, i, l_clob_col); 
    elsif l_rec_tab(i).col_type = cons_timestamp_code then --timestamp
      dbms_sql.define_column(l_cur, i, l_timestamp_col); 
    elsif l_rec_tab(i).col_type = cons_timestamp_wtz_code then --timestamp with time zone
      dbms_sql.define_column(l_cur, i, l_timestamp_wtz_col); 
    elsif l_rec_tab(i).col_type = cons_rowid_code then --urowid
      dbms_sql.define_column(l_cur, i, l_urowid_col); 
    elsif l_rec_tab(i).col_type = cons_timestamp_lwtz_code then --timestamp with local time zone
      dbms_sql.define_column(l_cur, i, l_timestamp_wltz_col); 
    elsif l_rec_tab(i).col_type = cons_interval_ytm_code then --interval year to month
      dbms_sql.define_column(l_cur, i, l_interval_ytm_col); 
    elsif l_rec_tab(i).col_type = cons_interval_dts_code then --interval day to second
      dbms_sql.define_column(l_cur, i, l_interval_dts_col); 
    elsif l_rec_tab(i).col_type = cons_urowid_code then --urowid
      dbms_sql.define_column(l_cur, i, l_urowid_col); 
    else
      raise_application_error(-20001, 'Column: '||l_rec_tab(i).col_name||chr(10)||
                                      'Type not supported: '||l_rec_tab(i).col_type);
      --not supported
    end if;
  end loop;

  ---------------------------------------
  -- Execute cursor
  ---------------------------------------
  l_ret := dbms_sql.execute(l_cur);
  
 

    
  ---------------------------------------
  -- Fetch rows
  ---------------------------------------
  loop
    l_ret := dbms_sql.fetch_rows(l_cur);
    exit when l_ret=0;
    
    l_row_count := l_row_count + 1;

    ---------------------------------------
    -- Building INSERT - build column declarations
    ---------------------------------------
    l_clob_line := '';

    for i in 1..l_rec_tab.count
    loop
      if    l_rec_tab(i).col_type = cons_varchar2_code then --varchar2
        dbms_sql.column_value(l_cur, i, l_varchar2_col); 
        l_clob := l_varchar2_col;
      elsif l_rec_tab(i).col_type = cons_number_code then --number
        dbms_sql.column_value(l_cur, i, l_number_col); 
        l_clob := to_char(l_number_col);
--      elsif l_rec_tab(i).col_type = cons_long_code then --long
--        dbms_sql.column_value(l_cur, i, l_long_col); 
--        l_clob := l_long_col;
      elsif l_rec_tab(i).col_type = cons_date_code then --date
        dbms_sql.column_value(l_cur, i, l_date_col); 
        l_clob := to_char(l_date_col, cons_date_frm);
      elsif l_rec_tab(i).col_type = cons_binary_float_code then --binary_float
        dbms_sql.column_value(l_cur, i, l_binary_float_col); 
        l_clob := to_char(l_binary_float_col);
      elsif l_rec_tab(i).col_type = cons_binary_double_code then --binary_double
        dbms_sql.column_value(l_cur, i, l_binary_double_col); 
        l_clob := to_char(l_binary_double_col);
--      elsif l_rec_tab(i).col_type = cons_raw_code then --raw
--        dbms_sql.column_value(l_cur, i, l_raw_col); 
--        l_clob := to_char(l_raw_col);
      elsif l_rec_tab(i).col_type = cons_rowid_code then --rowid
        dbms_sql.column_value(l_cur, i, l_rowid_col); 
        l_clob := to_char(l_rowid_col);
      elsif l_rec_tab(i).col_type = cons_char_code then --char
        dbms_sql.column_value_char(l_cur, i, l_char_col); 
        l_clob := substr(l_char_col, 1, l_rec_tab(i).col_max_len);
      elsif l_rec_tab(i).col_type = cons_clob_code then --clob
        dbms_sql.column_value(l_cur, i, l_clob_col); 
        l_clob := l_clob_col;
      elsif l_rec_tab(i).col_type = cons_timestamp_code then --timestamp
        dbms_sql.column_value(l_cur, i, l_timestamp_col); 
        l_clob := to_char(l_timestamp_col, cons_timestamp_frm);
      elsif l_rec_tab(i).col_type = cons_timestamp_wtz_code then --timestamp with time zone
        dbms_sql.column_value(l_cur, i, l_timestamp_wtz_col); 
        l_clob := to_char(l_timestamp_wtz_col, cons_timestamp_wtz_frm);
      elsif l_rec_tab(i).col_type = cons_interval_ytm_code then --interval year to month
        dbms_sql.column_value(l_cur, i, l_interval_ytm_col); 
        l_clob := to_char(l_interval_ytm_col);
      elsif l_rec_tab(i).col_type = cons_interval_dts_code then --interval day to second
        dbms_sql.column_value(l_cur, i, l_interval_dts_col); 
        l_clob := to_char(l_interval_dts_col);
      elsif l_rec_tab(i).col_type = cons_urowid_code then --urowid
        dbms_sql.column_value(l_cur, i, l_urowid_col); 
        l_clob := to_char(l_urowid_col);
      elsif l_rec_tab(i).col_type = cons_timestamp_lwtz_code then --timestamp with local time zone
        dbms_sql.column_value(l_cur, i, l_timestamp_wltz_col); 
        l_clob := to_char(l_timestamp_wltz_col, cons_timestamp_wtz_frm);
      end if;
      
      if l_rec_tab(i).col_type in ( cons_clob_code) then
           if ( length(l_clob) > clobSplitCount ) then
             l_clob_line := l_clob_line||'  l_clob('||to_char(i)||') :=q'''||l_separator||substr(l_clob,0,clobSplitCount)||l_separator||'''';
             idxClob :=  trunc(length(l_clob)/clobSplitCount);
             --loop through and split every 25K chars from query string.
             while (idxCount < idxClob -1) loop              
                l_clob_line := l_clob_line||'||q'''||l_separator||substr(l_clob, (idxCount*clobSplitCount)+1, clobSplitCount*(idxCount+1) )||l_separator||'''';
                idxCount := idxCount+1;
              end loop;  
                l_clob_line := l_clob_line||'||q'''||l_separator||substr(l_clob, (clobSplitCount*idxCount) + 1 )||l_separator||''';'||chr(10);
           else 
           l_clob_line := l_clob_line||'  l_clob('||to_char(i)||') :=q'''||l_separator||TRIM(l_clob)||l_separator||''';'||chr(10);
           end if;
      elsif l_rec_tab(i).col_type in (  cons_char_code, cons_varchar2_code) then
        l_clob_line := l_clob_line||'  l_clob('||to_char(i)||') :=q'''||l_separator||TRIM(l_clob)||l_separator||''';'||chr(10); 
         else
        l_clob_line := l_clob_line||'  l_varchar2('||to_char(i)||') :=q'''||l_separator||l_clob||l_separator||''';'||chr(10);
      end if;
    
      
      
    end loop;

    l_clob_all := l_clob_all||chr(10)||l_clob_line;

    ---------------------------------------
    -- Building INSERT - build column list
    ---------------------------------------
    l_clob_all := l_clob_all||chr(10)||
              '  insert into '||p_new_table_name||chr(10)||
              '  ('||chr(10);

    for i in 1..l_rec_tab.count
    loop
      if i = 1 then
        l_clob_all := l_clob_all||'     '||l_rec_tab(i).col_name||chr(10);
      else  
        l_clob_all := l_clob_all||'    ,'||l_rec_tab(i).col_name||chr(10);
      end if;  
    end loop;    

    l_clob_all := l_clob_all||
              '  )'||chr(10)||
              '  values'||chr(10)||
              '  ('||chr(10);

    ---------------------------------------
    -- Building INSERT - build values
    ---------------------------------------
    for i in 1..l_rec_tab.count
    loop
      if i!=1 then
        l_clob_all := l_clob_all||'    ,';
      else  
        l_clob_all := l_clob_all||'     ';
      end if;

      if l_rec_tab(i).col_type = cons_number_code then --number
        l_clob_all := l_clob_all||'to_number(l_varchar2('||to_char(i)||'))'||chr(10);
--      elsif l_rec_tab(i).col_type = cons_long_code then --long
--        l_clob := l_long_col;
      elsif l_rec_tab(i).col_type = cons_clob_code then --clob
        l_clob_all := l_clob_all||'l_clob('||to_char(i)||')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_char_code then --timestamp with local time zone
        l_clob_all := l_clob_all||'to_char(l_clob('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_varchar2_code then --timestamp with local time zone
        l_clob_all := l_clob_all||'to_char(l_clob('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_date_code then --date
        l_clob_all := l_clob_all||'to_date(l_varchar2('||to_char(i)||'),'''||cons_date_frm||''')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_timestamp_code then --timestamp
        l_clob_all := l_clob_all||'to_timestamp(l_varchar2('||to_char(i)||'),'''||cons_timestamp_frm||''')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_timestamp_wtz_code then --timestamp with time zone
        l_clob_all := l_clob_all||'to_timestamp_tz(l_varchar2('||to_char(i)||'),'''||cons_timestamp_wtz_frm||''')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_interval_ytm_code then --interval year to month
        l_clob_all := l_clob_all||'to_yminterval(l_varchar2('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_interval_dts_code then --interval day to second
        l_clob_all := l_clob_all||'to_dsinterval(l_varchar2('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_timestamp_lwtz_code then --timestamp with local time zone
        l_clob_all := l_clob_all||'to_timestamp_tz(l_varchar2('||to_char(i)||'),'''||cons_timestamp_wtz_frm||''')'||chr(10);
      else  
        l_clob_all := l_clob_all||'l_varchar2('||to_char(i)||')'||chr(10);
      end if;  
    end loop; 

    l_clob_all := l_clob_all||'  );'||chr(10);
  end loop;
  
  if (l_row_count=0) then
    l_clob_all := l_clob_all|| 'NULL;'||chr(10);
  end if;
  ---------------------------------------
  -- Building INSERT - end of code
  ---------------------------------------
  l_clob_all := l_clob_all||chr(10)||'end;';
  l_clob_all := l_clob_all||chr(10)||'/';

  ---------------------------------------
  -- Close cursor
  ---------------------------------------
  dbms_sql.close_cursor(l_cur);

  return l_clob_all;
end;

/
--------------------------------------------------------

--  DDL for Function FN_GET_METAQUERY_INSERTS_HG

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."FN_GET_METAQUERY_INSERTS_HG" (
      p_sql CLOB,
      p_new_table_name VARCHAR2 )
    RETURN CLOB
  IS
    l_cur NUMBER;
    l_sql CLOB := p_sql;
    l_ret     NUMBER;
    l_col_cnt NUMBER;
    l_rec_tab dbms_sql.desc_tab;
    l_row_count NUMBER  :=0;
    l_separator CHAR(1) := '!';
    l_clob CLOB;
    l_clob_line CLOB;
    l_clob_ins CLOB;
    l_clob_all CLOB;
    l_line CLOB := '-----------------------------------';
    idxClob                  NUMBER;
    idxCount                 NUMBER       :=1;
    clobSplitCount           NUMBER       :=25000;
    cons_date_frm            VARCHAR2(32) := 'MM/DD/YYYY HH24:MI:SS';
    cons_timestamp_frm       VARCHAR2(32) := 'MM/DD/YYYY HH24:MI:SSXFF';
    cons_timestamp_wtz_frm   VARCHAR2(32) := 'MM/DD/YYYY HH24:MI:SSXFF TZR';
    cons_varchar2_code       NUMBER       := 1;
    cons_nvarchar2_code      NUMBER       := 1;
    cons_number_code         NUMBER       := 2;
    cons_float_code          NUMBER       := 2;
    cons_long_code           NUMBER       := 8;
    cons_date_code           NUMBER       := 12;
    cons_binary_float_code   NUMBER       := 100;
    cons_binary_double_code  NUMBER       := 101;
    cons_timestamp_code      NUMBER       := 180;
    cons_timestamp_wtz_code  NUMBER       := 181;
    cons_timestamp_lwtz_code NUMBER       := 231;
    cons_interval_ytm_code   NUMBER       := 182;
    cons_interval_dts_code   NUMBER       := 183;
    cons_raw_code            NUMBER       := 23;
    cons_long_raw_code       NUMBER       := 24;
    cons_rowid_code          NUMBER       := 11;
    cons_urowid_code         NUMBER       := 208;
    cons_char_code           NUMBER       := 96;
    cons_nchar_code          NUMBER       := 96;
    cons_clob_code           NUMBER       := 112;
    cons_nclob_code          NUMBER       := 112;
    cons_blob_code           NUMBER       := 113;
    cons_bfile_code          NUMBER       := 114;
    clob_data_split          NUMBER       := 0;--0 = No, 1 = Yes
    l_sclob_col CLOB;
    l_sclob_loop NUMBER := 1;
    -------------------------------------
    -- Supported types
    -------------------------------------
    l_varchar2_col VARCHAR2(32767);    --1
    l_number_col   NUMBER;             --2
    l_date_col DATE;                   --12
    l_rowid_col rowid;                 --69
    l_char_col CHAR(2000);             --96
    l_binary_float_col binary_float;   --100
    l_binary_double_col binary_double; --101
    l_clob_col CLOB;                   --112
    l_timestamp_col TIMESTAMP(9);      --180
    l_timestamp_wtz_col TIMESTAMP(9)
  WITH TIME zone;                                  --181
  l_interval_ytm_col interval YEAR(9) TO MONTH;    --182
  l_interval_dts_col interval DAY(9) TO second(2); --183
  l_urowid_col urowid;                             --208
  l_timestamp_wltz_col TIMESTAMP
WITH local TIME zone; --231
PROCEDURE print_rec(
    rec IN dbms_sql.desc_rec)
IS
BEGIN
  l_clob_all := l_clob_all||chr(10)|| 'col_type            =    ' || rec.col_type||chr(10)|| 'col_maxlen          =    ' || rec.col_max_len||chr(10)|| 'col_name            =    ' || rec.col_name||chr(10)|| 'col_name_len        =    ' || rec.col_name_len||chr(10)|| 'col_schema_name     =    ' || rec.col_schema_name||chr(10)|| 'col_schema_name_len =    ' || rec.col_schema_name_len||chr(10)|| 'col_precision       =    ' || rec.col_precision||chr(10)|| 'col_scale           =    ' || rec.col_scale||chr(10)|| 'col_null_ok         =    ';
  IF (rec.col_null_ok) THEN
    l_clob_all := l_clob_all||'true'||chr(10);
  ELSE
    l_clob_all := l_clob_all||'false'||chr(10);
  END IF;
END;
BEGIN
  ---------------------------------------
  -- INSERT - header generation
  ---------------------------------------
  l_clob_all := 'declare'||chr(10)|| '  type   t_clob is table of clob index by binary_integer;'||chr(10)|| '  l_clob t_clob;'||chr(10)|| '  type   t_varchar2 is table of varchar2(64) index by binary_integer;'||chr(10)|| '  l_varchar2 t_varchar2;'||chr(10)|| 'begin'||chr(10);
  ---------------------------------------
  -- Introduction
  ---------------------------------------
  --l_clob_all := l_clob_all||l_line||chr(10)||'Parsing query:'||chr(10)||l_sql||chr(10);
  ---------------------------------------
  -- Open parse cursor
  ---------------------------------------
  l_cur := dbms_sql.open_cursor;
  dbms_sql.parse(l_cur, l_sql, dbms_sql.native);
  ---------------------------------------
  -- Describe columns
  ---------------------------------------
  dbms_sql.describe_columns(l_cur, l_col_cnt, l_rec_tab);
  l_clob_all := l_clob_all||chr(10)|| '  '||chr(10)||l_line||chr(10)|| '  -- start generation of records'||chr(10)|| '  '||l_line||chr(10);
  ---------------------------------------
  -- Define columns
  ---------------------------------------
  --add null statement
  FOR i IN 1..l_rec_tab.count
  LOOP
    IF l_rec_tab(i).col_type = cons_varchar2_code THEN --varchar2
      dbms_sql.define_column(l_cur, i, l_varchar2_col, l_rec_tab(i).col_max_len);
    elsif l_rec_tab(i).col_type = cons_number_code THEN --number
      dbms_sql.define_column(l_cur, i, l_number_col);
    elsif l_rec_tab(i).col_type = cons_date_code THEN --date
      dbms_sql.define_column(l_cur, i, l_date_col);
    elsif l_rec_tab(i).col_type = cons_binary_float_code THEN --binary_float
      dbms_sql.define_column(l_cur, i, l_binary_float_col);
    elsif l_rec_tab(i).col_type = cons_binary_double_code THEN --binary_double
      dbms_sql.define_column(l_cur, i, l_binary_double_col);
    elsif l_rec_tab(i).col_type = cons_rowid_code THEN --rowid
      dbms_sql.define_column_rowid(l_cur, i, l_rowid_col);
    elsif l_rec_tab(i).col_type = cons_char_code THEN --char
      dbms_sql.define_column_char(l_cur, i, l_char_col, l_rec_tab(i).col_max_len);
    elsif l_rec_tab(i).col_type = cons_clob_code THEN --clob
      dbms_sql.define_column(l_cur, i, l_clob_col);
    elsif l_rec_tab(i).col_type = cons_timestamp_code THEN --timestamp
      dbms_sql.define_column(l_cur, i, l_timestamp_col);
    elsif l_rec_tab(i).col_type = cons_timestamp_wtz_code THEN --timestamp with time zone
      dbms_sql.define_column(l_cur, i, l_timestamp_wtz_col);
    elsif l_rec_tab(i).col_type = cons_rowid_code THEN --urowid
      dbms_sql.define_column(l_cur, i, l_urowid_col);
    elsif l_rec_tab(i).col_type = cons_timestamp_lwtz_code THEN --timestamp with local time zone
      dbms_sql.define_column(l_cur, i, l_timestamp_wltz_col);
    elsif l_rec_tab(i).col_type = cons_interval_ytm_code THEN --interval year to month
      dbms_sql.define_column(l_cur, i, l_interval_ytm_col);
    elsif l_rec_tab(i).col_type = cons_interval_dts_code THEN --interval day to second
      dbms_sql.define_column(l_cur, i, l_interval_dts_col);
    elsif l_rec_tab(i).col_type = cons_urowid_code THEN --urowid
      dbms_sql.define_column(l_cur, i, l_urowid_col);
    ELSE
      raise_application_error(-20001, 'Column: '||l_rec_tab(i).col_name||chr(10)|| 'Type not supported: '||l_rec_tab(i).col_type);
      --not supported
    END IF;
  END LOOP;
  ---------------------------------------
  -- Execute cursor
  ---------------------------------------
  l_ret := dbms_sql.execute(l_cur);
  ---------------------------------------
  -- Fetch rows
  ---------------------------------------
  LOOP
    l_ret := dbms_sql.fetch_rows(l_cur);
    EXIT
  WHEN l_ret     =0;
    l_row_count := l_row_count + 1;
    ---------------------------------------
    -- Building INSERT - build column declarations
    ---------------------------------------
    l_clob_line := '';
    FOR i       IN 1..l_rec_tab.count
    LOOP
      IF l_rec_tab(i).col_type = cons_varchar2_code THEN --varchar2
        dbms_sql.column_value(l_cur, i, l_varchar2_col);
        l_clob                   := l_varchar2_col;
      elsif l_rec_tab(i).col_type = cons_number_code THEN --number
        dbms_sql.column_value(l_cur, i, l_number_col);
        l_clob                   := TO_CHAR(l_number_col);
      elsif l_rec_tab(i).col_type = cons_date_code THEN --date
        dbms_sql.column_value(l_cur, i, l_date_col);
        l_clob                   := TO_CHAR(l_date_col, cons_date_frm);
      elsif l_rec_tab(i).col_type = cons_binary_float_code THEN --binary_float
        dbms_sql.column_value(l_cur, i, l_binary_float_col);
        l_clob                   := TO_CHAR(l_binary_float_col);
      elsif l_rec_tab(i).col_type = cons_binary_double_code THEN --binary_double
        dbms_sql.column_value(l_cur, i, l_binary_double_col);
        l_clob                   := TO_CHAR(l_binary_double_col);
      elsif l_rec_tab(i).col_type = cons_rowid_code THEN --rowid
        dbms_sql.column_value(l_cur, i, l_rowid_col);
        l_clob                   := TO_CHAR(l_rowid_col);
      elsif l_rec_tab(i).col_type = cons_char_code THEN --char
        dbms_sql.column_value_char(l_cur, i, l_char_col);
        l_clob                   := SUBSTR(l_char_col, 1, l_rec_tab(i).col_max_len);
      elsif l_rec_tab(i).col_type = cons_clob_code THEN --clob
        dbms_sql.column_value(l_cur, i, l_clob_col);
        l_clob                   := l_clob_col;
      elsif l_rec_tab(i).col_type = cons_timestamp_code THEN --timestamp
        dbms_sql.column_value(l_cur, i, l_timestamp_col);
        l_clob                   := TO_CHAR(l_timestamp_col, cons_timestamp_frm);
      elsif l_rec_tab(i).col_type = cons_timestamp_wtz_code THEN --timestamp with time zone
        dbms_sql.column_value(l_cur, i, l_timestamp_wtz_col);
        l_clob                   := TO_CHAR(l_timestamp_wtz_col, cons_timestamp_wtz_frm);
      elsif l_rec_tab(i).col_type = cons_interval_ytm_code THEN --interval year to month
        dbms_sql.column_value(l_cur, i, l_interval_ytm_col);
        l_clob                   := TO_CHAR(l_interval_ytm_col);
      elsif l_rec_tab(i).col_type = cons_interval_dts_code THEN --interval day to second
        dbms_sql.column_value(l_cur, i, l_interval_dts_col);
        l_clob                   := TO_CHAR(l_interval_dts_col);
      elsif l_rec_tab(i).col_type = cons_urowid_code THEN --urowid
        dbms_sql.column_value(l_cur, i, l_urowid_col);
        l_clob                   := TO_CHAR(l_urowid_col);
      elsif l_rec_tab(i).col_type = cons_timestamp_lwtz_code THEN --timestamp with local time zone
        dbms_sql.column_value(l_cur, i, l_timestamp_wltz_col);
        l_clob := TO_CHAR(l_timestamp_wltz_col, cons_timestamp_wtz_frm);
      END IF;
      IF l_rec_tab(i).col_type IN ( cons_clob_code) THEN
        IF ( LENGTH(l_clob)     > clobSplitCount ) THEN
          l_clob_line          := l_clob_line||'  l_clob('||TO_CHAR(i)||') :=q'''||l_separator||SUBSTR(l_clob,0,clobSplitCount)||l_separator||'''';
          idxClob              := TRUNC(LENGTH(l_clob)/clobSplitCount);
          --loop through and split every 25K chars from query string.
          WHILE (idxCount < idxClob -1)
          LOOP
            l_clob_line := l_clob_line||'||q'''||l_separator||SUBSTR(l_clob, (idxCount*clobSplitCount)+1, clobSplitCount*(idxCount+1) )||l_separator||'''';
            idxCount    := idxCount                                                   +1;
          END LOOP;
          l_clob_line := l_clob_line||'||q'''||l_separator||SUBSTR(l_clob, (clobSplitCount*idxCount) + 1 )||l_separator||''';'||chr(10);
        ELSE
          l_clob_line := l_clob_line||'  l_clob('||TO_CHAR(i)||') :=q'''||l_separator||TRIM(l_clob)||l_separator||''';'||chr(10);
        END IF;
      elsif l_rec_tab(i).col_type IN ( cons_char_code, cons_varchar2_code) THEN
        l_clob_line               := l_clob_line||'  l_clob('||TO_CHAR(i)||') :=q'''||l_separator||TRIM(l_clob)||l_separator||''';'||chr(10);
      ELSE
        l_clob_line := l_clob_line||'  l_varchar2('||TO_CHAR(i)||') :=q'''||l_separator||l_clob||l_separator||''';'||chr(10);
      END IF;
    END LOOP;
    l_clob_all := l_clob_all||chr(10)||l_clob_line;
    ---------------------------------------
    -- Building INSERT - build column list
    ---------------------------------------
    l_clob_all := l_clob_all||chr(10)|| '  insert into '||p_new_table_name||chr(10)|| '  ('||chr(10);
    FOR i      IN 1..l_rec_tab.count
    LOOP
      IF i          = 1 THEN
        l_clob_all := l_clob_all||'     '||l_rec_tab(i).col_name||chr(10);
      ELSE
        l_clob_all := l_clob_all||'    ,'||l_rec_tab(i).col_name||chr(10);
      END IF;
    END LOOP;
    l_clob_all := l_clob_all|| '  )'||chr(10)|| '  values'||chr(10)|| '  ('||chr(10);
    ---------------------------------------
    -- Building INSERT - build values
    ---------------------------------------
    FOR i IN 1..l_rec_tab.count
    LOOP
      IF i !=1 THEN
        l_clob_all := l_clob_all||'    ,';
      ELSE
        l_clob_all := l_clob_all||'     ';
      END IF;
      IF l_rec_tab(i).col_type    = cons_number_code THEN --number
        l_clob_all               := l_clob_all||'to_number(l_varchar2('||TO_CHAR(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_clob_code THEN --clob
        l_clob_all               := l_clob_all||'l_clob('||TO_CHAR(i)||')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_char_code THEN --timestamp with local time zone
        l_clob_all               := l_clob_all||'to_char(l_clob('||TO_CHAR(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_varchar2_code THEN --timestamp with local time zone
        l_clob_all               := l_clob_all||'to_char(l_clob('||TO_CHAR(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_date_code THEN --date
        l_clob_all               := l_clob_all||'to_date(l_varchar2('||TO_CHAR(i)||'),'''||cons_date_frm||''')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_timestamp_code THEN --timestamp
        l_clob_all               := l_clob_all||'to_timestamp(l_varchar2('||TO_CHAR(i)||'),'''||cons_timestamp_frm||''')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_timestamp_wtz_code THEN --timestamp with time zone
        l_clob_all               := l_clob_all||'to_timestamp_tz(l_varchar2('||TO_CHAR(i)||'),'''||cons_timestamp_wtz_frm||''')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_interval_ytm_code THEN --interval year to month
        l_clob_all               := l_clob_all||'to_yminterval(l_varchar2('||TO_CHAR(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_interval_dts_code THEN --interval day to second
        l_clob_all               := l_clob_all||'to_dsinterval(l_varchar2('||TO_CHAR(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_timestamp_lwtz_code THEN --timestamp with local time zone
        l_clob_all               := l_clob_all||'to_timestamp_tz(l_varchar2('||TO_CHAR(i)||'),'''||cons_timestamp_wtz_frm||''')'||chr(10);
      ELSE
        l_clob_all := l_clob_all||'l_varchar2('||TO_CHAR(i)||')'||chr(10);
      END IF;
    END LOOP;
    l_clob_all := l_clob_all||'  );'||chr(10);
  END LOOP;
  IF (l_row_count=0) THEN
    l_clob_all  := l_clob_all|| 'NULL;'||chr(10);
  END IF;
  ---------------------------------------
  -- Building INSERT - end of code
  ---------------------------------------
  l_clob_all := l_clob_all||chr(10)||'end;';
  l_clob_all := l_clob_all||chr(10)||'/';
  ---------------------------------------
  -- Close cursor
  ---------------------------------------
  dbms_sql.close_cursor(l_cur);
  RETURN l_clob_all;
END;

/
--------------------------------------------------------

--  DDL for Function FN_GET_META_INSERTS

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."FN_GET_META_INSERTS" (
      P_Sql Clob,
      P_New_Table_Name Varchar2 )
    Return Clob
  Is
    L_Cur Number;
    L_Sql Clob := P_Sql;
    L_Ret     Number;
    L_Col_Cnt Number;
    L_Rec_Tab Dbms_Sql.Desc_Tab;
    L_Separator Char(1) := '!';
    L_Clob Clob;
    L_Clob_Line Clob;
    L_Clob_Ins Clob;
    L_Clob_All Clob;
    L_Line Clob                := '-----------------------------------';
    Cons_Date_Frm            Varchar2(32) := 'DD.MM.YYYY HH24:MI:SS';
    Cons_Timestamp_Frm       Varchar2(32) := 'DD.MM.YYYY HH24:MI:SSXFF';
    Cons_Timestamp_Wtz_Frm   Varchar2(32) := 'DD.MM.YYYY HH24:MI:SSXFF TZR';
    Cons_Varchar2_Code       Number       := 1;
    Cons_Nvarchar2_Code      Number       := 1;
    Cons_Number_Code         Number       := 2;
    Cons_Float_Code          Number       := 2;
    Cons_Long_Code           Number       := 8;
    Cons_Date_Code           Number       := 12;
    Cons_Binary_Float_Code   Number       := 100;
    Cons_Binary_Double_Code  Number       := 101;
    Cons_Timestamp_Code      Number       := 180;
    Cons_Timestamp_Wtz_Code  Number       := 181;
    Cons_Timestamp_Lwtz_Code Number       := 231;
    Cons_Interval_Ytm_Code   Number       := 182;
    Cons_Interval_Dts_Code   Number       := 183;
    Cons_Raw_Code            Number       := 23;
    Cons_Long_Raw_Code       Number       := 24;
    Cons_Rowid_Code          Number       := 11;
    Cons_Urowid_Code         Number       := 208;
    Cons_Char_Code           Number       := 96;
    Cons_Nchar_Code          Number       := 96;
    Cons_Clob_Code           Number       := 112;
    Cons_Nclob_Code          Number       := 112;
    Cons_Blob_Code           Number       := 113;
    Cons_Bfile_Code          Number       := 114;
    -------------------------------------
    -- Supported types
    -------------------------------------
    L_Varchar2_Col Varchar2(32767); --1
    L_Number_Col   Number;          --2
    --l_long_col                    long;          --8 - not supported
    L_Date_Col Date; --12
    --l_raw_col                     raw(2000);     --23 - not supported
    L_Rowid_Col Rowid;                 --69
    L_Char_Col Char(2000);             --96
    L_Binary_Float_Col Binary_Float;   --100
    L_Binary_Double_Col Binary_Double; --101
    L_Clob_Col Clob;                   --112
    L_Timestamp_Col Timestamp(9);      --180
    L_Timestamp_Wtz_Col Timestamp(9)
  With Time Zone;                                  --181
  L_Interval_Ytm_Col Interval Year(9) To Month;    --182
  L_Interval_Dts_Col Interval Day(9) To Second(2); --183
  L_Urowid_Col Urowid;                             --208
  L_Timestamp_Wltz_Col Timestamp
With Local Time Zone; --231
--l_nchar_col                   nchar(2000); --96 the same as char
--l_nclob_col                   nclob; --112 the same as clob
--l_blob_col - not supported
--l_bfile_col - not supported
--l_long_raw_col - not supported
Procedure Print_Rec(
    Rec In Dbms_Sql.Desc_Rec)
Is
Begin
  L_Clob_All := L_Clob_All||Chr(10)|| 'col_type            =    ' || Rec.Col_Type||Chr(10)|| 'col_maxlen          =    ' || Rec.Col_Max_Len||Chr(10)|| 'col_name            =    ' || Rec.Col_Name||Chr(10)|| 'col_name_len        =    ' || Rec.Col_Name_Len||Chr(10)|| 'col_schema_name     =    ' || Rec.Col_Schema_Name||Chr(10)|| 'col_schema_name_len =    ' || Rec.Col_Schema_Name_Len||Chr(10)|| 'col_precision       =    ' || Rec.Col_Precision||Chr(10)|| 'col_scale           =    ' || Rec.Col_Scale||Chr(10)|| 'col_null_ok         =    ';
  If (Rec.Col_Null_Ok) Then
    L_Clob_All := L_Clob_All||'true'||Chr(10);
  Else
    L_Clob_All := L_Clob_All||'false'||Chr(10);
  End If;
End;
Begin
  ---------------------------------------
  -- INSERT - header generation
  ---------------------------------------
  L_Clob_All := 'declare'||Chr(10)|| '  type   t_clob is table of clob index by binary_integer;'||Chr(10)|| '  l_clob t_clob;'||Chr(10)|| '  type   t_varchar2 is table of varchar2(64) index by binary_integer;'||Chr(10)|| '  l_varchar2 t_varchar2;'||Chr(10)|| 'begin'||Chr(10)|| '/*'||Chr(10);
  ---------------------------------------
  -- Introduction
  ---------------------------------------
  L_Clob_All := L_Clob_All||L_Line||Chr(10)||'Parsing query:'||Chr(10)||L_Sql||Chr(10);
  ---------------------------------------
  -- Open parse cursor
  ---------------------------------------
  L_Cur := Dbms_Sql.Open_Cursor;
  Dbms_Sql.Parse(L_Cur, L_Sql, Dbms_Sql.Native);
  ---------------------------------------
  -- Describe columns
  ---------------------------------------
  L_Clob_All := L_Clob_All||L_Line||Chr(10)||'Describe columns:'||Chr(10);
  Dbms_Sql.Describe_Columns(L_Cur, L_Col_Cnt, L_Rec_Tab);
  /*
  for i in 1..l_rec_tab.count
  loop
  print_rec(l_rec_tab(i));
  end loop;
  */
  L_Clob_All := L_Clob_All||Chr(10)|| '*/'||Chr(10)|| '  '||Chr(10)||L_Line||Chr(10)|| '  -- start generation of records'||Chr(10)|| '  '||L_Line||Chr(10);
  ---------------------------------------
  -- Define columns
  ---------------------------------------
  For I In 1..L_Rec_Tab.Count
  Loop
    If L_Rec_Tab(I).Col_Type = Cons_Varchar2_Code Then --varchar2
      Dbms_Sql.Define_Column(L_Cur, I, L_Varchar2_Col, L_Rec_Tab(I).Col_Max_Len);
    Elsif L_Rec_Tab(I).Col_Type = Cons_Number_Code Then --number
      Dbms_Sql.Define_Column(L_Cur, I, L_Number_Col);
      --elsif l_rec_tab(i).col_type = cons_long_code then --long
      --  dbms_sql.define_column_long(l_cur, i);
    Elsif L_Rec_Tab(I).Col_Type = Cons_Date_Code Then --date
      Dbms_Sql.Define_Column(L_Cur, I, L_Date_Col);
    Elsif L_Rec_Tab(I).Col_Type = Cons_Binary_Float_Code Then --binary_float
      Dbms_Sql.Define_Column(L_Cur, I, L_Binary_Float_Col);
    Elsif L_Rec_Tab(I).Col_Type = Cons_Binary_Double_Code Then --binary_double
      Dbms_Sql.Define_Column(L_Cur, I, L_Binary_Double_Col);
      --    elsif l_rec_tab(i).col_type = cons_raw_code then --raw
      --      dbms_sql.define_column_raw(l_cur, i, l_raw_col, l_rec_tab(i).col_max_len);
    Elsif L_Rec_Tab(I).Col_Type = Cons_Rowid_Code Then --rowid
      Dbms_Sql.Define_Column_Rowid(L_Cur, I, L_Rowid_Col);
    Elsif L_Rec_Tab(I).Col_Type = Cons_Char_Code Then --char
      Dbms_Sql.Define_Column_Char(L_Cur, I, L_Char_Col, L_Rec_Tab(I).Col_Max_Len);
    Elsif L_Rec_Tab(I).Col_Type = Cons_Clob_Code Then --clob
      Dbms_Sql.Define_Column(L_Cur, I, L_Clob_Col);
    Elsif L_Rec_Tab(I).Col_Type = Cons_Timestamp_Code Then --timestamp
      Dbms_Sql.Define_Column(L_Cur, I, L_Timestamp_Col);
    Elsif L_Rec_Tab(I).Col_Type = Cons_Timestamp_Wtz_Code Then --timestamp with time zone
      Dbms_Sql.Define_Column(L_Cur, I, L_Timestamp_Wtz_Col);
    Elsif L_Rec_Tab(I).Col_Type = Cons_Rowid_Code Then --urowid
      Dbms_Sql.Define_Column(L_Cur, I, L_Urowid_Col);
    Elsif L_Rec_Tab(I).Col_Type = Cons_Timestamp_Lwtz_Code Then --timestamp with local time zone
      Dbms_Sql.Define_Column(L_Cur, I, L_Timestamp_Wltz_Col);
    Elsif L_Rec_Tab(I).Col_Type = Cons_Interval_Ytm_Code Then --interval year to month
      Dbms_Sql.Define_Column(L_Cur, I, L_Interval_Ytm_Col);
    Elsif L_Rec_Tab(I).Col_Type = Cons_Interval_Dts_Code Then --interval day to second
      Dbms_Sql.Define_Column(L_Cur, I, L_Interval_Dts_Col);
    Elsif L_Rec_Tab(I).Col_Type = Cons_Urowid_Code Then --urowid
      Dbms_Sql.Define_Column(L_Cur, I, L_Urowid_Col);
    Else
      Raise_Application_Error(-20001, 'Column: '||L_Rec_Tab(I).Col_Name||Chr(10)|| 'Type not supported: '||L_Rec_Tab(I).Col_Type);
      --not supported
    End If;
  End Loop;
  ---------------------------------------
  -- Execute cursor
  ---------------------------------------
  L_Ret := Dbms_Sql.Execute(L_Cur);
  ---------------------------------------
  -- Fetch rows
  ---------------------------------------
  Loop
    L_Ret := Dbms_Sql.Fetch_Rows(L_Cur);
    Exit
  When L_Ret = 0;
    ---------------------------------------
    -- Building INSERT - build column declarations
    ---------------------------------------
    L_Clob_Line := '';
    For I       In 1..L_Rec_Tab.Count
    Loop
      If L_Rec_Tab(I).Col_Type = Cons_Varchar2_Code Then --varchar2
        Dbms_Sql.Column_Value(L_Cur, I, L_Varchar2_Col);
        L_Clob                   := L_Varchar2_Col;
      Elsif L_Rec_Tab(I).Col_Type = Cons_Number_Code Then --number
        Dbms_Sql.Column_Value(L_Cur, I, L_Number_Col);
        L_Clob := To_Char(L_Number_Col);
        --      elsif l_rec_tab(i).col_type = cons_long_code then --long
        --        dbms_sql.column_value(l_cur, i, l_long_col);
        --        l_clob := l_long_col;
      Elsif L_Rec_Tab(I).Col_Type = Cons_Date_Code Then --date
        Dbms_Sql.Column_Value(L_Cur, I, L_Date_Col);
        L_Clob                   := To_Char(L_Date_Col, Cons_Date_Frm);
      Elsif L_Rec_Tab(I).Col_Type = Cons_Binary_Float_Code Then --binary_float
        Dbms_Sql.Column_Value(L_Cur, I, L_Binary_Float_Col);
        L_Clob                   := To_Char(L_Binary_Float_Col);
      Elsif L_Rec_Tab(I).Col_Type = Cons_Binary_Double_Code Then --binary_double
        Dbms_Sql.Column_Value(L_Cur, I, L_Binary_Double_Col);
        L_Clob := To_Char(L_Binary_Double_Col);
        --      elsif l_rec_tab(i).col_type = cons_raw_code then --raw
        --        dbms_sql.column_value(l_cur, i, l_raw_col);
        --        l_clob := to_char(l_raw_col);
      Elsif L_Rec_Tab(I).Col_Type = Cons_Rowid_Code Then --rowid
        Dbms_Sql.Column_Value(L_Cur, I, L_Rowid_Col);
        L_Clob                   := To_Char(L_Rowid_Col);
      Elsif L_Rec_Tab(I).Col_Type = Cons_Char_Code Then --char
        Dbms_Sql.Column_Value_Char(L_Cur, I, L_Char_Col);
        L_Clob                   := Substr(L_Char_Col, 1, L_Rec_Tab(I).Col_Max_Len - 1);
      Elsif L_Rec_Tab(I).Col_Type = Cons_Clob_Code Then --clob
        Dbms_Sql.Column_Value(L_Cur, I, L_Clob_Col);
        L_Clob                   := L_Clob_Col;
      Elsif L_Rec_Tab(I).Col_Type = Cons_Timestamp_Code Then --timestamp
        Dbms_Sql.Column_Value(L_Cur, I, L_Timestamp_Col);
        L_Clob                   := To_Char(L_Timestamp_Col, Cons_Timestamp_Frm);
      Elsif L_Rec_Tab(I).Col_Type = Cons_Timestamp_Wtz_Code Then --timestamp with time zone
        Dbms_Sql.Column_Value(L_Cur, I, L_Timestamp_Wtz_Col);
        L_Clob                   := To_Char(L_Timestamp_Wtz_Col, Cons_Timestamp_Wtz_Frm);
      Elsif L_Rec_Tab(I).Col_Type = Cons_Interval_Ytm_Code Then --interval year to month
        Dbms_Sql.Column_Value(L_Cur, I, L_Interval_Ytm_Col);
        L_Clob                   := To_Char(L_Interval_Ytm_Col);
      Elsif L_Rec_Tab(I).Col_Type = Cons_Interval_Dts_Code Then --interval day to second
        Dbms_Sql.Column_Value(L_Cur, I, L_Interval_Dts_Col);
        L_Clob                   := To_Char(L_Interval_Dts_Col);
      Elsif L_Rec_Tab(I).Col_Type = Cons_Urowid_Code Then --urowid
        Dbms_Sql.Column_Value(L_Cur, I, L_Urowid_Col);
        L_Clob                   := To_Char(L_Urowid_Col);
      Elsif L_Rec_Tab(I).Col_Type = Cons_Timestamp_Lwtz_Code Then --timestamp with local time zone
        Dbms_Sql.Column_Value(L_Cur, I, L_Timestamp_Wltz_Col);
        L_Clob := To_Char(L_Timestamp_Wltz_Col, Cons_Timestamp_Wtz_Frm);
      End If;
      If L_Rec_Tab(I).Col_Type In (Cons_Clob_Code, Cons_Char_Code, Cons_Varchar2_Code) Then
        L_Clob_Line            := L_Clob_Line||'  l_clob('||To_Char(I)||') :=q'''||L_Separator||L_Clob||L_Separator||''';'||Chr(10);
      Else
        L_Clob_Line := L_Clob_Line||'  l_varchar2('||To_Char(I)||') :=q'''||L_Separator||L_Clob||L_Separator||''';'||Chr(10);
      End If;
    End Loop;
    L_Clob_All := L_Clob_All||Chr(10)||L_Clob_Line;
    ---------------------------------------
    -- Building INSERT - build column list
    ---------------------------------------
    L_Clob_All := L_Clob_All||Chr(10)|| '  insert into '||P_New_Table_Name||Chr(10)|| '  ('||Chr(10);
    For I      In 1..L_Rec_Tab.Count
    Loop
      If I          = 1 Then
        L_Clob_All := L_Clob_All||'     '||L_Rec_Tab(I).Col_Name||Chr(10);
      Else
        L_Clob_All := L_Clob_All||'    ,'||L_Rec_Tab(I).Col_Name||Chr(10);
      End If;
    End Loop;
    L_Clob_All := L_Clob_All|| '  )'||Chr(10)|| '  values'||Chr(10)|| '  ('||Chr(10);
    ---------------------------------------
    -- Building INSERT - build values
    ---------------------------------------
    For I In 1..L_Rec_Tab.Count
    Loop
      If I!=1 Then
        L_Clob_All := L_Clob_All||'    ,';
      Else
        L_Clob_All := L_Clob_All||'     ';
      End If;
      If L_Rec_Tab(I).Col_Type = Cons_Number_Code Then --number
        L_Clob_All            := L_Clob_All||'to_number(l_varchar2('||To_Char(I)||'))'||Chr(10);
        --      elsif l_rec_tab(i).col_type = cons_long_code then --long
        --        l_clob := l_long_col;
      Elsif L_Rec_Tab(I).Col_Type = Cons_Clob_Code Then --clob
        L_Clob_All               := L_Clob_All||'l_clob('||To_Char(I)||')'||Chr(10);
      Elsif L_Rec_Tab(I).Col_Type = Cons_Char_Code Then --timestamp with local time zone
        L_Clob_All               := L_Clob_All||'to_char(l_clob('||To_Char(I)||'))'||Chr(10);
      Elsif L_Rec_Tab(I).Col_Type = Cons_Varchar2_Code Then --timestamp with local time zone
        L_Clob_All               := L_Clob_All||'to_char(l_clob('||To_Char(I)||'))'||Chr(10);
      Elsif L_Rec_Tab(I).Col_Type = Cons_Date_Code Then --date
        L_Clob_All               := L_Clob_All||'to_date(l_varchar2('||To_Char(I)||'),'''||Cons_Date_Frm||''')'||Chr(10);
      Elsif L_Rec_Tab(I).Col_Type = Cons_Timestamp_Code Then --timestamp
        L_Clob_All               := L_Clob_All||'to_timestamp(l_varchar2('||To_Char(I)||'),'''||Cons_Timestamp_Frm||''')'||Chr(10);
      Elsif L_Rec_Tab(I).Col_Type = Cons_Timestamp_Wtz_Code Then --timestamp with time zone
        L_Clob_All               := L_Clob_All||'to_timestamp_tz(l_varchar2('||To_Char(I)||'),'''||Cons_Timestamp_Wtz_Frm||''')'||Chr(10);
      Elsif L_Rec_Tab(I).Col_Type = Cons_Interval_Ytm_Code Then --interval year to month
        L_Clob_All               := L_Clob_All||'to_yminterval(l_varchar2('||To_Char(I)||'))'||Chr(10);
      Elsif L_Rec_Tab(I).Col_Type = Cons_Interval_Dts_Code Then --interval day to second
        L_Clob_All               := L_Clob_All||'to_dsinterval(l_varchar2('||To_Char(I)||'))'||Chr(10);
      Elsif L_Rec_Tab(I).Col_Type = Cons_Timestamp_Lwtz_Code Then --timestamp with local time zone
        L_Clob_All               := L_Clob_All||'to_timestamp_tz(l_varchar2('||To_Char(I)||'),'''||Cons_Timestamp_Wtz_Frm||''')'||Chr(10);
      Else
        L_Clob_All := L_Clob_All||'l_varchar2('||To_Char(I)||')'||Chr(10);
      End If;
    End Loop;
    L_Clob_All := L_Clob_All||'  );'||Chr(10);
  End Loop;
  ---------------------------------------
  -- Building INSERT - end of code
  ---------------------------------------
  L_Clob_All := L_Clob_All||Chr(10)||'end;';
  L_Clob_All := L_Clob_All||Chr(10)||'/';
  ---------------------------------------
  -- Close cursor
  ---------------------------------------
  Dbms_Sql.Close_Cursor(L_Cur);
  Return L_Clob_All;
End;

/
--------------------------------------------------------

--  DDL for Function FN_GET_RA_META_INSERTS

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."FN_GET_RA_META_INSERTS" 
(
  p_sql                        clob, 
  p_new_table_name             varchar2
)
return clob
is
  l_cur                        number;
  l_sql                        clob := p_sql;
  l_ret                        number;
  l_col_cnt                    number;
  l_rec_tab                    dbms_sql.desc_tab;

  l_separator                  char(1) := '!';
  l_clob                       clob;
  l_clob_line                  clob;
  l_clob_ins                   clob;
  l_clob_all                   clob;
  l_line                       clob := '-----------------------------------';

  cons_date_frm                varchar2(32) := 'DD.MM.YYYY HH24:MI:SS';
  cons_timestamp_frm           varchar2(32) := 'DD.MM.YYYY HH24:MI:SSXFF';
  cons_timestamp_wtz_frm       varchar2(32) := 'DD.MM.YYYY HH24:MI:SSXFF TZR';

  cons_varchar2_code           number := 1;
  cons_nvarchar2_code          number := 1;
  cons_number_code             number := 2;
  cons_float_code              number := 2;
  cons_long_code               number := 8;
  cons_date_code               number := 12;
  cons_binary_float_code       number := 100;
  cons_binary_double_code      number := 101;
  cons_timestamp_code          number := 180;
  cons_timestamp_wtz_code      number := 181;
  cons_timestamp_lwtz_code     number := 231;
  cons_interval_ytm_code       number := 182;
  cons_interval_dts_code       number := 183;
  cons_raw_code                number := 23;
  cons_long_raw_code           number := 24;
  cons_rowid_code              number := 11;
  cons_urowid_code             number := 208;
  cons_char_code               number := 96;
  cons_nchar_code              number := 96;
  cons_clob_code               number := 112;
  cons_nclob_code              number := 112;
  cons_blob_code               number := 113;
  cons_bfile_code              number := 114;

  -------------------------------------
  -- Supported types
  -------------------------------------
  l_varchar2_col                varchar2(32767); --1
  l_number_col                  number;          --2
  --l_long_col                    long;          --8 - not supported
  l_date_col                    date;            --12
  --l_raw_col                     raw(2000);     --23 - not supported
  l_rowid_col                   rowid;           --69
  l_char_col                    char(2000);      --96
  l_binary_float_col            binary_float;    --100
  l_binary_double_col           binary_double;   --101
  l_clob_col                    clob;            --112
  l_timestamp_col               timestamp(9);    --180
  l_timestamp_wtz_col           timestamp(9) with time zone;    --181
  l_interval_ytm_col            interval year(9) to month;      --182
  l_interval_dts_col            interval day(9) to second(2);   --183
  l_urowid_col                  urowid;                         --208
  l_timestamp_wltz_col          timestamp with local time zone; --231
  --l_nchar_col                   nchar(2000); --96 the same as char
  --l_nclob_col                   nclob; --112 the same as clob
  --l_blob_col - not supported
  --l_bfile_col - not supported
  --l_long_raw_col - not supported

  procedure print_rec(rec in dbms_sql.desc_rec) is
  begin
    l_clob_all := l_clob_all||chr(10)||
      'col_type            =    ' || rec.col_type||chr(10)||
      'col_maxlen          =    ' || rec.col_max_len||chr(10)||
      'col_name            =    ' || rec.col_name||chr(10)||
      'col_name_len        =    ' || rec.col_name_len||chr(10)||
      'col_schema_name     =    ' || rec.col_schema_name||chr(10)||
      'col_schema_name_len =    ' || rec.col_schema_name_len||chr(10)||
      'col_precision       =    ' || rec.col_precision||chr(10)||
      'col_scale           =    ' || rec.col_scale||chr(10)||
      'col_null_ok         =    ';

    if (rec.col_null_ok) then
      l_clob_all := l_clob_all||'true'||chr(10);
    else
      l_clob_all := l_clob_all||'false'||chr(10);
    end if;
  end;  
begin
  ---------------------------------------
  -- INSERT - header generation
  ---------------------------------------
  l_clob_all := 
  'declare'||chr(10)||
  '  type   t_clob is table of clob index by binary_integer;'||chr(10)||
  '  l_clob t_clob;'||chr(10)||
  '  type   t_varchar2 is table of varchar2(64) index by binary_integer;'||chr(10)||
  '  l_varchar2 t_varchar2;'||chr(10)||
  'begin'||chr(10)||
  '/*'||chr(10);

  ---------------------------------------
  -- Introduction
  ---------------------------------------
  --l_clob_all := l_clob_all||l_line||chr(10)||'Parsing query:'||chr(10)||l_sql||chr(10);

  ---------------------------------------
  -- Open parse cursor
  ---------------------------------------
  l_cur := dbms_sql.open_cursor;
  dbms_sql.parse(l_cur, l_sql, dbms_sql.native);

  ---------------------------------------
  -- Describe columns
  ---------------------------------------
  l_clob_all := l_clob_all||l_line||chr(10)||'Describe columns:'||chr(10);

  dbms_sql.describe_columns(l_cur, l_col_cnt, l_rec_tab);

  /*
  for i in 1..l_rec_tab.count
  loop
    print_rec(l_rec_tab(i));
  end loop;

   */
  l_clob_all := l_clob_all||chr(10)||
            '*/'||chr(10)||
            '  '||chr(10)||l_line||chr(10)||
            '  -- start generation of records'||chr(10)||
            '  '||l_line||chr(10);

  ---------------------------------------
  -- Define columns
  ---------------------------------------
  for i in 1..l_rec_tab.count
  loop
    if    l_rec_tab(i).col_type = cons_varchar2_code then --varchar2
      dbms_sql.define_column(l_cur, i, l_varchar2_col, l_rec_tab(i).col_max_len); 
    elsif l_rec_tab(i).col_type = cons_number_code then --number
      dbms_sql.define_column(l_cur, i, l_number_col); 
    --elsif l_rec_tab(i).col_type = cons_long_code then --long
    --  dbms_sql.define_column_long(l_cur, i); 
    elsif l_rec_tab(i).col_type = cons_date_code then --date
      dbms_sql.define_column(l_cur, i, l_date_col); 
    elsif l_rec_tab(i).col_type = cons_binary_float_code then --binary_float
      dbms_sql.define_column(l_cur, i, l_binary_float_col); 
    elsif l_rec_tab(i).col_type = cons_binary_double_code then --binary_double
      dbms_sql.define_column(l_cur, i, l_binary_double_col); 
--    elsif l_rec_tab(i).col_type = cons_raw_code then --raw
--      dbms_sql.define_column_raw(l_cur, i, l_raw_col, l_rec_tab(i).col_max_len); 
    elsif l_rec_tab(i).col_type = cons_rowid_code then  --rowid
      dbms_sql.define_column_rowid(l_cur, i, l_rowid_col); 
    elsif l_rec_tab(i).col_type = cons_char_code then  --char
      dbms_sql.define_column_char(l_cur, i, l_char_col, l_rec_tab(i).col_max_len); 
    elsif l_rec_tab(i).col_type = cons_clob_code then --clob
      dbms_sql.define_column(l_cur, i, l_clob_col); 
    elsif l_rec_tab(i).col_type = cons_timestamp_code then --timestamp
      dbms_sql.define_column(l_cur, i, l_timestamp_col); 
    elsif l_rec_tab(i).col_type = cons_timestamp_wtz_code then --timestamp with time zone
      dbms_sql.define_column(l_cur, i, l_timestamp_wtz_col); 
    elsif l_rec_tab(i).col_type = cons_rowid_code then --urowid
      dbms_sql.define_column(l_cur, i, l_urowid_col); 
    elsif l_rec_tab(i).col_type = cons_timestamp_lwtz_code then --timestamp with local time zone
      dbms_sql.define_column(l_cur, i, l_timestamp_wltz_col); 
    elsif l_rec_tab(i).col_type = cons_interval_ytm_code then --interval year to month
      dbms_sql.define_column(l_cur, i, l_interval_ytm_col); 
    elsif l_rec_tab(i).col_type = cons_interval_dts_code then --interval day to second
      dbms_sql.define_column(l_cur, i, l_interval_dts_col); 
    elsif l_rec_tab(i).col_type = cons_urowid_code then --urowid
      dbms_sql.define_column(l_cur, i, l_urowid_col); 
    else
      raise_application_error(-20001, 'Column: '||l_rec_tab(i).col_name||chr(10)||
                                      'Type not supported: '||l_rec_tab(i).col_type);
      --not supported
    end if;
  end loop;

  ---------------------------------------
  -- Execute cursor
  ---------------------------------------
  l_ret := dbms_sql.execute(l_cur);

  ---------------------------------------
  -- Fetch rows
  ---------------------------------------
  loop
    l_ret := dbms_sql.fetch_rows(l_cur);
    exit when l_ret = 0;

    ---------------------------------------
    -- Building INSERT - build column declarations
    ---------------------------------------
    l_clob_line := '';

    for i in 1..l_rec_tab.count
    loop
      if    l_rec_tab(i).col_type = cons_varchar2_code then --varchar2
        dbms_sql.column_value(l_cur, i, l_varchar2_col); 
        l_clob := l_varchar2_col;
      elsif l_rec_tab(i).col_type = cons_number_code then --number
        dbms_sql.column_value(l_cur, i, l_number_col); 
        l_clob := to_char(l_number_col);
--      elsif l_rec_tab(i).col_type = cons_long_code then --long
--        dbms_sql.column_value(l_cur, i, l_long_col); 
--        l_clob := l_long_col;
      elsif l_rec_tab(i).col_type = cons_date_code then --date
        dbms_sql.column_value(l_cur, i, l_date_col); 
        l_clob := to_char(l_date_col, cons_date_frm);
      elsif l_rec_tab(i).col_type = cons_binary_float_code then --binary_float
        dbms_sql.column_value(l_cur, i, l_binary_float_col); 
        l_clob := to_char(l_binary_float_col);
      elsif l_rec_tab(i).col_type = cons_binary_double_code then --binary_double
        dbms_sql.column_value(l_cur, i, l_binary_double_col); 
        l_clob := to_char(l_binary_double_col);
--      elsif l_rec_tab(i).col_type = cons_raw_code then --raw
--        dbms_sql.column_value(l_cur, i, l_raw_col); 
--        l_clob := to_char(l_raw_col);
      elsif l_rec_tab(i).col_type = cons_rowid_code then --rowid
        dbms_sql.column_value(l_cur, i, l_rowid_col); 
        l_clob := to_char(l_rowid_col);
      elsif l_rec_tab(i).col_type = cons_char_code then --char
        dbms_sql.column_value_char(l_cur, i, l_char_col); 
        l_clob := substr(l_char_col, 1, l_rec_tab(i).col_max_len - 1);
      elsif l_rec_tab(i).col_type = cons_clob_code then --clob
        dbms_sql.column_value(l_cur, i, l_clob_col); 
        l_clob := l_clob_col;
      elsif l_rec_tab(i).col_type = cons_timestamp_code then --timestamp
        dbms_sql.column_value(l_cur, i, l_timestamp_col); 
        l_clob := to_char(l_timestamp_col, cons_timestamp_frm);
      elsif l_rec_tab(i).col_type = cons_timestamp_wtz_code then --timestamp with time zone
        dbms_sql.column_value(l_cur, i, l_timestamp_wtz_col); 
        l_clob := to_char(l_timestamp_wtz_col, cons_timestamp_wtz_frm);
      elsif l_rec_tab(i).col_type = cons_interval_ytm_code then --interval year to month
        dbms_sql.column_value(l_cur, i, l_interval_ytm_col); 
        l_clob := to_char(l_interval_ytm_col);
      elsif l_rec_tab(i).col_type = cons_interval_dts_code then --interval day to second
        dbms_sql.column_value(l_cur, i, l_interval_dts_col); 
        l_clob := to_char(l_interval_dts_col);
      elsif l_rec_tab(i).col_type = cons_urowid_code then --urowid
        dbms_sql.column_value(l_cur, i, l_urowid_col); 
        l_clob := to_char(l_urowid_col);
      elsif l_rec_tab(i).col_type = cons_timestamp_lwtz_code then --timestamp with local time zone
        dbms_sql.column_value(l_cur, i, l_timestamp_wltz_col); 
        l_clob := to_char(l_timestamp_wltz_col, cons_timestamp_wtz_frm);
      end if;

      if l_rec_tab(i).col_type in (cons_clob_code, cons_char_code, cons_varchar2_code) then
        l_clob_line := l_clob_line||'  l_clob('||to_char(i)||') :=q'''||l_separator||l_clob||l_separator||''';'||chr(10);
      else
        l_clob_line := l_clob_line||'  l_varchar2('||to_char(i)||') :=q'''||l_separator||l_clob||l_separator||''';'||chr(10);
      end if;
    end loop;

    l_clob_all := l_clob_all||chr(10)||l_clob_line;

    ---------------------------------------
    -- Building INSERT - build column list
    ---------------------------------------
    l_clob_all := l_clob_all||chr(10)||
              '  insert into '||p_new_table_name||chr(10)||
              '  ('||chr(10);

    for i in 1..l_rec_tab.count
    loop
      if i = 1 then
        l_clob_all := l_clob_all||'     '||l_rec_tab(i).col_name||chr(10);
      else  
        l_clob_all := l_clob_all||'    ,'||l_rec_tab(i).col_name||chr(10);
      end if;  
    end loop;    

    l_clob_all := l_clob_all||
              '  )'||chr(10)||
              '  values'||chr(10)||
              '  ('||chr(10);

    ---------------------------------------
    -- Building INSERT - build values
    ---------------------------------------
    for i in 1..l_rec_tab.count
    loop
      if i!=1 then
        l_clob_all := l_clob_all||'    ,';
      else  
        l_clob_all := l_clob_all||'     ';
      end if;

      if l_rec_tab(i).col_type = cons_number_code then --number
        l_clob_all := l_clob_all||'to_number(l_varchar2('||to_char(i)||'))'||chr(10);
--      elsif l_rec_tab(i).col_type = cons_long_code then --long
--        l_clob := l_long_col;
      elsif l_rec_tab(i).col_type = cons_clob_code then --clob
        l_clob_all := l_clob_all||'l_clob('||to_char(i)||')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_char_code then --timestamp with local time zone
        l_clob_all := l_clob_all||'to_char(l_clob('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_varchar2_code then --timestamp with local time zone
        l_clob_all := l_clob_all||'to_char(l_clob('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_date_code then --date
        l_clob_all := l_clob_all||'to_date(l_varchar2('||to_char(i)||'),'''||cons_date_frm||''')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_timestamp_code then --timestamp
        l_clob_all := l_clob_all||'to_timestamp(l_varchar2('||to_char(i)||'),'''||cons_timestamp_frm||''')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_timestamp_wtz_code then --timestamp with time zone
        l_clob_all := l_clob_all||'to_timestamp_tz(l_varchar2('||to_char(i)||'),'''||cons_timestamp_wtz_frm||''')'||chr(10);
      elsif l_rec_tab(i).col_type = cons_interval_ytm_code then --interval year to month
        l_clob_all := l_clob_all||'to_yminterval(l_varchar2('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_interval_dts_code then --interval day to second
        l_clob_all := l_clob_all||'to_dsinterval(l_varchar2('||to_char(i)||'))'||chr(10);
      elsif l_rec_tab(i).col_type = cons_timestamp_lwtz_code then --timestamp with local time zone
        l_clob_all := l_clob_all||'to_timestamp_tz(l_varchar2('||to_char(i)||'),'''||cons_timestamp_wtz_frm||''')'||chr(10);
      else  
        l_clob_all := l_clob_all||'l_varchar2('||to_char(i)||')'||chr(10);
      end if;  
    end loop; 

    l_clob_all := l_clob_all||'  );'||chr(10);
  end loop;

  ---------------------------------------
  -- Building INSERT - end of code
  ---------------------------------------
  l_clob_all := l_clob_all||chr(10)||'end;';
  l_clob_all := l_clob_all||chr(10)||'/';

  ---------------------------------------
  -- Close cursor
  ---------------------------------------
  dbms_sql.close_cursor(l_cur);

  return l_clob_all;
end;

/
--------------------------------------------------------

--  DDL for Function FN_GET_UNIV_TRANS_VAL

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."FN_GET_UNIV_TRANS_VAL" 
(
  P_DATA_TYPE                  VARCHAR2,
  P_VALUE                      VARCHAR2
  
)
return VARCHAR2
AS

  O_VALUE                   VARCHAR2(2000);

BEGIN
O_VALUE:=P_VALUE;
IF(P_DATA_TYPE = 'VARCHAR') THEN
O_VALUE:=''''||P_VALUE || '''';
ELSIF(P_DATA_TYPE = 'DATE') THEN
O_VALUE:=P_VALUE;
END IF;
return o_value;
end;

/
--------------------------------------------------------

--  DDL for Function FUNC_GET_REPORT_INSTANCES

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."FUNC_GET_REPORT_INSTANCES" (P_REPORT_ID IN NUMBER) return SYS_REFCURSOR as 
 P_RECORDSET SYS_REFCURSOR;
BEGIN
  IF P_REPORT_ID IS NOT NULL THEN
  OPEN P_RECORDSET FOR  SELECT * FROM RA_REPORT_INSTANCES WHERE  REPORT_ID = P_REPORT_ID;
  ELSE
  OPEN P_RECORDSET FOR  SELECT * FROM RA_REPORT_INSTANCES ;
  END IF;
  RETURN P_RECORDSET;
END;

/
--------------------------------------------------------

--  DDL for Function GEN_XML_SCHEMA

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."GEN_XML_SCHEMA" (target_table varchar2) return xmltype
as
xmlSchema XMLTYPE;
begin
select
xmlElement(
"xsd:schema",
xmlAttributes(
'http://www.w3.org/2001/XMLSchema' as "xmlns:xsd",
'http://xmlns.oracle.com/xdb' as "xmlns:xdb"
),
xmlElement(
"xsd:element",
xmlAttributes(
'ROWSET' as "name",
'rowset' as "type"
)
),
xmlElement(
"xsd:complexType",
xmlAttributes
(
'rowset' as "name"
),
xmlElement
(
"xsd:sequence",
xmlElement
(
"xsd:element",
xmlAttributes
(
'ROW' as "name",
table_name || '_T' as "type",
'unbounded' as "maxOccurs"
)
)
)
),
xmlElement
(
"xsd:complexType",
xmlAttributes
(
table_name || '_T' as "name"
),
xmlElement
(
"xsd:sequence",
(
xmlAgg(ELEMENT)
)
)
)
)
into xmlSchema
from (
select TABLE_NAME, INTERNAL_COLUMN_ID,
case
when DATA_TYPE in ('VARCHAR2', 'CHAR') then
xmlElement
(
"xsd:element",
xmlattributes
(
column_name as "name",
decode(NULLABLE, 'Y', 0, 1) as "minOccurs",
column_name as "xdb:SQLName",
DATA_TYPE as "xdb:SQLTYPE"
),
xmlElement
(
"xsd:simpleType",
xmlElement
(
"xsd:restriction",
xmlAttributes
(
'xsd:string' as "base"
),
xmlElement
(
"xsd:maxLength",
xmlAttributes
(
DATA_LENGTH as "value"
)
)
)
)
)
when DATA_TYPE = 'DATE' then
xmlElement
(
"xsd:element",
xmlattributes
(
column_name as "name",
--'xsd:dateTime' as "type",
'xsd:date' as "type",
decode(NULLABLE, 'Y', 0, 1) as "minOccurs",
column_name as "xdb:SQLName",
DATA_TYPE as "xdb:SQLTYPE"
)
)
when DATA_TYPE = 'NUMBER' then
xmlElement
(
"xsd:element",
xmlattributes
(
column_name as "name",
decode(DATA_SCALE, 0, 'xsd:integer', 'xsd:double') as "type",
decode(NULLABLE, 'Y', 0, 1) as "minOccurs",
column_name as "xdb:SQLName",
DATA_TYPE as "xdb:SQLTYPE"
)
)
else
xmlElement
(
"xsd:element",
xmlattributes
(
column_name as "name",
'xsd:anySimpleType' as "type",
decode(NULLABLE, 'Y', 0, 1) as "minOccurs",
column_name as "xdb:SQLName",
DATA_TYPE as "xdb:SQLTYPE"
)
)
end ELEMENT
from user_tab_cols c
where TABLE_NAME = target_table
order by internal_column_id
)
group by TABLE_NAME;

RETURN XMLSCHEMA;
end;

/
--------------------------------------------------------

--  DDL for Function GET_USER

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."GET_USER" return varchar2 as
luser  varchar2(30);

BEGIN

SELECT SYS_CONTEXT('USERENV', 'OS_USER') 
INTO luser
FROM DUAL;

RETURN luser;

END GET_USER;

/
--------------------------------------------------------

--  DDL for Function RA_CHECKSUM_CLOB_FUNC

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."RA_CHECKSUM_CLOB_FUNC" ( p_lob in clob ) return number
 DETERMINISTIC
 as
    l_checksum varchar2(32);
    l_raw      raw(16);
 begin
 
    l_checksum :=
           dbms_obfuscation_toolkit.md5( input_string=> 
			dbms_lob.substr(p_lob,32000,1) );
 
    l_checksum := utl_raw.cast_to_raw( l_checksum );
 
    return to_number( substr(l_checksum,1,16), lpad('x',33,'x') )+
           to_number( substr(l_checksum,17), lpad('x',33,'x') );
 
 end;
 

/
--------------------------------------------------------

--  DDL for Function RA_RPT_GETFILE_SIZE

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."RA_RPT_GETFILE_SIZE" (FILESIZE IN NUMBER)
RETURN VARCHAR2 IS 

  -- MODIFICATION HISTORY
  -- Person           Date           Comments
  -- ---------        ------         ------------------------------------------
  -- Subra            11/15/2013     Created funcation get the filesize 

 O_FILESIZE VARCHAR2(50);

BEGIN

  IF ( FILESIZE < 1024 ) THEN 
    O_FILESIZE := FILESIZE || ' Bytes';
  ELSIF  FILESIZE >= 1024 AND  FILESIZE < POWER(1024,2)  THEN
    O_FILESIZE := ROUND( FILESIZE / 1024, 2) || ' KB';
  ELSIF  FILESIZE >= POWER(1024,2) AND FILESIZE < POWER(1024,3) THEN
    O_FILESIZE := ROUND( FILESIZE / POWER (1024, 2), 2) || 'MB';  
  ELSIF  FILESIZE >= POWER(1024,3) AND FILESIZE < POWER(1024,4 ) THEN
    O_FILESIZE := ROUND( FILESIZE / POWER (1024, 3), 2) || ' GB';
  ELSE 
    O_FILESIZE := ROUND( FILESIZE / POWER (1024, 4), 2) || ' TB';
  END IF;
  
  RETURN (O_FILESIZE);
  
END;

/
--------------------------------------------------------

--  DDL for Function RTN_REFCURSOR

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."RTN_REFCURSOR" (P_TABLE VARCHAR2)
RETURN SYS_REFCURSOR IS

V_REFCUR   SYS_REFCURSOR;

/* Created by Soji to expiriment the Refufurson with varying lengthe and data */
BEGIN
open v_refCur for 'select * from '||P_TABLE ;

return v_refCur ;
end;

/
--------------------------------------------------------

--  DDL for Function TEST_LOG_FILE_CREATION

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."TEST_LOG_FILE_CREATION" (v_reports_dir IN VARCHAR2) RETURN NUMBER IS 

insufficient_privileges EXCEPTION;
PRAGMA EXCEPTION_INIT(INSUFFICIENT_PRIVILEGES, -01031);
LOG_FILE UTL_FILE.FILE_TYPE;

BEGIN

 IF v_reports_dir IS NOT NULL THEN
  EXECUTE IMMEDIATE 'CREATE OR REPLACE DIRECTORY OSDDM_REPORTS_DIR AS '''|| v_reports_dir ||'''';
  EXECUTE IMMEDIATE 'GRANT READ, WRITE ON DIRECTORY OSDDM_REPORTS_DIR TO PUBLIC';
 END IF;

 log_file := UTL_FILE.Fopen('OSDDM_REPORTS_DIR','osddm_reports.log','w', 32767);

RETURN 0;

 EXCEPTION
  WHEN UTL_FILE.Invalid_Path THEN
   RETURN 1;
  WHEN  UTL_FILE.Read_Error OR UTL_FILE.Write_Error OR UTL_FILE.Access_Denied THEN 
   RETURN 2;
  WHEN insufficient_privileges THEN
   RETURN 3;

END Test_Log_File_creation;

/
--------------------------------------------------------

--  DDL for Function TF_FBBGRS0003

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."TF_FBBGRS0003" 
      (
      i_Run_Date IN DATE,
      i_feed_id   IN VARCHAR2
      )
    RETURN FBBGRS0003_TAB_TYP PIPELINED
  AS
    PRAGMA AUTONOMOUS_TRANSACTION;
x varchar2(10000);
y varchar2(10000);
z varchar2(10000);
m NUMBER(38,0);
 NOMAP_CNT NUMBER;
 TYPE t_simple_object
 IS
 RECORD
  (
    C1  VARCHAR2(256),
    C2  VARCHAR2(256)
  );

TYPE map_type
IS
  TABLE OF t_simple_object
  INDEX BY BINARY_INTEGER;
  
l_map map_type; 

BEGIN
FOR i IN 
 (
 select * from Jrnl_Line
  WHERE JRNL_ENT_BKG_DT=TO_DATE(i_Run_Date,'DD-MON-YY')
  AND  SUB_GL_FEED_ID=CASE WHEN i_feed_id='XX' THEN SUB_GL_FEED_ID ELSE i_feed_id END
    )
 LOOP
 --DBMS_OUTPUT.PUT_LINE('i.SUB_GL_FEED_ID'||i.SUB_GL_FEED_ID||'-JRNL_HEAD_ID:'||i.JRNL_HEAD_ID||'JRNL_LINE_ID:'||i.JRNL_LINE_ID||'JRNL_ENT_BKG_DT:'||i.JRNL_ENT_BKG_DT);
   l_map(1).c1:='LV_ID';
   l_map(1).c2:=i.LV_ID;
   l_map(2).c1:='GL_ACCT_ID';
   l_map(2).c2:=i.GL_ACCT_ID;   
   l_map(3).c1:='LCL_LV_ID';
   l_map(3).c2:=i.LCL_LV_ID;
   l_map(4).c1:='LCL_GL_ACCT_1';
   l_map(4).c2:=i.LCL_GL_ACCT_1;   
   l_map(5).c1:='ENTRPS_PROD_ID';
   l_map(5).c2:=i.ENTRPS_PROD_ID;
   l_map(6).c1:='CPRT_GOC';
   l_map(6).c2:=i.CPRT_GOC;   
   l_map(7).c1:='SRC_SYS_ARRG_ID';
   l_map(7).c2:=i.SRC_SYS_ARRG_ID;   
   l_map(8).c1:='GAAP_TYP_CD';
   l_map(8).c2:=i.GAAP_TYP_CD;
   l_map(9).c1:='LV_SUB_DIVN_ID';
   l_map(9).c2:=i.LV_SUB_DIVN_ID;
   l_map(10).c1:='GOC';
   l_map(10).c2:=i.GOC; 
   
l_map(11).c1:='AFFL_LV_SUB_DIVN_ID';
l_map(12).c1:='ARRG_TYP_CD';
l_map(13).c1:='SRC_SYS_ID';
l_map(14).c1:='SRC_SYS_ARRG_ID';
l_map(15).c1:='FIN_MKT_POSN_SRC_SYS_ID';
l_map(16).c1:='SRC_SYS_FIN_MKT_POSN_ID';
l_map(17).c1:='GENESIS_FEED_ID_LINK';
l_map(18).c1:='SMC_ID';
l_map(19).c1:='CUST_ID_TYP_CD';
l_map(20).c1:='CUST_ID';
l_map(21).c1:='PROJ_ID';
l_map(22).c1:='CHAN_ID';
l_map(23).c1:='FIRM_ACCT_SRC_SYS_ID';
l_map(24).c1:='FIRM_ACCT_ID';
l_map(25).c1:='STD_EVNT_TYP_CD';
l_map(26).c1:='STD_TRAN_TYP_CD';
l_map(27).c1:='STD_ARRG_ID';
l_map(28).c1:='STD_FIN_MKT_POSN_ID';
l_map(29).c1:='AFFL_LV_ID';
l_map(30).c1:='SCR_ID_TYP_CD';
l_map(31).c1:='SCR_ID';
l_map(32).c1:='EXT_REF_ID';
l_map(33).c1:='EXT_REF_ID_TYP_CD';
l_map(34).c1:='RPRT_CCY_CD';
l_map(35).c1:='ARRG_ORIG_SRC_SYS_ID';
l_map(36).c1:='ORIG_SRC_SYS_ARRG_ID';
l_map(37).c1:='LCL_GL_ACCT_ID';
l_map(38).c1:='LCL_CUST_ID';
l_map(39).c1:='LCL_PROD_ID';
l_map(40).c1:='LCL_SUB_PROD_ID';
l_map(41).c1:='LCL_PROD_CAT_CD';
l_map(42).c1:='LCL_EVNT_CD';
l_map(43).c1:='LCL_EVNT_CD_DESC';
l_map(44).c1:='LCL_TRAN_CD';
l_map(45).c1:='LCL_TRAN_DESC';
l_map(46).c1:='LCL_BUS_EVNT_ID';
l_map(47).c1:='LCL_BKG_LDGR_BR_CD';
l_map(48).c1:='LCL_GL_ACCT_2';
l_map(49).c1:='LCL_COST_CD';
l_map(50).c1:='LCL_CD_1';
l_map(51).c1:='LCL_CD_2';
l_map(52).c1:='LCL_CD_3';
l_map(53).c1:='LCL_CD_4';
l_map(54).c1:='LCL_CD_5';
l_map(55).c1:='LCL_CD_6';
l_map(56).c1:='LCL_CD_7';
l_map(57).c1:='LCL_LEGACY_CUST_ID';
l_map(58).c1:='CORE_FEED_ID';
l_map(59).c1:='JRNL_LINE_SRC';
l_map(60).c1:='SUB_GL_FEED_ID';
l_map(61).c1:='JRNL_LINE_STA_CD';
l_map(62).c1:='DOC_SN';
l_map(63).c1:='ROW_SRC_CD';
l_map(64).c1:='BAL_ROW_KEY';
l_map(65).c1:='SMRY_BAL_ROW_KEY';
l_map(66).c1:='SUB_PART_KEY';

l_map(11).c2:=i.AFFL_LV_SUB_DIVN_ID;
l_map(12).c2:=i.ARRG_TYP_CD;
l_map(13).c2:=i.SRC_SYS_ID;
l_map(14).c2:=i.SRC_SYS_ARRG_ID;
l_map(15).c2:=i.FIN_MKT_POSN_SRC_SYS_ID;
l_map(16).c2:=i.SRC_SYS_FIN_MKT_POSN_ID;
l_map(17).c2:=i.GENESIS_FEED_ID_LINK;
l_map(18).c2:=i.SMC_ID;
l_map(19).c2:=i.CUST_ID_TYP_CD;
l_map(20).c2:=i.CUST_ID;
l_map(21).c2:=i.PROJ_ID;
l_map(22).c2:=i.CHAN_ID;
l_map(23).c2:=i.FIRM_ACCT_SRC_SYS_ID;
l_map(24).c2:=i.FIRM_ACCT_ID;
l_map(25).c2:=i.STD_EVNT_TYP_CD;
l_map(26).c2:=i.STD_TRAN_TYP_CD;
l_map(27).c2:=i.STD_ARRG_ID;
l_map(28).c2:=i.STD_FIN_MKT_POSN_ID;
l_map(29).c2:=i.AFFL_LV_ID;
l_map(30).c2:=i.SCR_ID_TYP_CD;
l_map(31).c2:=i.SCR_ID;
l_map(32).c2:=i.EXT_REF_ID;
l_map(33).c2:=i.EXT_REF_ID_TYP_CD;
l_map(34).c2:=i.RPRT_CCY_CD;
l_map(35).c2:=i.ARRG_ORIG_SRC_SYS_ID;
l_map(36).c2:=i.ORIG_SRC_SYS_ARRG_ID;
l_map(37).c2:=i.LCL_GL_ACCT_ID;
l_map(38).c2:=i.LCL_CUST_ID;
l_map(39).c2:=i.LCL_PROD_ID;
l_map(40).c2:=i.LCL_SUB_PROD_ID;
l_map(41).c2:=i.LCL_PROD_CAT_CD;
l_map(42).c2:=i.LCL_EVNT_CD;
l_map(43).c2:=i.LCL_EVNT_CD_DESC;
l_map(44).c2:=i.LCL_TRAN_CD;
l_map(45).c2:=i.LCL_TRAN_DESC;
l_map(46).c2:=i.LCL_BUS_EVNT_ID;
l_map(47).c2:=i.LCL_BKG_LDGR_BR_CD;
l_map(48).c2:=i.LCL_GL_ACCT_2;
l_map(49).c2:=i.LCL_COST_CD;
l_map(50).c2:=i.LCL_CD_1;
l_map(51).c2:=i.LCL_CD_2;
l_map(52).c2:=i.LCL_CD_3;
l_map(53).c2:=i.LCL_CD_4;
l_map(54).c2:=i.LCL_CD_5;
l_map(55).c2:=i.LCL_CD_6;
l_map(56).c2:=i.LCL_CD_7;
l_map(57).c2:=i.LCL_LEGACY_CUST_ID;
l_map(58).c2:=i.CORE_FEED_ID;
l_map(59).c2:=i.JRNL_LINE_SRC;
l_map(60).c2:=i.SUB_GL_FEED_ID;
l_map(61).c2:=i.JRNL_LINE_STA_CD;
l_map(62).c2:=i.DOC_SN;
l_map(63).c2:=i.ROW_SRC_CD;
l_map(64).c2:=i.BAL_ROW_KEY;
l_map(65).c2:=i.SMRY_BAL_ROW_KEY;
l_map(66).c2:=i.SUB_PART_KEY;  
   
  For j IN  l_map.FIRST..l_map.LAST
  LOOP
  --DBMS_OUTPUT.PUT_LINE('C1: '||l_map(j).c1||' C2: '||l_map(j).c2);  
  m:=NULL;
  x:=NULL;
  z:=NULL;
  
  IF l_map(j).c2='NOMAP' THEN
   --DBMS_OUTPUT.PUT_LINE('C1: '||l_map(j).c1||' C2: '||l_map(j).c2);
BEGIN    
 SELECT  MAP_ID INTO m
 FROM
 (
SELECT DISTINCT DMO.MAP_ID MAP_ID
  FROM
    (SELECT * FROM PS_C_FEED_DEF_V 
    WHERE C_FEED_ID=i.SUB_GL_FEED_ID
    ) PF
  JOIN derv_map_grp DMG
  ON (PF.MAP_GRP_ID=DMG.MAP_GRP_ID)
  JOIN DERV_MAP_ASSOC DMA
  ON (DMA.MAP_GRP_ID =DMG.MAP_GRP_ID)
  JOIN
    (SELECT *
    FROM DERV_MAP_OPUT_ATTR
    WHERE DA_REC_EFF_DT =TRUNC(SYSDATE,'MM')
    AND OPUT_ATTR_CD    =l_map(j).c1
    ) DMO
  ON (DMA.MAP_ID       =DMO.MAP_ID)
  JOIN
    (SELECT *
    FROM DERV_MAP_DEFN
    WHERE EFF_STATUS  = 'A'
    AND DA_REC_EFF_DT =TRUNC(SYSDATE,'MM')
    ) DMD
  ON (DMD.MAP_ID=DMA.MAP_ID)
   );
EXCEPTION
 WHEN NO_DATA_FOUND THEN
  NULL;
END;   

BEGIN
SELECT 
LISTAGG(''''||INP_ATTR_CD||':''||'||INP_ATTR_CD,'||'',''||') WITHIN GROUP (ORDER BY INP_ATTR_CD) INTO x
FROM 
(
SELECT DISTINCT DMI.INP_ATTR_CD
  FROM
    (SELECT * FROM PS_C_FEED_DEF_V 
    WHERE C_FEED_ID=i.SUB_GL_FEED_ID
    ) PF
  JOIN derv_map_grp DMG
  ON (PF.MAP_GRP_ID=DMG.MAP_GRP_ID)
  JOIN DERV_MAP_ASSOC DMA
  ON (DMA.MAP_GRP_ID =DMG.MAP_GRP_ID)
  JOIN
    (SELECT *
    FROM DERV_MAP_OPUT_ATTR
    WHERE DA_REC_EFF_DT =TRUNC(SYSDATE,'MM')
    AND OPUT_ATTR_CD    =l_map(j).c1
    ) DMO
  ON (DMA.MAP_ID       =DMO.MAP_ID)
  JOIN
    (SELECT *
    FROM DERV_MAP_DEFN
    WHERE EFF_STATUS  = 'A'
    AND DA_REC_EFF_DT =TRUNC(SYSDATE,'MM')
    ) DMD
  ON (DMD.MAP_ID=DMA.MAP_ID)
  JOIN
    ( SELECT * FROM DERV_MAP_INP_ATTR 
    WHERE DA_REC_EFF_DT =TRUNC(SYSDATE,'MM')
    ) DMI
  ON (DMI.MAP_ID       =DMO.MAP_ID
  AND DMD.MAP_ID       =DMI.MAP_ID
  --AND DMI.SN           =DMO.SN
  AND DMI.DA_REC_EFF_DT=DMO.DA_REC_EFF_DT) 
  );  
DBMS_OUTPUT.PUT_LINE('XX:'||x);
EXCEPTION
 WHEN NO_DATA_FOUND THEN
  NULL;
END;

if length(x)!=0 then 

  y:='SELECT '||x||' FROM JRNL_LINE WHERE JRNL_HEAD_ID='''||i.JRNL_HEAD_ID||''' AND JRNL_LINE_ID='''||i.JRNL_LINE_ID||''' AND LV_ID='''||i.LV_ID||''' AND JRNL_ENT_BKG_DT='''||i.JRNL_ENT_BKG_DT||'''';
 
 -- DBMS_OUTPUT.PUT_LINE('YY:'||y);

BEGIN
 execute immediate y INTO z; 
 -- DBMS_OUTPUT.PUT_LINE('zz:'||z);
  
  PIPE ROW (FBBGRS0003_REC_TYP(to_char(i.JRNL_ENT_BKG_DT,'MM/DD/YYY'),to_char(i.SUB_GL_FEED_ID),to_char(m),to_char(i.JRNL_HEAD_ID),to_char(i.JRNL_LINE_ID),to_char(l_map(j).c1),z));
 exception
  when no_data_found then
  PIPE ROW (FBBGRS0003_REC_TYP(to_char(i.JRNL_ENT_BKG_DT,'MM/DD/YYY'),to_char(i.SUB_GL_FEED_ID),to_char(m),to_char(i.JRNL_HEAD_ID),to_char(i.JRNL_LINE_ID),to_char(l_map(j).c1),z));
END;

end if;  

PIPE ROW (FBBGRS0003_REC_TYP(to_char(i.JRNL_ENT_BKG_DT,'MM/DD/YYY'),to_char(i.SUB_GL_FEED_ID),to_char(m),to_char(i.JRNL_HEAD_ID),to_char(i.JRNL_LINE_ID),to_char(l_map(j).c1),z));  
    
  END IF; 
  END LOOP;
 END LOOP;    
END;

/
--------------------------------------------------------

--  DDL for Function TF_FBBGRS0004

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."TF_FBBGRS0004" (
      i_Run_Date IN DATE,
      i_map_id   IN VARCHAR2,
      i_prty_no  IN VARCHAR2
      )
    RETURN FBBGRS0004_TAB_TYP PIPELINED
  AS
    PRAGMA AUTONOMOUS_TRANSACTION;
    l_i_map_id NUMBER;
    l_i_prty_no NUMBER;
    Q_STR_1    VARCHAR2(4000);
    Q_STR_2    VARCHAR2(20000);
    Q_STR_3    VARCHAR2(4000);
    Q_STR_6    VARCHAR2(4000);
    Q_STR_10   VARCHAR2(4000);
    Q_STR_14   VARCHAR2(4000);
    Q_STR_15   VARCHAR2(4000);
    l_q_1      VARCHAR2(4000);
    l_q_2      VARCHAR2(4000);
    l_q_3      VARCHAR2(32000);
    C_COUNT    NUMBER;
    l_cursor SYS_REFCURSOR;
    m_cursor SYS_REFCURSOR;
    n_cursor SYS_REFCURSOR;
  TYPE t_simple_object
IS
  RECORD
  (
    C1  VARCHAR2(256),
    C2  VARCHAR2(256),
    C3  VARCHAR2(256),
    C4  VARCHAR2(256),
    C5  VARCHAR2(256),
    C6  VARCHAR2(256),
    C7  VARCHAR2(256),
    C8  VARCHAR2(256),
    C9  VARCHAR2(256),
    C10 VARCHAR2(256),
    C11 VARCHAR2(256),
    C12 VARCHAR2(256),
    C13 VARCHAR2(256),
    C14 VARCHAR2(256),
    C15 VARCHAR2(256),
    C16 VARCHAR2(256),
    C17 VARCHAR2(256),
    C18 VARCHAR2(256),
    C19 VARCHAR2(256),
    C20 VARCHAR2(256),
    C21 VARCHAR2(256),
    C22 VARCHAR2(256),
    C23 VARCHAR2(256),
    C24 VARCHAR2(256),
    C25 VARCHAR2(4000) 
    );
TYPE map_type
IS
  TABLE OF t_simple_object;
  l_map map_type:=map_type();
PROCEDURE Q_proc(
    Q_STR IN VARCHAR2)
IS
  table_n BINARY_INTEGER;
  mytab dbms_utility.uncl_array;
  C_NUM NUMBER;
BEGIN
  C_NUM:=1;
  DBMS_UTILITY.COMMA_TO_TABLE (Q_STR, table_n, mytab);
  Q_STR_1 :='';
  Q_STR_3 :='';
  Q_STR_14:='';
  Q_STR_15:='';
  Q_STR_2 :='';
  Q_STR_6 :='';
  FOR i IN 1..mytab.COUNT-1
  LOOP
    Q_STR_1   :=Q_STR_1||''''||mytab(i)||''' AS C'||C_NUM||',';
    Q_STR_3   :=Q_STR_3||'C'||C_NUM||',';
    Q_STR_14  :=Q_STR_14||'Q1.C'||C_NUM||'=Q2.C'||C_NUM||' AND ';
    Q_STR_15  :=Q_STR_15||'Q2.C'||C_NUM||',';
    IF mytab(i)=mytab(mytab.COUNT-1) THEN
      Q_STR_2 :=Q_STR_2||'''Target Dimension - '||''||mytab(i)||''' AS C'||C_NUM||',';
    ELSE
      Q_STR_2 :=Q_STR_2||'''Source Dimension '||C_NUM||' - '||''||mytab(i)||''' AS C'||C_NUM||',';
    END IF;
    C_NUM :=C_NUM+1;
  END LOOP;
  Q_STR_15 :=Q_STR_15||'Q2.C'||C_NUM||',Q2.C21,Q2.C22';
  Q_STR_14 :=Q_STR_14||'Q1.C'||C_NUM||'=Q2.C'||C_NUM||' AND ';
  Q_STR_10 :=Q_STR_3;
  Q_STR_3  :=Q_STR_3||'C'||C_NUM||',';
  Q_STR_1  :=SUBSTR(Q_STR_1,1,LENGTH(Q_STR_1)  -1);
  Q_STR_3  :=SUBSTR(Q_STR_3,1,LENGTH(Q_STR_3)  -1);
  Q_STR_14 :=SUBSTR(Q_STR_14,1,LENGTH(Q_STR_14)-4);
  --Q_STR_15 :=SUBSTR(Q_STR_15,1,LENGTH(Q_STR_15)-1);
  Q_STR_2  :=Q_STR_2||'''PRTY_NO'' AS C'||C_NUM;
  Q_STR_10 := Q_STR_10||'PRTY_NO AS C'||C_NUM||',MAP_ID AS C21,SN AS C22';
  C_NUM    :=C_NUM+1;
  FOR I IN C_NUM..20
  LOOP
    Q_STR_2:=Q_STR_2||',NULL AS C'||I;
    Q_STR_6:=Q_STR_6||',NULL AS C'||I;
  END LOOP;
  Q_STR_6:=Q_STR_6||',C21,C22';
  l_q_1  :=q'!WITH MAP_Q AS (
SELECT MAP_ID,SN  
FROM    
(SELECT MAP_ID,      
SN,      
LISTAGG(ATTR_CD,',') WITHIN GROUP (    
ORDER BY ORD,ATTR_CD) OVER (PARTITION BY MAP_ID,SN) CALC_EXP    
FROM      
(                       
SELECT DMI.MAP_ID,                
DMI.SN,        
DMI.INP_ATTR_CD ATTR_CD,        
1 ORD      
FROM (SELECT * FROM DERV_MAP_DEFN WHERE DA_REC_EFF_DT=TRUNC(TO_DATE('!'||i_Run_Date||q'!','DD-MON-YY'),'MM') AND EFF_STATUS='A' AND MAP_ID= !'||CASE WHEN i_map_id=0 THEN 'MAP_ID' ELSE i_map_id END||q'!) DMD JOIN
(SELECT *
FROM DERV_MAP_INP_VAL
WHERE DA_REC_EFF_DT=TRUNC(TO_DATE('!'||i_Run_Date||q'!','DD-MON-YY'),'MM')
AND MAP_ID          =!'||CASE WHEN i_map_id=0 THEN 'MAP_ID' ELSE i_map_id END||q'!
) DMI ON (DMD.MAP_ID=DMI.MAP_ID) JOIN
(SELECT *
FROM DERV_MAP_OPUT_VAL
WHERE DA_REC_EFF_DT=TRUNC(TO_DATE('!'||i_Run_Date||q'!','DD-MON-YY'),'MM')
AND MAP_ID           =!'||CASE WHEN i_map_id=0 THEN 'MAP_ID' ELSE i_map_id END||q'!
) DMO ON (DMI.MAP_ID =DMO.MAP_ID AND DMD.MAP_ID=DMO.MAP_ID AND DMI.SN =DMO.SN AND DMI.DA_REC_EFF_DT =DMO.DA_REC_EFF_DT)
JOIN
    (SELECT *
    FROM DERV_MAP_DETL
    WHERE DA_REC_EFF_DT=TRUNC(TO_DATE('!'||i_Run_Date||q'!','DD-MON-YY'),'MM')
    AND MAP_ID=!'||CASE WHEN i_map_id=0 THEN 'MAP_ID' ELSE i_map_id END||q'!
    AND PRTY_NO=!'||CASE WHEN i_prty_no=0 THEN 'PRTY_NO' ELSE i_prty_no END||q'!
    ) DTL
  ON (DMD.MAP_ID       =DTL.MAP_ID
  AND DMI.MAP_ID       =DTL.MAP_ID
  AND DMO.MAP_ID       =DTL.MAP_ID
  AND DMI.SN           =DTL.SN
  AND DMI.DA_REC_EFF_DT=DTL.DA_REC_EFF_DT
  AND DMO.SN           =DTL.SN)
UNION 
SELECT DMO.MAP_ID,
  DMO.SN,
  DMO.OPUT_ATTR_CD AS ATTR_CD,
  2 ORD
FROM
  (SELECT *
  FROM DERV_MAP_DEFN
  WHERE DA_REC_EFF_DT=TRUNC(TO_DATE('!'||i_Run_Date||q'!','DD-MON-YY'),'MM')
  AND EFF_STATUS='A'
  AND MAP_ID    =!'||CASE WHEN i_map_id=0 THEN 'MAP_ID' ELSE i_map_id END||q'!
  ) DMD
JOIN
  (SELECT *
  FROM DERV_MAP_INP_VAL
  WHERE DA_REC_EFF_DT=TRUNC(TO_DATE('!'||i_Run_Date||q'!','DD-MON-YY'),'MM')
  AND MAP_ID=!'||CASE WHEN i_map_id=0 THEN 'MAP_ID' ELSE i_map_id END||q'!
  ) DMI
ON (DMD.MAP_ID=DMI.MAP_ID)
JOIN
  (SELECT *
  FROM DERV_MAP_OPUT_VAL
  WHERE DA_REC_EFF_DT=TRUNC(TO_DATE('!'||i_Run_Date||q'!','DD-MON-YY'),'MM')
  AND MAP_ID=!'||CASE WHEN i_map_id=0 THEN 'MAP_ID' ELSE i_map_id END||q'!
  ) DMO
ON (DMI.MAP_ID        =DMO.MAP_ID
AND DMI.SN            =DMO.SN
AND DMI.DA_REC_EFF_DT =DMO.DA_REC_EFF_DT) 
JOIN
    (SELECT *
    FROM DERV_MAP_DETL
    WHERE DA_REC_EFF_DT=TRUNC(TO_DATE('!'||i_Run_Date||q'!','DD-MON-YY'),'MM')
    AND MAP_ID=!'||CASE WHEN i_map_id=0 THEN 'MAP_ID' ELSE i_map_id END||q'!
    AND PRTY_NO=!'||CASE WHEN i_prty_no=0 THEN 'PRTY_NO' ELSE i_prty_no END||q'!
    ) DTL
  ON (DMD.MAP_ID       =DTL.MAP_ID
  AND DMI.MAP_ID       =DTL.MAP_ID
  AND DMO.MAP_ID       =DTL.MAP_ID
  AND DMI.SN           =DTL.SN
  AND DMI.DA_REC_EFF_DT=DTL.DA_REC_EFF_DT
  AND DMO.SN           =DTL.SN)
) ) WHERE CALC_EXP='!'||Q_STR||q'!' GROUP BY MAP_ID,SN )!'; 

--DBMS_OUTPUT.PUT_LINE('Q_1:'||l_q_1); 

l_q_2:=q'!SELECT !'||Q_STR_10||q'! FROM
(SELECT MAP_ID,
  SN,
  VAL,
  ATTR,
  PRTY_NO
FROM
  (SELECT DMI.MAP_ID MAP_ID,
    DMI.SN SN,
    DMI.INP_ATTR_CD ATTR,
    DMI.INP_ATTR_VAL VAL,
    DTL.PRTY_NO PRTY_NO
  FROM
    (SELECT *
    FROM DERV_MAP_DEFN
    WHERE DA_REC_EFF_DT=TRUNC(TO_DATE('!'||i_Run_Date||q'!','DD-MON-YY'),'MM')
    AND EFF_STATUS='A'
    ) DMD
  JOIN
    (SELECT *
    FROM DERV_MAP_INP_VAL
    WHERE DA_REC_EFF_DT=TRUNC(TO_DATE('!'||i_Run_Date||q'!','DD-MON-YY'),'MM')
    AND MAP_ID=!'||CASE WHEN i_map_id=0 THEN 'MAP_ID' ELSE i_map_id END||q'!
    ) DMI
  ON (DMD.MAP_ID=DMI.MAP_ID)
  JOIN
    (SELECT *
    FROM DERV_MAP_OPUT_VAL
    WHERE DA_REC_EFF_DT=TRUNC(TO_DATE('!'||i_Run_Date||q'!','DD-MON-YY'),'MM')
    AND MAP_ID=!'||CASE WHEN i_map_id=0 THEN 'MAP_ID' ELSE i_map_id END||q'!
    ) DMO
  ON (DMI.MAP_ID       =DMO.MAP_ID
  AND DMI.SN           =DMO.SN
  AND DMI.DA_REC_EFF_DT=DMO.DA_REC_EFF_DT)
  JOIN
    (SELECT *
    FROM DERV_MAP_DETL
    WHERE DA_REC_EFF_DT=TRUNC(TO_DATE('!'||i_Run_Date||q'!','DD-MON-YY'),'MM')
    AND MAP_ID=!'||CASE WHEN i_map_id=0 THEN 'MAP_ID' ELSE i_map_id END||q'!
    AND PRTY_NO=!'||CASE WHEN i_prty_no=0 THEN 'PRTY_NO' ELSE i_prty_no END||q'!
    ) DTL
  ON (DMD.MAP_ID       =DTL.MAP_ID
  AND DMI.MAP_ID       =DTL.MAP_ID
  AND DMO.MAP_ID       =DTL.MAP_ID
  AND DMI.SN           =DTL.SN
  AND DMI.DA_REC_EFF_DT=DTL.DA_REC_EFF_DT
  AND DMO.SN           =DTL.SN)
  JOIN MAP_Q MQ
  ON (MQ.MAP_ID=DTL.MAP_ID
  AND MQ.MAP_ID=DMI.MAP_ID
  AND MQ.MAP_ID=DMO.MAP_ID
  AND MQ.SN    =DTL.SN
  AND MQ.SN    =DMI.SN
  AND MQ.SN    =DMO.SN)
  GROUP BY DMI.MAP_ID,
    DMI.SN,
    DMI.INP_ATTR_CD,
    DMI.INP_ATTR_VAL,
    DTL.PRTY_NO
  UNION 
  SELECT DMO.MAP_ID MAP_ID,
    DMO.SN,
    DMO.OPUT_ATTR_CD ATTR,
    DMO.OPUT_ATTR_VAL VAL,
    DTL.PRTY_NO PRTY_NO
  FROM
    (SELECT *
    FROM DERV_MAP_DEFN
    WHERE DA_REC_EFF_DT=TRUNC(TO_DATE('!'||i_Run_Date||q'!','DD-MON-YY'),'MM')
    AND EFF_STATUS='A'
    ) DMD
  JOIN
    (SELECT *
    FROM DERV_MAP_INP_VAL
    WHERE DA_REC_EFF_DT=TRUNC(TO_DATE('!'||i_Run_Date||q'!','DD-MON-YY'),'MM')
    AND MAP_ID=!'||CASE WHEN i_map_id=0 THEN 'MAP_ID' ELSE i_map_id END||q'! ) DMI
  ON (DMD.MAP_ID=DMI.MAP_ID)
  JOIN
    (SELECT *
    FROM DERV_MAP_OPUT_VAL
    WHERE DA_REC_EFF_DT=TRUNC(TO_DATE('!'||i_Run_Date||q'!','DD-MON-YY'),'MM')
    AND MAP_ID=!'||CASE WHEN i_map_id=0 THEN 'MAP_ID' ELSE i_map_id END||q'!
    ) DMO
  ON (DMD.MAP_ID       =DMO.MAP_ID
  AND DMI.MAP_ID       =DMO.MAP_ID
  AND DMI.SN           =DMO.SN
  AND DMI.DA_REC_EFF_DT=DMO.DA_REC_EFF_DT)
  JOIN
    (SELECT *
    FROM DERV_MAP_DETL
    WHERE DA_REC_EFF_DT=TRUNC(TO_DATE('!'||i_Run_Date||q'!','DD-MON-YY'),'MM')
    AND MAP_ID=!'||CASE WHEN i_map_id=0 THEN 'MAP_ID' ELSE i_map_id END||q'!
    AND PRTY_NO=!'||CASE WHEN i_prty_no=0 THEN 'PRTY_NO' ELSE i_prty_no END||q'!
    ) DTL
  ON (DMD.MAP_ID       =DTL.MAP_ID
  AND DMI.MAP_ID       =DTL.MAP_ID
  AND DMO.MAP_ID       =DTL.MAP_ID
  AND DMI.SN           =DTL.SN
  AND DMO.SN           =DTL.SN
  AND DMI.DA_REC_EFF_DT=DTL.DA_REC_EFF_DT)
  JOIN MAP_Q MQ
  ON ( MQ.MAP_ID=DTL.MAP_ID
  AND MQ.MAP_ID =DMI.MAP_ID
  AND MQ.MAP_ID =DMO.MAP_ID
  AND MQ.SN     =DTL.SN
  AND MQ.SN     =DMI.SN
  AND MQ.SN     =DMO.SN)
  GROUP BY DMO.MAP_ID,
    DMO.SN,
    DMO.OPUT_ATTR_CD,
    DMO.OPUT_ATTR_VAL,
    DTL.PRTY_NO
  )
)src pivot (MAX(VAL) FOR ATTR IN (!'|| Q_STR_1 ||q'!)) piv!'; 

--DBMS_OUTPUT.PUT_LINE('Q_2:'||l_q_2);

l_q_3:=l_q_1||q'!
SELECT !'||Q_STR_3||Q_STR_6||
q'!,
  2    AS C23,C24,
  '!'
  ||Q_STR
  ||q'!' AS C25
FROM (
SELECT X.*,ROWNUM C24 FROM
(
SELECT !'||Q_STR_15||q'!
FROM
  (SELECT !'||Q_STR_3||q'!
  FROM (!'||l_q_2||q'!)
  GROUP BY !'||Q_STR_3||
q'!
  HAVING COUNT(*)>1
  ) Q1
JOIN (!'||l_q_2||q'!) Q2
ON (!'||Q_STR_14||q'!)
ORDER BY !'||Q_STR_15||') X
)'; 

END;

BEGIN  

IF i_map_id  =0 THEN    
l_i_map_id:=NULL;  
ELSE    
l_i_map_id:=TO_NUMBER(i_map_id);  
END IF;  

IF i_prty_no  =0 THEN    
l_i_prty_no:=NULL;  
ELSE    
l_i_prty_no:=TO_NUMBER(i_prty_no);  
END IF;

FOR i IN  
(SELECT CALC_EXP  
FROM    
(SELECT MAP_ID,      
SN,      
LISTAGG(ATTR_CD,',') WITHIN GROUP (    
ORDER BY ORD,ATTR_CD) OVER (PARTITION BY MAP_ID,SN) CALC_EXP    
FROM      
(                       
SELECT DMI.MAP_ID,        
DMI.SN,        
DMI.INP_ATTR_CD ATTR_CD,        
1 ORD      
FROM (SELECT * FROM DERV_MAP_DEFN WHERE DA_REC_EFF_DT=TRUNC(TO_DATE(i_Run_Date,'DD-MON-YY'),'MM') AND EFF_STATUS='A' AND map_id=NVL(l_i_map_id,MAP_ID)) DMD       
JOIN (SELECT * FROM DERV_MAP_INP_VAL WHERE DA_REC_EFF_DT=TRUNC(TO_DATE(i_Run_Date,'DD-MON-YY'),'MM') AND map_id=NVL(l_i_map_id,MAP_ID) ) DMI      
ON (DMD.MAP_ID=DMI.MAP_ID)      
JOIN (SELECT * FROM DERV_MAP_OPUT_VAL WHERE DA_REC_EFF_DT=TRUNC(TO_DATE(i_Run_Date,'DD-MON-YY'),'MM') AND map_id=NVL(l_i_map_id,MAP_ID)) DMO      
ON (DMI.MAP_ID         =DMO.MAP_ID      
AND DMI.SN             =DMO.SN      
AND DMI.DA_REC_EFF_DT  =DMO.DA_REC_EFF_DT)
JOIN
    (SELECT *  FROM DERV_MAP_DETL   WHERE DA_REC_EFF_DT=TRUNC(TO_DATE(i_Run_Date,'DD-MON-YY'),'MM') AND map_id=NVL(l_i_map_id,MAP_ID)
    AND  PRTY_NO=NVL(l_i_prty_no,PRTY_NO)
    ) DTL
  ON (DMD.MAP_ID       =DTL.MAP_ID
  AND DMI.MAP_ID       =DTL.MAP_ID
  AND DMO.MAP_ID       =DTL.MAP_ID
  AND DMI.SN           =DTL.SN
  AND DMI.DA_REC_EFF_DT=DTL.DA_REC_EFF_DT
  AND DMO.SN           =DTL.SN)
UNION       
SELECT DMO.MAP_ID,        
DMO.SN,        
DMO.OPUT_ATTR_CD AS ATTR_CD,        
2 ORD      
FROM (SELECT * FROM DERV_MAP_DEFN WHERE DA_REC_EFF_DT=TRUNC(TO_DATE(i_Run_Date,'DD-MON-YY'),'MM') AND EFF_STATUS='A' AND map_id=NVL(l_i_map_id,MAP_ID)) DMD       
JOIN (SELECT * FROM DERV_MAP_INP_VAL WHERE DA_REC_EFF_DT=TRUNC(TO_DATE(i_Run_Date,'DD-MON-YY'),'MM') AND map_id=NVL(l_i_map_id,MAP_ID)) DMI      
ON (DMD.MAP_ID=DMI.MAP_ID)      
JOIN (SELECT * FROM DERV_MAP_OPUT_VAL WHERE DA_REC_EFF_DT=TRUNC(TO_DATE(i_Run_Date,'DD-MON-YY'),'MM') AND map_id=NVL(l_i_map_id,MAP_ID)) DMO      
ON (DMI.MAP_ID         =DMO.MAP_ID      
AND DMI.SN             =DMO.SN      
AND DMI.DA_REC_EFF_DT  =DMO.DA_REC_EFF_DT)
JOIN
    (SELECT *  FROM DERV_MAP_DETL   WHERE DA_REC_EFF_DT=TRUNC(TO_DATE(i_Run_Date,'DD-MON-YY'),'MM') AND map_id=NVL(l_i_map_id,MAP_ID)
    AND  PRTY_NO=NVL(l_i_prty_no,PRTY_NO)) DTL
  ON (DMD.MAP_ID       =DTL.MAP_ID
  AND DMI.MAP_ID       =DTL.MAP_ID
  AND DMO.MAP_ID       =DTL.MAP_ID
  AND DMI.SN           =DTL.SN
  AND DMI.DA_REC_EFF_DT=DTL.DA_REC_EFF_DT
  AND DMO.SN           =DTL.SN)
)    
)  
GROUP BY CALC_EXP  
)  
LOOP    
DBMS_OUTPUT.PUT_LINE('****'||i.CALC_EXP||'****');    
Q_proc(Q_STR =>i.CALC_EXP);    
DBMS_OUTPUT.PUT_LINE('l_q_3:-'||l_q_3);        

EXECUTE IMMEDIATE '
SELECT COUNT(*)
FROM ('||l_q_3||')' INTO C_COUNT;        

IF C_COUNT!=0 THEN            

OPEN l_cursor FOR l_q_3;      
LOOP        
l_map.extend;        
FETCH l_cursor BULK COLLECT INTO l_map LIMIT 1000;        
FOR i IN 1 .. l_map.COUNT        
LOOP          
PIPE ROW ( FBBGRS0004_REC_TYP(l_map(i).C1,l_map(i).C2,l_map(i).C3,l_map(i).C4,l_map(i).C5, l_map(i).C6,l_map(i).C7,l_map(i).C8,l_map(i).C9,l_map(i).C10, l_map(i).C11,l_map(i).C12,l_map(i).C13,l_map(i).C14,l_map(i).C15, l_map(i).C16,l_map(i).C17,l_map(i).C18,l_map(i).C19,l_map(i).C20, l_map(i).C21,l_map(i).C22,l_map(i).C23,l_map(i).C24,l_map(i).C25));        
END LOOP;        
EXIT      
WHEN l_cursor%NOTFOUND;      
END LOOP;      
CLOSE l_cursor;            

DBMS_OUTPUT.PUT_LINE('**----***'||'SELECT '||Q_STR_2||',''Mapping Identifier'' AS C21,''Mapping Rule Identifier'' AS C22,''1'' AS 23,NULL  AS C24,'''||i.CALC_EXP ||'''AS C25 FROM DUAL');
  OPEN m_cursor FOR 'SELECT '
  ||Q_STR_2
  ||',''Mapping Identifier'' AS C21,''Mapping Id(SN)'' AS C22,''1'' AS C21,NULL  AS C24,'''
  ||i.CALC_EXP
  ||'''AS C25 FROM DUAL';
LOOP
  l_map.extend;
  FETCH m_cursor BULK COLLECT INTO l_map LIMIT 1000;
  FOR i IN 1 .. l_map.COUNT
  LOOP
    PIPE ROW ( FBBGRS0004_REC_TYP(l_map(i).C1,l_map(i).C2,l_map(i).C3,l_map(i).C4,l_map(i).C5, l_map(i).C6,l_map(i).C7,l_map(i).C8,l_map(i).C9,l_map(i).C10, l_map(i).C11,l_map(i).C12,l_map(i).C13,l_map(i).C14,l_map(i).C15, l_map(i).C16,l_map(i).C17,l_map(i).C18,l_map(i).C19,l_map(i).C20, l_map(i).C21,l_map(i).C22,l_map(i).C23,l_map(i).C24,l_map(i).C25));
  END LOOP;
  EXIT
WHEN m_cursor%NOTFOUND;
END LOOP;
CLOSE m_cursor;
OPEN n_cursor FOR 'SELECT NULL AS C1,NULL AS C2,NULL AS C3,NULL AS C4,NULL AS C5,NULL AS C6,NULL AS C7,          
NULL AS C8,NULL AS C9,NULL AS C10,NULL AS C11,NULL AS C12,NULL AS C13,NULL AS C14,NULL AS C15,NULL AS C16,NULL AS C17,NULL AS C18,          
NULL AS C19,NULL AS C20,NULL AS C21,NULL AS C22,''3'' AS C23,NULL AS C24,'''||i.CALC_EXP||''' AS C25 FROM DUAL';

LOOP
  l_map.extend;
  FETCH n_cursor BULK COLLECT INTO l_map LIMIT 1000;
  FOR i IN 1 .. l_map.COUNT
  LOOP
    PIPE ROW (FBBGRS0004_REC_TYP(l_map(i).C1,l_map(i).C2,l_map(i).C3,l_map(i).C4,l_map(i).C5, l_map(i).C6,l_map(i).C7,l_map(i).C8,l_map(i).C9,l_map(i).C10, l_map(i).C11,l_map(i).C12,l_map(i).C13,l_map(i).C14,l_map(i).C15, l_map(i).C16,l_map(i).C17,l_map(i).C18,l_map(i).C19,l_map(i).C20, l_map(i).C21,l_map(i).C22,l_map(i).C23,l_map(i).C24,l_map(i).C25));
  END LOOP;
  EXIT
WHEN n_cursor%NOTFOUND;
END LOOP;

CLOSE n_cursor;

END IF;
END LOOP;
RETURN;
END;

/
--------------------------------------------------------

--  DDL for Function TF_FBBLM0012

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."TF_FBBLM0012" 
      (
      i_func_id IN VARCHAR2,
      i_lvid    IN VARCHAR2,
      i_as_of_dt IN DATE
      )
    RETURN FBBLM0012_TAB_TYP PIPELINED
  AS
    PRAGMA AUTONOMOUS_TRANSACTION;
    l_cursor SYS_REFCURSOR;
    C_COUNT         NUMBER;
    j               NUMBER;
    L_V1            VARCHAR2(100);
    L_V2            VARCHAR2(100);
    L_V3            VARCHAR2(100);
    L_V4            VARCHAR2(100);
    L_V5            VARCHAR2(100);
    L_V6            VARCHAR2(100);
    L_V7            VARCHAR2(100);
    L_V8            VARCHAR2(100);
    L_V9            VARCHAR2(2000);
    L_V10           VARCHAR2(10);
    L_V11           VARCHAR2(100);
    L_V12           VARCHAR2(100);
    DIM_GRP_FLG     CHAR(1);
    DIM_GRP_CNT     NUMBER;
    
    GRP_CNT_1     NUMBER;
    GRP_CNT_2     NUMBER;
    
    l_v_from_cur VARCHAR2(10);
    l_v_RATE     NUMBER(15,8); 
    l_v_rate_type VARCHAR2(10);
    
    dim_grp_val_cnt NUMBER;
  TYPE DimGrpRecTyp
IS
  RECORD
  (
    Col    NUMBER,
    grp_nm VARCHAR2(100),
    L_V6            VARCHAR2(100),
    L_V7            VARCHAR2(100)
  );

TYPE DimGrpRecValTyp IS TABLE OF GTT_FBBLM0012%ROWTYPE 
   INDEX BY BINARY_INTEGER;    

L_V_DimGrpRecVal DimGrpRecValTyp;
    
TYPE DimGrpTyp
IS
  TABLE OF DimGrpRecTyp INDEX BY BINARY_INTEGER;
  L_V_DimGrpTyp DimGrpTyp;
BEGIN
FOR lv in (SELECT replace(regexp_substr(i_lvid,'[^,]+', 1, level),'''') lv_id
         FROM dual
    CONNECT BY regexp_substr(i_lvid, '[^,]+', 1, level) IS NOT NULL)
      LOOP
   /*Getting Atcive Function IDs with each assigned Function Set IDs*/
 FOR s IN
    (
     SELECT SUBJ_CD LV_ID,SETID SETID  
     FROM cmpo_setid_asgn
      WHERE  cmpo_subj_typ_cd = 'SETID_CONFIG'
         AND cmpo_subj_nm     = 'DRV_ACCT'
         AND slct_typ_cd          ='LVID'
         AND eff_dt<=TRUNC(SYSDATE)
         AND SUBJ_CD IN (lv.lv_id)    
    )
    LOOP  
  FOR j_rec IN
  ( WITH ACTIVE_FUNC AS
  (SELECT A.SETID,
    A.C_FUNC_GRP_ID,
    B.C_FUNC_SET_ID,
    C.C_OBJECT_ID Target_Id,
    D.C_FUNCTION_ID,
    F.EFFDT
  FROM
    (SELECT SETID,
      C_FUNC_GRP_ID
    FROM
      (SELECT SETID,
        C_FUNC_GRP_ID,
        ROW_NUMBER() OVER (PARTITION BY SETID,C_FUNC_GRP_ID ORDER BY EFFDT DESC) AS RN
      FROM ps_c_funcgrp_dfn
      WHERE EFF_STATUS = 'A'
      AND EFFDT       <=TRUNC(SYSDATE) and SETID=s.SETID
      )
    WHERE RN = 1
    ) A
  JOIN
    (SELECT SETID,
      C_FUNC_GRP_ID,
      C_FUNC_SET_ID
    FROM
      (SELECT SETID,
        C_FUNC_GRP_ID,
        C_FUNC_SET_ID,
        ROW_NUMBER() OVER (PARTITION BY SETID,C_FUNC_GRP_ID,C_FUNC_SET_ID ORDER BY EFFDT DESC) AS RN
      FROM ps_c_funcgrp_seq
      WHERE EFFDT<=TRUNC(SYSDATE) and SETID=s.SETID
      )
    WHERE RN = 1
    ) B
  ON (A.SETID        =B.SETID
  AND A.C_FUNC_GRP_ID=B.C_FUNC_GRP_ID)
  JOIN
    (SELECT SETID,
      C_FUNC_SET_ID,
      C_OBJECT_ID
    FROM
      (SELECT SETID,
        C_FUNC_SET_ID,
        C_OBJECT_ID,
        ROW_NUMBER() OVER (PARTITION BY SETID,C_FUNC_SET_ID ORDER BY EFFDT DESC) AS RN
      FROM ps_c_funcset_dfn
      WHERE EFF_STATUS = 'A'
      AND EFFDT       <=TRUNC(SYSDATE) and SETID=s.SETID
      )
    WHERE RN=1
    ) C
  ON (B.SETID        =C.SETID
  AND B.C_FUNC_SET_ID=C.C_FUNC_SET_ID)
  JOIN
    (SELECT SETID,
      C_FUNC_SET_ID,
      C_FUNCTION_ID
    FROM
      (SELECT SETID,
        C_FUNC_SET_ID,
        C_FUNCTION_ID,
        ROW_NUMBER() OVER (PARTITION BY SETID,C_FUNC_SET_ID,C_FUNCTION_ID ORDER BY EFFDT DESC) AS RN
      FROM ps_c_funcset_seq
      WHERE EFFDT<=TRUNC(SYSDATE) and SETID=s.SETID
      )
    WHERE RN=1
    ) D
  ON (C.SETID        =D.SETID
  AND C.C_FUNC_SET_ID=D.C_FUNC_SET_ID)
  JOIN
    (
    SELECT SETID,
      C_FUNCTION_ID
    FROM
      (SELECT SETID,
        C_FUNCTION_ID,
        ROW_NUMBER() OVER (PARTITION BY SETID,C_FUNCTION_ID ORDER BY EFFDT DESC) AS RN
      FROM PS_C_FUNC_DFN
      WHERE EFF_STATUS = 'A'
      AND EFFDT<=TRUNC(SYSDATE) and SETID=s.SETID
      )
    WHERE RN=1
    ) E
  ON (D.SETID        =E.SETID
  AND D.C_FUNCTION_ID=E.C_FUNCTION_ID)
  JOIN
    (SELECT SETID,
      C_FUNCTION_ID,
      EFFDT
    FROM
      (SELECT SETID,
        C_FUNCTION_ID,
        EFFDT,
        ROW_NUMBER() OVER (PARTITION BY SETID,C_FUNCTION_ID ORDER BY EFFDT DESC) AS RN
      FROM PS_C_FUNC_SEQ
      WHERE EFFDT<=TRUNC(SYSDATE) and SETID=s.SETID
      )
    WHERE RN=1
    )F
  ON (E.SETID        =F.SETID
  AND E.C_FUNCTION_ID=F.C_FUNCTION_ID)
  )
SELECT A.SETID ,
  A.LV_ID ,
  B.C_FUNC_SET_ID,
  A.C_FUNCTION_ID ,
  B.Target_Id
FROM
  (SELECT *
  FROM RPRT_FUNC_SEQ
  WHERE C_FUNCTION_ID=NVL(i_func_id,C_FUNCTION_ID)
  AND LV_ID          =s.lv_id and SETID=s.SETID
  ) A
JOIN ACTIVE_FUNC B
ON (A.SETID        =B.SETID
AND A.C_FUNCTION_ID=B.C_FUNCTION_ID
AND A.EFFDT        =B.EFFDT)
GROUP BY A.SETID,
  A.C_FUNCTION_ID,
  A.LV_ID,
  B.Target_Id,
  B.C_FUNC_SET_ID
  )
  LOOP
    BEGIN
      DIM_GRP_FLG:='N';
    WITH ACTIVE_FUNC AS
      (SELECT A.SETID,
        A.C_FUNC_GRP_ID,
        B.C_FUNC_SET_ID,
        C.C_OBJECT_ID,
        D.C_FUNCTION_ID,
        F.EFFDT
      FROM
        (SELECT SETID,
          C_FUNC_GRP_ID
        FROM
          (SELECT SETID,
            C_FUNC_GRP_ID,
            ROW_NUMBER() OVER (PARTITION BY SETID,C_FUNC_GRP_ID ORDER BY EFFDT DESC) AS RN
          FROM ps_c_funcgrp_dfn
          WHERE EFF_STATUS = 'A'
          AND EFFDT       <=TRUNC(SYSDATE) and SETID=s.SETID
          )
        WHERE RN = 1
        ) A
      JOIN
        (SELECT SETID,
          C_FUNC_GRP_ID,
          C_FUNC_SET_ID
        FROM
          (SELECT SETID,
            C_FUNC_GRP_ID,
            C_FUNC_SET_ID,
            ROW_NUMBER() OVER (PARTITION BY SETID,C_FUNC_GRP_ID,C_FUNC_SET_ID ORDER BY EFFDT DESC) AS RN
          FROM ps_c_funcgrp_seq
          WHERE EFFDT<=TRUNC(SYSDATE) and SETID=s.SETID
          )
        WHERE RN = 1
        ) B
      ON (A.SETID        =B.SETID
      AND A.C_FUNC_GRP_ID=B.C_FUNC_GRP_ID)
      JOIN
        (SELECT SETID,
          C_FUNC_SET_ID,
          C_OBJECT_ID
        FROM
          (SELECT SETID,
            C_FUNC_SET_ID,
            C_OBJECT_ID,
            ROW_NUMBER() OVER (PARTITION BY SETID,C_FUNC_SET_ID ORDER BY EFFDT DESC) AS RN
          FROM ps_c_funcset_dfn
          WHERE EFF_STATUS = 'A'
          AND EFFDT       <=TRUNC(SYSDATE) and SETID=s.SETID
          )
        WHERE RN=1
        ) C
      ON (B.SETID        =C.SETID
      AND B.C_FUNC_SET_ID=C.C_FUNC_SET_ID)
      JOIN
        (SELECT SETID,
          C_FUNC_SET_ID,
          C_FUNCTION_ID
        FROM
          (SELECT SETID,
            C_FUNC_SET_ID,
            C_FUNCTION_ID,
            ROW_NUMBER() OVER (PARTITION BY SETID,C_FUNC_SET_ID,C_FUNCTION_ID ORDER BY EFFDT DESC) AS RN
          FROM ps_c_funcset_seq
          WHERE EFFDT<=TRUNC(SYSDATE) and SETID=s.SETID
          )
        WHERE RN=1
        ) D
      ON (C.SETID        =D.SETID
      AND C.C_FUNC_SET_ID=D.C_FUNC_SET_ID)
      JOIN
        (SELECT SETID,
          C_FUNCTION_ID
        FROM
          (SELECT SETID,
            C_FUNCTION_ID,
            ROW_NUMBER() OVER (PARTITION BY SETID,C_FUNCTION_ID ORDER BY EFFDT DESC) AS RN
          FROM PS_C_FUNC_DFN
          WHERE EFF_STATUS = 'A'
          AND EFFDT       <=TRUNC(SYSDATE) and SETID=s.SETID
          )
        WHERE RN=1
        ) E
      ON (D.SETID        =E.SETID
      AND D.C_FUNCTION_ID=E.C_FUNCTION_ID)
      JOIN
        (SELECT SETID,
          C_FUNCTION_ID,
          EFFDT
        FROM
          (SELECT SETID,
            C_FUNCTION_ID,
            EFFDT,
            ROW_NUMBER() OVER (PARTITION BY SETID,C_FUNCTION_ID ORDER BY EFFDT DESC) AS RN
          FROM PS_C_FUNC_SEQ
          WHERE EFFDT<=TRUNC(SYSDATE) and SETID=s.SETID
          )
        WHERE RN=1
        )F
      ON (E.SETID        =F.SETID
      AND E.C_FUNCTION_ID=F.C_FUNCTION_ID)
      ),
      ACTIVE_RPT_FUNC AS
      (SELECT A.SETID ,
        A.LV_ID ,
        A.C_FUNCTION_ID ,
        A.C_ACCT_CATG ,
        A.EFFDT ,
        A.SEQ_NBR ,
        A.C_OPER_TYPE_1 ,
        A.C_OPER_TYPE_1_DESC ,
        A.C_OPEN_BRACKETS ,
        A.C_OPEN_BRACKETS_DESC ,
        A.C_OBJECT_SRC ,
        A.C_OBJECT_SRC_DESC ,
        A.C_OPER_TYPE ,
        A.C_OPER_TYPE_DESC ,
        A.C_RATE_FLAG ,
        A.C_OBJECT_ID ,
        A.TREE_NAME ,
        A.C_LEDGER_BAL_TYPE ,
        A.C_VISUAL_RATE ,
        A.C_PERIOD_TYP ,
        A.C_PRIOR_PERIOD ,
        A.C_CLOSE_BRACKETS ,
        A.C_CLOSE_BRACKETS_DESC,
        A.DIM_GRP_CD,
        B.C_FUNC_SET_ID
      FROM
        (SELECT *
        FROM RPRT_FUNC_SEQ
        WHERE C_FUNCTION_ID=j_rec.C_FUNCTION_ID and SETID=s.SETID
        AND SETID          =j_rec.SETID
        AND LV_ID          =j_rec.LV_ID 
        ) A
      JOIN ACTIVE_FUNC B
      ON (A.SETID        =B.SETID
      AND A.C_FUNCTION_ID=B.C_FUNCTION_ID
      AND A.EFFDT        =B.EFFDT )
      )
    SELECT CALC_EXP
    INTO L_V9
    FROM
      (SELECT CALC_EXP
      FROM
        (SELECT LISTAGG(CAL_EXP) WITHIN GROUP (
        ORDER BY FUNC_ID,seq_nbr) OVER (PARTITION BY SETID,C_FUNC_SET_ID,FUNC_ID) CALC_EXP
        FROM
          (SELECT A.C_FUNCTION_ID AS FUNC_ID,
            A.seq_nbr,
            TO_CHAR(A.C_OPER_TYPE_1_DESC
            || A.C_OPEN_BRACKETS_DESC
            ||
            CASE
              WHEN c_object_src IN ('OWN_PCT','CON','PCT')
              THEN A.C_OPER_TYPE_DESC
              WHEN c_object_src IN ('EX_RATE')
              THEN '*'
              WHEN c_object_src = 'DIM' AND seq_nbr>1
              THEN A.C_OPER_TYPE_DESC
            END
            ||
            CASE
              WHEN c_object_src IN ('OWN_PCT','CON','PCT')
              THEN A.C_OBJECT_ID
              ELSE A.C_OBJECT_SRC_DESC
            END
            || A.C_CLOSE_BRACKETS_DESC) AS CAL_EXP,
            CASE
              WHEN A.C_ACCT_CATG='GL'
              THEN 'GL_ACCT_ID'
              WHEN A.C_ACCT_CATG='FDL'
              THEN 'FDL_ACCT_ID'
              ELSE TO_CHAR(A.C_ACCT_CATG)
            END                     AS DIM,
            'S'                     AS TS,
            TO_CHAR(A.C_OBJECT_ID)  AS VAL,
            TO_CHAR(A.C_OBJECT_SRC) AS OBJ_SRC,
            a.SETID                 AS SETID,
            A.C_FUNC_SET_ID
          FROM ACTIVE_RPT_FUNC A
          WHERE A.c_function_id=j_rec.C_FUNCTION_ID
          AND A.C_FUNC_SET_ID=j_rec.C_FUNC_SET_ID
          UNION
          SELECT A.c_function_id   AS FUNC_ID,
            0                      AS seq_nbr,
            'Dimension = '         AS CAL_EXP,
            'GL_ACCT_ID'           AS DIM,
            'T'                    AS TS,
            TO_CHAR(a.c_object_id) AS VAL,
            'DIM'                  AS OBJ_SRC,
            a.SETID                AS SETID,
            A.C_FUNC_SET_ID
          FROM ACTIVE_FUNC A
          WHERE A.c_function_id=j_rec.C_FUNCTION_ID
          AND A.C_FUNC_SET_ID=j_rec.C_FUNC_SET_ID
          )
        )
      GROUP BY CALC_EXP
      );
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    L_V9:=NULL;
  END;
  j:=1;
  FOR i IN 1..5
  LOOP
    IF j=1 THEN
      INSERT
      INTO GTT_FBBLM0012
        (
          C98,
          C99,
          C100,
          C101,
          C102,
          C103,
          C104,
          C106,
          C107
        )
        VALUES
        (
          j_rec.C_FUNCTION_ID,
          j_rec.SETID,
          j,
          'Expression for calc',
          'LVID',
          'Function ID',
          'Report Run Date',
          j_rec.C_FUNC_SET_ID,
          lv.lv_id
        );
    ELSIF j=2 THEN
      INSERT
      INTO GTT_FBBLM0012
        (
          C97,
          C98,
          C99,
          C100,
          C101,
          C102,
          C103,
          C104,
          C106,
          C107
        )
        VALUES
        (
          'Period',
          j_rec.C_FUNCTION_ID,
          j_rec.SETID,
          j,
          L_V9,
          j_rec.LV_ID,
          j_rec.C_FUNCTION_ID,
          TO_CHAR(SYSDATE,'MM/DD/YYYY HH12:MI AM'),
          j_rec.C_FUNC_SET_ID,
          lv.lv_id
        );
    ELSIF j=3 THEN
      INSERT
      INTO GTT_FBBLM0012
        (
          C97,
          C98,
          C99,
          C100,
          C101,
          C102,
          C103,
          C104,
          C106,
          C107
        )
        VALUES
        (
          'Amount Type',
          j_rec.C_FUNCTION_ID,
          j_rec.SETID,
          j,
          L_V9,
          j_rec.LV_ID,
          j_rec.C_FUNCTION_ID,
          TO_CHAR(SYSDATE,'MM/DD/YYYY HH12:MI AM'),
          j_rec.C_FUNC_SET_ID,
          lv.lv_id
        );
    ELSIF j=4 THEN
      INSERT
      INTO GTT_FBBLM0012
        (
          C97,
          C98,
          C99,
          C100,
          C101,
          C102,
          C103,
          C104,
          C106,
          C107
        )
        VALUES
        (
          'Attribute values',
          j_rec.C_FUNCTION_ID,
          j_rec.SETID,
          j,
          L_V9,
          j_rec.LV_ID,
          j_rec.C_FUNCTION_ID,
          TO_CHAR(SYSDATE,'MM/DD/YYYY HH12:MI AM'),
          j_rec.C_FUNC_SET_ID,
          lv.lv_id
        );
    ELSIF j=5 THEN
      INSERT
      INTO GTT_FBBLM0012
        (
          C97,
          C98,
          C99,
          C100,
          C101,
          C102,
          C103,
          C104,
          C106,
          C107
        )
        VALUES
        (
          'Amounts',
          j_rec.C_FUNCTION_ID,
          j_rec.SETID,
          j,
          L_V9,
          j_rec.LV_ID,
          j_rec.C_FUNCTION_ID,
          TO_CHAR(SYSDATE,'MM/DD/YYYY HH12:MI AM'),
          j_rec.C_FUNC_SET_ID,
          lv.lv_id
        );
    END IF;
    j:=j+1;
  END LOOP;
  C_COUNT    :=0;
  DIM_GRP_CNT:=1;
  DIM_GRP_FLG:='N';
  FOR I  IN
  (SELECT *
    FROM RPRT_FUNC_SEQ
    WHERE C_FUNCTION_ID=j_rec.C_FUNCTION_ID
    AND SETID          =j_rec.SETID
    AND LV_ID          =j_rec.LV_ID
    ORDER BY seq_nbr
  )
  LOOP
  
   IF C_COUNT!=0 THEN
     C_COUNT:=C_COUNT+1;
    EXECUTE IMMEDIATE 'UPDATE GTT_FBBLM0012 SET C'||TO_CHAR(C_COUNT)||'=''Operator'' WHERE C98='''||i.C_FUNCTION_ID||''' AND C99='''||i.setid||''' AND C106='''||j_rec.C_FUNC_SET_ID||''' AND C107='''||lv.lv_id||''' AND C100=1';
    EXECUTE IMMEDIATE 'UPDATE GTT_FBBLM0012 SET C'||TO_CHAR(C_COUNT)||'='''||
            CASE              
              WHEN i.c_object_src IN ('EX_RATE')
              THEN '*'
              ELSE i.C_OPER_TYPE_DESC
            END ||''' WHERE C98='''||i.C_FUNCTION_ID||''' AND C99='''||i.setid||''' AND C106='''||j_rec.C_FUNC_SET_ID||''' AND C107='''||lv.lv_id||''' AND C100=4';
    EXECUTE IMMEDIATE 'UPDATE GTT_FBBLM0012 SET C'||TO_CHAR(C_COUNT)||'='''||
           CASE               
              WHEN i.c_object_src IN ('EX_RATE')
              THEN '*'
              ELSE i.C_OPER_TYPE_DESC
            END||''' WHERE C98='''||i.C_FUNCTION_ID||''' AND C99='''||i.setid||''' AND C106='''||j_rec.C_FUNC_SET_ID||''' AND C107='''||lv.lv_id||''' AND C100=5';
   END IF;
  
    L_V5                               :=NULL;
    IF i.c_object_src                   ='GRP' THEN
      DIM_GRP_FLG                      :='Y';
      L_V_DimGrpTyp(DIM_GRP_CNT).Col   :=C_COUNT;
      L_V_DimGrpTyp(DIM_GRP_CNT).grp_nm:=i.c_object_id;
      
     IF i.C_PERIOD_TYP   ='00' OR i.C_PERIOD_TYP IS NULL THEN
      L_V_DimGrpTyp(DIM_GRP_CNT).L_V6             :=TO_CHAR (TO_DATE(i_as_of_dt,'DD-MON-YY'),'MM') ;
      L_V_DimGrpTyp(DIM_GRP_CNT).L_V7             :=TO_CHAR(TO_DATE(i_as_of_dt,'DD-MON-YY'),'YYYY');            
    ELSIF i.C_PERIOD_TYP='01' THEN
      L_V_DimGrpTyp(DIM_GRP_CNT).L_V6             :=TO_CHAR(ADD_MONTHS(TO_DATE(i_as_of_dt,'DD-MON-YY'),-i.C_PRIOR_PERIOD),'MM');
      L_V_DimGrpTyp(DIM_GRP_CNT).L_V7             :=TO_CHAR(ADD_MONTHS(TO_DATE(i_as_of_dt,'DD-MON-YY'),-i.C_PRIOR_PERIOD),'YYYY');
    END IF; 
      
    END IF;
    IF i.C_PERIOD_TYP   ='00' OR i.C_PERIOD_TYP IS NULL THEN
      L_V6             :=TO_CHAR (TO_DATE(i_as_of_dt,'DD-MON-YY'),'MM') ;
      L_V7             :=TO_CHAR(TO_DATE(i_as_of_dt,'DD-MON-YY'),'YYYY');            
    ELSIF i.C_PERIOD_TYP='01' THEN
      L_V6             :=TO_CHAR(ADD_MONTHS(TO_DATE(i_as_of_dt,'DD-MON-YY'),-i.C_PRIOR_PERIOD),'MM');
      L_V7             :=TO_CHAR(ADD_MONTHS(TO_DATE(i_as_of_dt,'DD-MON-YY'),-i.C_PRIOR_PERIOD),'YYYY');
    END IF;
    DBMS_OUTPUT.PUT_LINE(L_V6||' '||L_V7);
    IF (i.c_object_src ='DIM') THEN
      IF (i.C_ACCT_CATG='GL_ACCT_ID' OR i.C_ACCT_CATG='GL') THEN
        BEGIN
          SELECT SUM(
            CASE
              WHEN i.C_LEDGER_BAL_TYPE='MTD'
              THEN RPRT_CCY_MTD_BAL_AMT
              WHEN i.C_LEDGER_BAL_TYPE='YTD'
              THEN RPRT_CCY_YTD_BAL_AMT
              WHEN i.C_LEDGER_BAL_TYPE='ADB'
              THEN RPRT_CCY_MTD_ADB_AMT
             END),FUNC_CCY_CD
          INTO L_V5,l_v_from_cur
          FROM sub_gl_bal
          WHERE  sub_gl_feed_id NOT LIKE '%DERV%'
          AND gl_acct_id =i.c_object_id
          AND FYR          =TO_NUMBER(L_V7)
          AND ACTG_PRD_NO  =TO_NUMBER(L_V6)
          AND LV_ID        =s.lv_id
          GROUP BY FUNC_CCY_CD
          ;          
          
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          L_V5:=NULL;
        END;
      ELSIF (i.C_ACCT_CATG='FDL_ACCT_ID' OR i.C_ACCT_CATG='FDL') THEN
        BEGIN
          SELECT SUM(
            CASE
              WHEN i.C_LEDGER_BAL_TYPE='MTD'
              THEN RPRT_CCY_MTD_BAL_AMT
              WHEN i.C_LEDGER_BAL_TYPE='YTD'
              THEN RPRT_CCY_YTD_BAL_AMT
              WHEN i.C_LEDGER_BAL_TYPE='ADB'
              THEN RPRT_CCY_MTD_ADB_AMT
            END ),FUNC_CCY_CD
          INTO L_V5,l_v_from_cur
          FROM sub_gl_bal
          WHERE sub_gl_feed_id NOT LIKE '%DERV%'
          AND FDL_ACCT_ID =i.c_object_id
          AND FYR           =TO_NUMBER(L_V7)
          AND ACTG_PRD_NO   =TO_NUMBER(L_V6)
          AND LV_ID         =s.lv_id
          GROUP BY FUNC_CCY_CD
          ;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          L_V5:=NULL;
        END;
      END IF;
    END IF;
    
    IF i.c_object_src='EX_RATE' THEN
     
     BEGIN     
     SELECT TRNL_RATE_TYP_CD 
       INTO l_v_rate_type
       FROM lv where lv_id=s.lv_id 
       GROUP BY TRNL_RATE_TYP_CD 
       ;
      EXCEPTION
       WHEN NO_DATA_FOUND THEN
        l_v_rate_type:=NULL;
     END;
      
     BEGIN     
     SELECT RATE_MULT/RATE_DIV
      INTO l_v_rate
      FROM ps_c_rt_rate_tbl
      WHERE from_cur=l_v_from_cur
       AND to_cur    = 'USD'
       AND RT_TYPE=l_v_rate_type
       AND EFFDT=TO_DATE(i_as_of_dt,'DD-MON-YY')
       ;     
      EXCEPTION
       WHEN NO_DATA_FOUND THEN
        l_v_rate:=NULL;
     END;
    
    END IF;
    
    C_COUNT                            :=C_COUNT+1;
    IF i.c_object_src                  ='GRP' THEN
      DIM_GRP_FLG                      :='Y';
      L_V_DimGrpTyp(DIM_GRP_CNT).Col   :=C_COUNT;
      L_V_DimGrpTyp(DIM_GRP_CNT).grp_nm:=i.c_object_id;
    END IF;
    IF C_COUNT=1 THEN
      L_V8   :='Source Dimension-'||TO_CHAR(C_COUNT);
    ELSE
      L_V8:='Source Dimension-'||TO_CHAR(((C_COUNT-1)/2)+1);
    END IF;
    EXECUTE IMMEDIATE 'UPDATE GTT_FBBLM0012 SET C'||TO_CHAR(C_COUNT)||'='''||L_V8||'/'||
    CASE WHEN i.c_object_src='DIM' THEN i.C_ACCT_CATG
         WHEN i.c_object_src='GRP' THEN 'Group/'||i.C_ACCT_CATG
         WHEN i.c_object_src='NODE' THEN 'Node/'||i.C_ACCT_CATG
         WHEN i.c_object_src='OWN_PCT' THEN 'OWNPercentage'
         WHEN i.c_object_src='CON' THEN 'Constant'
         WHEN i.c_object_src='PCT' THEN 'Percentage'
         WHEN i.c_object_src='EX_RATE' THEN 'Exchange Rate'
         END
    ||''' WHERE C98='''||i.C_FUNCTION_ID||''' AND C99='''||i.setid||''' AND C106='''||j_rec.C_FUNC_SET_ID||''' AND C107='''||lv.lv_id||''' AND C100=1'; 
    EXECUTE IMMEDIATE 'UPDATE GTT_FBBLM0012 SET C'||TO_CHAR(C_COUNT)||'='''||
    CASE
    WHEN (i.c_object_src='DIM' OR i.c_object_src='GRP' OR i.c_object_src='NODE') THEN
      L_V6
    ELSE
      'N/A'
    END||''' WHERE C98='''||i.C_FUNCTION_ID||''' AND C99='''||i.setid||''' AND C106='''||j_rec.C_FUNC_SET_ID||''' AND C107='''||lv.lv_id||''' AND C100=2';
    EXECUTE IMMEDIATE 'UPDATE GTT_FBBLM0012 SET C'||TO_CHAR(C_COUNT)||'='''||
    CASE
    WHEN (i.c_object_src='DIM' OR i.c_object_src='GRP' OR i.c_object_src='NODE') THEN
      i.C_LEDGER_BAL_TYPE
    ELSE
      'N/A'
    END||''' WHERE C98='''||i.C_FUNCTION_ID||''' AND C99='''||i.setid||''' AND C106='''||j_rec.C_FUNC_SET_ID||''' AND C107='''||lv.lv_id||''' AND C100=3';
    EXECUTE IMMEDIATE 'UPDATE GTT_FBBLM0012 SET C'||TO_CHAR(C_COUNT)||'='''||i.C_OBJECT_ID||''' WHERE C98='''||i.C_FUNCTION_ID||''' AND C99='''||i.setid||''' AND C106='''||j_rec.C_FUNC_SET_ID||''' AND C107='''||lv.lv_id||''' AND C100=4';
    EXECUTE IMMEDIATE 'UPDATE GTT_FBBLM0012 SET C'||TO_CHAR(C_COUNT)||'='''||
    CASE
    WHEN i.c_object_src IN ('OWN_PCT','CON','PCT') THEN
      i.C_OBJECT_ID
    WHEN i.c_object_src ='EX_RATE' THEN
    TO_CHAR(l_v_rate)  
    ELSE
     L_V5
    END||''' WHERE C98='''||i.C_FUNCTION_ID||''' AND C99='''||i.setid||''' AND C106='''||j_rec.C_FUNC_SET_ID||''' AND C107='''||lv.lv_id||''' AND C100=5';
    
    IF (i.c_object_src='DIM' OR i.c_object_src='GRP' OR i.c_object_src='NODE') THEN
      L_V1           :=i.C_LEDGER_BAL_TYPE;
    END IF;
  END LOOP;
  L_V5  :=NULL;
  
  L_V11            :=TO_CHAR (TO_DATE(i_as_of_dt,'DD-MON-YY'),'MM') ;
  L_V12            :=TO_CHAR(TO_DATE(i_as_of_dt,'DD-MON-YY'),'YYYY');
  /*Getting Target Amounts*/
  IF L_V1='MTD' THEN
    BEGIN
      SELECT SUM(RPRT_CCY_MTD_BAL_AMT)
      INTO L_V5
      FROM sub_gl_bal
      WHERE sub_gl_feed_id LIKE '%DERV%'
      AND gl_acct_id  =j_rec.Target_Id
      AND FYR         =TO_NUMBER(L_V12)
      AND ACTG_PRD_NO =TO_NUMBER(L_V11)
      AND LV_ID       =s.lv_id ;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      L_V5:=NULL;
    END;
  ELSIF L_V1='YTD' THEN
    BEGIN
      SELECT SUM(RPRT_CCY_YTD_BAL_AMT)
      INTO L_V5
      FROM sub_gl_bal
      WHERE sub_gl_feed_id LIKE '%DERV%'
      AND gl_acct_id  =j_rec.Target_Id
      AND FYR         =TO_NUMBER(L_V12)
      AND ACTG_PRD_NO =TO_NUMBER(L_V11)
      AND LV_ID       =s.lv_id ;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      L_V5:=NULL;
    END;
  ELSIF L_V1='ADB' THEN
    BEGIN
      SELECT SUM(RPRT_CCY_MTD_ADB_AMT)
      INTO L_V5
      FROM sub_gl_bal
      WHERE sub_gl_feed_id LIKE '%DERV%'
      AND gl_acct_id  =j_rec.Target_Id
      AND FYR         =TO_NUMBER(L_V12)
      AND ACTG_PRD_NO =TO_NUMBER(L_V11)
      AND LV_ID       =s.lv_id ;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      L_V5:=NULL;
    END;
  END IF;
  C_COUNT:=C_COUNT+1;
  L_V2:='Target';
  L_V3:=j_rec.Target_Id;
  EXECUTE IMMEDIATE 'UPDATE GTT_FBBLM0012 SET C'||TO_CHAR(C_COUNT)||'='''||L_V2||''' WHERE C98='''||j_rec.C_FUNCTION_ID||''' AND C99='''||j_rec.setid||''' AND C106='''||j_rec.C_FUNC_SET_ID||''' AND C107='''||lv.lv_id||''' AND C100=1';
  EXECUTE IMMEDIATE 'UPDATE GTT_FBBLM0012 SET C'||TO_CHAR(C_COUNT)||'='''||L_V11||''' WHERE C98='''||j_rec.C_FUNCTION_ID||''' AND C99='''||j_rec.setid||''' AND C106='''||j_rec.C_FUNC_SET_ID||''' AND C107='''||lv.lv_id||''' AND C100=2';
  EXECUTE IMMEDIATE 'UPDATE GTT_FBBLM0012 SET C'||TO_CHAR(C_COUNT)||'='''||NVL(L_V1,'N/A')||''' WHERE C98='''||j_rec.C_FUNCTION_ID||''' AND C99='''||j_rec.setid||''' AND C106='''||j_rec.C_FUNC_SET_ID||''' AND C107='''||lv.lv_id||''' AND C100=3';
  EXECUTE IMMEDIATE 'UPDATE GTT_FBBLM0012 SET C'||TO_CHAR(C_COUNT)||'='''||L_V3||''' WHERE C98='''||j_rec.C_FUNCTION_ID||''' AND C99='''||j_rec.setid||''' AND C106='''||j_rec.C_FUNC_SET_ID||''' AND C107='''||lv.lv_id||''' AND C100=4';
  EXECUTE IMMEDIATE 'UPDATE GTT_FBBLM0012 SET C'||TO_CHAR(C_COUNT)||'='''||L_V5||''' WHERE C98='''||j_rec.C_FUNCTION_ID||''' AND C99='''||j_rec.setid||''' AND C106='''||j_rec.C_FUNC_SET_ID||''' AND C107='''||lv.lv_id||''' AND C100=5';
  COMMIT;
  
  SELECT COUNT(*) INTO GRP_CNT_1 FROM GTT_FBBLM0012;
  
  DBMS_OUTPUT.PUT_LINE('Count:'||GRP_CNT_1);
  
  IF DIM_GRP_FLG='Y' THEN
    FOR k IN L_V_DimGrpTyp.FIRST..L_V_DimGrpTyp.LAST
    LOOP
      dbms_output.put_line(L_V_DimGrpTyp(k).col||'  '||L_V_DimGrpTyp(k).grp_nm);
      dim_grp_val_cnt:=1;
      FOR l IN
      (SELECT dim_grp_cd,
        ATTR_CD,
        VAL
      FROM
        (SELECT dgs.dim_grp_cd,
          DGLR.ATTR_CD,
          TO_CHAR(dglr.chld_leaf_val) VAL
        FROM
          (SELECT * FROM dim_grp_su_CUR WHERE de_typ_cd ='LIST'
          ) dgs
        JOIN
          (SELECT *
          FROM DIM_GRP_LIST_RSLVR_CUR
          WHERE ATTR_CD    IN ('FDL_ACCT_ID','GL_ACCT_ID')
          AND TRUNC(EFF_DT)<=TRUNC(SYSDATE)
          ) DGLR
        ON (dgs.dim_grp_cd=dglr.dim_grp_cd)
        UNION
        SELECT dgs.dim_grp_cd,
          DGLR.ATTR_CD,
          TO_CHAR(dglr.chld_leaf_val) VAL
        FROM
          (SELECT * FROM dim_grp_su_CUR WHERE de_typ_cd ='RANGE'
          ) dgs
        JOIN
          (
          SELECT *
          FROM DIM_GRP_RANGE_RSLVR_CUR
          WHERE ATTR_CD    IN ('FDL_ACCT_ID','GL_ACCT_ID')
          AND TRUNC(EFF_DT)<=TRUNC(SYSDATE)
           ) DGLR
        ON (dgs.dim_grp_cd=dglr.dim_grp_cd)
        UNION
        SELECT dgs.dim_grp_cd,
          DGLR.ATTR_CD,
          TO_CHAR(dglr.chld_leaf_val) VAL
        FROM
          (SELECT * FROM dim_grp_su_CUR WHERE de_typ_cd ='TREE') dgs
        JOIN
          (SELECT *
          FROM DIM_GRP_TREE_RSLVR_CUR
          WHERE ATTR_CD    IN ('FDL_ACCT_ID','GL_ACCT_ID')
          AND TRUNC(EFF_DT)<=TRUNC(SYSDATE)
          )DGLR
        ON (dgs.dim_grp_cd=dglr.dim_grp_cd)
        )
      WHERE dim_grp_cd=L_V_DimGrpTyp(k).grp_nm
      )
      LOOP
        IF dim_grp_val_cnt=1 THEN
          EXECUTE IMMEDIATE 'UPDATE GTT_FBBLM0012 SET C'||TO_CHAR(L_V_DimGrpTyp(k).col)||'='''||l.val||''',C105='||dim_grp_val_cnt||' WHERE C98='''||j_rec.C_FUNCTION_ID||''' AND C99='''||j_rec.setid||''' AND C106='''||j_rec.C_FUNC_SET_ID||''' AND C107='''||lv.lv_id||''' AND C100=4';
          L_V5  :=NULL;
          IF L_V1='MTD' THEN
            BEGIN
              SELECT SUM(RPRT_CCY_MTD_BAL_AMT)
              INTO L_V5
              FROM sub_gl_bal
              WHERE sub_gl_feed_id NOT LIKE '%DERV%'
              AND  gl_acct_id =l.val
              AND FYR          =TO_NUMBER(L_V_DimGrpTyp(k).L_V7)
              AND ACTG_PRD_NO  =TO_NUMBER(L_V_DimGrpTyp(k).L_V6)
              AND LV_ID        =s.lv_id ;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              L_V5:=NULL;
            END;
          ELSIF L_V1='YTD' THEN
            BEGIN
              SELECT SUM(RPRT_CCY_YTD_BAL_AMT)
              INTO L_V5
              FROM sub_gl_bal
              WHERE sub_gl_feed_id NOT LIKE '%DERV%'
              AND gl_acct_id =l.val
              AND FYR          =TO_NUMBER(L_V_DimGrpTyp(k).L_V7)
              AND ACTG_PRD_NO  =TO_NUMBER(L_V_DimGrpTyp(k).L_V6)
              AND LV_ID        =s.lv_id ;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              L_V5:=NULL;
            END;
          ELSIF L_V1='ADB' THEN
            BEGIN
              SELECT SUM(RPRT_CCY_MTD_ADB_AMT)
              INTO L_V5
              FROM sub_gl_bal
              WHERE sub_gl_feed_id NOT LIKE '%DERV%'
              AND gl_acct_id =l.val
              AND FYR          =TO_NUMBER(L_V_DimGrpTyp(k).L_V7)
              AND ACTG_PRD_NO  =TO_NUMBER(L_V_DimGrpTyp(k).L_V6)
              AND LV_ID        =s.lv_id ;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              L_V5:=NULL;
            END;
          END IF;
          EXECUTE IMMEDIATE 'UPDATE GTT_FBBLM0012 SET C'||TO_CHAR(L_V_DimGrpTyp(k).col)||'='''||L_V5 ||''',C105='||dim_grp_val_cnt||' WHERE C98='''||j_rec.C_FUNCTION_ID||''' AND C99='''||j_rec.setid||''' AND C106='''||j_rec.C_FUNC_SET_ID||''' AND C107='''||lv.lv_id||''' AND C100=5';
          dim_grp_val_cnt:=dim_grp_val_cnt+1;
          
         COMMIT; 
      ELSE        
               
       SELECT COUNT(*) INTO  
       GRP_CNT_1 FROM
           (
           SELECT C1,C2,C3,C4,C5,C6,C7,C8,C9,C10,
                  C11,C12,C13,C14,C15,C16,C17,C18,
                  C19,C20,C21,C22,C23,C24,C25,C26,
                  C27,C28,C29,C30,C31,C32,C33,C34,c35,C36,C37,C38,C39,C40,
                  C41,C42,C43,C44,C45, C46,C47,C48,C49,C50,C51,C52,
                  C53,C54,C55,C56,C57,C58,C59,C60,C61,C62,C63,C64,C65, C66,C67,C68,C69,
                  C70,C71,C72, C73,C74,C75,C76,C77,C78,C79,C80,C81,C82,C83,C84,C85, C86,
                  C87,C88,C89,C90,C91,C92, C93,C94,C95,C96,C97,C98,C99,C100,C101,C102,C103,
                  dim_grp_val_cnt
              FROM GTT_FBBLM0012
             WHERE C98=j_rec.C_FUNCTION_ID
               AND C99=j_rec.setid
               AND C100 = 4
               AND C105=1
               AND C107=lv.lv_id
           );
         
      SELECT COUNT(*)
      INTO GRP_CNT_2 FROM
           (
           SELECT C1,C2,C3,C4,C5,C6,C7,C8,C9,C10,
                  C11,C12,C13,C14,C15,C16,C17,C18,C19,C20,
                  C21,C22,C23,C24,C25,C26,C27,C28,C29,C30,
                  C31,C32,C33,C34,C35,C36,C37,C38,C39,C40,
                  C41,C42,C43,C44,C45, C46,C47,C48,C49,C50,C51,C52,
                  C53,C54,C55,C56,C57,C58,C59,C60,C61,C62,C63,C64,C65, C66,C67,C68,C69,
                  C70,C71,C72, C73,C74,C75,C76,C77,C78,C79,C80,C81,C82,C83,C84,C85, C86,
                  C87,C88,C89,C90,C91,C92, C93,C94,C95,C96,C97,C98,C99,C100,C101,C102,C103,dim_grp_val_cnt
              FROM GTT_FBBLM0012
             WHERE C98=j_rec.C_FUNCTION_ID
               AND C99=j_rec.setid
               AND C100 = 5               
               AND C105=1
               AND C107=lv.lv_id
           );  
      DBMS_OUTPUT.PUT_LINE('GRP_CNT_1:'||GRP_CNT_1||' '||'GRP_CNT_2:'||GRP_CNT_2);     
     SELECT * INTO L_V_DimGrpRecVal(1) FROM
           (
           SELECT C1,C2,C3,C4,C5,C6,C7,C8,C9,C10,
                   C11,C12,C13,C14,C15,C16,C17,C18,
                   C19,C20,C21,C22,C23,C24,C25,C26,
                   C27,C28,C29,C30,C31,C32,C33,C34,c35,
                   C36,C37,C38,C39,C40,C41,C42,C43,C44,C45, C46,C47,C48,C49,C50,C51,C52,
                   C53,C54,C55,C56,C57,C58,C59,C60,C61,C62,C63,C64,C65, C66,C67,C68,C69,
                   C70,C71,C72, C73,C74,C75,C76,C77,C78,C79,C80,C81,C82,C83,C84,C85, C86,
                   C87,C88,C89,C90,C91,C92, C93,C94,C95,C96,C97,C98,C99,C100,C101,C102,C103,
                   C104,dim_grp_val_cnt,C106,C107
              FROM GTT_FBBLM0012
             WHERE C98=j_rec.C_FUNCTION_ID
               AND C99=j_rec.setid
               AND C106=j_rec.C_FUNC_SET_ID
               AND C100 = 4
               AND C105=1
               AND C107=lv.lv_id
           );
               
         SELECT * INTO L_V_DimGrpRecVal(2) FROM
           (
           SELECT C1,C2,C3,C4,C5,C6,C7,C8,C9,C10,
                  C11,C12,C13,C14,C15,C16,C17,C18,C19,C20,
                  C21,C22,C23,C24,C25,C26,C27,C28,C29,C30,
                  C31,C32,C33,C34,c35,C36,C37,C38,C39,C40,C41,C42,C43,C44,C45, 
                  C46,C47,C48,C49,C50,C51,C52, C53,C54,C55,C56,C57,C58,C59,C60,
                  C61,C62,C63,C64,C65, C66,C67,C68,C69,C70,C71,C72, C73,C74,C75,C76,C77,C78,C79,C80,
                  C81,C82,C83,C84,C85, C86,C87,C88,C89,C90,C91,C92, C93,C94,C95,C96,C97,C98,C99,C100,
                  C101,C102,C103,C104,dim_grp_val_cnt,C106,C107                  
              FROM GTT_FBBLM0012
             WHERE C98=j_rec.C_FUNCTION_ID
               AND C99=j_rec.setid
               AND C106=j_rec.C_FUNC_SET_ID
               AND C100 = 5
               AND C105=1
               AND C107=lv.lv_id
           );   
  
  
INSERT INTO GTT_FBBLM0012 
VALUES
(
L_V_DimGrpRecVal(1).C1,L_V_DimGrpRecVal(1).C2,L_V_DimGrpRecVal(1).C3,L_V_DimGrpRecVal(1).C4,
L_V_DimGrpRecVal(1).C5,L_V_DimGrpRecVal(1).C6,L_V_DimGrpRecVal(1).C7,L_V_DimGrpRecVal(1).C8,
L_V_DimGrpRecVal(1).C9,L_V_DimGrpRecVal(1).C10,L_V_DimGrpRecVal(1).C11,L_V_DimGrpRecVal(1).C12,
L_V_DimGrpRecVal(1).C13,L_V_DimGrpRecVal(1).C14,L_V_DimGrpRecVal(1).C15,L_V_DimGrpRecVal(1).C16,
L_V_DimGrpRecVal(1).C17,L_V_DimGrpRecVal(1).C18,L_V_DimGrpRecVal(1).C19,L_V_DimGrpRecVal(1).C20,
L_V_DimGrpRecVal(1).C21,L_V_DimGrpRecVal(1).C22,L_V_DimGrpRecVal(1).C23,L_V_DimGrpRecVal(1).C24,
L_V_DimGrpRecVal(1).C25,L_V_DimGrpRecVal(1).C26,L_V_DimGrpRecVal(1).C27,L_V_DimGrpRecVal(1).C28,
L_V_DimGrpRecVal(1).C29,L_V_DimGrpRecVal(1).C30,L_V_DimGrpRecVal(1).C31,L_V_DimGrpRecVal(1).C32,
L_V_DimGrpRecVal(1).C33,L_V_DimGrpRecVal(1).C34,L_V_DimGrpRecVal(1).C35,L_V_DimGrpRecVal(1).C36,L_V_DimGrpRecVal(1).C37,L_V_DimGrpRecVal(1).C38,L_V_DimGrpRecVal(1).C39,L_V_DimGrpRecVal(1).C40,
L_V_DimGrpRecVal(1).C41,L_V_DimGrpRecVal(1).C42,L_V_DimGrpRecVal(1).C43,L_V_DimGrpRecVal(1).C44,L_V_DimGrpRecVal(1).C45, L_V_DimGrpRecVal(1).C46,L_V_DimGrpRecVal(1).C47,L_V_DimGrpRecVal(1).C48,L_V_DimGrpRecVal(1).C49,L_V_DimGrpRecVal(1).C50,L_V_DimGrpRecVal(1).C51,L_V_DimGrpRecVal(1).C52, L_V_DimGrpRecVal(1).C53,L_V_DimGrpRecVal(1).C54,L_V_DimGrpRecVal(1).C55,L_V_DimGrpRecVal(1).C56,L_V_DimGrpRecVal(1).C57,L_V_DimGrpRecVal(1).C58,L_V_DimGrpRecVal(1).C59,L_V_DimGrpRecVal(1).C60,
L_V_DimGrpRecVal(1).C61,L_V_DimGrpRecVal(1).C62,L_V_DimGrpRecVal(1).C63,L_V_DimGrpRecVal(1).C64,L_V_DimGrpRecVal(1).C65, L_V_DimGrpRecVal(1).C66,L_V_DimGrpRecVal(1).C67,L_V_DimGrpRecVal(1).C68,L_V_DimGrpRecVal(1).C69,L_V_DimGrpRecVal(1).C70,L_V_DimGrpRecVal(1).C71,L_V_DimGrpRecVal(1).C72, L_V_DimGrpRecVal(1).C73,L_V_DimGrpRecVal(1).C74,L_V_DimGrpRecVal(1).C75,L_V_DimGrpRecVal(1).C76,L_V_DimGrpRecVal(1).C77,L_V_DimGrpRecVal(1).C78,L_V_DimGrpRecVal(1).C79,L_V_DimGrpRecVal(1).C80,
L_V_DimGrpRecVal(1).C81,L_V_DimGrpRecVal(1).C82,L_V_DimGrpRecVal(1).C83,L_V_DimGrpRecVal(1).C84,L_V_DimGrpRecVal(1).C85, L_V_DimGrpRecVal(1).C86,L_V_DimGrpRecVal(1).C87,L_V_DimGrpRecVal(1).C88,L_V_DimGrpRecVal(1).C89,L_V_DimGrpRecVal(1).C90,L_V_DimGrpRecVal(1).C91,L_V_DimGrpRecVal(1).C92, L_V_DimGrpRecVal(1).C93,L_V_DimGrpRecVal(1).C94,L_V_DimGrpRecVal(1).C95,L_V_DimGrpRecVal(1).C96,L_V_DimGrpRecVal(1).C97,L_V_DimGrpRecVal(1).C98,L_V_DimGrpRecVal(1).C99,L_V_DimGrpRecVal(1).C100,
L_V_DimGrpRecVal(1).C101,L_V_DimGrpRecVal(1).C102,L_V_DimGrpRecVal(1).C103,L_V_DimGrpRecVal(1).C104,L_V_DimGrpRecVal(1).C105,L_V_DimGrpRecVal(1).C106,L_V_DimGrpRecVal(1).C107
);      


INSERT INTO GTT_FBBLM0012 
VALUES
(
L_V_DimGrpRecVal(2).C1,L_V_DimGrpRecVal(2).C2,L_V_DimGrpRecVal(2).C3,L_V_DimGrpRecVal(2).C4,
L_V_DimGrpRecVal(2).C5,L_V_DimGrpRecVal(2).C6,L_V_DimGrpRecVal(2).C7,L_V_DimGrpRecVal(2).C8,
L_V_DimGrpRecVal(2).C9,L_V_DimGrpRecVal(2).C10,L_V_DimGrpRecVal(2).C11,L_V_DimGrpRecVal(2).C12,
L_V_DimGrpRecVal(2).C13,L_V_DimGrpRecVal(2).C14,L_V_DimGrpRecVal(2).C15,L_V_DimGrpRecVal(2).C16,
L_V_DimGrpRecVal(2).C17,L_V_DimGrpRecVal(2).C18,L_V_DimGrpRecVal(2).C19,L_V_DimGrpRecVal(2).C20,
L_V_DimGrpRecVal(2).C21,L_V_DimGrpRecVal(2).C22,L_V_DimGrpRecVal(2).C23,L_V_DimGrpRecVal(2).C24,
L_V_DimGrpRecVal(2).C25,L_V_DimGrpRecVal(2).C26,L_V_DimGrpRecVal(2).C27,L_V_DimGrpRecVal(2).C28,
L_V_DimGrpRecVal(2).C29,L_V_DimGrpRecVal(2).C30,L_V_DimGrpRecVal(2).C31,L_V_DimGrpRecVal(2).C32,
L_V_DimGrpRecVal(2).C33,L_V_DimGrpRecVal(2).C34,L_V_DimGrpRecVal(2).C35,L_V_DimGrpRecVal(2).C36,L_V_DimGrpRecVal(2).C37,L_V_DimGrpRecVal(2).C38,L_V_DimGrpRecVal(2).C39,L_V_DimGrpRecVal(2).C40,
L_V_DimGrpRecVal(2).C41,L_V_DimGrpRecVal(2).C42,L_V_DimGrpRecVal(2).C43,L_V_DimGrpRecVal(2).C44,L_V_DimGrpRecVal(2).C45, L_V_DimGrpRecVal(2).C46,L_V_DimGrpRecVal(2).C47,L_V_DimGrpRecVal(2).C48,L_V_DimGrpRecVal(2).C49,L_V_DimGrpRecVal(2).C50,L_V_DimGrpRecVal(2).C51,L_V_DimGrpRecVal(2).C52, L_V_DimGrpRecVal(2).C53,L_V_DimGrpRecVal(2).C54,L_V_DimGrpRecVal(2).C55,L_V_DimGrpRecVal(2).C56,L_V_DimGrpRecVal(2).C57,L_V_DimGrpRecVal(2).C58,L_V_DimGrpRecVal(2).C59,L_V_DimGrpRecVal(2).C60,
L_V_DimGrpRecVal(2).C61,L_V_DimGrpRecVal(2).C62,L_V_DimGrpRecVal(2).C63,L_V_DimGrpRecVal(2).C64,L_V_DimGrpRecVal(2).C65, L_V_DimGrpRecVal(2).C66,L_V_DimGrpRecVal(2).C67,L_V_DimGrpRecVal(2).C68,L_V_DimGrpRecVal(2).C69,L_V_DimGrpRecVal(2).C70,L_V_DimGrpRecVal(2).C71,L_V_DimGrpRecVal(2).C72, L_V_DimGrpRecVal(2).C73,L_V_DimGrpRecVal(2).C74,L_V_DimGrpRecVal(2).C75,L_V_DimGrpRecVal(2).C76,L_V_DimGrpRecVal(2).C77,L_V_DimGrpRecVal(2).C78,L_V_DimGrpRecVal(2).C79,L_V_DimGrpRecVal(2).C80,
L_V_DimGrpRecVal(2).C81,L_V_DimGrpRecVal(2).C82,L_V_DimGrpRecVal(2).C83,L_V_DimGrpRecVal(2).C84,L_V_DimGrpRecVal(2).C85, L_V_DimGrpRecVal(2).C86,L_V_DimGrpRecVal(2).C87,L_V_DimGrpRecVal(2).C88,L_V_DimGrpRecVal(2).C89,L_V_DimGrpRecVal(2).C90,L_V_DimGrpRecVal(2).C91,L_V_DimGrpRecVal(2).C92, L_V_DimGrpRecVal(2).C93,L_V_DimGrpRecVal(2).C94,L_V_DimGrpRecVal(2).C95,L_V_DimGrpRecVal(2).C96,L_V_DimGrpRecVal(2).C97,L_V_DimGrpRecVal(2).C98,L_V_DimGrpRecVal(2).C99,L_V_DimGrpRecVal(2).C100,
L_V_DimGrpRecVal(2).C101,L_V_DimGrpRecVal(2).C102,L_V_DimGrpRecVal(2).C103,L_V_DimGrpRecVal(2).C104,L_V_DimGrpRecVal(2).C105,L_V_DimGrpRecVal(2).C106,L_V_DimGrpRecVal(2).C107
);            
               
EXECUTE IMMEDIATE 'UPDATE GTT_FBBLM0012 SET C'||TO_CHAR(L_V_DimGrpTyp(k).col)||'='''||l.val||''' WHERE C98='''||j_rec.C_FUNCTION_ID||''' AND C99='''||j_rec.setid||''' AND C106='''||j_rec.C_FUNC_SET_ID||
''' AND C107='''||lv.lv_id||''' AND C100=4 AND C105='||dim_grp_val_cnt;
      L_V5  :=NULL;
        IF L_V1='MTD' THEN
            BEGIN
              SELECT SUM(RPRT_CCY_MTD_BAL_AMT)
              INTO L_V5
              FROM sub_gl_bal
              WHERE sub_gl_feed_id NOT LIKE '%DERV%'
              AND gl_acct_id =l.val
              AND FYR          =TO_NUMBER(L_V_DimGrpTyp(k).L_V7)
              AND ACTG_PRD_NO  =TO_NUMBER(L_V_DimGrpTyp(k).L_V6)
              AND LV_ID        =s.lv_id ;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              L_V5:=NULL;
            END;
          ELSIF L_V1='YTD' THEN
            BEGIN
              SELECT SUM(RPRT_CCY_YTD_BAL_AMT)
              INTO L_V5
              FROM sub_gl_bal
              WHERE sub_gl_feed_id NOT LIKE '%DERV%'
              AND gl_acct_id =l.val
              AND FYR          =TO_NUMBER(L_V_DimGrpTyp(k).L_V7)
              AND ACTG_PRD_NO  =TO_NUMBER(L_V_DimGrpTyp(k).L_V6)
              AND LV_ID        =s.lv_id ;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              L_V5:=NULL;
            END;
          ELSIF L_V1='ADB' THEN
            BEGIN
              SELECT SUM(RPRT_CCY_MTD_ADB_AMT)
              INTO L_V5
              FROM sub_gl_bal
              WHERE sub_gl_feed_id NOT LIKE '%DERV%'
              AND gl_acct_id =l.val
              AND FYR          =TO_NUMBER(L_V_DimGrpTyp(k).L_V7)
              AND ACTG_PRD_NO  =TO_NUMBER(L_V_DimGrpTyp(k).L_V6)
              AND LV_ID        =s.lv_id ;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              L_V5:=NULL;
            END;
          END IF;
          EXECUTE IMMEDIATE 'UPDATE GTT_FBBLM0012 SET C'||TO_CHAR(L_V_DimGrpTyp(k).col)||'='''||L_V5 ||''' WHERE C98='''||j_rec.C_FUNCTION_ID||''' AND C99='''||j_rec.setid||''' AND C106='''||j_rec.C_FUNC_SET_ID||
''' AND C107='''||lv.lv_id||''' AND C100=5 AND C105='||dim_grp_val_cnt;
     
          COMMIT;
          dim_grp_val_cnt:=dim_grp_val_cnt+1;   
        END IF;
      END LOOP;
    END LOOP;
  END IF;
  FOR i  IN
  (
  SELECT *
  FROM GTT_FBBLM0012
  WHERE C98=j_rec.C_FUNCTION_ID
  AND C99  =j_rec.setid
  AND C106=j_rec.C_FUNC_SET_ID
  AND C107=lv.lv_id
  )
  LOOP
    PIPE ROW (FBBLM0012_REC_TYP(i.C1,i.C2,i.C3,i.C4,i.C5,i.C6,i.C7,i.C8,i.C9,i.C10, i.C11,i.C12,i.C13,i.C14,i.C15, i.C16,i.C17,i.C18,i.C19,i.C20,
                              i.C21,i.C22,i.C23,i.C24,i.C25, i.C26,i.C27,i.C28,i.C29,i.C30,i.C31,i.C32, i.C33,i.C34,i.C35,i.C36,i.C37,i.C38,i.C39,i.C40,
                              i.C41,i.C42,i.C43,i.C44,i.C45, i.C46,i.C47,i.C48,i.C49,i.C50,i.C51,i.C52, i.C53,i.C54,i.C55,i.C56,i.C57,i.C58,i.C59,i.C60,
                              i.C61,i.C62,i.C63,i.C64,i.C65, i.C66,i.C67,i.C68,i.C69,i.C70,i.C71,i.C72, i.C73,i.C74,i.C75,i.C76,i.C77,i.C78,i.C79,i.C80,
                              i.C81,i.C82,i.C83,i.C84,i.C85, i.C86,i.C87,i.C88,i.C89,i.C90,i.C91,i.C92, i.C93,i.C94,i.C95,i.C96,i.C97,i.C98,i.C99,i.C100,
                              i.C101,i.C102,i.C103,i.C104,i.C105,i.C106,i.C107)
                              );
  END LOOP;
END LOOP;
END LOOP;
END LOOP;
 DELETE FROM GTT_FBBLM0012;
COMMIT;
RETURN;
END;    

/
--------------------------------------------------------

--  DDL for Function TF_FBBLMR0017

--------------------------------------------------------


  CREATE OR REPLACE FUNCTION "RPTAPP"."TF_FBBLMR0017" (
      i_func_id  IN VARCHAR2,
      i_lvid     IN VARCHAR2,
      i_as_of_dt IN DATE,
      i_cntry    IN VARCHAR2 
       )
    RETURN FBBLMR0017_TAB_TYP PIPELINED
  AS
    PRAGMA AUTONOMOUS_TRANSACTION;
    l_cursor SYS_REFCURSOR;
    C_COUNT NUMBER :=0;
    j       NUMBER;
    L_V1    VARCHAR2(100);    
    L_V3    VARCHAR2(100);    
    L_V5    VARCHAR2(100);        
    L_V9    VARCHAR2(4000);    
    L_V11   VARCHAR2(100);
    L_V12   VARCHAR2(100);
  BEGIN
  
  FOR ct IN
    (
    SELECT replace(regexp_substr(i_cntry,'[^,]+', 1, level),'''') cntry
    FROM dual
    CONNECT BY regexp_substr(i_cntry, '[^,]+', 1, level) IS NOT NULL
    ) 
  LOOP --cntry  
  
   IF i_lvid is not null THEN
   
    FOR j in(SELECT replace(regexp_substr(i_lvid,'[^,]+', 1, level),'''') lv_id
         FROM dual
    CONNECT BY regexp_substr(i_lvid, '[^,]+', 1, level) IS NOT NULL)
      LOOP
      
        FOR FD IN
    (
     SELECT FDED.DA_EXCP_ID,
      PEDV.C_EXCP_CD,
      FDED.EXCP_MSG_TXT,
      FDED.EXCP_ATTR1_CD,
      FDED.EXCP_ATTR1_VAL,
      FDED.EXCP_ATTR2_CD,
      FDED.EXCP_ATTR2_VAL,
      FDED.EXCP_ATTR3_CD,
      FDED.EXCP_ATTR3_VAL,
      FDED.EXCP_ATTR4_CD,
      FDED.EXCP_ATTR4_VAL,
      FDED.EXCP_ATTR5_CD,
      FDED.EXCP_ATTR5_VAL,
      FDED.EXCP_ATTR6_CD,
      FDED.EXCP_ATTR6_VAL,
      PB.DMCL_CTRY_CD
    FROM (
    SELECT * FROM FBB_DATA_EXCP_OCUR 
    WHERE TR_TYP_CD LIKE 'DERV_ACCT'
    AND FEED_AS_OF_DT=TO_DATE(i_as_of_dt,'DD-MON-YY')
    AND EXCP_ATTR4_CD='FUNCTION_ID'
    AND EXCP_ATTR4_VAL=i_func_id
    AND EXCP_ATTR5_VAL= j.lv_id
    AND EXCP_TYP_IND IN ('W','E')
       ) FDED LEFT JOIN
      PS_C_EXCP_DEF_V PEDV 
      ON FDED.EXCP_ID=TO_CHAR(PEDV.C_EXCP_ID)
      JOIN (SELECT * FROM PS_BUS_UNIT_TBL_GL
      WHERE DMCL_CTRY_CD IN (ct.cntry)
      ) PB
    ON (FDED.EXCP_ATTR5_VAL=PB.BUSINESS_UNIT)  
    )
    LOOP
         
      BEGIN           
            SELECT CALC_EXP
            INTO L_V9
            FROM
              (SELECT CALC_EXP
              FROM
                (SELECT LISTAGG(CAL_EXP) WITHIN GROUP (
                ORDER BY FUNC_ID,seq_nbr) OVER (PARTITION BY SETID,LV_ID,FUNC_ID) CALC_EXP
                FROM
                  (SELECT A.C_FUNCTION_ID AS FUNC_ID,A.LV_ID,
                    A.seq_nbr,
                    TO_CHAR(A.C_OPER_TYPE_1_DESC
                    || A.C_OPEN_BRACKETS_DESC
                    ||
                    CASE
                      WHEN c_object_src IN ('OWN_PCT','CON','PCT')
                      THEN A.C_OPER_TYPE_DESC
                      WHEN c_object_src IN ('EX_RATE')
                      THEN '*'
                      WHEN c_object_src = 'DIM'
                      AND seq_nbr       >1
                      THEN A.C_OPER_TYPE_DESC
                    END
                    ||
                    CASE
                      WHEN c_object_src IN ('OWN_PCT','CON','PCT')
                      THEN A.C_OBJECT_ID
                      ELSE A.C_OBJECT_SRC_DESC
                    END
                    || A.C_CLOSE_BRACKETS_DESC) AS CAL_EXP,
                    CASE
                      WHEN A.C_ACCT_CATG='GL'
                      THEN 'GL_ACCT_ID'
                      WHEN A.C_ACCT_CATG='FDL'
                      THEN 'FDL_ACCT_ID'
                      ELSE TO_CHAR(A.C_ACCT_CATG)
                    END                     AS DIM,
                    'S'                     AS TS,
                    TO_CHAR(A.C_OBJECT_ID)  AS VAL,
                    TO_CHAR(A.C_OBJECT_SRC) AS OBJ_SRC,
                    a.SETID                 AS SETID                                     
          FROM  RPRT_FUNC_SEQ A
          WHERE A.C_FUNCTION_ID=i_func_id
          AND A.LV_ID          =FD.EXCP_ATTR5_VAL
          AND A.SETID          =FD.EXCP_ATTR1_VAL                  
                  )
                )
              GROUP BY CALC_EXP
              );
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
            L_V9:=NULL;
          END;     
           
       
          /*Getting Atcive Function IDs with each assigned Function Set IDs*/
          FOR j_rec IN
          (
          WITH ACTIVE_FUNC AS
          (SELECT A.SETID,
            A.C_FUNC_GRP_ID,
            B.C_FUNC_SET_ID,
            C.C_OBJECT_ID Target_Id,
            D.C_FUNCTION_ID,
            F.EFFDT,
            C.DEF_ATTR_SU_ID DEF_ATTR_SU_ID
          FROM
            (SELECT SETID,
              C_FUNC_GRP_ID
            FROM
              (SELECT SETID,
                C_FUNC_GRP_ID,
                ROW_NUMBER() OVER (PARTITION BY SETID,C_FUNC_GRP_ID ORDER BY EFFDT DESC) AS RN
              FROM ps_c_funcgrp_dfn
              WHERE EFF_STATUS = 'A'
              AND  SETID        =FD.EXCP_ATTR1_VAL
              AND EFFDT       <=TRUNC(SYSDATE)
              )
            WHERE RN = 1
            ) A
          JOIN
            (SELECT SETID,
              C_FUNC_GRP_ID,
              C_FUNC_SET_ID
            FROM
              (SELECT SETID,
                C_FUNC_GRP_ID,
                C_FUNC_SET_ID,
                ROW_NUMBER() OVER (PARTITION BY SETID,C_FUNC_GRP_ID,C_FUNC_SET_ID ORDER BY EFFDT DESC) AS RN
              FROM ps_c_funcgrp_seq
              WHERE EFFDT<=TRUNC(SYSDATE)
              AND SETID   =FD.EXCP_ATTR1_VAL
              )
            WHERE RN = 1
            ) B
          ON (A.SETID        =B.SETID
          AND A.C_FUNC_GRP_ID=B.C_FUNC_GRP_ID)
          JOIN
            (SELECT SETID,
              C_FUNC_SET_ID,
              C_OBJECT_ID,
              DEF_ATTR_SU_ID
            FROM
              (SELECT SETID,
                C_FUNC_SET_ID,
                C_OBJECT_ID,DEF_ATTR_SU_ID,
                ROW_NUMBER() OVER (PARTITION BY SETID,C_FUNC_SET_ID ORDER BY EFFDT DESC) AS RN
              FROM ps_c_funcset_dfn
              WHERE EFF_STATUS = 'A'
              AND  EFFDT       <=TRUNC(SYSDATE)
              AND SETID        =FD.EXCP_ATTR1_VAL
              )
            WHERE RN=1
            ) C
          ON (B.SETID        =C.SETID
          AND B.C_FUNC_SET_ID=C.C_FUNC_SET_ID)
          JOIN
            (SELECT SETID,
              C_FUNC_SET_ID,
              C_FUNCTION_ID
            FROM
              (SELECT SETID,
                C_FUNC_SET_ID,
                C_FUNCTION_ID,
                ROW_NUMBER() OVER (PARTITION BY SETID,C_FUNC_SET_ID,C_FUNCTION_ID ORDER BY EFFDT DESC) AS RN
              FROM ps_c_funcset_seq
              WHERE EFFDT<=TRUNC(SYSDATE)
              AND SETID   =FD.EXCP_ATTR1_VAL
              )
            WHERE RN=1
            ) D
          ON (C.SETID        =D.SETID
          AND C.C_FUNC_SET_ID=D.C_FUNC_SET_ID)
          JOIN
            (SELECT SETID,
              C_FUNCTION_ID
            FROM
              (SELECT SETID,
                C_FUNCTION_ID,
                ROW_NUMBER() OVER (PARTITION BY SETID,C_FUNCTION_ID ORDER BY EFFDT DESC) AS RN
              FROM PS_C_FUNC_DFN
              WHERE EFF_STATUS = 'A'
              AND EFFDT       <=TRUNC(SYSDATE)
              AND SETID        =FD.EXCP_ATTR1_VAL
              )
            WHERE RN=1
            ) E
          ON (D.SETID        =E.SETID
          AND D.C_FUNCTION_ID=E.C_FUNCTION_ID)
          JOIN
            (SELECT SETID,
              C_FUNCTION_ID,
              EFFDT
            FROM
              (SELECT SETID,
                C_FUNCTION_ID,
                EFFDT,
                ROW_NUMBER() OVER (PARTITION BY SETID,C_FUNCTION_ID ORDER BY EFFDT DESC) AS RN
              FROM PS_C_FUNC_SEQ
              WHERE EFFDT<=TRUNC(SYSDATE)
              AND SETID   =FD.EXCP_ATTR1_VAL
              )
            WHERE RN=1
            )F
          ON (E.SETID        =F.SETID
          AND E.C_FUNCTION_ID=F.C_FUNCTION_ID)
          )
        SELECT A.SETID ,
          A.LV_ID ,
          B.C_FUNC_SET_ID,
          A.C_FUNCTION_ID ,
          B.Target_Id,
          B.DEF_ATTR_SU_ID
        FROM
          (SELECT *
          FROM RPRT_FUNC_SEQ
          WHERE C_FUNCTION_ID=i_func_id
          AND LV_ID          =FD.EXCP_ATTR5_VAL
          AND SETID          =FD.EXCP_ATTR1_VAL
          ) A
        JOIN ACTIVE_FUNC B
        ON (A.SETID        =B.SETID
        AND A.C_FUNCTION_ID=B.C_FUNCTION_ID
        AND A.EFFDT        =B.EFFDT)
        GROUP BY A.SETID ,
          A.LV_ID ,
          B.C_FUNC_SET_ID,
          A.C_FUNCTION_ID ,
          B.Target_Id,
          B.DEF_ATTR_SU_ID         
          )
          LOOP
           C_COUNT:=C_COUNT+1;             
            
          BEGIN
            SELECT LISTAGG(ATTR_CD||':'||DEF_ATTR_VAL, ',') WITHIN GROUP (
            ORDER BY DEF_ATTR_SU_ID)
            INTO L_V3
            FROM
              (SELECT A.DEF_ATTR_SU_ID,
                A.ATTR_CD,
                A.DEF_ATTR_VAL
              FROM DEF_ATTR_VAL_SU A
              INNER JOIN
                (SELECT DEF_ATTR_SU_ID,
                  EFF_DT
                FROM
                  (SELECT DEF_ATTR_SU_ID,
                    EFF_DT,
                    EFF_STA,
                    ROW_NUMBER() OVER (PARTITION BY DEF_ATTR_SU_ID ORDER BY EFF_DT DESC) AS RN
                  FROM DEF_ATTR_SU_DEFN
                  WHERE EFF_DT <= SYSDATE
                  )
                WHERE RN    = 1
                AND EFF_STA = 'A'
                ) B
              ON A.DEF_ATTR_SU_ID = B.DEF_ATTR_SU_ID
              AND A.EFF_DT        = B.EFF_DT
              )
            WHERE DEF_ATTR_SU_ID=j_rec.DEF_ATTR_SU_ID ;
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
            L_V3:=NULL;
          END;
          FOR I  IN
          (SELECT *
          FROM RPRT_FUNC_SEQ
          WHERE C_FUNCTION_ID=j_rec.C_FUNCTION_ID
          AND SETID          =j_rec.SETID
          AND LV_ID          =j_rec.LV_ID
          ORDER BY seq_nbr
          )
          LOOP
            IF (i.c_object_src='DIM' OR i.c_object_src='GRP' OR i.c_object_src='NODE') THEN
              L_V1           :=i.C_LEDGER_BAL_TYPE;
            END IF;
          END LOOP;
          L_V5  :=NULL;
          L_V11 :=TO_CHAR (TO_DATE(i_as_of_dt,'DD-MON-YY'),'MM') ;
          L_V12 :=TO_CHAR(TO_DATE(i_as_of_dt,'DD-MON-YY'),'YYYY');
          /*Getting Target Amounts*/
          IF L_V1='MTD' THEN
            BEGIN
              SELECT SUM(RPRT_CCY_MTD_BAL_AMT)
              INTO L_V5
              FROM sub_gl_bal
              WHERE sub_gl_feed_id LIKE '%DERV%'
              AND gl_acct_id  =j_rec.Target_Id
              AND FYR         =TO_NUMBER(L_V12)
              AND ACTG_PRD_NO =TO_NUMBER(L_V11)
              AND LV_ID       =FD.EXCP_ATTR5_VAL;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              L_V5:=NULL;
            END;
          ELSIF L_V1='YTD' THEN
            BEGIN
              SELECT SUM(RPRT_CCY_YTD_BAL_AMT)
              INTO L_V5
              FROM sub_gl_bal
              WHERE sub_gl_feed_id LIKE '%DERV%'
              AND gl_acct_id  =j_rec.Target_Id
              AND FYR         =TO_NUMBER(L_V12)
              AND ACTG_PRD_NO =TO_NUMBER(L_V11)
              AND LV_ID       =FD.EXCP_ATTR5_VAL;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              L_V5:=NULL;
            END;
          ELSIF L_V1='ADB' THEN
            BEGIN
              SELECT SUM(RPRT_CCY_MTD_ADB_AMT)
              INTO L_V5
              FROM sub_gl_bal
              WHERE sub_gl_feed_id LIKE '%DERV%'
              AND gl_acct_id  =j_rec.Target_Id
              AND FYR         =TO_NUMBER(L_V12)
              AND ACTG_PRD_NO =TO_NUMBER(L_V11)
              AND LV_ID       =FD.EXCP_ATTR5_VAL ;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              L_V5:=NULL;
            END;
          END IF;
          PIPE ROW (FBBLMR0017_REC_TYP(
                         TO_CHAR(SYSDATE,'mm/dd/yyyy HH12:MI AM'), 
                         FD.EXCP_ATTR5_VAL,
                         FD.EXCP_ATTR4_VAL,
                         L_V9,
                         j_rec.Target_Id, 
                         FD.DA_EXCP_ID,
                         FD.EXCP_ATTR1_CD
                         ||CASE WHEN FD.EXCP_ATTR2_CD is not null THEN '/'||FD.EXCP_ATTR2_CD END
                         ||CASE WHEN FD.EXCP_ATTR3_CD is not null THEN '/'||FD.EXCP_ATTR3_CD END 
                         ||CASE WHEN FD.EXCP_ATTR4_CD is not null THEN '/'||FD.EXCP_ATTR4_CD END 
                         ||CASE WHEN FD.EXCP_ATTR5_CD is not null THEN '/'||FD.EXCP_ATTR5_CD END 
                         ||CASE WHEN FD.EXCP_ATTR6_CD is not null THEN '/'||FD.EXCP_ATTR6_CD END,
                         FD.EXCP_ATTR1_VAL
                         ||CASE WHEN FD.EXCP_ATTR2_VAL is not null THEN '/'||FD.EXCP_ATTR2_VAL END
                         ||CASE WHEN FD.EXCP_ATTR3_VAL is not null THEN '/'||FD.EXCP_ATTR3_VAL END
                         ||CASE WHEN FD.EXCP_ATTR4_VAL is not null THEN '/'||FD.EXCP_ATTR4_VAL END
                         ||CASE WHEN FD.EXCP_ATTR5_VAL is not null THEN '/'||FD.EXCP_ATTR5_VAL END
                         ||CASE WHEN FD.EXCP_ATTR6_VAL is not null THEN '/'||FD.EXCP_ATTR6_VAL END
                         ,L_V3,
                         FD.C_EXCP_CD,
                         FD.excp_msg_txt,
                         L_V5));
         END LOOP; -- FUNC ID              
     IF C_COUNT=0 THEN
      
      PIPE ROW (FBBLMR0017_REC_TYP(TO_CHAR(SYSDATE,'mm/dd/yyyy HH12:MI AM'), 
                         FD.EXCP_ATTR5_VAL, 
                         FD.EXCP_ATTR4_VAL,
                         L_V9,
                         NULL, 
                         FD.DA_EXCP_ID,
                         FD.EXCP_ATTR1_CD
                         ||CASE WHEN FD.EXCP_ATTR2_CD is not null THEN '/'||FD.EXCP_ATTR2_CD END
                         ||CASE WHEN FD.EXCP_ATTR3_CD is not null THEN '/'||FD.EXCP_ATTR3_CD END 
                         ||CASE WHEN FD.EXCP_ATTR4_CD is not null THEN '/'||FD.EXCP_ATTR4_CD END 
                         ||CASE WHEN FD.EXCP_ATTR5_CD is not null THEN '/'||FD.EXCP_ATTR5_CD END 
                         ||CASE WHEN FD.EXCP_ATTR6_CD is not null THEN '/'||FD.EXCP_ATTR6_CD END                          
                         ,FD.EXCP_ATTR1_VAL
                         ||CASE WHEN FD.EXCP_ATTR2_VAL is not null THEN '/'||FD.EXCP_ATTR2_VAL END
                         ||CASE WHEN FD.EXCP_ATTR3_VAL is not null THEN '/'||FD.EXCP_ATTR3_VAL END
                         ||CASE WHEN FD.EXCP_ATTR4_VAL is not null THEN '/'||FD.EXCP_ATTR4_VAL END
                         ||CASE WHEN FD.EXCP_ATTR5_VAL is not null THEN '/'||FD.EXCP_ATTR5_VAL END
                         ||CASE WHEN FD.EXCP_ATTR6_VAL is not null THEN '/'||FD.EXCP_ATTR6_VAL END
                         ,NULL,
                         FD.C_EXCP_CD,
                         FD.excp_msg_txt,
                         NULL));
     
     END IF;
  END LOOP; --FBB
      
  END LOOP;--lv_id    
    
   ELSE 
    FOR FD IN
    (
     SELECT FDED.DA_EXCP_ID,
      PEDV.C_EXCP_CD,
      FDED.EXCP_MSG_TXT,
      FDED.EXCP_ATTR1_CD,
      FDED.EXCP_ATTR1_VAL,
      FDED.EXCP_ATTR2_CD,
      FDED.EXCP_ATTR2_VAL,
      FDED.EXCP_ATTR3_CD,
      FDED.EXCP_ATTR3_VAL,
      FDED.EXCP_ATTR4_CD,
      FDED.EXCP_ATTR4_VAL,
      FDED.EXCP_ATTR5_CD,
      FDED.EXCP_ATTR5_VAL,
      FDED.EXCP_ATTR6_CD,
      FDED.EXCP_ATTR6_VAL,
      PB.DMCL_CTRY_CD
    FROM (
    SELECT * FROM FBB_DATA_EXCP_OCUR 
    WHERE TR_TYP_CD LIKE 'DERV_ACCT'
    AND FEED_AS_OF_DT=TO_DATE(i_as_of_dt,'DD-MON-YY')
    AND EXCP_ATTR4_CD='FUNCTION_ID'
    AND EXCP_ATTR4_VAL=i_func_id    
    AND EXCP_TYP_IND IN ('W','E')
       ) FDED LEFT JOIN
      PS_C_EXCP_DEF_V PEDV 
      ON FDED.EXCP_ID=TO_CHAR(PEDV.C_EXCP_ID)
      JOIN (SELECT * FROM PS_BUS_UNIT_TBL_GL
      WHERE DMCL_CTRY_CD IN (ct.cntry)
      ) PB
    ON (FDED.EXCP_ATTR5_VAL=PB.BUSINESS_UNIT)  
    )
    LOOP
         
      BEGIN           
            SELECT CALC_EXP
            INTO L_V9
            FROM
              (SELECT CALC_EXP
              FROM
                (SELECT LISTAGG(CAL_EXP) WITHIN GROUP (
                ORDER BY FUNC_ID,seq_nbr) OVER (PARTITION BY SETID,LV_ID,FUNC_ID) CALC_EXP
                FROM
                  (SELECT A.C_FUNCTION_ID AS FUNC_ID,A.LV_ID,
                    A.seq_nbr,
                    TO_CHAR(A.C_OPER_TYPE_1_DESC
                    || A.C_OPEN_BRACKETS_DESC
                    ||
                    CASE
                      WHEN c_object_src IN ('OWN_PCT','CON','PCT')
                      THEN A.C_OPER_TYPE_DESC
                      WHEN c_object_src IN ('EX_RATE')
                      THEN '*'
                      WHEN c_object_src = 'DIM'
                      AND seq_nbr       >1
                      THEN A.C_OPER_TYPE_DESC
                    END
                    ||
                    CASE
                      WHEN c_object_src IN ('OWN_PCT','CON','PCT')
                      THEN A.C_OBJECT_ID
                      ELSE A.C_OBJECT_SRC_DESC
                    END
                    || A.C_CLOSE_BRACKETS_DESC) AS CAL_EXP,
                    CASE
                      WHEN A.C_ACCT_CATG='GL'
                      THEN 'GL_ACCT_ID'
                      WHEN A.C_ACCT_CATG='FDL'
                      THEN 'FDL_ACCT_ID'
                      ELSE TO_CHAR(A.C_ACCT_CATG)
                    END                     AS DIM,
                    'S'                     AS TS,
                    TO_CHAR(A.C_OBJECT_ID)  AS VAL,
                    TO_CHAR(A.C_OBJECT_SRC) AS OBJ_SRC,
                    a.SETID                 AS SETID                                     
          FROM  RPRT_FUNC_SEQ A
          WHERE A.C_FUNCTION_ID=i_func_id
          AND A.LV_ID          =FD.EXCP_ATTR5_VAL
          AND A.SETID          =FD.EXCP_ATTR1_VAL                  
                  )
                )
              GROUP BY CALC_EXP
              );
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
            L_V9:=NULL;
          END;     
           
       
          /*Getting Atcive Function IDs with each assigned Function Set IDs*/
          FOR j_rec IN
          (
          WITH ACTIVE_FUNC AS
          (SELECT A.SETID,
            A.C_FUNC_GRP_ID,
            B.C_FUNC_SET_ID,
            C.C_OBJECT_ID Target_Id,
            D.C_FUNCTION_ID,
            F.EFFDT,
            C.DEF_ATTR_SU_ID DEF_ATTR_SU_ID
          FROM
            (SELECT SETID,
              C_FUNC_GRP_ID
            FROM
              (SELECT SETID,
                C_FUNC_GRP_ID,
                ROW_NUMBER() OVER (PARTITION BY SETID,C_FUNC_GRP_ID ORDER BY EFFDT DESC) AS RN
              FROM ps_c_funcgrp_dfn
              WHERE EFF_STATUS = 'A'
              AND  SETID        =FD.EXCP_ATTR1_VAL
              AND EFFDT       <=TRUNC(SYSDATE)
              )
            WHERE RN = 1
            ) A
          JOIN
            (SELECT SETID,
              C_FUNC_GRP_ID,
              C_FUNC_SET_ID
            FROM
              (SELECT SETID,
                C_FUNC_GRP_ID,
                C_FUNC_SET_ID,
                ROW_NUMBER() OVER (PARTITION BY SETID,C_FUNC_GRP_ID,C_FUNC_SET_ID ORDER BY EFFDT DESC) AS RN
              FROM ps_c_funcgrp_seq
              WHERE EFFDT<=TRUNC(SYSDATE)
              AND SETID   =FD.EXCP_ATTR1_VAL
              )
            WHERE RN = 1
            ) B
          ON (A.SETID        =B.SETID
          AND A.C_FUNC_GRP_ID=B.C_FUNC_GRP_ID)
          JOIN
            (SELECT SETID,
              C_FUNC_SET_ID,
              C_OBJECT_ID,
              DEF_ATTR_SU_ID
            FROM
              (SELECT SETID,
                C_FUNC_SET_ID,
                C_OBJECT_ID,DEF_ATTR_SU_ID,
                ROW_NUMBER() OVER (PARTITION BY SETID,C_FUNC_SET_ID ORDER BY EFFDT DESC) AS RN
              FROM ps_c_funcset_dfn
              WHERE EFF_STATUS = 'A'
              AND  EFFDT       <=TRUNC(SYSDATE)
              AND SETID        =FD.EXCP_ATTR1_VAL
              )
            WHERE RN=1
            ) C
          ON (B.SETID        =C.SETID
          AND B.C_FUNC_SET_ID=C.C_FUNC_SET_ID)
          JOIN
            (SELECT SETID,
              C_FUNC_SET_ID,
              C_FUNCTION_ID
            FROM
              (SELECT SETID,
                C_FUNC_SET_ID,
                C_FUNCTION_ID,
                ROW_NUMBER() OVER (PARTITION BY SETID,C_FUNC_SET_ID,C_FUNCTION_ID ORDER BY EFFDT DESC) AS RN
              FROM ps_c_funcset_seq
              WHERE EFFDT<=TRUNC(SYSDATE)
              AND SETID   =FD.EXCP_ATTR1_VAL
              )
            WHERE RN=1
            ) D
          ON (C.SETID        =D.SETID
          AND C.C_FUNC_SET_ID=D.C_FUNC_SET_ID)
          JOIN
            (SELECT SETID,
              C_FUNCTION_ID
            FROM
              (SELECT SETID,
                C_FUNCTION_ID,
                ROW_NUMBER() OVER (PARTITION BY SETID,C_FUNCTION_ID ORDER BY EFFDT DESC) AS RN
              FROM PS_C_FUNC_DFN
              WHERE EFF_STATUS = 'A'
              AND EFFDT       <=TRUNC(SYSDATE)
              AND SETID        =FD.EXCP_ATTR1_VAL
              )
            WHERE RN=1
            ) E
          ON (D.SETID        =E.SETID
          AND D.C_FUNCTION_ID=E.C_FUNCTION_ID)
          JOIN
            (SELECT SETID,
              C_FUNCTION_ID,
              EFFDT
            FROM
              (SELECT SETID,
                C_FUNCTION_ID,
                EFFDT,
                ROW_NUMBER() OVER (PARTITION BY SETID,C_FUNCTION_ID ORDER BY EFFDT DESC) AS RN
              FROM PS_C_FUNC_SEQ
              WHERE EFFDT<=TRUNC(SYSDATE)
              AND SETID   =FD.EXCP_ATTR1_VAL
              )
            WHERE RN=1
            )F
          ON (E.SETID        =F.SETID
          AND E.C_FUNCTION_ID=F.C_FUNCTION_ID)
          )
        SELECT A.SETID ,
          A.LV_ID ,
          B.C_FUNC_SET_ID,
          A.C_FUNCTION_ID ,
          B.Target_Id,
          B.DEF_ATTR_SU_ID
        FROM
          (SELECT *
          FROM RPRT_FUNC_SEQ
          WHERE C_FUNCTION_ID=i_func_id
          AND LV_ID          =FD.EXCP_ATTR5_VAL
          AND SETID          =FD.EXCP_ATTR1_VAL
          ) A
        JOIN ACTIVE_FUNC B
        ON (A.SETID        =B.SETID
        AND A.C_FUNCTION_ID=B.C_FUNCTION_ID
        AND A.EFFDT        =B.EFFDT)
        GROUP BY A.SETID ,
          A.LV_ID ,
          B.C_FUNC_SET_ID,
          A.C_FUNCTION_ID ,
          B.Target_Id,
          B.DEF_ATTR_SU_ID         
          )
          LOOP
           C_COUNT:=C_COUNT+1;             
            
          BEGIN
            SELECT LISTAGG(ATTR_CD||':'||DEF_ATTR_VAL, ',') WITHIN GROUP (
            ORDER BY DEF_ATTR_SU_ID)
            INTO L_V3
            FROM
              (SELECT A.DEF_ATTR_SU_ID,
                A.ATTR_CD,
                A.DEF_ATTR_VAL
              FROM DEF_ATTR_VAL_SU A
              INNER JOIN
                (SELECT DEF_ATTR_SU_ID,
                  EFF_DT
                FROM
                  (SELECT DEF_ATTR_SU_ID,
                    EFF_DT,
                    EFF_STA,
                    ROW_NUMBER() OVER (PARTITION BY DEF_ATTR_SU_ID ORDER BY EFF_DT DESC) AS RN
                  FROM DEF_ATTR_SU_DEFN
                  WHERE EFF_DT <= SYSDATE
                  )
                WHERE RN    = 1
                AND EFF_STA = 'A'
                ) B
              ON A.DEF_ATTR_SU_ID = B.DEF_ATTR_SU_ID
              AND A.EFF_DT        = B.EFF_DT
              )
            WHERE DEF_ATTR_SU_ID=j_rec.DEF_ATTR_SU_ID ;
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
            L_V3:=NULL;
          END;
          FOR I  IN
          (SELECT *
          FROM RPRT_FUNC_SEQ
          WHERE C_FUNCTION_ID=j_rec.C_FUNCTION_ID
          AND SETID          =j_rec.SETID
          AND LV_ID          =j_rec.LV_ID
          ORDER BY seq_nbr
          )
          LOOP
            IF (i.c_object_src='DIM' OR i.c_object_src='GRP' OR i.c_object_src='NODE') THEN
              L_V1           :=i.C_LEDGER_BAL_TYPE;
            END IF;
          END LOOP;
          L_V5  :=NULL;
          L_V11 :=TO_CHAR (TO_DATE(i_as_of_dt,'DD-MON-YY'),'MM') ;
          L_V12 :=TO_CHAR(TO_DATE(i_as_of_dt,'DD-MON-YY'),'YYYY');
          /*Getting Target Amounts*/
          IF L_V1='MTD' THEN
            BEGIN
              SELECT SUM(RPRT_CCY_MTD_BAL_AMT)
              INTO L_V5
              FROM sub_gl_bal
              WHERE sub_gl_feed_id LIKE '%DERV%'
              AND gl_acct_id  =j_rec.Target_Id
              AND FYR         =TO_NUMBER(L_V12)
              AND ACTG_PRD_NO =TO_NUMBER(L_V11)
              AND LV_ID       =FD.EXCP_ATTR5_VAL;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              L_V5:=NULL;
            END;
          ELSIF L_V1='YTD' THEN
            BEGIN
              SELECT SUM(RPRT_CCY_YTD_BAL_AMT)
              INTO L_V5
              FROM sub_gl_bal
              WHERE sub_gl_feed_id LIKE '%DERV%'
              AND gl_acct_id  =j_rec.Target_Id
              AND FYR         =TO_NUMBER(L_V12)
              AND ACTG_PRD_NO =TO_NUMBER(L_V11)
              AND LV_ID       =FD.EXCP_ATTR5_VAL;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              L_V5:=NULL;
            END;
          ELSIF L_V1='ADB' THEN
            BEGIN
              SELECT SUM(RPRT_CCY_MTD_ADB_AMT)
              INTO L_V5
              FROM sub_gl_bal
              WHERE sub_gl_feed_id LIKE '%DERV%'
              AND gl_acct_id  =j_rec.Target_Id
              AND FYR         =TO_NUMBER(L_V12)
              AND ACTG_PRD_NO =TO_NUMBER(L_V11)
              AND LV_ID       =FD.EXCP_ATTR5_VAL ;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
              L_V5:=NULL;
            END;
          END IF;
          PIPE ROW (FBBLMR0017_REC_TYP(
                         TO_CHAR(SYSDATE,'mm/dd/yyyy HH12:MI AM'), 
                         FD.EXCP_ATTR5_VAL,
                         FD.EXCP_ATTR4_VAL,
                         L_V9,
                         j_rec.Target_Id, 
                         FD.DA_EXCP_ID,
                         FD.EXCP_ATTR1_CD
                         ||CASE WHEN FD.EXCP_ATTR2_CD is not null THEN '/'||FD.EXCP_ATTR2_CD END
                         ||CASE WHEN FD.EXCP_ATTR3_CD is not null THEN '/'||FD.EXCP_ATTR3_CD END 
                         ||CASE WHEN FD.EXCP_ATTR4_CD is not null THEN '/'||FD.EXCP_ATTR4_CD END 
                         ||CASE WHEN FD.EXCP_ATTR5_CD is not null THEN '/'||FD.EXCP_ATTR5_CD END 
                         ||CASE WHEN FD.EXCP_ATTR6_CD is not null THEN '/'||FD.EXCP_ATTR6_CD END,
                         FD.EXCP_ATTR1_VAL
                         ||CASE WHEN FD.EXCP_ATTR2_VAL is not null THEN '/'||FD.EXCP_ATTR2_VAL END
                         ||CASE WHEN FD.EXCP_ATTR3_VAL is not null THEN '/'||FD.EXCP_ATTR3_VAL END
                         ||CASE WHEN FD.EXCP_ATTR4_VAL is not null THEN '/'||FD.EXCP_ATTR4_VAL END
                         ||CASE WHEN FD.EXCP_ATTR5_VAL is not null THEN '/'||FD.EXCP_ATTR5_VAL END
                         ||CASE WHEN FD.EXCP_ATTR6_VAL is not null THEN '/'||FD.EXCP_ATTR6_VAL END
                         ,L_V3,
                         FD.C_EXCP_CD,
                         FD.excp_msg_txt,
                         L_V5));
         END LOOP; -- FUNC ID              
     IF C_COUNT=0 THEN
      
      PIPE ROW (FBBLMR0017_REC_TYP(TO_CHAR(SYSDATE,'mm/dd/yyyy HH12:MI AM'), 
                         FD.EXCP_ATTR5_VAL, 
                         FD.EXCP_ATTR4_VAL,
                         L_V9,
                         NULL, 
                         FD.DA_EXCP_ID,
                         FD.EXCP_ATTR1_CD
                         ||CASE WHEN FD.EXCP_ATTR2_CD is not null THEN '/'||FD.EXCP_ATTR2_CD END
                         ||CASE WHEN FD.EXCP_ATTR3_CD is not null THEN '/'||FD.EXCP_ATTR3_CD END 
                         ||CASE WHEN FD.EXCP_ATTR4_CD is not null THEN '/'||FD.EXCP_ATTR4_CD END 
                         ||CASE WHEN FD.EXCP_ATTR5_CD is not null THEN '/'||FD.EXCP_ATTR5_CD END 
                         ||CASE WHEN FD.EXCP_ATTR6_CD is not null THEN '/'||FD.EXCP_ATTR6_CD END                          
                         ,FD.EXCP_ATTR1_VAL
                         ||CASE WHEN FD.EXCP_ATTR2_VAL is not null THEN '/'||FD.EXCP_ATTR2_VAL END
                         ||CASE WHEN FD.EXCP_ATTR3_VAL is not null THEN '/'||FD.EXCP_ATTR3_VAL END
                         ||CASE WHEN FD.EXCP_ATTR4_VAL is not null THEN '/'||FD.EXCP_ATTR4_VAL END
                         ||CASE WHEN FD.EXCP_ATTR5_VAL is not null THEN '/'||FD.EXCP_ATTR5_VAL END
                         ||CASE WHEN FD.EXCP_ATTR6_VAL is not null THEN '/'||FD.EXCP_ATTR6_VAL END
                         ,NULL,
                         FD.C_EXCP_CD,
                         FD.excp_msg_txt,
                         NULL));
     
     END IF;
    END LOOP; --FBB
    END IF;
 END LOOP; --cntry    
    RETURN;
END;

/
--------------------------------------------------------

--  DDL for Package PA_QUERY

--------------------------------------------------------


  CREATE OR REPLACE PACKAGE "RPTAPP"."PA_QUERY" as  
 type p_cursor is ref cursor;  
end pa_query; 

/
--------------------------------------------------------

--  DDL for Package PKG_OSDM_UTILS

--------------------------------------------------------


  CREATE OR REPLACE PACKAGE "RPTAPP"."PKG_OSDM_UTILS" AS

PROCEDURE Generate_Report(v_rep_id           IN NUMBER,
                          v_obj_ovid         IN VARCHAR2,
                          v_mode             IN NUMBER,
                          v_reports_dir      IN VARCHAR2,
                          v_compress         IN NUMBER, 
                          reportTemplate     IN REPORT_TEMPLATE,
                          v_raw_xml         OUT BFILE, 
                          v_status          OUT NUMBER, 
                          osddm_reports_dir OUT VARCHAR2);

FUNCTION Gather_Constraint_Details_XML(col_attr_ovid IN VARCHAR2, 
                                       namespace     IN VARCHAR2) RETURN CLOB;

FUNCTION Gather_Domain_Constraints_XML(domain_ovid VARCHAR2) RETURN CLOB;

FUNCTION Gather_Constraint_Details_HTML(col_attr_ovid VARCHAR2) RETURN CLOB;

FUNCTION Gather_Domain_Constraints_HTML (domain_ovid VARCHAR2) RETURN CLOB;

END PKG_OSDM_UTILS;

/
--------------------------------------------------------

--  DDL for Package PKG_SP_TEST

--------------------------------------------------------


  CREATE OR REPLACE PACKAGE "RPTAPP"."PKG_SP_TEST" AS 
PROCEDURE get_data1(soeid in varchar2,x out SYS_REFCURSOR);
FUNCTION refcursor_function  RETURN SYS_REFCURSOR;
END pkg_sp_test;

/
--------------------------------------------------------

--  DDL for Package RA_INQUIRY_PURGE_REPORT

--------------------------------------------------------


  CREATE OR REPLACE PACKAGE "RPTAPP"."RA_INQUIRY_PURGE_REPORT" AS 
    PROCEDURE RA_DELETE_RPT_INST_BY_PARAM(p_run_id IN NUMBER, p_report_id IN NUMBER, p_purge_date IN DATE);
END RA_INQUIRY_PURGE_REPORT;

/
--------------------------------------------------------

--  DDL for Package RA_INQUIRY_PURGE_REPORT_PKG

--------------------------------------------------------


  CREATE OR REPLACE PACKAGE "RPTAPP"."RA_INQUIRY_PURGE_REPORT_PKG" AS 
    PROCEDURE RA_DELETE_RPT_INST_BY_REPORT(P_REPORT_ID IN NUMBER, P_PURGE_DATE IN DATE);
    PROCEDURE RA_DELETE_RPT_INST_BY_RUNID(P_RUN_ID IN NUMBER);
END RA_INQUIRY_PURGE_REPORT_PKG;

/
--------------------------------------------------------

--  DDL for Package RA_STR_PROC_TEST

--------------------------------------------------------


  CREATE OR REPLACE PACKAGE "RPTAPP"."RA_STR_PROC_TEST" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 

TYPE ref_cursor_type IS REF CURSOR;
PROCEDURE GETALLREPORTS_AFTER_DATE (USER_ID IN VARCHAR2, AS_OF_DATE IN DATE, REPORTS_INFO OUT ref_cursor_type);
PROCEDURE GETALLREPORTS_AFTER_DATE2 (P_USER_ID IN VARCHAR2, P_AS_OF_DATE IN DATE, P_REPORTS_INFO OUT ref_cursor_type);

END RA_STR_PROC_TEST;

/
--------------------------------------------------------

--  DDL for Package RA_USER_SCHEDULES_PKG

--------------------------------------------------------


  CREATE OR REPLACE PACKAGE "RPTAPP"."RA_USER_SCHEDULES_PKG" 
AS
PROCEDURE invoke_create_job(
    P_USER_SCHEDULE_ID IN NUMBER);
PROCEDURE run_template(
    P_TEMPLATE_ID IN NUMBER,
    P_USER_SCHEDULE_ID IN NUMBER);
PROCEDURE cancel_job(P_SCHEDULE_ID IN NUMBER);    
END ra_user_schedules_pkg;

/
--------------------------------------------------------

--  DDL for Package Body PKG_OSDM_UTILS

--------------------------------------------------------


  CREATE OR REPLACE PACKAGE BODY "RPTAPP"."PKG_OSDM_UTILS" AS

log_file   UTL_FILE.File_Type;
temp_file  UTL_FILE.File_Type;

PROCEDURE Generate_OS_File(v_blob IN BLOB, filename IN VARCHAR2, v_compressed IN NUMBER) IS

result_file     UTL_FILE.File_Type;
compressed_blob BLOB;
len             NUMBER;
l_pos           INTEGER := 1;
l_amount        BINARY_INTEGER := 32767;
l_buffer        RAW(32767);

BEGIN

 result_file := UTL_FILE.FOpen('OSDDM_REPORTS_DIR',filename,'wb', 32767); 

 len := DBMS_LOB.getlength(v_blob);
 
 WHILE l_pos < len LOOP
      DBMS_LOB.read(v_blob, l_amount, l_pos, l_buffer);
      UTL_FILE.put_raw(result_file, l_buffer, TRUE);
      l_pos := l_pos + l_amount;
 END LOOP;

 UTL_FILE.fclose(result_file);
 
EXCEPTION

 WHEN others THEN
 
  IF UTL_FILE.Is_Open(result_file) THEN
     UTL_FILE.FClose(result_file);
  END IF;

  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Generate_OS_File Exception : ' || SQLERRM);  
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Generate_OS_File Exception : ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
  
END Generate_OS_File;

FUNCTION Gather_Constraint_Details_XML(col_attr_ovid VARCHAR2, namespace VARCHAR2) RETURN CLOB IS

res        CLOB;
v_vl_value VARCHAR2(50) := namespace||':VLValue';
v_s_descr  VARCHAR2(50) := namespace||':VLShortDescription';

CURSOR cur_c_constraints(v_ovid IN VARCHAR2, v_ns IN VARCHAR2) IS
 SELECT cc.text text,
        DECODE(v_ns, 'osdm_t',  XMLElement("osdm_t:DatabaseType", XMLCDATA(cc.database_type)).getClobVal(),
                     'osdm_at', XMLElement("osdm_at:DatabaseType", XMLCDATA(cc.database_type)).getClobVal(),
                     'osdm_e',  XMLElement("osdm_e:DatabaseType", XMLCDATA(cc.database_type)).getClobVal(),
                     'osdm_ae', XMLElement("osdm_ae:DatabaseType", XMLCDATA(cc.database_type)).getClobVal())  db_type,
       COUNT(cc.text) over()                                                                                  total_row_count
 FROM   dmrs_check_constraints cc
 WHERE  cc.dataelement_ovid = v_ovid
 ORDER BY sequence;
rec_c_constraints cur_c_constraints%rowtype;

CURSOR cur_vr_constraints(v_ovid IN VARCHAR2, v_ns IN VARCHAR2) IS
 SELECT DECODE(v_ns, 'osdm_t', XMLElement("osdm_t:RangeBeginValue", XMLCDATA(vr.begin_value)).getClobVal(),
                     'osdm_at',XMLElement("osdm_at:RangeBeginValue", XMLCDATA(vr.begin_value)).getClobVal(),
                     'osdm_e', XMLElement("osdm_e:RangeBeginValue", XMLCDATA(vr.begin_value)).getClobVal(),
                     'osdm_ae',XMLElement("osdm_ae:RangeBeginValue", XMLCDATA(vr.begin_value)).getClobVal())              begin_value,
        DECODE(v_ns, 'osdm_t', XMLElement("osdm_t:RangeEndValue", XMLCDATA(vr.end_value)).getClobVal(),
                     'osdm_at',XMLElement("osdm_at:RangeEndValue", XMLCDATA(vr.end_value)).getClobVal(),
                     'osdm_e', XMLElement("osdm_e:RangeEndValue", XMLCDATA(vr.end_value)).getClobVal(),
                     'osdm_ae',XMLElement("osdm_ae:RangeEndValue", XMLCDATA(vr.end_value)).getClobVal())                  end_value,
        DECODE(v_ns, 'osdm_t', XMLElement("osdm_t:RangeShortDescription", XMLCDATA(vr.short_description)).getClobVal(),  
                     'osdm_at',XMLElement("osdm_at:RangeShortDescription", XMLCDATA(vr.short_description)).getClobVal(),  
                     'osdm_e', XMLElement("osdm_e:RangeShortDescription", XMLCDATA(vr.short_description)).getClobVal(),
                     'osdm_ae',XMLElement("osdm_ae:RangeShortDescription", XMLCDATA(vr.short_description)).getClobVal())  short_description,
        COUNT(vr.begin_value) over()                                                                                      total_row_count
 FROM   dmrs_value_ranges vr
 WHERE  vr.dataelement_ovid = v_ovid
 ORDER BY sequence;
rec_vr_constraints cur_vr_constraints%rowtype;

CURSOR cur_vl_constraints(v_ovid IN VARCHAR2, v_ns IN VARCHAR2) IS
 SELECT DECODE(v_ns, 'osdm_t', XMLElement("osdm_t:VLValue", XMLCDATA(av.value)).getClobVal(),
                     'osdm_at',XMLElement("osdm_at:VLValue", XMLCDATA(av.value)).getClobVal(),
                     'osdm_e', XMLElement("osdm_e:VLValue", XMLCDATA(av.value)).getClobVal(),
                     'osdm_ae',XMLElement("osdm_ae:VLValue", XMLCDATA(av.value)).getClobVal())                         av_value,
        DECODE(v_ns, 'osdm_t', XMLElement("osdm_t:VLShortDescription", XMLCDATA(av.short_description)).getClobVal(),
                     'osdm_at',XMLElement("osdm_at:VLShortDescription", XMLCDATA(av.short_description)).getClobVal(),
                     'osdm_e', XMLElement("osdm_e:VLShortDescription", XMLCDATA(av.short_description)).getClobVal(),
                     'osdm_ae',XMLElement("osdm_ae:VLShortDescription", XMLCDATA(av.short_description)).getClobVal())  short_description,
        COUNT(av.value) over()                                                                                         total_row_count
 FROM   dmrs_avt av,
        dmrs_columns c
 WHERE  c.ovid = av.dataelement_ovid
 AND    av.dataelement_ovid = v_ovid;
rec_vl_constraints cur_vl_constraints%rowtype;

BEGIN

  DBMS_LOB.CREATETEMPORARY(res, TRUE);

  FOR rec_vr_constraints IN cur_vr_constraints(col_attr_ovid, namespace) LOOP
     IF (cur_vr_constraints%ROWCOUNT = 1) THEN
       DBMS_LOB.APPEND (res, '<'||namespace||':RangesCollection>');
     END IF;

       DBMS_LOB.APPEND (res, '<'||namespace||':RangeDetails>');
       DBMS_LOB.APPEND (res, rec_vr_constraints.begin_value);
       DBMS_LOB.APPEND (res, rec_vr_constraints.end_value);
       DBMS_LOB.APPEND (res, rec_vr_constraints.short_description);
       DBMS_LOB.APPEND (res, '</'||namespace||':RangeDetails>');
    
     IF (cur_vr_constraints%ROWCOUNT = rec_vr_constraints.total_row_count) THEN
       DBMS_LOB.APPEND (res, '</'||namespace||':RangesCollection>');
     END IF;
  END LOOP;
 
  FOR rec_vl_constraints IN cur_vl_constraints(col_attr_ovid, namespace) LOOP
     IF (cur_vl_constraints%ROWCOUNT = 1) THEN
       DBMS_LOB.APPEND (res, '<'||namespace||':ValueListsCollection>');
     END IF;
   
       DBMS_LOB.APPEND (res, '<'||namespace||':ValueListDetails>');
       DBMS_LOB.APPEND (res, rec_vl_constraints.av_value);
       DBMS_LOB.APPEND (res, rec_vl_constraints.short_description);
       DBMS_LOB.APPEND (res, '</'||namespace||':ValueListDetails>');
     
     IF (cur_vl_constraints%ROWCOUNT = rec_vl_constraints.total_row_count) THEN
       DBMS_LOB.APPEND (res, '</'||namespace||':ValueListsCollection>');
     END IF;
  END LOOP;

  FOR rec_c_constraints IN cur_c_constraints(col_attr_ovid, namespace) LOOP
     IF (cur_c_constraints%ROWCOUNT = 1) THEN
       DBMS_LOB.APPEND (res, '<'||namespace||':CheckConstraintsCollection>');
     END IF;

       DBMS_LOB.APPEND (res, '<'||namespace||':CheckConstraintDetails>');

     IF LENGTH(rec_c_constraints.text)>0 THEN
       DBMS_LOB.APPEND (res, '<'||namespace||':CheckConstraintText>');
       DBMS_LOB.APPEND (res, '<'||namespace||':CheckConstraintTextDetails>');
       -- Tokenize rows
       FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(XMLCDATA(rec_c_constraints.text) || Chr(10), '(.*' || Chr(10) || ')', 1, LEVEL ), Chr(10), '') t
                      FROM   dual
                      CONNECT BY REGEXP_INSTR(rec_c_constraints.text||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
     
         DBMS_LOB.APPEND (res, '<'||namespace||':CheckConstraintTextRow>');
         DBMS_LOB.APPEND (res, TO_CLOB(NVL(token.t,' ')));
         DBMS_LOB.APPEND (res, '</'||namespace||':CheckConstraintTextRow>');
     
       END LOOP;
       DBMS_LOB.APPEND (res, '</'||namespace||':CheckConstraintTextDetails>');
       DBMS_LOB.APPEND (res, '</'||namespace||':CheckConstraintText>');
     END IF;
    
       DBMS_LOB.APPEND (res, rec_c_constraints.db_type);
       DBMS_LOB.APPEND (res, '</'||namespace||':CheckConstraintDetails>');
   
     IF (cur_c_constraints%ROWCOUNT = rec_c_constraints.total_row_count) THEN
       DBMS_LOB.APPEND (res, '</'||namespace||':CheckConstraintsCollection>');
     END IF;
  END LOOP;

  RETURN res;

EXCEPTION
 WHEN others THEN
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_Constraint_Details_XML Exception : : ' || SQLERRM);  
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_Constraint_Details_XML Exception : ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
  RETURN res;

END Gather_Constraint_Details_XML;

FUNCTION Gather_SingleTable_Data(v_table_ovid IN VARCHAR2, reportTemplate IN REPORT_TEMPLATE) RETURN CLOB IS 

res             CLOB;
v_description   VARCHAR2(32767);
v_notes         VARCHAR2(32767);
v_cc_created    BOOLEAN := FALSE;
token_value     CLOB;

-- Common Data
CURSOR cur_common_data(v_t_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_t:DesignName",d.design_name).getClobVal()                                      design_name,
        XMLElement("osdm_t:VersionDate",TO_CHAR(d.date_published,'dd.mm.yyyy hh24:mi:ss')).getClobVal() version_date,
        d.version_comments                                                                              version_comment,
        XMLElement("osdm_t:ModelName",m.model_name).getClobVal()                                        model_name
 FROM   dmrs_designs d, 
        dmrs_models m,
        dmrs_tables t
 WHERE  d.design_ovid = m.design_ovid
 AND   t.model_ovid = m.model_ovid
 AND   t.ovid = v_t_ovid;
rec_common_data cur_common_data%ROWTYPE;

-- Table General Data
CURSOR cur_table(v_t_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_t:TableName",t.table_name).getClobVal()                                 table_name,
        XMLElement("osdm_t:Abbreviation",t.abbreviation).getClobVal()                            abbreviation,
        XMLElement("osdm_t:ClassificationTypeName",t.classification_type_name).getClobVal()      class_type_name,
        XMLElement("osdm_t:ObjectTypeName",t.structured_type_name).getClobVal()                  obj_type_name,
        XMLElement("osdm_t:NumberOfColumns",t.number_data_elements).getClobVal()                 number_cols,
        XMLElement("osdm_t:NumberOfRowsMin",t.min_volume).getClobVal()                           number_rows_min,
        XMLElement("osdm_t:NumberOfRowsMax",t.max_volume).getClobVal()                           number_rows_max,
        XMLElement("osdm_t:ExpectedNumberOfRows",t.expected_volume).getClobVal()                 number_rows_expected,
        XMLElement("osdm_t:ExpectedGrowth",t.growth_rate_percents).getClobVal()                  growth_expected,
        XMLElement("osdm_t:GrowthInterval",t.growth_rate_interval).getClobVal()                  growth_interval,
        XMLElement("osdm_t:FunctionalName", (SELECT NVL(e.entity_name,'')                        
                                              FROM   dmrs_entities e,
                                                     dmrs_mappings m
                                              WHERE  m.relational_object_ovid = t.ovid
                                              AND    m.logical_object_ovid  = e.ovid
                                              AND    ROWNUM = 1)).getClobVal()                    functional_name
 FROM	 dmrs_tables t
 WHERE  t.ovid = v_t_ovid;
rec_table cur_table%ROWTYPE;

-- Columns Data
CURSOR cur_columns(v_t_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_t:Sequence",c.sequence).getClobVal()                                                                                              seq,
        XMLElement("osdm_t:ColumnName",c.column_name).getClobVal()                                                                                         column_name,
        XMLElement("osdm_t:PK",c.pk_flag).getClobVal()                                                                                                     pk,
        XMLElement("osdm_t:FK",c.fk_flag).getClobVal()                                                                                                     fk,
        XMLElement("osdm_t:M",DECODE(c.mandatory,'N',' ',c.mandatory)).getClobVal()                                                                        m,
        XMLElement("osdm_t:DataTypeKind",DECODE(c.datatype_kind,                                                                                           
                                                 'Domain',         'DOM',
                                                 'Logical Type',   'LT',
                                                 'Distinct Type',  'DT',
                                                 'Ref Struct Type','RST',
                                                 'Structured Type','ST',
                                                 'Collection Type','CT')
                  ).getClobVal()                                                                                                                             dt_kind,
         XMLElement("osdm_t:DataType", 
            DECODE(c.datatype_kind, 
                  'Domain', c.logical_type_name ||' '||
                           DECODE (NVL(c.t_size,''),'',
                              DECODE(NVL(c.t_scale,0),0,
                                 DECODE(NVL(c.t_precision,0),0,null,'('|| DECODE(NVL(c.t_precision,0),0,null,c.t_precision) ||')'),
                                   '('|| DECODE(NVL(c.t_precision,0),0,null,c.t_precision) || ',' || DECODE(NVL(c.t_scale,0),0,null,c.t_scale)||')'),
                                   '('||TRIM(DECODE(c.t_size,'',null,c.t_size||' '||c.char_units ))||')'),
                   'Logical Type', c.logical_type_name  ||' '|| 
                           DECODE (NVL(c.t_size,''),'',
                              DECODE(NVL(c.t_scale,0),0,
                                 DECODE(NVL(c.t_precision,0),0,null,'('|| DECODE(NVL(c.t_precision,0),0,null,c.t_precision) ||')'),
                                   '('|| DECODE(NVL(c.t_precision,0),0,null,c.t_precision) || ',' || DECODE(NVL(c.t_scale,0),0,null,c.t_scale)||')'),
                                   '('||TRIM(DECODE(c.t_size,'',null,c.t_size||' '||c.char_units ))||')')
            ) ||
            DECODE (c.auto_increment_column,'Y', ' - AI','') ||
            DECODE (c.identity_column,'Y', ' - ID','')
          ).getClobVal()                                                                                                                                    data_type,
        XMLElement("osdm_t:DomainName",DECODE(c.domain_name,'Unknown',null,c.domain_name)).getClobVal()                                                     domain_name,
        XMLElement("osdm_t:Formula", TRIM(c.formula||' '||c.default_value)).getClobVal()                                                                    formula,
        XMLElement("osdm_t:Security",DECODE(c.personally_id_information ||'/'||c.sensitive_information||'/'||c.mask_for_none_production,'//',
                                      null,c.personally_id_information ||'/'||c.sensitive_information||'/'||c.mask_for_none_production)).getClobVal()       security,
        XMLElement("osdm_t:PreferredAbbreviation",c.abbreviation).getClobVal()                                                                              abbreviation,
        COUNT(c.column_name) over()                                                                                                                         total_row_count
 FROM 	dmrs_columns c
 WHERE  c.container_ovid = v_t_ovid
 ORDER BY c.sequence;
rec_columns cur_columns%ROWTYPE;

-- Columns Comments Data
CURSOR cur_columns_comments(v_t_ovid IN VARCHAR2) IS
 SELECT a.seq                       seq, 
        a.column_name               column_name, 
        a.description               description, 
        a.notes                     notes,
        COUNT(a.column_name) over() total_row_count
 FROM (
  SELECT XMLElement("osdm_t:ColumnCommentsSequence",c.sequence).getStringVal()  seq,
         XMLElement("osdm_t:ColumnCommentsName",c.column_name).getStringVal()   column_name,
         NVL(
        (SELECT t.text comments_in_rdbms
         FROM   dmrs_large_text t
         WHERE  t.ovid = c.ovid
         AND    t.type='Comments'),
        (SELECT t.text comments_in_rdbms
         FROM   dmrs_large_text t
         WHERE  t.ovid = c.ovid
         AND    t.type='CommentsInRDBMS'))                                       description, 
        (SELECT t.text comments_in_rdbms
         FROM   dmrs_large_text t
         WHERE  t.ovid = c.ovid
         AND    t.type='Note')                                                   notes
  FROM   dmrs_columns c
  WHERE  c.container_ovid = v_t_ovid
  ORDER BY c.sequence
 ) a
 WHERE DBMS_LOB.getlength(description) > 0 OR DBMS_LOB.getlength(notes) > 0;
rec_columns_comments cur_columns_comments%ROWTYPE;

--Indexes
CURSOR cur_indexes(v_t_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_t:IndexName",i.index_name).getClobVal()                                                                                        idx_name,
        XMLElement("osdm_t:IndexState",DECODE(i.state,'Unique Plain Index','UN','Unique Constraint','UK','Primary Constraint','PK',null)).getClobVal()  state,
        XMLElement("osdm_t:IndexFunctional",DECODE(i.functional,'N',' ',i.functional)).getClobVal()                                                     functional,
        XMLElement("osdm_t:IndexSpatial",DECODE(i.spatial_index,'N',' ',i.spatial_index)).getClobVal()                                                  spatial,
        XMLElement("osdm_t:IndexExpression",i.expression).getClobVal()                                                                                  expression,
        XMLElement("osdm_t:IndexColumnName",c.column_name).getClobVal()                                                                                 col_name,
        XMLElement("osdm_t:IndexSortOrder",c.sort_order).getClobVal()                                                                                   sort_order,
        c.sequence                                                                                                                                      idx_sequence,
        COUNT(c.column_name) over()                                                                                                                     total_row_count
 FROM   dmrs_tables t,
        dmrs_indexes i,
        dmrs_constr_index_columns c
 WHERE  t.ovid = i.container_ovid
 AND    i.ovid = c.index_ovid
 AND    t.ovid = v_t_ovid
 ORDER BY i.index_name, c.sequence, c.sort_order;
rec_indexes cur_indexes%ROWTYPE;

-- Table Level Constraints
CURSOR cur_tl_constraints(v_t_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_t:TLConstraintType", CASE WHEN rownum>1 THEN ''
                                               ELSE 'Table Level'
                                               END ).getClobVal()               c_type,
        XMLElement("osdm_t:TLConstraintName", tc.constraint_name).getClobVal() c_name,
        tc.text                                                                 c_details,
        COUNT(tc.constraint_name) over()                                        total_row_count
 FROM   dmrs_table_constraints tc
 WHERE  tc.table_ovid = v_t_ovid;
rec_tl_constraints cur_tl_constraints%ROWTYPE;

-- Column Level Constraints
CURSOR cur_cl_constraints(v_t_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_t:ContstraintType", CASE WHEN rownum>1 THEN ''
                                              ELSE 'Column Level'
                                              END).getClobVal()                                        c_type,
        XMLElement("osdm_t:ALCConstraintName", c.column_name || 
                                                DECODE((SELECT DISTINCT(constraint_name) 
                                                        FROM dmrs_check_constraints 
                                                        WHERE c.ovid = dataelement_ovid),NULL,'',
                                               ' / '|| (SELECT  DISTINCT(constraint_name) 
                                                        FROM dmrs_check_constraints 
                                                        WHERE c.ovid = dataelement_ovid))).getClobVal() c_name,
        Gather_Constraint_Details_XML(c.ovid, 'osdm_t')                                                 c_details,
        COUNT(c.column_name) over()                                                                     total_row_count
 FROM   dmrs_columns c
 WHERE  c.container_ovid = v_t_ovid
 AND    (c.ovid IN (SELECT dataelement_ovid FROM dmrs_avt) OR 
         c.ovid IN (SELECT dataelement_ovid FROM dmrs_value_ranges) OR 
         c.ovid IN (SELECT dataelement_ovid FROM dmrs_check_constraints));
rec_cl_constraints cur_cl_constraints%ROWTYPE;

--Foreign keys referring to other tables
CURSOR cur_fk_referring_to(v_t_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_t:FKName",CASE WHEN ic.sequence>1 THEN ' '
                                    ELSE fk.fk_name
                                    END
                   ).getClobVal()                                               fk_name,
        XMLElement("osdm_t:FKReferringTo",CASE WHEN ic.sequence>1 THEN ' '
                                          ELSE fk.referred_table_name
                                          END
                  ).getClobVal()                                                referring_to,
        XMLElement("osdm_t:FKMandatory",CASE WHEN ic.sequence>1 THEN ' '
                                         ELSE DECODE(fk.mandatory,'Y',fk.mandatory,' ')
                                         END
                  ).getClobVal()                                                mandatory,
        XMLElement("osdm_t:FKTransferable",CASE WHEN ic.sequence>1 THEN ' '
                                            ELSE DECODE(fk.transferable,'Y',fk.transferable,' ')
                                            END
                  ).getClobVal()                                                transferable,
        XMLElement("osdm_t:FKInArc",CASE WHEN ic.sequence>1 THEN ' '
                                     ELSE DECODE(fk.in_arc,'Y',fk.in_arc,' ')
                                     END
                  ).getClobVal()                                                in_arc,
        XMLElement("osdm_t:FKColumnName",ic.column_name).getClobVal()          col_name,
        ic.sequence                                                             seq,
        COUNT(ic.column_name) over()                                            total_row_count
 FROM   dmrs_foreignkeys fk,
        dmrs_constr_index_columns ic
 WHERE  fk.child_table_ovid = v_t_ovid
 AND    fk.ovid = ic.index_ovid
 ORDER BY fk.referred_table_name,fk.fk_name, ic.sequence;
rec_fk_referring_to cur_fk_referring_to%ROWTYPE;

--Foreign keys referred from other tables
CURSOR cur_fk_referred_from(v_t_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_t:FKName",CASE WHEN ic.sequence>1 THEN ' '
                                    ELSE fk.fk_name
                                    END
                   ).getClobVal()                                              fk_name,
        XMLElement("osdm_t:FKReferredFrom",CASE WHEN ic.sequence>1 THEN ' '
                                           ELSE fk.child_table_name
                                           END
                  ).getClobVal()                                                referred_from,
        XMLElement("osdm_t:FKMandatory",CASE WHEN ic.sequence>1 THEN ' '
                                         ELSE DECODE(fk.mandatory,'Y',fk.mandatory,' ')
                                         END
                  ).getClobVal()                                                mandatory,
        XMLElement("osdm_t:FKTransferable",CASE WHEN ic.sequence>1 THEN ' '
                                            ELSE DECODE(fk.transferable,'Y',fk.transferable,' ')
                                            END
                  ).getClobVal()                                                transferable,
        XMLElement("osdm_t:FKInArc",CASE WHEN ic.sequence>1 THEN ' '
                                     ELSE DECODE(fk.in_arc,'Y',fk.in_arc,' ')
                                     END
                  ).getClobVal()                                                in_arc,
        XMLElement("osdm_t:FKColumnName",ic.column_name).getClobVal()           col_name,
        ic.sequence                                                             seq,
        COUNT(ic.column_name) over()                                            total_row_count
 FROM   dmrs_foreignkeys fk,
        dmrs_constr_index_columns ic
 WHERE  fk.referred_table_ovid = v_t_ovid
 AND    fk.ovid = ic.index_ovid
 ORDER BY fk.child_table_name,fk.fk_name, ic.sequence;
rec_fk_referred_from cur_fk_referred_from%ROWTYPE;

BEGIN

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering single table data started ...');

   DBMS_LOB.CREATETEMPORARY(res, TRUE);
   DBMS_LOB.APPEND (res,'<osdm_t:root xmlns:osdm_t="osdm_t">');

   -- Common Data
   FOR rec_common_data IN cur_common_data(v_table_ovid) LOOP

      DBMS_LOB.APPEND (res, rec_common_data.design_name);
      DBMS_LOB.APPEND (res, rec_common_data.version_date);  
      DBMS_LOB.APPEND (res, '<osdm_t:VersionComment>');
      DBMS_LOB.APPEND (res, '<osdm_t:VersionCommentDetails>');
      -- Tokenize rows
      FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_common_data.version_comment||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                     FROM   dual
                     CONNECT BY REGEXP_INSTR(rec_common_data.version_comment||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
 
          SELECT XMLElement("osdm_t:VersionCommentRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
          DBMS_LOB.APPEND (res, token_value);
      END LOOP;
      DBMS_LOB.APPEND (res, '</osdm_t:VersionCommentDetails>');
      DBMS_LOB.APPEND (res, '</osdm_t:VersionComment>');
      DBMS_LOB.APPEND (res, rec_common_data.model_name);
 
   END LOOP;

   -- Description / Notes
   IF (reportTemplate.reportType = 0 OR reportTemplate.useDescriptionInfo = 1) THEN

      DBMS_LOB.APPEND (res, '<osdm_t:DescriptionNotes>');

      SELECT 
            NVL(
               (SELECT t.text comments_in_rdbms
                FROM   dmrs_large_text t
                WHERE  t.ovid = v_table_ovid
                AND    t.type='Comments'),
               (SELECT t.text comments_in_rdbms
                FROM   dmrs_large_text t
                WHERE  t.ovid = v_table_ovid
                AND    t.type='CommentsInRDBMS'))        description, 
               (SELECT t.text comments_in_rdbms
                FROM   dmrs_large_text t
                WHERE  t.ovid = v_table_ovid
                AND    t.type='Note')                     notes
      INTO   v_description, 
             v_notes
      FROM  dual;
      
      DBMS_LOB.APPEND (res, '<osdm_t:Description>');
      DBMS_LOB.APPEND (res, '<osdm_t:DescriptionDetails>');
      -- Tokenize rows
      FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_description||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                     FROM   dual
                     CONNECT BY REGEXP_INSTR(v_description||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
          SELECT XMLElement("osdm_t:DescriptionRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
          DBMS_LOB.APPEND (res, token_value);
      END LOOP;
      DBMS_LOB.APPEND (res, '</osdm_t:DescriptionDetails>');
      DBMS_LOB.APPEND (res, '</osdm_t:Description>');
      
      DBMS_LOB.APPEND (res, '<osdm_t:Notes>');
      DBMS_LOB.APPEND (res, '<osdm_t:NotesDetails>');
      -- Tokenize rows
      FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_notes||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                     FROM   dual
                     CONNECT BY REGEXP_INSTR(v_notes||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
          SELECT XMLElement("osdm_t:NoteRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
          DBMS_LOB.APPEND (res, token_value);
      END LOOP;
      DBMS_LOB.APPEND (res, '</osdm_t:NotesDetails>');
      DBMS_LOB.APPEND (res, '</osdm_t:Notes>');
      DBMS_LOB.APPEND (res, '</osdm_t:DescriptionNotes>');
   END IF;

   --Table General Data
   FOR rec_table IN cur_table(v_table_ovid) LOOP
      DBMS_LOB.APPEND (res, rec_table.table_name);
      DBMS_LOB.APPEND (res, rec_table.functional_name);      
      DBMS_LOB.APPEND (res, rec_table.abbreviation);
      DBMS_LOB.APPEND (res, rec_table.class_type_name);
      DBMS_LOB.APPEND (res, rec_table.obj_type_name);

      IF (reportTemplate.reportType = 0 OR reportTemplate.useQuantitativeInfo = 1) THEN
        DBMS_LOB.APPEND (res, '<osdm_t:QuantitativeInfoCollection>');
        DBMS_LOB.APPEND (res, rec_table.number_cols);
        DBMS_LOB.APPEND (res, rec_table.number_rows_min);
        DBMS_LOB.APPEND (res, rec_table.number_rows_max);
        DBMS_LOB.APPEND (res, rec_table.number_rows_expected);
        DBMS_LOB.APPEND (res, rec_table.growth_expected);
        DBMS_LOB.APPEND (res, rec_table.growth_interval);
        DBMS_LOB.APPEND (res, '</osdm_t:QuantitativeInfoCollection>');
      END IF;
   END LOOP;
   
   -- Columns
   IF (reportTemplate.reportType = 0 OR reportTemplate.useTableColumns = 1) THEN
     FOR rec_columns IN cur_columns(v_table_ovid) LOOP
        IF (cur_columns%ROWCOUNT = 1) THEN
          DBMS_LOB.APPEND (res,'<osdm_t:ColumnsCollection>');
        END IF;
        
          DBMS_LOB.APPEND (res, '<osdm_t:ColumnDetails>');
          DBMS_LOB.APPEND (res, rec_columns.seq);
          DBMS_LOB.APPEND (res, rec_columns.column_name);
          DBMS_LOB.APPEND (res, rec_columns.pk);
          DBMS_LOB.APPEND (res, rec_columns.fk);
          DBMS_LOB.APPEND (res, rec_columns.m);
          IF (INSTR(LOWER(rec_columns.data_type),'unknown') = 0) THEN
            DBMS_LOB.APPEND (res, rec_columns.data_type);
          ELSE
            SELECT XMLElement("osdm_t:DataType", '').getClobVal() INTO token_value FROM dual;
            DBMS_LOB.APPEND (res, token_value);
          END IF;
          DBMS_LOB.APPEND (res, rec_columns.dt_kind);
          DBMS_LOB.APPEND (res, rec_columns.domain_name);
          DBMS_LOB.APPEND (res, rec_columns.formula);
          DBMS_LOB.APPEND (res, rec_columns.security);
          DBMS_LOB.APPEND (res, rec_columns.abbreviation);
          DBMS_LOB.APPEND (res,'</osdm_t:ColumnDetails>');
        
        IF (cur_columns%ROWCOUNT = rec_columns.total_row_count) THEN
         DBMS_LOB.APPEND (res, '</osdm_t:ColumnsCollection>');
        END IF;
     END LOOP;
   END IF;

   -- Columns Comments
   IF (reportTemplate.reportType = 0 OR reportTemplate.useTableColumnsComments = 1) THEN
     FOR rec_columns_comments IN cur_columns_comments(v_table_ovid) LOOP
        IF (cur_columns_comments%ROWCOUNT = 1) THEN
          DBMS_LOB.APPEND (res,'<osdm_t:ColumnsCommentsCollection>');
        END IF;

          DBMS_LOB.APPEND (res, '<osdm_t:ColumnCommentsDetails>');
          DBMS_LOB.APPEND (res, rec_columns_comments.seq);
          DBMS_LOB.APPEND (res, rec_columns_comments.column_name);

          DBMS_LOB.APPEND (res, '<osdm_t:ColumnDescription>');
          DBMS_LOB.APPEND (res, '<osdm_t:ColumnDescriptionDetails>');
          -- Tokenize rows
          FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_columns_comments.description||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                           FROM   dual
                           CONNECT BY REGEXP_INSTR(rec_columns_comments.description||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
              SELECT XMLElement("osdm_t:ColumnDescriptionRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
              DBMS_LOB.APPEND (res, token_value);
          END LOOP;
          DBMS_LOB.APPEND (res, '</osdm_t:ColumnDescriptionDetails>');
          DBMS_LOB.APPEND (res, '</osdm_t:ColumnDescription>');

          DBMS_LOB.APPEND (res, '<osdm_t:ColumnNotes>');
          DBMS_LOB.APPEND (res, '<osdm_t:ColumnNotesDetails>');
          -- Tokenize rows
          FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_columns_comments.notes||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                           FROM   dual
                           CONNECT BY REGEXP_INSTR(rec_columns_comments.notes||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
              SELECT XMLElement("osdm_t:ColumnNoteRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
              DBMS_LOB.APPEND (res, token_value);
          END LOOP;
          DBMS_LOB.APPEND (res, '</osdm_t:ColumnNotesDetails>');
          DBMS_LOB.APPEND (res, '</osdm_t:ColumnNotes>');

          DBMS_LOB.APPEND (res,'</osdm_t:ColumnCommentsDetails>');

        IF (cur_columns_comments%ROWCOUNT = rec_columns_comments.total_row_count) THEN
          DBMS_LOB.APPEND (res, '</osdm_t:ColumnsCommentsCollection>');
        END IF;
     END LOOP;
   END IF;

   -- Indexes
   IF (reportTemplate.reportType = 0 OR reportTemplate.useTableIndexes = 1) THEN
     FOR rec_indexes IN cur_indexes(v_table_ovid) LOOP
        IF (cur_indexes%ROWCOUNT = 1) THEN
          DBMS_LOB.APPEND (res,'<osdm_t:IndexesCollection>');
        END IF;
     
          DBMS_LOB.APPEND (res, '<osdm_t:IndexDetails>');
          DBMS_LOB.APPEND (res, rec_indexes.idx_name);
          DBMS_LOB.APPEND (res, rec_indexes.state);
          DBMS_LOB.APPEND (res, rec_indexes.functional);
          DBMS_LOB.APPEND (res, rec_indexes.spatial);
          DBMS_LOB.APPEND (res, rec_indexes.expression);
          DBMS_LOB.APPEND (res, rec_indexes.col_name);
          DBMS_LOB.APPEND (res, rec_indexes.sort_order);
          DBMS_LOB.APPEND (res,'</osdm_t:IndexDetails>');
     
        IF (cur_indexes%ROWCOUNT = rec_indexes.total_row_count) THEN
         DBMS_LOB.APPEND (res, '</osdm_t:IndexesCollection>');
        END IF;
     END LOOP;
   END IF;

   -- Constraints
   v_cc_created := FALSE;
   IF (reportTemplate.reportType = 0 OR reportTemplate.useTableConstraints = 1) THEN
     -- Table Level Constraints
     FOR rec_tl_constraints IN cur_tl_constraints(v_table_ovid) LOOP
        IF (cur_tl_constraints%ROWCOUNT = 1) THEN
          DBMS_LOB.APPEND (res,'<osdm_t:ConstraintsCollection>');
          v_cc_created := TRUE;
          DBMS_LOB.APPEND (res,'<osdm_t:TableLevelConstraintsCollection>');
        END IF;

          DBMS_LOB.APPEND (res, '<osdm_t:TableLevelConstraintDetails>');
          DBMS_LOB.APPEND (res, rec_tl_constraints.c_type);
          DBMS_LOB.APPEND (res, rec_tl_constraints.c_name);

          DBMS_LOB.APPEND (res, '<osdm_t:TLConstraintRule>');
          DBMS_LOB.APPEND (res, '<osdm_t:TLConstraintRuleDetails>');
          -- Tokenize rows
           FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR( rec_tl_constraints.c_details||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                          FROM   dual
                          CONNECT BY REGEXP_INSTR(rec_tl_constraints.c_details||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
               SELECT XMLElement("osdm_t:TLConstraintRuleRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
               DBMS_LOB.APPEND (res, token_value);
           END LOOP;
           DBMS_LOB.APPEND (res, '</osdm_t:TLConstraintRuleDetails>');       
           DBMS_LOB.APPEND (res, '</osdm_t:TLConstraintRule>');

           DBMS_LOB.APPEND (res, '</osdm_t:TableLevelConstraintDetails>');

        IF (cur_tl_constraints%ROWCOUNT = rec_tl_constraints.total_row_count) THEN
          DBMS_LOB.APPEND (res, '</osdm_t:TableLevelConstraintsCollection>');
        END IF;

     END LOOP;

     -- Column Level Constraints
     FOR rec_cl_constraints IN cur_cl_constraints(v_table_ovid) LOOP
        IF (cur_cl_constraints%ROWCOUNT = 1) THEN
          IF NOT v_cc_created THEN
             DBMS_LOB.APPEND (res,'<osdm_t:ConstraintsCollection>');
             v_cc_created := TRUE;
          END IF;

         DBMS_LOB.APPEND (res,'<osdm_t:ColumnLevelConstraintsCollection>');
         v_cc_created := TRUE;
        END IF;

         DBMS_LOB.APPEND (res, '<osdm_t:ConstraintDetails>');
         DBMS_LOB.APPEND (res, rec_cl_constraints.c_type);
         DBMS_LOB.APPEND (res, rec_cl_constraints.c_name);
         DBMS_LOB.APPEND (res, rec_cl_constraints.c_details);
         DBMS_LOB.APPEND (res,'</osdm_t:ConstraintDetails>');

        IF (cur_cl_constraints%ROWCOUNT = rec_cl_constraints.total_row_count) THEN
          DBMS_LOB.APPEND (res, '</osdm_t:ColumnLevelConstraintsCollection>');
        END IF;
     END LOOP;

     IF v_cc_created THEN
       DBMS_LOB.APPEND (res,'</osdm_t:ConstraintsCollection>');
     END IF;
   END IF;

   -- Foreign Keys Referring To
   IF (reportTemplate.reportType = 0 OR reportTemplate.useTableFKReferringTo = 1) THEN
     FOR rec_fk_referring_to IN cur_fk_referring_to(v_table_ovid) LOOP
        IF (cur_fk_referring_to%ROWCOUNT = 1) THEN
          DBMS_LOB.APPEND (res,'<osdm_t:FKRTCollection>');
        END IF;

         DBMS_LOB.APPEND (res, '<osdm_t:FKRTDetails>');
         DBMS_LOB.APPEND (res, rec_fk_referring_to.fk_name);
         DBMS_LOB.APPEND (res, rec_fk_referring_to.referring_to);
         DBMS_LOB.APPEND (res, rec_fk_referring_to.mandatory);
         DBMS_LOB.APPEND (res, rec_fk_referring_to.transferable);
         DBMS_LOB.APPEND (res, rec_fk_referring_to.in_arc);
         DBMS_LOB.APPEND (res, rec_fk_referring_to.col_name);
         DBMS_LOB.APPEND (res,'</osdm_t:FKRTDetails>');
         
        IF (cur_fk_referring_to%ROWCOUNT = rec_fk_referring_to.total_row_count) THEN
         DBMS_LOB.APPEND (res, '</osdm_t:FKRTCollection>');
        END IF;
     END LOOP;
   END IF;

   -- Foreign Keys Referred From
   IF (reportTemplate.reportType = 0 OR reportTemplate.useTableFKReferredFrom = 1) THEN
     FOR rec_fk_referred_from IN cur_fk_referred_from(v_table_ovid) LOOP
        IF (cur_fk_referred_from%ROWCOUNT = 1) THEN
            DBMS_LOB.APPEND (res,'<osdm_t:FKRFCollection>');
        END IF;

         DBMS_LOB.APPEND (res, '<osdm_t:FKRFDetails>');
         DBMS_LOB.APPEND (res, rec_fk_referred_from.fk_name);
         DBMS_LOB.APPEND (res, rec_fk_referred_from.referred_from);
         DBMS_LOB.APPEND (res, rec_fk_referred_from.mandatory);
         DBMS_LOB.APPEND (res, rec_fk_referred_from.transferable);
         DBMS_LOB.APPEND (res, rec_fk_referred_from.in_arc);
         DBMS_LOB.APPEND (res, rec_fk_referred_from.col_name);
         DBMS_LOB.APPEND (res,'</osdm_t:FKRFDetails>');
        
        IF (cur_fk_referred_from%ROWCOUNT = rec_fk_referred_from.total_row_count) THEN
         DBMS_LOB.APPEND (res, '</osdm_t:FKRFCollection>');
        END IF;
     END LOOP;
   END IF;

   DBMS_LOB.APPEND (res,'</osdm_t:root>');

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering single table data ended');

RETURN res;

 EXCEPTION
 WHEN others THEN
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_SingleTable_Data Exception : ' || SQLERRM);  
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_SingleTable_Data Exception : ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
  RETURN res;
	
END Gather_SingleTable_Data;

FUNCTION Gather_AllTables_Data(v_model_ovid IN VARCHAR2, reportTemplate IN REPORT_TEMPLATE) RETURN CLOB IS 

res             CLOB;
v_description   VARCHAR2(32767);
v_notes         VARCHAR2(32767);
v_cc_created    BOOLEAN := FALSE;
token_value     CLOB;

-- Common Data
CURSOR cur_common_data(v_m_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_at:DesignName",d.design_name).getClobVal()                                      design_name,
        XMLElement("osdm_at:VersionDate",TO_CHAR(d.date_published,'dd.mm.yyyy hh24:mi:ss')).getClobVal() version_date,
        d.version_comments                                                                               version_comment,
        XMLElement("osdm_at:ModelName",m.model_name).getClobVal()                                        model_name
 FROM   dmrs_designs d, 
        dmrs_models m
 WHERE  d.design_ovid = m.design_ovid
 AND    m.model_ovid = v_m_ovid;
rec_common_data cur_common_data%ROWTYPE;

-- All Tables General Data
CURSOR cur_all_tables(v_m_ovid IN VARCHAR2) IS
 SELECT /*+ index(t TABLES_FK_IDXV1) */
        XMLElement("osdm_at:TableName",t.table_name).getClobVal()                                 table_name,
        XMLElement("osdm_at:Abbreviation",t.abbreviation).getClobVal()                            abbreviation,
        XMLElement("osdm_at:ClassificationTypeName",t.classification_type_name).getClobVal()      class_type_name,
        XMLElement("osdm_at:ObjectTypeName",t.structured_type_name).getClobVal()                  obj_type_name,
        XMLElement("osdm_at:NumberOfColumns",t.number_data_elements).getClobVal()                 number_cols,
        XMLElement("osdm_at:NumberOfRowsMin",t.min_volume).getClobVal()                           number_rows_min,
        XMLElement("osdm_at:NumberOfRowsMax",t.max_volume).getClobVal()                           number_rows_max,
        XMLElement("osdm_at:ExpectedNumberOfRows",t.expected_volume).getClobVal()                 number_rows_expected,
        XMLElement("osdm_at:ExpectedGrowth",t.growth_rate_percents).getClobVal()                  growth_expected,
        XMLElement("osdm_at:GrowthInterval",t.growth_rate_interval).getClobVal()                  growth_interval,
        XMLElement("osdm_at:FunctionalName", (SELECT NVL(e.entity_name,'')                        
                                              FROM   dmrs_entities e,
                                                     dmrs_mappings m
                                              WHERE  m.relational_object_ovid = t.ovid
                                              AND    m.logical_object_ovid  = e.ovid
                                              AND    ROWNUM = 1)).getClobVal()                    functional_name, 
       t.ovid                                                                                     table_ovid,
       COUNT(t.table_name) over()                                                                 total_row_count
 FROM 	 dmrs_tables t
 WHERE  t.model_ovid = v_m_ovid
 ORDER BY t.table_name;
rec_all_tables cur_all_tables%ROWTYPE;

-- Columns Data
CURSOR cur_columns(v_t_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_at:Sequence",c.sequence).getClobVal()                                                                                              seq,
        XMLElement("osdm_at:ColumnName",c.column_name).getClobVal()                                                                                         column_name,
        XMLElement("osdm_at:PK",c.pk_flag).getClobVal()                                                                                                     pk,
        XMLElement("osdm_at:FK",c.fk_flag).getClobVal()                                                                                                     fk,
        XMLElement("osdm_at:M",DECODE(c.mandatory,'N',' ',c.mandatory)).getClobVal()                                                                        m,
        XMLElement("osdm_at:DataTypeKind",DECODE(c.datatype_kind,                                                                                           
                                                 'Domain',         'DOM',                                                                                   
                                                 'Logical Type',   'LT',                                                                                    
                                                 'Distinct Type',  'DT',                                                                                    
                                                 'Ref Struct Type','RST',                                                                                   
                                                 'Structured Type','ST',                                                                                    
                                                 'Collection Type','CT')                                                                                    
                  ).getClobVal()                                                                                                                             dt_kind,
         XMLElement("osdm_at:DataType", 
            DECODE(c.datatype_kind, 
                  'Domain', c.logical_type_name ||' '||
                           DECODE (NVL(c.t_size,''),'',
                              DECODE(NVL(c.t_scale,0),0,
                                 DECODE(NVL(c.t_precision,0),0,null,'('|| DECODE(NVL(c.t_precision,0),0,null,c.t_precision) ||')'),
                                   '('|| DECODE(NVL(c.t_precision,0),0,null,c.t_precision) || ',' || DECODE(NVL(c.t_scale,0),0,null,c.t_scale)||')'),
                                   '('||TRIM(DECODE(c.t_size,'',null,c.t_size||' '||c.char_units ))||')'),
                   'Logical Type', c.logical_type_name  ||' '|| 
                           DECODE (NVL(c.t_size,''),'',
                              DECODE(NVL(c.t_scale,0),0,
                                 DECODE(NVL(c.t_precision,0),0,null,'('|| DECODE(NVL(c.t_precision,0),0,null,c.t_precision) ||')'),
                                   '('|| DECODE(NVL(c.t_precision,0),0,null,c.t_precision) || ',' || DECODE(NVL(c.t_scale,0),0,null,c.t_scale)||')'),
                                   '('||TRIM(DECODE(c.t_size,'',null,c.t_size||' '||c.char_units ))||')')
            ) ||
            DECODE (c.auto_increment_column,'Y', ' - AI','') ||
            DECODE (c.identity_column,'Y', ' - ID','')
          ).getClobVal()                                                                                                                                     data_type,
        XMLElement("osdm_at:DomainName",DECODE(c.domain_name,'Unknown',null,c.domain_name)).getClobVal()                                                     domain_name,
        XMLElement("osdm_at:Formula",TRIM(c.formula||' '||c.default_value)).getClobVal()                                                                     formula,
        XMLElement("osdm_at:Security",DECODE(c.personally_id_information ||'/'||c.sensitive_information||'/'||c.mask_for_none_production,'//',
                                      null,c.personally_id_information ||'/'||c.sensitive_information||'/'||c.mask_for_none_production)).getClobVal()        security,
        XMLElement("osdm_at:PreferredAbbreviation",c.abbreviation).getClobVal()                                                                              abbreviation,
        COUNT(c.column_name) over()                                                                                                                          total_row_count
 FROM 	dmrs_columns c
 WHERE  c.container_ovid = v_t_ovid
 ORDER BY c.sequence;
rec_columns cur_columns%ROWTYPE;

-- Columns Comments Data
CURSOR cur_columns_comments(v_t_ovid IN VARCHAR2) IS
 SELECT a.seq                       seq, 
        a.column_name               column_name, 
        a.description               description, 
        a.notes                     notes,
        COUNT(a.column_name) over() total_row_count
 FROM (
  SELECT XMLElement("osdm_at:ColumnCommentsSequence",c.sequence).getStringVal()  seq,
         XMLElement("osdm_at:ColumnCommentsName",c.column_name).getStringVal()   column_name,
         NVL(
        (SELECT t.text comments_in_rdbms
         FROM   dmrs_large_text t
         WHERE  t.ovid = c.ovid
         AND    t.type='Comments'),
        (SELECT t.text comments_in_rdbms
         FROM   dmrs_large_text t
         WHERE  t.ovid = c.ovid
         AND    t.type='CommentsInRDBMS'))                                       description, 
        (SELECT t.text comments_in_rdbms
         FROM   dmrs_large_text t
         WHERE  t.ovid = c.ovid
         AND    t.type='Note')                                                   notes
  FROM   dmrs_columns c
  WHERE  c.container_ovid = v_t_ovid
  ORDER BY c.sequence
 ) a
 WHERE DBMS_LOB.getlength(description) > 0 OR DBMS_LOB.getlength(notes) > 0;
rec_columns_comments cur_columns_comments%ROWTYPE;

--Indexes
CURSOR cur_indexes(v_t_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_at:IndexName",i.index_name).getClobVal()                                                                                        idx_name,
        XMLElement("osdm_at:IndexState",DECODE(i.state,'Unique Plain Index','UN','Unique Constraint','UK','Primary Constraint','PK',null)).getClobVal()  state,
        XMLElement("osdm_at:IndexFunctional",DECODE(i.functional,'N',' ',i.functional)).getClobVal()                                                     functional,
        XMLElement("osdm_at:IndexSpatial",DECODE(i.spatial_index,'N',' ',i.spatial_index)).getClobVal()                                                  spatial,
        XMLElement("osdm_at:IndexExpression",i.expression).getClobVal()                                                                                  expression,
        XMLElement("osdm_at:IndexColumnName",c.column_name).getClobVal()                                                                                 col_name,
        XMLElement("osdm_at:IndexSortOrder",c.sort_order).getClobVal()                                                                                   sort_order,
        c.sequence                                                                                                                                       idx_sequence,
        COUNT(c.column_name) over()                                                                                                                      total_row_count
 FROM   dmrs_tables t,
        dmrs_indexes i,
        dmrs_constr_index_columns c
 WHERE  t.ovid = i.container_ovid
 AND    i.ovid = c.index_ovid
 AND    t.ovid = v_t_ovid
 ORDER BY i.index_name, c.sequence, c.sort_order;
rec_indexes cur_indexes%ROWTYPE;

-- Table Level Constraints
CURSOR cur_tl_constraints(v_t_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_at:TLConstraintType", CASE WHEN rownum>1 THEN ''
                                               ELSE 'Table Level'
                                               END ).getClobVal()               c_type,
        XMLElement("osdm_at:TLConstraintName", tc.constraint_name).getClobVal() c_name,
        tc.text                                                                 c_details,
        COUNT(tc.constraint_name) over()                                        total_row_count
 FROM   dmrs_table_constraints tc
 WHERE  tc.table_ovid = v_t_ovid;
rec_tl_constraints cur_tl_constraints%ROWTYPE;

-- Column Level Constraints
CURSOR cur_cl_constraints(v_t_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_at:ContstraintType", CASE WHEN rownum>1 THEN ''
                                              ELSE 'Column Level'
                                              END).getClobVal()                                        c_type,
        XMLElement("osdm_at:ALCConstraintName", c.column_name || 
                                                DECODE((SELECT DISTINCT(constraint_name) 
                                                        FROM dmrs_check_constraints 
                                                        WHERE c.ovid = dataelement_ovid),NULL,'',
                                               ' / '|| (SELECT  DISTINCT(constraint_name) 
                                                        FROM dmrs_check_constraints 
                                                        WHERE c.ovid = dataelement_ovid))).getClobVal() c_name,
        Gather_Constraint_Details_XML(c.ovid, 'osdm_at')                                                c_details,
        COUNT(c.column_name) over()                                                                     total_row_count
 FROM   dmrs_columns c
 WHERE  c.container_ovid = v_t_ovid
 AND    (c.ovid IN (SELECT dataelement_ovid FROM dmrs_avt) OR 
         c.ovid IN (SELECT dataelement_ovid FROM dmrs_value_ranges) OR 
         c.ovid IN (SELECT dataelement_ovid FROM dmrs_check_constraints));
rec_cl_constraints cur_cl_constraints%ROWTYPE;

--Foreign keys referring to other tables
CURSOR cur_fk_referring_to(v_t_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_at:FKName",CASE WHEN ic.sequence>1 THEN ' '
                                    ELSE fk.fk_name
                                    END
                   ).getClobVal()                                               fk_name,
        XMLElement("osdm_at:FKReferringTo",CASE WHEN ic.sequence>1 THEN ' '
                                          ELSE fk.referred_table_name
                                          END
                  ).getClobVal()                                                referring_to,
        XMLElement("osdm_at:FKMandatory",CASE WHEN ic.sequence>1 THEN ' '
                                         ELSE DECODE(fk.mandatory,'Y',fk.mandatory,' ')
                                         END
                  ).getClobVal()                                                mandatory,
        XMLElement("osdm_at:FKTransferable",CASE WHEN ic.sequence>1 THEN ' '
                                            ELSE DECODE(fk.transferable,'Y',fk.transferable,' ')
                                            END
                  ).getClobVal()                                                transferable,
        XMLElement("osdm_at:FKInArc",CASE WHEN ic.sequence>1 THEN ' '
                                     ELSE DECODE(fk.in_arc,'Y',fk.in_arc,' ')
                                     END
                  ).getClobVal()                                                in_arc,
        XMLElement("osdm_at:FKColumnName",ic.column_name).getClobVal()          col_name,
        ic.sequence                                                             seq,
        COUNT(ic.column_name) over()                                            total_row_count
 FROM   dmrs_foreignkeys fk,
        dmrs_constr_index_columns ic
 WHERE  fk.child_table_ovid = v_t_ovid
 AND    fk.ovid = ic.index_ovid
 ORDER BY fk.referred_table_name,fk.fk_name, ic.sequence;
rec_fk_referring_to cur_fk_referring_to%ROWTYPE;

--Foreign keys referring from other tables
CURSOR cur_fk_referred_from(v_t_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_at:FKName",CASE WHEN ic.sequence>1 THEN ' '
                                    ELSE fk.fk_name
                                    END
                   ).getClobVal()                                               fk_name,
        XMLElement("osdm_at:FKReferredFrom",CASE WHEN ic.sequence>1 THEN ' '
                                           ELSE fk.child_table_name
                                           END
                  ).getClobVal()                                                referred_from,
        XMLElement("osdm_at:FKMandatory",CASE WHEN ic.sequence>1 THEN ' '
                                         ELSE DECODE(fk.mandatory,'Y',fk.mandatory,' ')
                                         END
                  ).getClobVal()                                                mandatory,
        XMLElement("osdm_at:FKTransferable",CASE WHEN ic.sequence>1 THEN ' '
                                            ELSE DECODE(fk.transferable,'Y',fk.transferable,' ')
                                            END
                  ).getClobVal()                                                transferable,
        XMLElement("osdm_at:FKInArc",CASE WHEN ic.sequence>1 THEN ' '
                                     ELSE DECODE(fk.in_arc,'Y',fk.in_arc,' ')
                                     END
                  ).getClobVal()                                                in_arc,
        XMLElement("osdm_at:FKColumnName",ic.column_name).getClobVal()          col_name,
        ic.sequence                                                             seq,
        COUNT(ic.column_name) over()                                            total_row_count
 FROM   dmrs_foreignkeys fk,
        dmrs_constr_index_columns ic
 WHERE  fk.referred_table_ovid = v_t_ovid
 AND    fk.ovid = ic.index_ovid
 ORDER BY fk.child_table_name,fk.fk_name, ic.sequence;
rec_fk_referred_from cur_fk_referred_from%ROWTYPE;

BEGIN

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering all tables data started ...');

  DBMS_LOB.CREATETEMPORARY(res, TRUE);
  DBMS_LOB.APPEND (res,'<osdm_at:root xmlns:osdm_at="osdm_at">');

   -- Common Data
   FOR rec_common_data IN cur_common_data(v_model_ovid) LOOP

      DBMS_LOB.APPEND (res, rec_common_data.design_name);
      DBMS_LOB.APPEND (res, rec_common_data.version_date);  
      DBMS_LOB.APPEND (res, '<osdm_at:VersionComment>');
      DBMS_LOB.APPEND (res, '<osdm_at:VersionCommentDetails>');
      -- Tokenize rows
      FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_common_data.version_comment||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                     FROM   dual
                     CONNECT BY REGEXP_INSTR(rec_common_data.version_comment||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
 
          SELECT XMLElement("osdm_at:VersionCommentRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
          DBMS_LOB.APPEND (res, token_value);
      END LOOP;
      DBMS_LOB.APPEND (res, '</osdm_at:VersionCommentDetails>');
      DBMS_LOB.APPEND (res, '</osdm_at:VersionComment>');
      DBMS_LOB.APPEND (res, rec_common_data.model_name);
 
   END LOOP;

   FOR rec_all_tables IN cur_all_tables(v_model_ovid) LOOP

      IF (cur_all_tables%ROWCOUNT = 1) THEN
           DBMS_LOB.APPEND (res,'<osdm_at:TablesCollection>');
      END IF;
      
      DBMS_LOB.APPEND (res,'<osdm_at:TableDetails>');

      -- Description / Notes
      IF (reportTemplate.reportType = 0 OR reportTemplate.useDescriptionInfo = 1) THEN
      
         DBMS_LOB.APPEND (res, '<osdm_at:DescriptionNotes>');
         
         SELECT 
               NVL(
                  (SELECT t.text comments_in_rdbms
                   FROM   dmrs_large_text t
                   WHERE  t.ovid = rec_all_tables.table_ovid
                   AND    t.type='Comments'),
                  (SELECT t.text comments_in_rdbms
                   FROM   dmrs_large_text t
                   WHERE  t.ovid = rec_all_tables.table_ovid
                   AND    t.type='CommentsInRDBMS'))        description, 
                  (SELECT t.text comments_in_rdbms
                   FROM   dmrs_large_text t
                   WHERE  t.ovid = rec_all_tables.table_ovid
                   AND    t.type='Note')                     notes
         INTO   v_description, 
                v_notes
         FROM  dual;
         
         DBMS_LOB.APPEND (res, '<osdm_at:Description>');
         DBMS_LOB.APPEND (res, '<osdm_at:DescriptionDetails>');
         -- Tokenize rows
         FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_description||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                        FROM   dual
                        CONNECT BY REGEXP_INSTR(v_description||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
             SELECT XMLElement("osdm_at:DescriptionRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
             DBMS_LOB.APPEND (res, token_value);
         END LOOP;
         DBMS_LOB.APPEND (res, '</osdm_at:DescriptionDetails>');
         DBMS_LOB.APPEND (res, '</osdm_at:Description>');
         
         DBMS_LOB.APPEND (res, '<osdm_at:Notes>');
         DBMS_LOB.APPEND (res, '<osdm_at:NotesDetails>');
         -- Tokenize rows
         FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_notes||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                        FROM   dual
                        CONNECT BY REGEXP_INSTR(v_notes||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
             SELECT XMLElement("osdm_at:NoteRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
             DBMS_LOB.APPEND (res, token_value);
         END LOOP;
         DBMS_LOB.APPEND (res, '</osdm_at:NotesDetails>');
         DBMS_LOB.APPEND (res, '</osdm_at:Notes>');
         DBMS_LOB.APPEND (res, '</osdm_at:DescriptionNotes>');
         
       END IF;

         DBMS_LOB.APPEND (res, rec_all_tables.table_name);
         DBMS_LOB.APPEND (res, rec_all_tables.functional_name);      
         DBMS_LOB.APPEND (res, rec_all_tables.abbreviation);
         DBMS_LOB.APPEND (res, rec_all_tables.class_type_name);
         DBMS_LOB.APPEND (res, rec_all_tables.obj_type_name);
       IF (reportTemplate.reportType = 0 OR reportTemplate.useQuantitativeInfo = 1) THEN
         DBMS_LOB.APPEND (res, '<osdm_at:QuantitativeInfoCollection>');
         DBMS_LOB.APPEND (res, rec_all_tables.number_cols);
         DBMS_LOB.APPEND (res, rec_all_tables.number_rows_min);
         DBMS_LOB.APPEND (res, rec_all_tables.number_rows_max);
         DBMS_LOB.APPEND (res, rec_all_tables.number_rows_expected);
         DBMS_LOB.APPEND (res, rec_all_tables.growth_expected);
         DBMS_LOB.APPEND (res, rec_all_tables.growth_interval);
         DBMS_LOB.APPEND (res, '</osdm_at:QuantitativeInfoCollection>');
       END IF;

       -- Columns
       IF (reportTemplate.reportType = 0 OR reportTemplate.useTableColumns = 1) THEN
         FOR rec_columns IN cur_columns(rec_all_tables.table_ovid) LOOP
            IF (cur_columns%ROWCOUNT = 1) THEN
              DBMS_LOB.APPEND (res,'<osdm_at:ColumnsCollection>');
            END IF;

              DBMS_LOB.APPEND (res, '<osdm_at:ColumnDetails>');
              DBMS_LOB.APPEND (res, rec_columns.seq);
              DBMS_LOB.APPEND (res, rec_columns.column_name);
              DBMS_LOB.APPEND (res, rec_columns.pk);
              DBMS_LOB.APPEND (res, rec_columns.fk);
              DBMS_LOB.APPEND (res, rec_columns.m);
              IF (INSTR(LOWER(rec_columns.data_type),'unknown') = 0) THEN
                DBMS_LOB.APPEND (res, rec_columns.data_type);
              ELSE
                SELECT XMLElement("osdm_at:DataType", '').getClobVal() INTO token_value FROM dual;
                DBMS_LOB.APPEND (res, token_value);
              END IF;
              DBMS_LOB.APPEND (res, rec_columns.dt_kind);
              DBMS_LOB.APPEND (res, rec_columns.domain_name);
              DBMS_LOB.APPEND (res, rec_columns.formula);
              DBMS_LOB.APPEND (res, rec_columns.security);
              DBMS_LOB.APPEND (res, rec_columns.abbreviation);
              DBMS_LOB.APPEND (res,'</osdm_at:ColumnDetails>');

            IF (cur_columns%ROWCOUNT = rec_columns.total_row_count) THEN
             DBMS_LOB.APPEND (res, '</osdm_at:ColumnsCollection>');
            END IF;
         END LOOP;
       END IF;

       -- Columns Comments
       IF (reportTemplate.reportType = 0 OR reportTemplate.useTableColumnsComments = 1) THEN
         FOR rec_columns_comments IN cur_columns_comments(rec_all_tables.table_ovid) LOOP
            IF (cur_columns_comments%ROWCOUNT = 1) THEN
              DBMS_LOB.APPEND (res,'<osdm_at:ColumnsCommentsCollection>');
            END IF;

              DBMS_LOB.APPEND (res, '<osdm_at:ColumnCommentsDetails>');
              DBMS_LOB.APPEND (res, rec_columns_comments.seq);
              DBMS_LOB.APPEND (res, rec_columns_comments.column_name);

              DBMS_LOB.APPEND (res, '<osdm_at:ColumnDescription>');
              DBMS_LOB.APPEND (res, '<osdm_at:ColumnDescriptionDetails>');
              -- Tokenize rows
              FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_columns_comments.description||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                               FROM   dual
                               CONNECT BY REGEXP_INSTR(rec_columns_comments.description||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
                  SELECT XMLElement("osdm_at:ColumnDescriptionRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
                  DBMS_LOB.APPEND (res, token_value);
              END LOOP;
              DBMS_LOB.APPEND (res, '</osdm_at:ColumnDescriptionDetails>');
              DBMS_LOB.APPEND (res, '</osdm_at:ColumnDescription>');

              DBMS_LOB.APPEND (res, '<osdm_at:ColumnNotes>');
              DBMS_LOB.APPEND (res, '<osdm_at:ColumnNotesDetails>');
              -- Tokenize rows
              FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_columns_comments.notes||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                               FROM   dual
                               CONNECT BY REGEXP_INSTR(rec_columns_comments.notes||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
                  SELECT XMLElement("osdm_at:ColumnNoteRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
                  DBMS_LOB.APPEND (res, token_value);
              END LOOP;
              DBMS_LOB.APPEND (res, '</osdm_at:ColumnNotesDetails>');
              DBMS_LOB.APPEND (res, '</osdm_at:ColumnNotes>');

              DBMS_LOB.APPEND (res,'</osdm_at:ColumnCommentsDetails>');

            IF (cur_columns_comments%ROWCOUNT = rec_columns_comments.total_row_count) THEN
              DBMS_LOB.APPEND (res, '</osdm_at:ColumnsCommentsCollection>');
            END IF;
         END LOOP;
       END IF;

       -- Indexes
       IF (reportTemplate.reportType = 0 OR reportTemplate.useTableIndexes = 1) THEN
       		FOR rec_indexes IN cur_indexes(rec_all_tables.table_ovid) LOOP
       		   IF (cur_indexes%ROWCOUNT = 1) THEN
       		     DBMS_LOB.APPEND (res,'<osdm_at:IndexesCollection>');
       		   END IF;

       		     DBMS_LOB.APPEND (res, '<osdm_at:IndexDetails>');
       		     DBMS_LOB.APPEND (res, rec_indexes.idx_name);
       		     DBMS_LOB.APPEND (res, rec_indexes.state);
       		     DBMS_LOB.APPEND (res, rec_indexes.functional);
       		     DBMS_LOB.APPEND (res, rec_indexes.spatial);
       		     DBMS_LOB.APPEND (res, rec_indexes.expression);
       		     DBMS_LOB.APPEND (res, rec_indexes.col_name);
       		     DBMS_LOB.APPEND (res, rec_indexes.sort_order);
       		     DBMS_LOB.APPEND (res,'</osdm_at:IndexDetails>');

       		   IF (cur_indexes%ROWCOUNT = rec_indexes.total_row_count) THEN
       		    DBMS_LOB.APPEND (res, '</osdm_at:IndexesCollection>');
       		   END IF;
       		END LOOP;
       END IF;

       v_cc_created := FALSE;
       -- Constraints
       IF (reportTemplate.reportType = 0 OR reportTemplate.useTableConstraints = 1) THEN
         -- Table Level Constraints
         FOR rec_tl_constraints IN cur_tl_constraints(rec_all_tables.table_ovid) LOOP
            IF (cur_tl_constraints%ROWCOUNT = 1) THEN
              DBMS_LOB.APPEND (res,'<osdm_at:ConstraintsCollection>');
              v_cc_created := TRUE;
              DBMS_LOB.APPEND (res,'<osdm_at:TableLevelConstraintsCollection>');
            END IF;

              DBMS_LOB.APPEND (res, '<osdm_at:TableLevelConstraintDetails>');
              DBMS_LOB.APPEND (res, rec_tl_constraints.c_type);
              DBMS_LOB.APPEND (res, rec_tl_constraints.c_name);

              DBMS_LOB.APPEND (res, '<osdm_at:TLConstraintRule>');
              DBMS_LOB.APPEND (res, '<osdm_at:TLConstraintRuleDetails>');
              -- Tokenize rows
               FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR( rec_tl_constraints.c_details||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                              FROM   dual
                              CONNECT BY REGEXP_INSTR(rec_tl_constraints.c_details||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
                   SELECT XMLElement("osdm_at:TLConstraintRuleRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
                   DBMS_LOB.APPEND (res, token_value);
               END LOOP;
               DBMS_LOB.APPEND (res, '</osdm_at:TLConstraintRuleDetails>');       
               DBMS_LOB.APPEND (res, '</osdm_at:TLConstraintRule>');

               DBMS_LOB.APPEND (res, '</osdm_at:TableLevelConstraintDetails>');

            IF (cur_tl_constraints%ROWCOUNT = rec_tl_constraints.total_row_count) THEN
              DBMS_LOB.APPEND (res, '</osdm_at:TableLevelConstraintsCollection>');
            END IF;

         END LOOP;

         -- Column Level Constraints
         FOR rec_cl_constraints IN cur_cl_constraints(rec_all_tables.table_ovid) LOOP
            IF (cur_cl_constraints%ROWCOUNT = 1) THEN
              IF NOT v_cc_created THEN
                 DBMS_LOB.APPEND (res,'<osdm_at:ConstraintsCollection>');
                 v_cc_created := TRUE;
              END IF;

             DBMS_LOB.APPEND (res,'<osdm_at:ColumnLevelConstraintsCollection>');
             v_cc_created := TRUE;
            END IF;

             DBMS_LOB.APPEND (res, '<osdm_at:ConstraintDetails>');
             DBMS_LOB.APPEND (res, rec_cl_constraints.c_type);
             DBMS_LOB.APPEND (res, rec_cl_constraints.c_name);
             DBMS_LOB.APPEND (res, rec_cl_constraints.c_details);
             DBMS_LOB.APPEND (res,'</osdm_at:ConstraintDetails>');

            IF (cur_cl_constraints%ROWCOUNT = rec_cl_constraints.total_row_count) THEN
              DBMS_LOB.APPEND (res, '</osdm_at:ColumnLevelConstraintsCollection>');
            END IF;
         END LOOP;
         
         IF v_cc_created THEN
           DBMS_LOB.APPEND (res,'</osdm_at:ConstraintsCollection>');
         END IF;
       END IF;

       -- Foreign Keys Referring To
       IF (reportTemplate.reportType = 0 OR reportTemplate.useTableFKReferringTo = 1) THEN
         FOR rec_fk_referring_to IN cur_fk_referring_to(rec_all_tables.table_ovid) LOOP
            IF (cur_fk_referring_to%ROWCOUNT = 1) THEN
              DBMS_LOB.APPEND (res,'<osdm_at:FKRTCollection>');
            END IF;
         
             DBMS_LOB.APPEND (res, '<osdm_at:FKRTDetails>');
             DBMS_LOB.APPEND (res, rec_fk_referring_to.fk_name);
             DBMS_LOB.APPEND (res, rec_fk_referring_to.referring_to);
             DBMS_LOB.APPEND (res, rec_fk_referring_to.mandatory);
             DBMS_LOB.APPEND (res, rec_fk_referring_to.transferable);
             DBMS_LOB.APPEND (res, rec_fk_referring_to.in_arc);
             DBMS_LOB.APPEND (res, rec_fk_referring_to.col_name);
             DBMS_LOB.APPEND (res,'</osdm_at:FKRTDetails>');
            
            IF (cur_fk_referring_to%ROWCOUNT = rec_fk_referring_to.total_row_count) THEN
              DBMS_LOB.APPEND (res, '</osdm_at:FKRTCollection>');
            END IF;
         END LOOP;
      END IF;
         
       -- Foreign Keys Referred From
       IF (reportTemplate.reportType = 0 OR reportTemplate.useTableFKReferredFrom = 1) THEN         
         FOR rec_fk_referred_from IN cur_fk_referred_from(rec_all_tables.table_ovid) LOOP
            IF (cur_fk_referred_from%ROWCOUNT = 1) THEN
              DBMS_LOB.APPEND (res,'<osdm_at:FKRFCollection>');
            END IF;
           
             DBMS_LOB.APPEND (res, '<osdm_at:FKRFDetails>');
             DBMS_LOB.APPEND (res, rec_fk_referred_from.fk_name);
             DBMS_LOB.APPEND (res, rec_fk_referred_from.referred_from);
             DBMS_LOB.APPEND (res, rec_fk_referred_from.mandatory);
             DBMS_LOB.APPEND (res, rec_fk_referred_from.transferable);
             DBMS_LOB.APPEND (res, rec_fk_referred_from.in_arc);
             DBMS_LOB.APPEND (res, rec_fk_referred_from.col_name);
             DBMS_LOB.APPEND (res,'</osdm_at:FKRFDetails>');

            IF (cur_fk_referred_from%ROWCOUNT = rec_fk_referred_from.total_row_count) THEN
              DBMS_LOB.APPEND (res, '</osdm_at:FKRFCollection>');
            END IF;
         END LOOP;
       END IF;

      DBMS_LOB.APPEND (res,'</osdm_at:TableDetails>');

      IF (cur_all_tables%ROWCOUNT = rec_all_tables.total_row_count) THEN
          DBMS_LOB.APPEND (res,'</osdm_at:TablesCollection>');
      END IF;

   END LOOP;

  DBMS_LOB.APPEND (res,'</osdm_at:root>');
  
  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering all tables data ended.');
	
RETURN res;
	
 EXCEPTION
  WHEN others THEN
   UTL_FILE.PUT_LINE(log_file, 'Gathering all tables Exception : : ' || SQLERRM);  
   UTL_FILE.PUT_LINE(log_file, 'Gathering all tables Exception : ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
  RETURN res;
  
END Gather_AllTables_Data;

FUNCTION Gather_SingleEntity_Data(v_entity_ovid IN VARCHAR2, reportTemplate IN REPORT_TEMPLATE) RETURN CLOB IS 

res               CLOB;
v_notes           CLOB;
v_description     CLOB;
v_rel_total_count INTEGER;
token_value       CLOB;

CURSOR cur_general_data(v_e_ovid IN VARCHAR2) IS
 -- General data
 SELECT XMLElement("osdm_e:DesignName",d.design_name).getClobVal()                                        design_name,
        XMLElement("osdm_e:VersionDate",TO_CHAR(d.date_published,'dd.mm.yyyy hh24:mi:ss')).getClobVal()   version_date,
        d.version_comments                                                                                comments,
        XMLElement("osdm_e:ModelName",m.model_name).getClobVal()                                          model_name
 FROM   dmrs_designs d, 
        dmrs_models m,
        dmrs_entities e
 WHERE  d.design_ovid = m.design_ovid
 AND    e.model_ovid = m.model_ovid
 AND    e.ovid = v_e_ovid;
rec_general_data cur_general_data%ROWTYPE;

CURSOR cur_entity(v_e_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_e:EntityName",e.entity_name).getClobVal()                                                                        entity_name,
        XMLElement("osdm_e:ClassificationTypeName",e.classification_type_name).getClobVal()                                               classification_type_name,
        XMLElement("osdm_e:Abbreviation",e.preferred_abbreviation).getClobVal()                                                           pref_abbreviation, 
        XMLElement("osdm_e:SuperType",(SELECT e1.entity_name FROM  dmrs_entities e1 WHERE e.supertypeentity_ovid = e1.ovid)).getClobVal() super_type,
        XMLElement("osdm_e:Synonyms", e.synonyms).getClobVal()                                                                            table_synonyms,
        XMLElement("osdm_e:ObjectTypeName",e.structured_type_name).getClobVal()                                                           object_type_name,
        XMLElement("osdm_e:NumberOfAttributes",e.number_data_elements).getClobVal()                                                       number_of_attributes, 
        XMLElement("osdm_e:NumberOfRowsMin",e.min_volume).getClobVal()                                                                    number_rows_min, 
        XMLElement("osdm_e:NumberOfRowsMax",e.max_volume).getClobVal()                                                                    number_rows_max, 
        XMLElement("osdm_e:ExpectedNumberOfRows",e.expected_volume).getClobVal()                                                          expected_number_of_rows, 
        XMLElement("osdm_e:ExpectedGrowth",e.growth_rate_percents).getClobVal()                                                           expected_growth,
        XMLElement("osdm_e:GrowthInterval",e.growth_rate_interval).getClobVal()                                                           growth_interval
 FROM   dmrs_entities e
 WHERE  e.ovid = v_e_ovid;
rec_entity cur_entity%ROWTYPE;

CURSOR cur_mapped_tables(v_e_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_e:TableName",t.model_name||'.'||t.table_name).getClobVal() table_name,
        COUNT(t.table_name) over()                                total_row_count
 FROM   dmrs_entities e,
        dmrs_tables t,
        dmrs_mappings m
 WHERE  m.relational_object_ovid = t.ovid
 AND    m.logical_object_ovid = e.ovid
 AND    e.ovid = v_e_ovid;
rec_mapped_tables cur_mapped_tables%ROWTYPE;

CURSOR cur_attributes(v_e_ovid IN VARCHAR2) IS
 SELECT  XMLElement("osdm_e:Sequence",a.sequence).getClobVal()                                                                                             seq, 
         XMLElement("osdm_e:AttributeName",a.attribute_name).getClobVal()                                                                                  attr_name,
         XMLElement("osdm_e:DataTypeKind",DECODE(a.datatype_kind,
                                                 'Domain',         'DOM',
                                                 'Logical Type',   'LT',
                                                 'Distinct Type',  'DT',
                                                 'Ref Struct Type','RST',
                                                 'Structured Type','ST',
                                                 'Collection Type','CT')                                                                                
                   ).getClobVal()                                                                                                                           dt_kind,
         XMLElement("osdm_e:DomainName",DECODE(a.domain_name,'Unknown',null,a.domain_name)).getClobVal()                                                   domain_name,
         XMLElement("osdm_e:DataType", 
            DECODE(a.datatype_kind, 
                  'Domain', a.logical_type_name ||' '||
                           DECODE (NVL(a.t_size,''),'',
                              DECODE(NVL(a.t_scale,0),0,
                                 DECODE(NVL(a.t_precision,0),0,null,'('|| DECODE(NVL(a.t_precision,0),0,null,a.t_precision) ||')'),
                                   '('|| DECODE(NVL(a.t_precision,0),0,null,a.t_precision) || ',' || DECODE(NVL(a.t_scale,0),0,null,a.t_scale)||')'),
                                   '('||TRIM(DECODE(a.t_size,'',null,a.t_size||' '||a.char_units ))||')'),
                   'Logical Type', a.logical_type_name  ||' '|| 
                           DECODE (NVL(a.t_size,''),'',
                              DECODE(NVL(a.t_scale,0),0,
                                 DECODE(NVL(a.t_precision,0),0,null,'('|| DECODE(NVL(a.t_precision,0),0,null,a.t_precision) ||')'),
                                   '('|| DECODE(NVL(a.t_precision,0),0,null,a.t_precision) || ',' || DECODE(NVL(a.t_scale,0),0,null,a.t_scale)||')'),
                                   '('||TRIM(DECODE(a.t_size,'',null,a.t_size||' '||a.char_units ))||')')
            )
          ).getClobVal()                                                                                                                                   data_type,
         XMLElement("osdm_e:PK",a.pk_flag).getClobVal()                                                                                                    pk,
         XMLElement("osdm_e:FK",a.fk_flag).getClobVal()                                                                                                    fk,
         XMLElement("osdm_e:M",DECODE(a.mandatory,'N',' ',a.mandatory)).getClobVal()                                                                       m,
         XMLElement("osdm_e:Formula",TRIM(a.formula||' '||a.default_value)).getClobVal()                                                                   formula,
         XMLElement("osdm_e:AttributeSynonyms",a.synonyms).getClobVal()                                                                                    synonyms,
         XMLElement("osdm_e:PreferredAbbreviation",a.preferred_abbreviation).getClobVal()                                                                  pref_abbr,
         COUNT(a.sequence) over()                                                                                                                           total_row_count
  FROM   dmrs_attributes a
  WHERE  a.container_ovid = v_e_ovid
  ORDER BY a.sequence;
rec_attributes cur_attributes%ROWTYPE;

-- Attributes Comments Data
CURSOR cur_attributes_comments(v_e_ovid IN VARCHAR2) IS
 SELECT a.seq                          seq, 
        a.attribute_name               attribute_name, 
        a.description                  description, 
        a.notes                        notes,
        COUNT(a.attribute_name) over() total_row_count
 FROM (
  SELECT XMLElement("osdm_e:AttributeCommentsSequence",a.sequence).getStringVal()  seq,
         XMLElement("osdm_e:AttributeCommentsName",a.attribute_name).getStringVal()   attribute_name,
         NVL(
        (SELECT t.text comments_in_rdbms
         FROM   dmrs_large_text t
         WHERE  t.ovid = a.ovid
         AND    t.type='Comments'),
        (SELECT t.text comments_in_rdbms
         FROM   dmrs_large_text t
         WHERE  t.ovid = a.ovid
         AND    t.type='CommentsInRDBMS'))  description, 
        (SELECT t.text comments_in_rdbms
         FROM   dmrs_large_text t
         WHERE  t.ovid = a.ovid
         AND    t.type='Note')              notes
  FROM   dmrs_entities e, 
         dmrs_attributes a
  WHERE  e.ovid = a.container_ovid
  and    e.ovid = v_e_ovid
  ORDER BY a.sequence
 ) a
 WHERE DBMS_LOB.getlength(description) > 0 OR DBMS_LOB.getlength(notes) > 0;
rec_attributes_comments cur_attributes_comments%ROWTYPE;

CURSOR cur_identifiers(v_e_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_e:IdentifierName",CASE WHEN ke.sequence>1 THEN ' ' ELSE ke.key_name END).getClobVal()                          nn,
        XMLElement("osdm_e:PrimaryIdentifier",CASE WHEN ke.sequence>1 THEN ' ' ELSE DECODE(k.state,'Primary Key','Y') END).getClobVal() pi, 
        XMLElement("osdm_e:ElementName",ke.element_name).getClobVal()                                                                   element_name,
        XMLElement("osdm_e:ElementType",ke.type).getClobVal()                                                                           type,
        XMLElement("osdm_e:SourceLabel",ke.source_label).getClobVal()                                                                   source_label,
        XMLElement("osdm_e:TargetLabel",ke.target_label).getClobVal()                                                                   target_label,
        COUNT(ke.sequence) over()                                                                                                        total_row_count
 FROM   dmrs_keys          k,
        dmrs_key_elements ke
 WHERE  k.container_ovid = v_e_ovid
 AND   ke.key_ovid = k.ovid
 ORDER BY ke.sequence;
rec_identifiers cur_identifiers%ROWTYPE;

CURSOR cur_relationships(v_e_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_e:SourceName",r.target_entity_name).getClobVal()                                                                  source_name, 
        XMLElement("osdm_e:SourceRole",r.source_label).getClobVal()                                                                        source_role,
        XMLElement("osdm_e:TargetRole",r.target_label).getClobVal()                                                                        target_role,
        XMLElement("osdm_e:InArc",DECODE(r.in_arc,'N','',r.in_arc)).getClobVal()                                                           in_arc,
        XMLElement("osdm_e:Cardinality",
           DECODE(r.source_optional,'Y',0,'1') || '..' || r.sourceto_target_cardinality
           ||':'||
           DECODE(r.target_optional,'Y',0,'1') || '..' || r.targetto_source_cardinality
           ).getClobVal()                                                                                                                  cardinality,
        XMLElement("osdm_e:DominantRole",DECODE(r.dominant_role,'None','')).getClobVal()                                                   dominant_role,
        XMLElement("osdm_e:Identifying",DECODE(r.identifying,'N','',r.identifying)).getClobVal()                                           identifying,
        XMLElement("osdm_e:Transferable",DECODE(r.transferable,'N','',r.transferable)).getClobVal()                                        transferable
 FROM   dmrs_relationships r
 WHERE  r.source_ovid  = v_e_ovid
 UNION ALL
 SELECT XMLElement("osdm_e:SourceName",r.source_entity_name).getClobVal()                                                                  source_name, 
        XMLElement("osdm_e:SourceRole",r.source_label).getClobVal()                                                                        source_role,
        XMLElement("osdm_e:TargetRole",r.target_label).getClobVal()                                                                        target_role,
        XMLElement("osdm_e:InArc",DECODE(r.in_arc,'N','',r.in_arc)).getClobVal()                                                           in_arc,
        XMLElement("osdm_e:Cardinality",
           DECODE(r.source_optional,'Y',0,'1') || '..' || r.sourceto_target_cardinality
           ||':'||
           DECODE(r.target_optional,'Y',0,'1') || '..' || r.targetto_source_cardinality
           ).getClobVal()                                                                                                                  cardinality,
        XMLElement("osdm_e:DominantRole",DECODE(r.dominant_role,'None','')).getClobVal()                                                   dominant_role,
        XMLElement("osdm_e:Identifying",DECODE(r.identifying,'N','',r.identifying)).getClobVal()                                           identifying,
        XMLElement("osdm_e:Transferable",DECODE(r.transferable,'N','',r.transferable)).getClobVal()                                        transferable
 FROM   dmrs_relationships r
 WHERE  r.target_ovid  = v_e_ovid;
rec_relationships cur_relationships%ROWTYPE;

CURSOR cur_incoming_processes(v_e_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_e:IncomingProcessName", NVL(pe.process_name,' ')).getClobVal()  ipr_name,
         XMLElement("osdm_e:IncomingFlowName", NVL(pe.flow_name,' ')).getClobVal()       ipr_flow_name,
         XMLElement("osdm_e:IncomingCRUDCode", NVL(pe.crud_code,' ')).getClobVal()       ipr_crud_code,
         XMLElement("osdm_e:IncomingDFDName", NVL(pe.dfd_name,' ')).getClobVal()         ipr_dfd_name,
         COUNT(pe.process_name) over()                                                    total_row_count
  FROM   dmrs_process_entities pe
  WHERE  pe.entity_ovid = v_e_ovid
  AND    pe.flow_direction = 'IN'
  ORDER BY pe.process_name;
rec_incoming_processes cur_incoming_processes%ROWTYPE;

CURSOR cur_outgoing_processes(v_e_ovid IN VARCHAR2) IS
  SELECT XMLElement("osdm_e:OutgoingProcessName", pe.process_name).getClobVal() opr_name,
         XMLElement("osdm_e:OutgoingFlowName", pe.flow_name).getClobVal()       opr_flow_name,
         XMLElement("osdm_e:OutgoingCRUDCode", pe.crud_code).getClobVal()       opr_crud_code,
         XMLElement("osdm_e:OutgoingDFDName", pe.dfd_name).getClobVal()         opr_dfd_name,
         COUNT(pe.process_name) over()                                           total_row_count
  FROM   dmrs_process_entities pe
  WHERE  pe.entity_ovid = v_e_ovid
  AND    pe.flow_direction = 'OUT'
  ORDER BY pe.process_name;
rec_outgoing_processes cur_outgoing_processes%ROWTYPE;

-- Constraints
CURSOR cur_constraints(v_e_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_e:ContstraintType", CASE WHEN rownum>1 THEN ''
                                              ELSE 'Attribute Level'
                                              END).getClobVal()                                        c_type,
        XMLElement("osdm_e:ALCConstraintName", a.attribute_name || 
                                                DECODE((SELECT DISTINCT(constraint_name)
                                                        FROM dmrs_check_constraints 
                                                        WHERE a.ovid = dataelement_ovid),NULL,'',
                                               ' / '|| (SELECT  DISTINCT(constraint_name) 
                                                        FROM dmrs_check_constraints 
                                                        WHERE a.ovid = dataelement_ovid))).getClobVal() c_name,
        Gather_Constraint_Details_XML(a.ovid, 'osdm_e')                                                 c_details,
        COUNT(a.attribute_name) over()                                                                  total_row_count
 FROM   dmrs_attributes a
 WHERE a.container_ovid = v_e_ovid
 AND  (a.ovid IN (SELECT dataelement_ovid FROM dmrs_avt) OR 
       a.ovid IN (SELECT dataelement_ovid FROM dmrs_value_ranges) OR 
       a.ovid IN (SELECT dataelement_ovid FROM dmrs_check_constraints));
rec_constraints cur_constraints%ROWTYPE;

BEGIN

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering single entity data started ...');

  DBMS_LOB.CREATETEMPORARY(res, TRUE);

  DBMS_LOB.APPEND (res,'<osdm_e:root xmlns:osdm_e="osdm_e">');

   FOR rec_general_data IN cur_general_data(v_entity_ovid) LOOP
   
      DBMS_LOB.APPEND (res, rec_general_data.design_name);
      DBMS_LOB.APPEND (res, rec_general_data.version_date);
   
      DBMS_LOB.APPEND (res, '<osdm_e:VersionComment>');
      DBMS_LOB.APPEND (res, '<osdm_e:VersionCommentDetails>');
         -- Tokenize rows
        FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_general_data.comments||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                       FROM   dual
                       CONNECT BY REGEXP_INSTR(rec_general_data.comments||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
            SELECT XMLElement("osdm_e:VersionCommentRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
            DBMS_LOB.APPEND (res, token_value);
        END LOOP;
          
        DBMS_LOB.APPEND (res, '</osdm_e:VersionCommentDetails>');
        DBMS_LOB.APPEND (res, '</osdm_e:VersionComment>');       
      
        DBMS_LOB.APPEND (res, rec_general_data.model_name);
   END LOOP;

   -- Mapped tables
   FOR rec_mapped_tables IN cur_mapped_tables(v_entity_ovid) LOOP
      IF (cur_mapped_tables%ROWCOUNT = 1) THEN
        DBMS_LOB.APPEND (res,'<osdm_e:MappedTablesCollection>');
      END IF;

        DBMS_LOB.APPEND (res, '<osdm_e:MappedTablesDetails>');
        DBMS_LOB.APPEND (res, rec_mapped_tables.table_name);
        DBMS_LOB.APPEND (res, '</osdm_e:MappedTablesDetails>');

      IF (cur_mapped_tables%ROWCOUNT = rec_mapped_tables.total_row_count) THEN
        DBMS_LOB.APPEND (res, '</osdm_e:MappedTablesCollection>');
      END IF;
   END LOOP;

   -- Description / Notes
   IF (reportTemplate.reportType = 0 OR reportTemplate.useDescriptionInfo = 1) THEN
   
     DBMS_LOB.APPEND (res, '<osdm_e:DescriptionNotes>');
     
     SELECT NVL(
              (SELECT t.text comments_in_rdbms
               FROM   dmrs_large_text t
               WHERE  t.ovid = v_entity_ovid
               AND    t.type='Comments'),
              (SELECT t.text comments_in_rdbms
               FROM   dmrs_large_text t
               WHERE  t.ovid = v_entity_ovid
               AND    t.type='CommentsInRDBMS'))                      description, 
              (SELECT t.text comments_in_rdbms
               FROM   dmrs_large_text t
               WHERE  t.ovid = v_entity_ovid
              AND    t.type='Note')                                   notes
     INTO   v_description, 
            v_notes
     FROM dual;
     
     DBMS_LOB.APPEND (res, '<osdm_e:Description>');
     DBMS_LOB.APPEND (res, '<osdm_e:DescriptionDetails>');
     -- Tokenize rows
     FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_description||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                    FROM   dual
                    CONNECT BY REGEXP_INSTR(v_description||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
         SELECT XMLElement("osdm_e:DescriptionRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
         DBMS_LOB.APPEND (res, token_value);
     END LOOP;
     DBMS_LOB.APPEND (res, '</osdm_e:DescriptionDetails>');
     DBMS_LOB.APPEND (res, '</osdm_e:Description>');
     
     DBMS_LOB.APPEND (res, '<osdm_e:Notes>');
     DBMS_LOB.APPEND (res, '<osdm_e:NotesDetails>');
     -- Tokenize rows
     FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_notes||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                    FROM   dual
                    CONNECT BY REGEXP_INSTR(v_notes||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
         SELECT XMLElement("osdm_e:NoteRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
         DBMS_LOB.APPEND (res, token_value);
     END LOOP;
     DBMS_LOB.APPEND (res, '</osdm_e:NotesDetails>');
     DBMS_LOB.APPEND (res, '</osdm_e:Notes>');
     DBMS_LOB.APPEND (res, '</osdm_e:DescriptionNotes>');
     
   END IF;

   FOR rec_entity IN cur_entity(v_entity_ovid) LOOP
      DBMS_LOB.APPEND (res, rec_entity.entity_name);
      DBMS_LOB.APPEND (res, rec_entity.pref_abbreviation);      
      DBMS_LOB.APPEND (res, rec_entity.classification_type_name);
      DBMS_LOB.APPEND (res, rec_entity.object_type_name);
      DBMS_LOB.APPEND (res, rec_entity.super_type);
      DBMS_LOB.APPEND (res, rec_entity.table_synonyms);
      IF (reportTemplate.reportType = 0 OR reportTemplate.useQuantitativeInfo = 1) THEN
        DBMS_LOB.APPEND (res, '<osdm_e:QuantitativeInfoCollection>');
        DBMS_LOB.APPEND (res, rec_entity.number_of_attributes);
        DBMS_LOB.APPEND (res, rec_entity.number_rows_min);
        DBMS_LOB.APPEND (res, rec_entity.number_rows_max);
        DBMS_LOB.APPEND (res, rec_entity.expected_number_of_rows);
        DBMS_LOB.APPEND (res, rec_entity.expected_growth);
        DBMS_LOB.APPEND (res, rec_entity.growth_interval);
        DBMS_LOB.APPEND (res, '</osdm_e:QuantitativeInfoCollection>');
      END IF;
   END LOOP;

   -- Attributes
   IF (reportTemplate.reportType = 0 OR reportTemplate.useEntityAttributes = 1) THEN
     FOR rec_attributes IN cur_attributes(v_entity_ovid) LOOP
        IF (cur_attributes%ROWCOUNT = 1) THEN
          DBMS_LOB.APPEND (res,'<osdm_e:AttributesCollection>');
        END IF;

          DBMS_LOB.APPEND (res, '<osdm_e:AttributeDetails>');
          DBMS_LOB.APPEND (res, rec_attributes.seq);
          DBMS_LOB.APPEND (res, rec_attributes.attr_name);
          DBMS_LOB.APPEND (res, rec_attributes.pk);
          DBMS_LOB.APPEND (res, rec_attributes.fk);
          DBMS_LOB.APPEND (res, rec_attributes.m);
          IF (INSTR(LOWER(rec_attributes.data_type),'unknown') = 0) THEN
             DBMS_LOB.APPEND (res, rec_attributes.data_type);
          ELSE
             SELECT XMLElement("osdm_e:DataType", '').getClobVal() INTO token_value FROM dual;
             DBMS_LOB.APPEND (res, token_value);
          END IF;
          DBMS_LOB.APPEND (res, rec_attributes.dt_kind);
          DBMS_LOB.APPEND (res, rec_attributes.domain_name);
          DBMS_LOB.APPEND (res, rec_attributes.formula);
          DBMS_LOB.APPEND (res, rec_attributes.pref_abbr);
          DBMS_LOB.APPEND (res, rec_attributes.synonyms);
          DBMS_LOB.APPEND (res,'</osdm_e:AttributeDetails>');

        IF (cur_attributes%ROWCOUNT = rec_attributes.total_row_count) THEN
          DBMS_LOB.APPEND (res, '</osdm_e:AttributesCollection>');
        END IF;
     END LOOP;
   END IF;

   -- Attribute Comments
   IF (reportTemplate.reportType = 0 OR reportTemplate.useEntityAttributesComments = 1) THEN
     FOR rec_attributes_comments IN cur_attributes_comments(v_entity_ovid) LOOP
        IF (cur_attributes_comments%ROWCOUNT = 1) THEN
          DBMS_LOB.APPEND (res,'<osdm_e:AttributesCommentsCollection>');
        END IF;

          DBMS_LOB.APPEND (res, '<osdm_e:AttributeCommentsDetails>');
          DBMS_LOB.APPEND (res, rec_attributes_comments.seq);
          DBMS_LOB.APPEND (res, rec_attributes_comments.attribute_name);

          DBMS_LOB.APPEND (res, '<osdm_e:AttributeDescription>');
          DBMS_LOB.APPEND (res, '<osdm_e:AttributeDescriptionDetails>');
          -- Tokenize rows
          FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_attributes_comments.description||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                         FROM   dual
                         CONNECT BY REGEXP_INSTR(rec_attributes_comments.description||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
              SELECT XMLElement("osdm_e:AttributeDescriptionRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
              DBMS_LOB.APPEND (res, token_value);
          END LOOP;
          DBMS_LOB.APPEND (res, '</osdm_e:AttributeDescriptionDetails>');
          DBMS_LOB.APPEND (res, '</osdm_e:AttributeDescription>');

          DBMS_LOB.APPEND (res, '<osdm_e:AttributeNotes>');
          DBMS_LOB.APPEND (res, '<osdm_e:AttributeNotesDetails>');
          -- Tokenize rows
          FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_attributes_comments.notes||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                         FROM   dual
                         CONNECT BY REGEXP_INSTR(rec_attributes_comments.notes||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
                         
              SELECT XMLElement("osdm_e:AttributeNoteRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
              DBMS_LOB.APPEND (res, token_value);
          END LOOP;
          DBMS_LOB.APPEND (res, '</osdm_e:AttributeNotesDetails>');
          DBMS_LOB.APPEND (res, '</osdm_e:AttributeNotes>');

          DBMS_LOB.APPEND (res,'</osdm_e:AttributeCommentsDetails>');

        IF (cur_attributes_comments%ROWCOUNT = rec_attributes_comments.total_row_count) THEN
          DBMS_LOB.APPEND (res, '</osdm_e:AttributesCommentsCollection>');
        END IF;
     END LOOP;
   END IF;

   -- Constraints
   IF (reportTemplate.reportType = 0 OR reportTemplate.useEntityConstraints = 1) THEN
     FOR rec_constraints IN cur_constraints(v_entity_ovid) LOOP
        IF (cur_constraints%ROWCOUNT = 1) THEN
           DBMS_LOB.APPEND (res,'<osdm_e:ConstraintsCollection>');
        END IF;

          DBMS_LOB.APPEND (res,'<osdm_e:ConstraintDetails>');
          DBMS_LOB.APPEND (res,rec_constraints.c_type);
          DBMS_LOB.APPEND (res,rec_constraints.c_name);
          DBMS_LOB.APPEND (res,rec_constraints.c_details);
          DBMS_LOB.APPEND (res,'</osdm_e:ConstraintDetails>');

        IF (cur_constraints%ROWCOUNT = rec_constraints.total_row_count) THEN
            DBMS_LOB.APPEND (res,'</osdm_e:ConstraintsCollection>');
        END IF;
     END LOOP;
   END IF;

   -- Identifiers
   IF (reportTemplate.reportType = 0 OR reportTemplate.useEntityIdentifiers = 1) THEN
     FOR rec_identifiers IN cur_identifiers(v_entity_ovid) LOOP
        IF (cur_identifiers%ROWCOUNT = 1) THEN
          DBMS_LOB.APPEND (res, '<osdm_e:IdentifiersCollection>');
        END IF;

          DBMS_LOB.APPEND (res, '<osdm_e:IdentifierDetails>');
          DBMS_LOB.APPEND (res, rec_identifiers.nn);
          DBMS_LOB.APPEND (res, rec_identifiers.pi);
          DBMS_LOB.APPEND (res, rec_identifiers.element_name);
          DBMS_LOB.APPEND (res, rec_identifiers.type);
          DBMS_LOB.APPEND (res, rec_identifiers.source_label);
          DBMS_LOB.APPEND (res, rec_identifiers.target_label);
          DBMS_LOB.APPEND (res, '</osdm_e:IdentifierDetails>');

        IF (cur_identifiers%ROWCOUNT = rec_identifiers.total_row_count) THEN
           DBMS_LOB.APPEND (res, '</osdm_e:IdentifiersCollection>');
        END IF;
     END LOOP;
   END IF;

   -- Relationships
   IF (reportTemplate.reportType = 0 OR reportTemplate.useEntityRelationships = 1) THEN
     -- Total count of relationships
     SELECT COUNT(1)
     INTO   v_rel_total_count
     FROM (
      SELECT r.ovid
      FROM   dmrs_relationships r,
             dmrs_entities      e
      WHERE  r.source_ovid  = e.ovid
      AND    e.ovid         = v_entity_ovid
      UNION ALL
      SELECT r.ovid
      FROM   dmrs_relationships r,
             dmrs_entities      e
      WHERE  r.target_ovid  = e.ovid
      AND    e.ovid         = v_entity_ovid);

     FOR rec_relationships IN cur_relationships(v_entity_ovid) LOOP
        IF (cur_relationships%ROWCOUNT = 1) THEN
           DBMS_LOB.APPEND (res, '<osdm_e:RelationshipsCollection>');
        END IF;
     
           DBMS_LOB.APPEND (res, '<osdm_e:RelationshipDetails>');
           DBMS_LOB.APPEND (res, rec_relationships.source_name);
           DBMS_LOB.APPEND (res, rec_relationships.source_role);
           DBMS_LOB.APPEND (res, rec_relationships.target_role);
           DBMS_LOB.APPEND (res, rec_relationships.in_arc);
           DBMS_LOB.APPEND (res, rec_relationships.cardinality);
           DBMS_LOB.APPEND (res, rec_relationships.dominant_role);
           DBMS_LOB.APPEND (res, rec_relationships.identifying);
           DBMS_LOB.APPEND (res, rec_relationships.transferable);
           DBMS_LOB.APPEND (res, '</osdm_e:RelationshipDetails>');

        IF (cur_relationships%ROWCOUNT = v_rel_total_count) THEN
           DBMS_LOB.APPEND (res, '</osdm_e:RelationshipsCollection>');
        END IF;
     
     END LOOP;
   END IF;

   -- Incoming Processes
   IF (reportTemplate.reportType = 0 OR reportTemplate.useEntityIncomingProcesses = 1) THEN
     FOR rec_incoming_processes IN cur_incoming_processes(v_entity_ovid) LOOP
        IF (cur_incoming_processes%ROWCOUNT = 1) THEN
          DBMS_LOB.APPEND (res, '<osdm_e:IncomingProcessesCollection>');
        END IF;
          DBMS_LOB.APPEND (res, '<osdm_e:IncomingProcessDetails>');
          DBMS_LOB.APPEND (res, rec_incoming_processes.ipr_name);
          DBMS_LOB.APPEND (res, rec_incoming_processes.ipr_flow_name);
          DBMS_LOB.APPEND (res, rec_incoming_processes.ipr_crud_code);
          DBMS_LOB.APPEND (res, rec_incoming_processes.ipr_dfd_name);
          DBMS_LOB.APPEND (res, '</osdm_e:IncomingProcessDetails>');
        IF (cur_incoming_processes%ROWCOUNT = rec_incoming_processes.total_row_count) THEN
          DBMS_LOB.APPEND (res, '</osdm_e:IncomingProcessesCollection>');
        END IF;
     END LOOP;
   END IF;

   -- Outgoing Processes
   IF (reportTemplate.reportType = 0 OR reportTemplate.useEntityOutgoingProcesses = 1) THEN
     FOR rec_outgoing_processes IN cur_outgoing_processes(v_entity_ovid) LOOP
        IF (cur_outgoing_processes%ROWCOUNT = 1) THEN
          DBMS_LOB.APPEND (res, '<osdm_e:OutgoingProcessesCollection>');
        END IF;
          DBMS_LOB.APPEND (res, '<osdm_e:OugoingProcessDetails>');
          DBMS_LOB.APPEND (res, rec_outgoing_processes.opr_name);
          DBMS_LOB.APPEND (res, rec_outgoing_processes.opr_flow_name);
          DBMS_LOB.APPEND (res, rec_outgoing_processes.opr_crud_code);
          DBMS_LOB.APPEND (res, rec_outgoing_processes.opr_dfd_name);
          DBMS_LOB.APPEND (res, '</osdm_e:OugoingProcessDetails>');
        IF (cur_outgoing_processes%ROWCOUNT = rec_outgoing_processes.total_row_count) THEN
          DBMS_LOB.APPEND (res, '</osdm_e:OutgoingProcessesCollection>');
        END IF;
     END LOOP;
  END IF;

  DBMS_LOB.APPEND (res,'</osdm_e:root>');

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering single entity data ended');
  
RETURN res;

 EXCEPTION
 WHEN others THEN
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_SingleEntity_Data Exception : ' || SQLERRM);  
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_SingleEntity_Data Exception : ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
  RETURN res;
 
END Gather_SingleEntity_Data;

FUNCTION Gather_AllEntities_Data(v_model_ovid IN VARCHAR2, reportTemplate IN REPORT_TEMPLATE) RETURN CLOB IS 

res               CLOB;
v_notes           CLOB;
v_description     CLOB;
v_rel_total_count INTEGER;
token_value       CLOB;

CURSOR cur_general_data(v_m_ovid IN VARCHAR2) IS
 -- General data
 SELECT XMLElement("osdm_ae:DesignName",d.design_name).getClobVal()                                        design_name,
        XMLElement("osdm_ae:VersionDate",TO_CHAR(d.date_published,'dd.mm.yyyy hh24:mi:ss')).getClobVal()   version_date,
        d.version_comments                                                                                 comments,
        XMLElement("osdm_ae:ModelName",m.model_name).getClobVal()                                          model_name
 FROM   dmrs_designs d, 
        dmrs_models m
 WHERE  d.design_ovid = m.design_ovid
 AND    m.model_ovid = v_model_ovid;
rec_general_data cur_general_data%ROWTYPE;

CURSOR cur_all_entities(v_m_ovid IN VARCHAR2) IS
 SELECT /*+ index(e ENTITIES_FK_IDXV1) */
        XMLElement("osdm_ae:EntityName",e.entity_name).getClobVal()                                                                        entity_name,
        XMLElement("osdm_ae:ClassificationTypeName",e.classification_type_name).getClobVal()                                               classification_type_name,
        XMLElement("osdm_ae:Abbreviation",e.preferred_abbreviation).getClobVal()                                                           pref_abbreviation, 
        XMLElement("osdm_ae:SuperType",(SELECT e1.entity_name FROM  dmrs_entities e1 WHERE e.supertypeentity_ovid = e1.ovid)).getClobVal() super_type,
        XMLElement("osdm_ae:Synonyms", e.synonyms).getClobVal()                                                                            table_synonyms,
        XMLElement("osdm_ae:ObjectTypeName",e.structured_type_name).getClobVal()                                                           object_type_name,
        XMLElement("osdm_ae:NumberOfAttributes",e.number_data_elements).getClobVal()                                                       number_of_attributes, 
        XMLElement("osdm_ae:NumberOfRowsMin",e.min_volume).getClobVal()                                                                    number_rows_min, 
        XMLElement("osdm_ae:NumberOfRowsMax",e.max_volume).getClobVal()                                                                    number_rows_max, 
        XMLElement("osdm_ae:ExpectedNumberOfRows",e.expected_volume).getClobVal()                                                          expected_number_of_rows, 
        XMLElement("osdm_ae:ExpectedGrowth",e.growth_rate_percents).getClobVal()                                                           expected_growth,
        XMLElement("osdm_ae:GrowthInterval",e.growth_rate_interval).getClobVal()                                                           growth_interval,
        e.ovid                                                                                                                             entity_ovid,
        COUNT(e.entity_name) over() total_row_count
 FROM   dmrs_entities    e
 WHERE  e.model_ovid = v_m_ovid;
rec_all_entities cur_all_entities%ROWTYPE;

CURSOR cur_mapped_tables(v_e_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_ae:TableName",t.model_name||'.'||t.table_name).getClobVal() table_name,
        COUNT(t.table_name) over()                                total_row_count
 FROM   dmrs_entities e,
        dmrs_tables t,
        dmrs_mappings m
 WHERE  m.relational_object_ovid = t.ovid
 AND    m.logical_object_ovid = e.ovid
 AND    e.ovid = v_e_ovid;
rec_mapped_tables cur_mapped_tables%ROWTYPE;

CURSOR cur_attributes(v_e_ovid IN VARCHAR2) IS
 SELECT  XMLElement("osdm_ae:Sequence",a.sequence).getClobVal()                                                                                              seq, 
         XMLElement("osdm_ae:AttributeName",a.attribute_name).getClobVal()                                                                                  attr_name,
         XMLElement("osdm_ae:DataTypeKind",DECODE(a.datatype_kind,
                                                 'Domain',         'DOM',
                                                 'Logical Type',   'LT',
                                                 'Distinct Type',  'DT',
                                                 'Ref Struct Type','RST',
                                                 'Structured Type','ST',
                                                 'Collection Type','CT')                                                                                
                   ).getClobVal()                                                                                                                           dt_kind,
         XMLElement("osdm_ae:DomainName",DECODE(a.domain_name,'Unknown',null,a.domain_name)).getClobVal()                                                   domain_name,
         XMLElement("osdm_ae:DataType", 
            DECODE(a.datatype_kind, 
                  'Domain', a.logical_type_name ||' '||
                           DECODE (NVL(a.t_size,''),'',
                              DECODE(NVL(a.t_scale,0),0,
                                 DECODE(NVL(a.t_precision,0),0,null,'('|| DECODE(NVL(a.t_precision,0),0,null,a.t_precision) ||')'),
                                   '('|| DECODE(NVL(a.t_precision,0),0,null,a.t_precision) || ',' || DECODE(NVL(a.t_scale,0),0,null,a.t_scale)||')'),
                                   '('||TRIM(DECODE(a.t_size,'',null,a.t_size||' '||a.char_units ))||')'),
                   'Logical Type', a.logical_type_name  ||' '|| 
                           DECODE (NVL(a.t_size,''),'',
                              DECODE(NVL(a.t_scale,0),0,
                                 DECODE(NVL(a.t_precision,0),0,null,'('|| DECODE(NVL(a.t_precision,0),0,null,a.t_precision) ||')'),
                                   '('|| DECODE(NVL(a.t_precision,0),0,null,a.t_precision) || ',' || DECODE(NVL(a.t_scale,0),0,null,a.t_scale)||')'),
                                   '('||TRIM(DECODE(a.t_size,'',null,a.t_size||' '||a.char_units ))||')')
            )
          ).getClobVal()                                                                                                                                    data_type,
         XMLElement("osdm_ae:PK",a.pk_flag).getClobVal()                                                                                                    pk,
         XMLElement("osdm_ae:FK",a.fk_flag).getClobVal()                                                                                                    fk,
         XMLElement("osdm_ae:M",DECODE(a.mandatory,'N',' ',a.mandatory)).getClobVal()                                                                       m,
         XMLElement("osdm_ae:Formula",TRIM(a.formula||' '||a.default_value)).getClobVal()                                                                   formula,
         XMLElement("osdm_ae:AttributeSynonyms",a.synonyms).getClobVal()                                                                                    synonyms,
         XMLElement("osdm_ae:PreferredAbbreviation",a.preferred_abbreviation).getClobVal()                                                                  pref_abbr,
         COUNT(a.sequence) over()                                                                                                                           total_row_count
  FROM   dmrs_attributes a
  WHERE  a.container_ovid = v_e_ovid
  ORDER BY a.sequence;
rec_attributes cur_attributes%ROWTYPE;

-- Attributes Comments Data
CURSOR cur_attributes_comments(v_e_ovid IN VARCHAR2) IS
 SELECT a.seq                          seq, 
        a.attribute_name               attribute_name, 
        a.description                  description, 
        a.notes                        notes,
        COUNT(a.attribute_name) over() total_row_count
 FROM (
  SELECT XMLElement("osdm_ae:AttributeCommentsSequence",a.sequence).getStringVal()  seq,
         XMLElement("osdm_ae:AttributeCommentsName",a.attribute_name).getStringVal()   attribute_name,
         NVL(
        (SELECT t.text comments_in_rdbms
         FROM   dmrs_large_text t
         WHERE  t.ovid = a.ovid
         AND    t.type='Comments'),
        (SELECT t.text comments_in_rdbms
         FROM   dmrs_large_text t
         WHERE  t.ovid = a.ovid
         AND    t.type='CommentsInRDBMS'))  description, 
        (SELECT t.text comments_in_rdbms
         FROM   dmrs_large_text t
         WHERE  t.ovid = a.ovid
         AND    t.type='Note')              notes
  FROM   dmrs_entities e, 
         dmrs_attributes a
  WHERE  e.ovid = a.container_ovid
  and    e.ovid = v_e_ovid
  ORDER BY a.sequence
 ) a
 WHERE DBMS_LOB.getlength(description) > 0 OR DBMS_LOB.getlength(notes) > 0;
rec_attributes_comments cur_attributes_comments%ROWTYPE;

CURSOR cur_identifiers(v_e_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_ae:IdentifierName",CASE WHEN ke.sequence>1 THEN ' ' ELSE ke.key_name END).getClobVal()                          nn,
        XMLElement("osdm_ae:PrimaryIdentifier",CASE WHEN ke.sequence>1 THEN ' ' ELSE DECODE(k.state,'Primary Key','Y') END).getClobVal() pi, 
        XMLElement("osdm_ae:ElementName",ke.element_name).getClobVal()                                                                   element_name,
        XMLElement("osdm_ae:ElementType",ke.type).getClobVal()                                                                           type,
        XMLElement("osdm_ae:SourceLabel",ke.source_label).getClobVal()                                                                   source_label,
        XMLElement("osdm_ae:TargetLabel",ke.target_label).getClobVal()                                                                   target_label,
        COUNT(ke.sequence) over()                                                                                                        total_row_count
 FROM   dmrs_keys          k,
        dmrs_key_elements ke
 WHERE  k.container_ovid = v_e_ovid
 AND   ke.key_ovid = k.ovid
 ORDER BY ke.sequence;
rec_identifiers cur_identifiers%ROWTYPE;

CURSOR cur_relationships(v_e_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_ae:SourceName",r.target_entity_name).getClobVal()                                                                  source_name, 
        XMLElement("osdm_ae:SourceRole",r.source_label).getClobVal()                                                                        source_role,
        XMLElement("osdm_ae:TargetRole",r.target_label).getClobVal()                                                                        target_role,
        XMLElement("osdm_ae:InArc",DECODE(r.in_arc,'N','',r.in_arc)).getClobVal()                                                           in_arc,
        XMLElement("osdm_ae:Cardinality",
           DECODE(r.source_optional,'Y',0,'1') || '..' || r.sourceto_target_cardinality
           ||':'||
           DECODE(r.target_optional,'Y',0,'1') || '..' || r.targetto_source_cardinality
           ).getClobVal()                                                                                                                   cardinality,
        XMLElement("osdm_ae:DominantRole",DECODE(r.dominant_role,'None','')).getClobVal()                                                   dominant_role,
        XMLElement("osdm_ae:Identifying",DECODE(r.identifying,'N','',r.identifying)).getClobVal()                                           identifying,
        XMLElement("osdm_ae:Transferable",DECODE(r.transferable,'N','',r.transferable)).getClobVal()                                        transferable
 FROM   dmrs_relationships r
 WHERE  r.source_ovid  = v_e_ovid
 UNION ALL
 SELECT XMLElement("osdm_ae:SourceName",r.source_entity_name).getClobVal()                                                                  source_name, 
        XMLElement("osdm_ae:SourceRole",r.source_label).getClobVal()                                                                        source_role,
        XMLElement("osdm_ae:TargetRole",r.target_label).getClobVal()                                                                        target_role,
        XMLElement("osdm_ae:InArc",DECODE(r.in_arc,'N','',r.in_arc)).getClobVal()                                                           in_arc,
        XMLElement("osdm_ae:Cardinality",
           DECODE(r.source_optional,'Y',0,'1') || '..' || r.sourceto_target_cardinality
           ||':'||
           DECODE(r.target_optional,'Y',0,'1') || '..' || r.targetto_source_cardinality
           ).getClobVal()                                                                                                                   cardinality,
        XMLElement("osdm_ae:DominantRole",DECODE(r.dominant_role,'None','')).getClobVal()                                                   dominant_role,
        XMLElement("osdm_ae:Identifying",DECODE(r.identifying,'N','',r.identifying)).getClobVal()                                           identifying,
        XMLElement("osdm_ae:Transferable",DECODE(r.transferable,'N','',r.transferable)).getClobVal()                                        transferable
 FROM   dmrs_relationships r
 WHERE  r.target_ovid  = v_e_ovid;
rec_relationships cur_relationships%ROWTYPE;

CURSOR cur_incoming_processes(v_e_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_ae:IncomingProcessName", NVL(pe.process_name,' ')).getClobVal()  ipr_name,
         XMLElement("osdm_ae:IncomingFlowName", NVL(pe.flow_name,' ')).getClobVal()       ipr_flow_name,
         XMLElement("osdm_ae:IncomingCRUDCode", NVL(pe.crud_code,' ')).getClobVal()       ipr_crud_code,
         XMLElement("osdm_ae:IncomingDFDName", NVL(pe.dfd_name,' ')).getClobVal()         ipr_dfd_name,
         COUNT(pe.process_name) over()                                                    total_row_count
  FROM   dmrs_process_entities pe
  WHERE  pe.entity_ovid = v_e_ovid
  AND    pe.flow_direction = 'IN'
  ORDER BY pe.process_name;
rec_incoming_processes cur_incoming_processes%ROWTYPE;

CURSOR cur_outgoing_processes(v_e_ovid IN VARCHAR2) IS
  SELECT XMLElement("osdm_ae:OutgoingProcessName", pe.process_name).getClobVal() opr_name,
         XMLElement("osdm_ae:OutgoingFlowName", pe.flow_name).getClobVal()       opr_flow_name,
         XMLElement("osdm_ae:OutgoingCRUDCode", pe.crud_code).getClobVal()       opr_crud_code,
         XMLElement("osdm_ae:OutgoingDFDName", pe.dfd_name).getClobVal()         opr_dfd_name,
         COUNT(pe.process_name) over()                                           total_row_count
  FROM   dmrs_process_entities pe
  WHERE  pe.entity_ovid = v_e_ovid
  AND    pe.flow_direction = 'OUT'
  ORDER BY pe.process_name;
rec_outgoing_processes cur_outgoing_processes%ROWTYPE;

-- Constraints
CURSOR cur_constraints(v_e_ovid IN VARCHAR2) IS
SELECT XMLElement("osdm_ae:ContstraintType", CASE WHEN rownum>1 THEN ''
                                              ELSE 'Attribute Level'
                                              END).getClobVal()                                        c_type,
        XMLElement("osdm_ae:ALCConstraintName", a.attribute_name || 
                                                DECODE((SELECT DISTINCT(constraint_name)
                                                        FROM dmrs_check_constraints 
                                                        WHERE a.ovid = dataelement_ovid),NULL,'',
                                               ' / '|| (SELECT  DISTINCT(constraint_name) 
                                                        FROM dmrs_check_constraints 
                                                        WHERE a.ovid = dataelement_ovid))).getClobVal() c_name,
        Gather_Constraint_Details_XML(a.ovid, 'osdm_ae')                                                c_details,
        COUNT(a.attribute_name) over()                                                                  total_row_count
 FROM   dmrs_attributes a
 WHERE a.container_ovid = v_e_ovid
 AND  (a.ovid IN (SELECT dataelement_ovid FROM dmrs_avt) OR 
       a.ovid IN (SELECT dataelement_ovid FROM dmrs_value_ranges) OR 
       a.ovid IN (SELECT dataelement_ovid FROM dmrs_check_constraints));
rec_constraints cur_constraints%ROWTYPE;

BEGIN

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering data for all entities started ...');
  
  DBMS_LOB.CREATETEMPORARY(res, TRUE);

  DBMS_LOB.APPEND (res,'<osdm_ae:root xmlns:osdm_ae="osdm_ae">');
  
  FOR rec_general_data IN cur_general_data(v_model_ovid) LOOP

     DBMS_LOB.APPEND (res, rec_general_data.design_name);
     DBMS_LOB.APPEND (res, rec_general_data.version_date);
     
       DBMS_LOB.APPEND (res, '<osdm_ae:VersionComment>');
       DBMS_LOB.APPEND (res, '<osdm_ae:VersionCommentDetails>');
      
       -- Tokenize rows
       FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_general_data.comments||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                      FROM   dual
                      CONNECT BY REGEXP_INSTR(rec_general_data.comments||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
             SELECT XMLElement("osdm_ae:VersionCommentRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
             DBMS_LOB.APPEND (res, token_value);
          END LOOP;
         
       DBMS_LOB.APPEND (res, '</osdm_ae:VersionCommentDetails>');
       DBMS_LOB.APPEND (res, '</osdm_ae:VersionComment>');       
     
     
     DBMS_LOB.APPEND (res, rec_general_data.model_name);
  END LOOP;
 
   FOR rec_all_entities IN cur_all_entities(v_model_ovid) LOOP

      IF (cur_all_entities%ROWCOUNT = 1) THEN
           DBMS_LOB.APPEND (res,'<osdm_ae:EntitiesCollection>');
      END IF;

      DBMS_LOB.APPEND (res,'<osdm_ae:EntityDetails>');

      -- Mapped tables
      FOR rec_mapped_tables IN cur_mapped_tables(rec_all_entities.entity_ovid) LOOP
        IF (cur_mapped_tables%ROWCOUNT = 1) THEN
          DBMS_LOB.APPEND (res,'<osdm_ae:MappedTablesCollection>');
        END IF;

         DBMS_LOB.APPEND (res, '<osdm_ae:MappedTablesDetails>');
         DBMS_LOB.APPEND (res, rec_mapped_tables.table_name);
         DBMS_LOB.APPEND (res, '</osdm_ae:MappedTablesDetails>');

        IF (cur_mapped_tables%ROWCOUNT = rec_mapped_tables.total_row_count) THEN
         DBMS_LOB.APPEND (res, '</osdm_ae:MappedTablesCollection>');
        END IF;
      END LOOP;

      -- Description / Notes
      IF (reportTemplate.reportType = 0 OR reportTemplate.useDescriptionInfo = 1) THEN
         
         DBMS_LOB.APPEND (res, '<osdm_ae:DescriptionNotes>');
         
         SELECT NVL(
                  (SELECT t.text comments_in_rdbms
                   FROM   dmrs_large_text t
                   WHERE  t.ovid = rec_all_entities.entity_ovid
                   AND    t.type='Comments'),
                  (SELECT t.text comments_in_rdbms
                   FROM   dmrs_large_text t
                   WHERE  t.ovid = rec_all_entities.entity_ovid
                   AND    t.type='CommentsInRDBMS'))                      description, 
                  (SELECT t.text comments_in_rdbms
                   FROM   dmrs_large_text t
                   WHERE  t.ovid = rec_all_entities.entity_ovid
                  AND    t.type='Note')                                   notes
         INTO   v_description, 
                v_notes
         FROM dual;
         
         DBMS_LOB.APPEND (res, '<osdm_ae:Description>');
         DBMS_LOB.APPEND (res, '<osdm_ae:DescriptionDetails>');
         -- Tokenize rows
         FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_description||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                        FROM   dual
                        CONNECT BY REGEXP_INSTR(v_description||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
             SELECT XMLElement("osdm_ae:DescriptionRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
             DBMS_LOB.APPEND (res, token_value);
         END LOOP;
         DBMS_LOB.APPEND (res, '</osdm_ae:DescriptionDetails>');
         DBMS_LOB.APPEND (res, '</osdm_ae:Description>');
         
         DBMS_LOB.APPEND (res, '<osdm_ae:Notes>');
         DBMS_LOB.APPEND (res, '<osdm_ae:NotesDetails>');
         -- Tokenize rows
         FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_notes||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                        FROM   dual
                        CONNECT BY REGEXP_INSTR(v_notes||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
             SELECT XMLElement("osdm_ae:NoteRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
             DBMS_LOB.APPEND (res, token_value);
         END LOOP;
         DBMS_LOB.APPEND (res, '</osdm_ae:NotesDetails>');
         DBMS_LOB.APPEND (res, '</osdm_ae:Notes>');
         DBMS_LOB.APPEND (res, '</osdm_ae:DescriptionNotes>');

      END IF;
            
      DBMS_LOB.APPEND (res, rec_all_entities.entity_name);
      DBMS_LOB.APPEND (res, rec_all_entities.pref_abbreviation);      
      DBMS_LOB.APPEND (res, rec_all_entities.classification_type_name);
      DBMS_LOB.APPEND (res, rec_all_entities.object_type_name);
      DBMS_LOB.APPEND (res, rec_all_entities.super_type);
      DBMS_LOB.APPEND (res, rec_all_entities.table_synonyms);

      IF (reportTemplate.reportType = 0 OR reportTemplate.useQuantitativeInfo = 1) THEN
        DBMS_LOB.APPEND (res, '<osdm_ae:QuantitativeInfoCollection>');
        DBMS_LOB.APPEND (res, rec_all_entities.number_of_attributes);
        DBMS_LOB.APPEND (res, rec_all_entities.number_rows_min);
        DBMS_LOB.APPEND (res, rec_all_entities.number_rows_max);
        DBMS_LOB.APPEND (res, rec_all_entities.expected_number_of_rows);
        DBMS_LOB.APPEND (res, rec_all_entities.expected_growth);
        DBMS_LOB.APPEND (res, rec_all_entities.growth_interval);
        DBMS_LOB.APPEND (res, '</osdm_ae:QuantitativeInfoCollection>');
      END IF;
      
      -- Attributes
      IF (reportTemplate.reportType = 0 OR reportTemplate.useEntityAttributes = 1) THEN
        FOR rec_attributes IN cur_attributes(rec_all_entities.entity_ovid) LOOP

           IF (cur_attributes%ROWCOUNT = 1) THEN
             DBMS_LOB.APPEND (res,'<osdm_ae:AttributesCollection>');
           END IF;

             DBMS_LOB.APPEND (res, '<osdm_ae:AttributeDetails>');
             DBMS_LOB.APPEND (res, rec_attributes.seq);
             DBMS_LOB.APPEND (res, rec_attributes.attr_name);
             DBMS_LOB.APPEND (res, rec_attributes.pk);
             DBMS_LOB.APPEND (res, rec_attributes.fk);
             DBMS_LOB.APPEND (res, rec_attributes.m);
             IF (INSTR(LOWER(rec_attributes.data_type),'unknown') = 0) THEN
                DBMS_LOB.APPEND (res, rec_attributes.data_type);
             ELSE
                SELECT XMLElement("osdm_ae:DataType", '').getClobVal() INTO token_value FROM dual;
                DBMS_LOB.APPEND (res, token_value);
             END IF;
             DBMS_LOB.APPEND (res, rec_attributes.dt_kind);
             DBMS_LOB.APPEND (res, rec_attributes.domain_name);
             DBMS_LOB.APPEND (res, rec_attributes.formula);
             DBMS_LOB.APPEND (res, rec_attributes.pref_abbr);
             DBMS_LOB.APPEND (res, rec_attributes.synonyms);
             DBMS_LOB.APPEND (res,'</osdm_ae:AttributeDetails>');

           IF (cur_attributes%ROWCOUNT = rec_attributes.total_row_count) THEN
            DBMS_LOB.APPEND (res, '</osdm_ae:AttributesCollection>');
           END IF;
        END LOOP;
      END IF;

      -- Attribute Comments
      IF (reportTemplate.reportType = 0 OR reportTemplate.useEntityAttributesComments = 1) THEN
        FOR rec_attributes_comments IN cur_attributes_comments(rec_all_entities.entity_ovid) LOOP
           IF (cur_attributes_comments%ROWCOUNT = 1) THEN
             DBMS_LOB.APPEND (res,'<osdm_ae:AttributesCommentsCollection>');
           END IF;

             DBMS_LOB.APPEND (res, '<osdm_ae:AttributeCommentsDetails>');
             DBMS_LOB.APPEND (res, rec_attributes_comments.seq);
             DBMS_LOB.APPEND (res, rec_attributes_comments.attribute_name);

             DBMS_LOB.APPEND (res, '<osdm_ae:AttributeDescription>');
             DBMS_LOB.APPEND (res, '<osdm_ae:AttributeDescriptionDetails>');
             -- Tokenize rows
             FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_attributes_comments.description||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                            FROM   dual
                            CONNECT BY REGEXP_INSTR(rec_attributes_comments.description||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
                 SELECT XMLElement("osdm_ae:AttributeDescriptionRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
                 DBMS_LOB.APPEND (res, token_value);
             END LOOP;
             DBMS_LOB.APPEND (res, '</osdm_ae:AttributeDescriptionDetails>');
             DBMS_LOB.APPEND (res, '</osdm_ae:AttributeDescription>');

             DBMS_LOB.APPEND (res, '<osdm_ae:AttributeNotes>');
             DBMS_LOB.APPEND (res, '<osdm_ae:AttributeNotesDetails>');
             -- Tokenize rows
             FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_attributes_comments.notes||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                            FROM   dual
                            CONNECT BY REGEXP_INSTR(rec_attributes_comments.notes||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
                            
                 SELECT XMLElement("osdm_ae:AttributeNoteRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
                 DBMS_LOB.APPEND (res, token_value);
             END LOOP;
             DBMS_LOB.APPEND (res, '</osdm_ae:AttributeNotesDetails>');
             DBMS_LOB.APPEND (res, '</osdm_ae:AttributeNotes>');

             DBMS_LOB.APPEND (res,'</osdm_ae:AttributeCommentsDetails>');

           IF (cur_attributes_comments%ROWCOUNT = rec_attributes_comments.total_row_count) THEN
             DBMS_LOB.APPEND (res, '</osdm_ae:AttributesCommentsCollection>');
           END IF;
        END LOOP;
      END IF;

      -- Constraints
      IF (reportTemplate.reportType = 0 OR reportTemplate.useEntityConstraints = 1) THEN
        FOR rec_constraints IN cur_constraints(rec_all_entities.entity_ovid) LOOP
           IF (cur_constraints%ROWCOUNT = 1) THEN
              DBMS_LOB.APPEND (res,'<osdm_ae:ConstraintsCollection>');
           END IF;

             DBMS_LOB.APPEND (res,'<osdm_ae:ConstraintDetails>');
             DBMS_LOB.APPEND (res,rec_constraints.c_type);
             DBMS_LOB.APPEND (res,rec_constraints.c_name);
             DBMS_LOB.APPEND (res,rec_constraints.c_details);
             DBMS_LOB.APPEND (res,'</osdm_ae:ConstraintDetails>');

           IF (cur_constraints%ROWCOUNT = rec_constraints.total_row_count) THEN
               DBMS_LOB.APPEND (res,'</osdm_ae:ConstraintsCollection>');
           END IF;
        END LOOP;
      END IF;

      -- Identifiers
      IF (reportTemplate.reportType = 0 OR reportTemplate.useEntityIdentifiers = 1) THEN
        FOR rec_identifiers IN cur_identifiers(rec_all_entities.entity_ovid) LOOP
           IF (cur_identifiers%ROWCOUNT = 1) THEN
             DBMS_LOB.APPEND (res, '<osdm_ae:IdentifiersCollection>');
           END IF;
          
             DBMS_LOB.APPEND (res, '<osdm_ae:IdentifierDetails>');
             DBMS_LOB.APPEND (res, rec_identifiers.nn);
             DBMS_LOB.APPEND (res, rec_identifiers.pi);
             DBMS_LOB.APPEND (res, rec_identifiers.element_name);
             DBMS_LOB.APPEND (res, rec_identifiers.type);
             DBMS_LOB.APPEND (res, rec_identifiers.source_label);
             DBMS_LOB.APPEND (res, rec_identifiers.target_label);
             DBMS_LOB.APPEND (res, '</osdm_ae:IdentifierDetails>');
        
           IF (cur_identifiers%ROWCOUNT = rec_identifiers.total_row_count) THEN
              DBMS_LOB.APPEND (res, '</osdm_ae:IdentifiersCollection>');
           END IF;
        END LOOP;
      END IF;

      -- Relationships
      IF (reportTemplate.reportType = 0 OR reportTemplate.useEntityRelationships = 1) THEN
        -- Total count of relationships
        SELECT COUNT(1)
        INTO   v_rel_total_count
        FROM (
         SELECT r.ovid
         FROM   dmrs_relationships r,
                dmrs_entities      e
         WHERE  r.source_ovid  = e.ovid
         AND    e.ovid         = rec_all_entities.entity_ovid
         UNION ALL
         SELECT r.ovid
         FROM   dmrs_relationships r,
                dmrs_entities      e
         WHERE  r.target_ovid  = e.ovid
         AND    e.ovid         = rec_all_entities.entity_ovid);

        FOR rec_relationships IN cur_relationships(rec_all_entities.entity_ovid) LOOP
           IF (cur_relationships%ROWCOUNT = 1) THEN
              DBMS_LOB.APPEND (res, '<osdm_ae:RelationshipsCollection>');
           END IF;

              DBMS_LOB.APPEND (res, '<osdm_ae:RelationshipDetails>');
              DBMS_LOB.APPEND (res, rec_relationships.source_name);
              DBMS_LOB.APPEND (res, rec_relationships.source_role);
              DBMS_LOB.APPEND (res, rec_relationships.target_role);
              DBMS_LOB.APPEND (res, rec_relationships.in_arc);
              DBMS_LOB.APPEND (res, rec_relationships.cardinality);
              DBMS_LOB.APPEND (res, rec_relationships.dominant_role);
              DBMS_LOB.APPEND (res, rec_relationships.identifying);
              DBMS_LOB.APPEND (res, rec_relationships.transferable);
              DBMS_LOB.APPEND (res, '</osdm_ae:RelationshipDetails>');
        
           IF (cur_relationships%ROWCOUNT = v_rel_total_count) THEN
              DBMS_LOB.APPEND (res, '</osdm_ae:RelationshipsCollection>');
           END IF;
        
        END LOOP;
      END IF;

      -- Incoming Processes
      IF (reportTemplate.reportType = 0 OR reportTemplate.useEntityIncomingProcesses = 1) THEN
        FOR rec_incoming_processes IN cur_incoming_processes(rec_all_entities.entity_ovid) LOOP
           IF (cur_incoming_processes%ROWCOUNT = 1) THEN
             DBMS_LOB.APPEND (res, '<osdm_ae:IncomingProcessesCollection>');
           END IF;
             DBMS_LOB.APPEND (res, '<osdm_ae:IncomingProcessDetails>');
             DBMS_LOB.APPEND (res, rec_incoming_processes.ipr_name);
             DBMS_LOB.APPEND (res, rec_incoming_processes.ipr_flow_name);
             DBMS_LOB.APPEND (res, rec_incoming_processes.ipr_crud_code);
             DBMS_LOB.APPEND (res, rec_incoming_processes.ipr_dfd_name);
             DBMS_LOB.APPEND (res, '</osdm_ae:IncomingProcessDetails>');
           IF (cur_incoming_processes%ROWCOUNT = rec_incoming_processes.total_row_count) THEN
             DBMS_LOB.APPEND (res, '</osdm_ae:IncomingProcessesCollection>');
           END IF;
        END LOOP;
      END IF;
      -- Outgoing Processes
      IF (reportTemplate.reportType = 0 OR reportTemplate.useEntityOutgoingProcesses = 1) THEN
        FOR rec_outgoing_processes IN cur_outgoing_processes(rec_all_entities.entity_ovid) LOOP
           IF (cur_outgoing_processes%ROWCOUNT = 1) THEN
             DBMS_LOB.APPEND (res, '<osdm_ae:OutgoingProcessesCollection>');
           END IF;
             DBMS_LOB.APPEND (res, '<osdm_ae:OugoingProcessDetails>');
             DBMS_LOB.APPEND (res, rec_outgoing_processes.opr_name);
             DBMS_LOB.APPEND (res, rec_outgoing_processes.opr_flow_name);
             DBMS_LOB.APPEND (res, rec_outgoing_processes.opr_crud_code);
             DBMS_LOB.APPEND (res, rec_outgoing_processes.opr_dfd_name);
             DBMS_LOB.APPEND (res, '</osdm_ae:OugoingProcessDetails>');
           IF (cur_outgoing_processes%ROWCOUNT = rec_outgoing_processes.total_row_count) THEN
             DBMS_LOB.APPEND (res, '</osdm_ae:OutgoingProcessesCollection>');
           END IF;
        END LOOP;
      END IF;

      DBMS_LOB.APPEND (res,'</osdm_ae:EntityDetails>');

      IF (cur_all_entities%ROWCOUNT = rec_all_entities.total_row_count) THEN
         DBMS_LOB.APPEND (res,'</osdm_ae:EntitiesCollection>');
      END IF;

   END LOOP;

  DBMS_LOB.APPEND (res,'</osdm_ae:root>');

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering data for all entities ended');  

RETURN res;
  
 EXCEPTION
 WHEN others THEN
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_AllEntities_Data Exception : ' || SQLERRM);  
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_AllEntities_Data Exception : ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
  RETURN res;
 
END Gather_AllEntities_Data;

FUNCTION Gather_Glossary_Data(v_glossary_ovid IN VARCHAR2) RETURN CLOB IS 

res         CLOB;
token_value CLOB;

CURSOR cur_glossary(v_g_ovid IN VARCHAR2) IS
 SELECT  /*+ index(g GLOSSARIES_OVID_IDX) */
         XMLElement("osdm_g:GlossaryName", g.glossary_name).getClobVal()                                      glossary_name,
         g.description                                                                                        description,
         XMLElement("osdm_g:FileName", g.file_name).getStringVal()                                            file_name,
         XMLElement("osdm_g:IncompleteModifiers", DECODE(g.incomplete_modifiers,'N','','Y')).getStringVal()   inc_modifiers,
         XMLElement("osdm_g:CaseSensitive", DECODE(g.case_sensitive,'N','','Y')).getStringVal()               case_sensitive,
         XMLElement("osdm_g:UniqueAbbreviations", DECODE(g.unique_abbrevs,'N','','Y')).getStringVal()         unique_abbreviations,
         XMLElement("osdm_g:SeparatorType", g.separator_type).getStringVal()                                  separator_type,
         XMLElement("osdm_g:SeparatorChar", g.separator_char).getStringVal()                                  separator_char
 FROM    dmrs_glossaries g
 WHERE   g.glossary_ovid = v_g_ovid;
rec_glossary cur_glossary%ROWTYPE;

CURSOR cur_glossary_words(v_g_ovid IN VARCHAR2) IS
 SELECT /*+ index(g GLOSSARIES_OVID_IDX) */
        XMLElement("osdm_g:TermName", gt.term_name).getClobVal()                            term_name,
        XMLElement("osdm_g:Plural", gt.plural).getClobVal()                                 plural,
        XMLElement("osdm_g:Abbreviation", gt.abbrev).getClobVal()                           abbr,
        XMLElement("osdm_g:AltAbbreviation", gt.alt_abbrev).getClobVal()                    alt_abbr,
        XMLElement("osdm_g:P", DECODE(gt.prime_word,'N','',gt.prime_word)).getClobVal()     p_word,
        XMLElement("osdm_g:C", DECODE(gt.class_word,'N','',gt.class_word)).getClobVal()     c_word,
        XMLElement("osdm_g:M", DECODE(gt.modifier,'N','',gt.modifier)).getClobVal()         modifier,
        XMLElement("osdm_g:Q", DECODE(gt.qualifier,'N','',gt.qualifier)).getClobVal()       qualifier,
        gt.short_description                                                                description,
        COUNT(gt.term_name) over() total_row_count
 FROM   dmrs_glossaries g,
        dmrs_glossary_terms gt
 WHERE  g.glossary_ovid = gt.glossary_ovid
 AND    g.glossary_ovid = v_g_ovid;
rec_glossary_words cur_glossary_words%ROWTYPE;

BEGIN

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering glossary data started ...');
 
  DBMS_LOB.CREATETEMPORARY(res, TRUE);
  DBMS_LOB.APPEND (res,'<osdm_g:root xmlns:osdm_g="osdm_g">');
  
  FOR rec_glossary IN cur_glossary(v_glossary_ovid) LOOP
  
     DBMS_LOB.APPEND (res, rec_glossary.glossary_name);
  
     DBMS_LOB.APPEND (res, '<osdm_g:Description>');
     DBMS_LOB.APPEND (res, '<osdm_g:DescriptionDetails>');
     -- Tokenize rows
     FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_glossary.description||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                    FROM   dual
                    CONNECT BY REGEXP_INSTR(rec_glossary.description||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
         SELECT XMLElement("osdm_g:DescriptionRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
         DBMS_LOB.APPEND (res, token_value);
     END LOOP;
     DBMS_LOB.APPEND (res, '</osdm_g:DescriptionDetails>');
     DBMS_LOB.APPEND (res, '</osdm_g:Description>');       

     DBMS_LOB.APPEND (res, rec_glossary.file_name);
     DBMS_LOB.APPEND (res, rec_glossary.inc_modifiers);
     DBMS_LOB.APPEND (res, rec_glossary.case_sensitive);
     DBMS_LOB.APPEND (res, rec_glossary.unique_abbreviations);
     DBMS_LOB.APPEND (res, rec_glossary.separator_type);
     DBMS_LOB.APPEND (res, rec_glossary.separator_char);
  END LOOP;

  FOR rec_glossary_words IN cur_glossary_words(v_glossary_ovid) LOOP
     IF (cur_glossary_words%ROWCOUNT = 1) THEN
       DBMS_LOB.APPEND (res, '<osdm_g:GlossaryCollection>');
     END IF;
       DBMS_LOB.APPEND (res, '<osdm_g:GlossaryDetail>');
       DBMS_LOB.APPEND (res, rec_glossary_words.term_name);
       DBMS_LOB.APPEND (res, rec_glossary_words.plural);
       DBMS_LOB.APPEND (res, rec_glossary_words.abbr);
       DBMS_LOB.APPEND (res, rec_glossary_words.alt_abbr);
       DBMS_LOB.APPEND (res, rec_glossary_words.p_word);
       DBMS_LOB.APPEND (res, rec_glossary_words.c_word);
       DBMS_LOB.APPEND (res, rec_glossary_words.modifier);
       DBMS_LOB.APPEND (res, rec_glossary_words.qualifier);

       DBMS_LOB.APPEND (res, '<osdm_g:SDescription>');
       DBMS_LOB.APPEND (res, '<osdm_g:SDescriptionDetails>');
       -- Tokenize rows
       FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_glossary_words.description||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                      FROM   dual
                      CONNECT BY REGEXP_INSTR(rec_glossary_words.description||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
           SELECT XMLElement("osdm_g:SDescriptionRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
           DBMS_LOB.APPEND (res, token_value);
       END LOOP;
       DBMS_LOB.APPEND (res, '</osdm_g:SDescriptionDetails>');
       DBMS_LOB.APPEND (res, '</osdm_g:SDescription>');       

       DBMS_LOB.APPEND (res, '</osdm_g:GlossaryDetail>');
     IF (cur_glossary_words%ROWCOUNT = rec_glossary_words.total_row_count) THEN
          DBMS_LOB.APPEND (res, '</osdm_g:GlossaryCollection>');
     END IF;
  END LOOP;

  DBMS_LOB.APPEND (res, '</osdm_g:root>');
  
  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering glossary data ended');
  
RETURN res;

 EXCEPTION
 WHEN others THEN
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_Glossary_Data Exception : ' || SQLERRM);  
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_Glossary_Data Exception : ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
  RETURN res;

END Gather_Glossary_Data;

FUNCTION Gather_SingleST_Data(v_str_type_ovid IN VARCHAR2, reportTemplate IN REPORT_TEMPLATE) RETURN CLOB IS 

res               CLOB;
token_value       CLOB;
v_description     CLOB;
v_notes           CLOB;
v_rel_total_count INTEGER;
v_seq             INTEGER := 1;
p_model_name      VARCHAR2(100) :='_';
v_model_name      VARCHAR2(100) :='';
p_table_name      VARCHAR2(100) :='_';
v_table_name      VARCHAR2(100) :='';
p_entity_name     VARCHAR2(100) :='_';
v_entity_name     VARCHAR2(100) :='';

 -- General data
CURSOR cur_general_data(v_st_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_s_st:DesignName",d.design_name).getClobVal()                                        design_name,
        XMLElement("osdm_s_st:VersionDate",TO_CHAR(d.date_published,'dd.mm.yyyy hh24:mi:ss')).getClobVal()   version_date,
        d.version_comments                                                                                   comments,
        XMLElement("osdm_s_st:ModelName",m.model_name).getClobVal()                                          model_name
 FROM   dmrs_designs d, 
        dmrs_models m,
        dmrs_structured_types st
 WHERE  d.design_ovid = m.design_ovid
 AND    st.model_ovid = m.model_ovid
 AND    st.structured_type_ovid = v_st_ovid;
rec_general_data cur_general_data%ROWTYPE;

-- Structured Type General Data
CURSOR cur_st(v_st_ovid IN VARCHAR2) IS
SELECT XMLElement("osdm_s_st:STName",st.structured_type_name).getClobVal()                                                                                     stName,
       XMLElement("osdm_s_st:STSuperType",(SELECT st1.structured_type_name 
                                           FROM  dmrs_structured_types st1 
                                           WHERE st.super_type_ovid = st1.structured_type_ovid)).getClobVal()                                                  super_type
FROM   dmrs_structured_types st
WHERE  st.structured_type_ovid = v_st_ovid;
rec_st cur_st%ROWTYPE;

--Attributes
CURSOR cur_st_attr(v_st_ovid IN VARCHAR2) IS
SELECT  XMLElement("osdm_s_st:AttributeName", sta.attribute_name).getClobVal()                                                                                 attr_name,
        XMLElement("osdm_s_st:M",DECODE(sta.mandatory,'N','','Y')).getClobVal()                                                                                m,
        XMLElement("osdm_s_st:DataTypeKind",DECODE(sta.datatype_kind,                                                                                           
                                                 'Domain',         'DOM',
                                                 'Logical Type',   'LT',
                                                 'Distinct Type',  'DT',
                                                 'Ref Struct Type','RST',
                                                 'Structured Type','ST',
                                                 'Collection Type','CT')
                  ).getClobVal()                                                                                                                               dt_kind,
         XMLElement("osdm_s_st:DataType", 
            DECODE(sta.datatype_kind, 
                  'Domain', sta.type_name ||' '||
                           DECODE (NVL(sta.t_size,''),'',
                              DECODE(NVL(sta.t_scale,0),0,
                                 DECODE(NVL(sta.t_precision,0),0,null,'('|| DECODE(NVL(sta.t_precision,0),0,null,sta.t_precision) ||')'),
                                   '('|| DECODE(NVL(sta.t_precision,0),0,null,sta.t_precision) || ',' || DECODE(NVL(sta.t_scale,0),0,null,sta.t_scale)||')'),
                                   '('||TRIM(DECODE(sta.t_size,'',null,sta.t_size||' '||sta.char_units ))||')'),
                   'Logical Type', sta.type_name  ||' '|| 
                           DECODE (NVL(sta.t_size,''),'',
                              DECODE(NVL(sta.t_scale,0),0,
                                 DECODE(NVL(sta.t_precision,0),0,null,'('|| DECODE(NVL(sta.t_precision,0),0,null,sta.t_precision) ||')'),
                                   '('|| DECODE(NVL(sta.t_precision,0),0,null,sta.t_precision) || ',' || DECODE(NVL(sta.t_scale,0),0,null,sta.t_scale)||')'),
                                   '('||TRIM(DECODE(sta.t_size,'',null,sta.t_size||' '||sta.char_units ))||')')
            )).getClobVal()                                                                                                                                    data_type,
        XMLElement("osdm_s_st:DomainName",DECODE(sta.domain_name,'Unknown',null,sta.domain_name)).getClobVal()                                                 domain_name,
      COUNT(sta.attribute_name) over()                                                                                                                         total_row_count
FROM  dmrs_struct_type_attrs sta,
      dmrs_structured_types st
WHERE sta.structured_type_ovid = st.structured_type_ovid
AND   st.structured_type_ovid = v_st_ovid;
rec_st_attr cur_st_attr%ROWTYPE;

-- Attributes Comments Data
CURSOR cur_attributes_comments(v_st_ovid IN VARCHAR2) IS
 SELECT a.attribute_name               attribute_name, 
        a.description                  description, 
        a.notes                        notes,
        COUNT(a.attribute_name) over() total_row_count
 FROM (
  SELECT XMLElement("osdm_s_st:AttributeCommentsName",a.attribute_name).getStringVal()   attribute_name,
         NVL(
        (SELECT t.text comments_in_rdbms
         FROM   dmrs_large_text t
         WHERE  t.ovid = a.attribute_ovid
         AND    t.type='Comments'),
        (SELECT t.text comments_in_rdbms
         FROM   dmrs_large_text t
         WHERE  t.ovid = a.attribute_ovid
         AND    t.type='CommentsInRDBMS'))  description, 
        (SELECT t.text comments_in_rdbms
         FROM   dmrs_large_text t
         WHERE  t.ovid = a.attribute_ovid
         AND    t.type='Note')              notes
  FROM   dmrs_struct_type_attrs a
  WHERE  a.structured_type_ovid = v_st_ovid
 ) a
 WHERE DBMS_LOB.getlength(description) > 0 OR DBMS_LOB.getlength(notes) > 0;
rec_attributes_comments cur_attributes_comments%ROWTYPE;

-- Methods
CURSOR  cur_st_methods(v_st_ovid IN VARCHAR2) IS
SELECT  XMLElement("osdm_s_st:MethodName", m.method_name).getClobVal()                           m_name,
        XMLElement("osdm_s_st:MethodConstructor", DECODE(m.constructor,'N','','Y')).getClobVal() m_constr,
        XMLElement("osdm_s_st:MethodOverriding", DECODE(m.overriding,'N','','Y')).getClobVal()   m_overriding,
        XMLElement("osdm_s_st:MethodOverridenMethod", m.overridden_method_name).getClobVal()     m_om_name,
        XMLElement("osdm_s_st:MethodReturnValue", 
        (SELECT sp.type_name  ||' '|| 
                DECODE (NVL(sp.t_size,''),'',
                 DECODE(NVL(sp.t_scale,0),0,
                  DECODE(NVL(sp.t_precision,0),0,null,'('|| DECODE(NVL(sp.t_precision,0),0,null,sp.t_precision) ||')'),
                  '('|| DECODE(NVL(sp.t_precision,0),0,null,sp.t_precision) || ',' || DECODE(NVL(sp.t_scale,0),0,null,sp.t_scale)||')'),
                  '('||TRIM(DECODE(sp.t_size,'',null,sp.t_size ))||')')
         FROM   dmrs_struct_type_method_pars sp 
         WHERE  return_value= 'Y'
         AND    sp.method_ovid = m.method_ovid)).getClobVal()                                    m_return_type,        
        COUNT(m.method_name) over()                                                              total_row_count,
        m.method_ovid                                                                            method_ovid
FROM dmrs_struct_type_methods m,
     dmrs_structured_types st
WHERE m.structured_type_ovid = st.structured_type_ovid
AND   st.structured_type_ovid = v_st_ovid;
rec_st_methods cur_st_methods%ROWTYPE;

-- Method params
CURSOR cur_st_methods_p(v_m_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_s_st:ParameterName", parameter_name).getClobVal()  param_name,
        --XMLElement("osdm_s_st:ParameterType", type_name).getClobVal()       param_type,
        XMLElement("osdm_s_st:ParameterType", 
        type_name  ||' '|| 
                DECODE (NVL(t_size,0),0,
                 DECODE(NVL(t_scale,0),0,
                  DECODE(NVL(t_precision,0),0,null,'('|| DECODE(NVL(t_precision,0),0,null,t_precision) ||')'),
                  '('|| DECODE(NVL(t_precision,0),0,null,t_precision) || ',' || DECODE(NVL(t_scale,0),0,null,t_scale)||')'),
                  '('||TRIM(DECODE(t_size,0,null,t_size ))||')')
        ).getClobVal()       param_type,
        COUNT(parameter_name) over()                                        total_row_count
 FROM   dmrs_struct_type_method_pars
 WHERE  method_ovid = v_m_ovid
 AND    return_value = 'N'
 ORDER BY seq;
rec_st_methods_p cur_st_methods_p%ROWTYPE;

-- Used In tables
CURSOR cur_used_in_tables(v_st_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_s_st:ModelName", m.model_name).getClobVal()     model_name,
        XMLElement("osdm_s_st:TableName", t.table_name).getClobVal()     table_name,
        XMLElement("osdm_s_st:ColumnName", c.column_name).getClobVal()   column_name,
        COUNT(m.model_name) over()                                       total_row_count
 FROM   dmrs_tables t,
        dmrs_columns c,
        dmrs_structured_types st,
        dmrs_models  m
 WHERE  t.ovid = c.container_ovid
 AND    c.structured_type_ovid = st.structured_type_ovid
 AND    m.model_ovid = t.model_ovid
 AND    c.datatype_kind = 'Structured Type'
 AND    st.structured_type_ovid = v_st_ovid
 ORDER BY m.model_name,
          t.table_name,
          c.column_name;
rec_used_in_tables cur_used_in_tables%ROWTYPE;

-- Used In entities
CURSOR cur_used_in_entities(v_st_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_s_st:EntityName", e.entity_name).getClobVal()        entity_name,
        XMLElement("osdm_s_st:AttributeName", a.attribute_name).getClobVal()  attribute_name,
        COUNT(e.entity_name) over()                                           total_row_count
 FROM   dmrs_entities e,
        dmrs_attributes a,
        dmrs_structured_types st
 WHERE  e.ovid = a.container_ovid
 AND    a.structured_type_ovid = st.structured_type_ovid
 AND    a.datatype_kind = 'Structured Type'
 AND    st.structured_type_ovid = v_st_ovid
 ORDER BY e.entity_name,
          a.attribute_name;
rec_used_in_entities cur_used_in_entities%ROWTYPE;

BEGIN

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering data for single structured type started ...');
  
  DBMS_LOB.CREATETEMPORARY(res, TRUE);

  DBMS_LOB.APPEND (res,'<osdm_s_st:root xmlns:osdm_s_st="osdm_s_st">');
  
  FOR rec_general_data IN cur_general_data(v_str_type_ovid) LOOP

     DBMS_LOB.APPEND (res, rec_general_data.design_name);
     DBMS_LOB.APPEND (res, rec_general_data.version_date);
     
       DBMS_LOB.APPEND (res, '<osdm_s_st:VersionComment>');
       DBMS_LOB.APPEND (res, '<osdm_s_st:VersionCommentDetails>');
      
       -- Tokenize rows
       FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_general_data.comments||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                      FROM   dual
                      CONNECT BY REGEXP_INSTR(rec_general_data.comments||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
             SELECT XMLElement("osdm_s_st:VersionCommentRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
             DBMS_LOB.APPEND (res, token_value);
          END LOOP;
         
       DBMS_LOB.APPEND (res, '</osdm_s_st:VersionCommentDetails>');
       DBMS_LOB.APPEND (res, '</osdm_s_st:VersionComment>');       
     
     DBMS_LOB.APPEND (res, rec_general_data.model_name);
  END LOOP;
  
   -- Description / Notes
   IF (reportTemplate.reportType = 0 OR reportTemplate.useDescriptionInfo = 1) THEN

     DBMS_LOB.APPEND (res, '<osdm_s_st:DescriptionNotes>');
     
     SELECT 
           NVL(
              (SELECT t.text comments_in_rdbms
               FROM   dmrs_large_text t
               WHERE  t.ovid = v_str_type_ovid
               AND    t.type='Comments'),
              (SELECT t.text comments_in_rdbms
               FROM   dmrs_large_text t
               WHERE  t.ovid = v_str_type_ovid
               AND    t.type='CommentsInRDBMS'))        description, 
              (SELECT t.text comments_in_rdbms
               FROM   dmrs_large_text t
               WHERE  t.ovid = v_str_type_ovid
               AND    t.type='Note')                    notes
     INTO   v_description, 
            v_notes
     FROM  dual;
     
     DBMS_LOB.APPEND (res, '<osdm_s_st:Description>');
     DBMS_LOB.APPEND (res, '<osdm_s_st:DescriptionDetails>');
     -- Tokenize rows
     FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_description||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                    FROM   dual
                    CONNECT BY REGEXP_INSTR(v_description||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
         SELECT XMLElement("osdm_s_st:DescriptionRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
         DBMS_LOB.APPEND (res, token_value);
     END LOOP;
     DBMS_LOB.APPEND (res, '</osdm_s_st:DescriptionDetails>');
     DBMS_LOB.APPEND (res, '</osdm_s_st:Description>');
     
     DBMS_LOB.APPEND (res, '<osdm_s_st:Notes>');
     DBMS_LOB.APPEND (res, '<osdm_s_st:NotesDetails>');
     -- Tokenize rows
     FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_notes||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                    FROM   dual
                    CONNECT BY REGEXP_INSTR(v_notes||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
         SELECT XMLElement("osdm_s_st:NoteRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
         DBMS_LOB.APPEND (res, token_value);
     END LOOP;
     
     DBMS_LOB.APPEND (res, '</osdm_s_st:NotesDetails>');
     DBMS_LOB.APPEND (res, '</osdm_s_st:Notes>');
     DBMS_LOB.APPEND (res, '</osdm_s_st:DescriptionNotes>');
     
   END IF;
   
   FOR rec_st IN cur_st(v_str_type_ovid) LOOP
      DBMS_LOB.APPEND (res, rec_st.stName);
      DBMS_LOB.APPEND (res, rec_st.super_type);
   END LOOP;
  
   -- Attributes
   IF (reportTemplate.reportType = 0 OR reportTemplate.useSTAttributes = 1) THEN
     FOR rec_st_attr IN cur_st_attr(v_str_type_ovid) LOOP
        IF (cur_st_attr%ROWCOUNT = 1) THEN
          DBMS_LOB.APPEND (res,'<osdm_s_st:AttributesCollection>');
        END IF;

          DBMS_LOB.APPEND (res, '<osdm_s_st:AttributeDetails>');
          DBMS_LOB.APPEND (res, '<osdm_s_st:Sequence>' || TO_CHAR(v_seq) || '</osdm_s_st:Sequence>');
          DBMS_LOB.APPEND (res, rec_st_attr.attr_name);
          DBMS_LOB.APPEND (res, rec_st_attr.m);
          IF (INSTR(LOWER(rec_st_attr.data_type),'unknown') = 0) THEN
             DBMS_LOB.APPEND (res, rec_st_attr.data_type);
          ELSE
             SELECT XMLElement("osdm_s_st:DataType", '').getClobVal() INTO token_value FROM dual;
             DBMS_LOB.APPEND (res, token_value);
          END IF;
          DBMS_LOB.APPEND (res, rec_st_attr.dt_kind);
          DBMS_LOB.APPEND (res, rec_st_attr.domain_name);
          DBMS_LOB.APPEND (res,'</osdm_s_st:AttributeDetails>');

        IF (cur_st_attr%ROWCOUNT = rec_st_attr.total_row_count) THEN
          DBMS_LOB.APPEND (res, '</osdm_s_st:AttributesCollection>');
        END IF;
        v_seq := v_seq + 1;
     END LOOP;
   END IF;
  
   v_seq := 1;
   -- Attribute Comments
   IF (reportTemplate.reportType = 0 OR reportTemplate.useSTAttributesComments = 1) THEN
     FOR rec_attributes_comments IN cur_attributes_comments(v_str_type_ovid) LOOP
        IF (cur_attributes_comments%ROWCOUNT = 1) THEN
          DBMS_LOB.APPEND (res,'<osdm_s_st:AttributesCommentsCollection>');
        END IF;

          DBMS_LOB.APPEND (res, '<osdm_s_st:AttributeCommentsDetails>');
          DBMS_LOB.APPEND (res, '<osdm_s_st:AttributeCommentsSequence>' || TO_CHAR(v_seq) || '</osdm_s_st:AttributeCommentsSequence>');
          DBMS_LOB.APPEND (res, rec_attributes_comments.attribute_name);

          DBMS_LOB.APPEND (res, '<osdm_s_st:AttributeDescription>');
          DBMS_LOB.APPEND (res, '<osdm_s_st:AttributeDescriptionDetails>');
          -- Tokenize rows
          FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_attributes_comments.description||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                         FROM   dual
                         CONNECT BY REGEXP_INSTR(rec_attributes_comments.description||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
              SELECT XMLElement("osdm_s_st:AttributeDescriptionRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
              DBMS_LOB.APPEND (res, token_value);
          END LOOP;
          DBMS_LOB.APPEND (res, '</osdm_s_st:AttributeDescriptionDetails>');
          DBMS_LOB.APPEND (res, '</osdm_s_st:AttributeDescription>');

          DBMS_LOB.APPEND (res, '<osdm_s_st:AttributeNotes>');
          DBMS_LOB.APPEND (res, '<osdm_s_st:AttributeNotesDetails>');
          -- Tokenize rows
          FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_attributes_comments.notes||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                         FROM   dual
                         CONNECT BY REGEXP_INSTR(rec_attributes_comments.notes||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
                         
              SELECT XMLElement("osdm_s_st:AttributeNoteRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
              DBMS_LOB.APPEND (res, token_value);
          END LOOP;
          DBMS_LOB.APPEND (res, '</osdm_s_st:AttributeNotesDetails>');
          DBMS_LOB.APPEND (res, '</osdm_s_st:AttributeNotes>');

          DBMS_LOB.APPEND (res,'</osdm_s_st:AttributeCommentsDetails>');

        IF (cur_attributes_comments%ROWCOUNT = rec_attributes_comments.total_row_count) THEN
          DBMS_LOB.APPEND (res, '</osdm_s_st:AttributesCommentsCollection>');
        END IF;
        v_seq := v_seq + 1;
     END LOOP;
   END IF;

   v_seq := 1;
   IF (reportTemplate.reportType = 0 OR reportTemplate.useSTMethods = 1) THEN
     FOR rec_st_methods IN cur_st_methods(v_str_type_ovid) LOOP
        IF (cur_st_methods%ROWCOUNT = 1) THEN
          DBMS_LOB.APPEND (res,'<osdm_s_st:MethodsCollection>');
        END IF;
            
            DBMS_LOB.APPEND (res, '<osdm_s_st:MethodDetails>');
            DBMS_LOB.APPEND (res, '<osdm_s_st:MethodSequence>' || TO_CHAR(v_seq) || '</osdm_s_st:MethodSequence>');
            DBMS_LOB.APPEND (res, rec_st_methods.m_name);
            DBMS_LOB.APPEND (res, rec_st_methods.m_constr);
            DBMS_LOB.APPEND (res, rec_st_methods.m_overriding);
            DBMS_LOB.APPEND (res, rec_st_methods.m_om_name);
            DBMS_LOB.APPEND (res, rec_st_methods.m_return_type);
            
            FOR rec_st_methods_p IN cur_st_methods_p(rec_st_methods.method_ovid) LOOP
               IF (cur_st_methods_p%ROWCOUNT = 1) THEN
                 DBMS_LOB.APPEND (res,'<osdm_s_st:MethodParametersCollection>');
               END IF;

                 DBMS_LOB.APPEND (res, '<osdm_s_st:MethodParameterDetails>');
                 DBMS_LOB.APPEND (res, rec_st_methods_p.param_name);
                 DBMS_LOB.APPEND (res, rec_st_methods_p.param_type);
                 DBMS_LOB.APPEND (res, '</osdm_s_st:MethodParameterDetails>');

               IF (cur_st_methods_p%ROWCOUNT = rec_st_methods_p.total_row_count) THEN
                 DBMS_LOB.APPEND (res, '</osdm_s_st:MethodParametersCollection>');
               END IF;
            END LOOP;       
           
            DBMS_LOB.APPEND (res, '</osdm_s_st:MethodDetails>');
            
        IF (cur_st_methods%ROWCOUNT = rec_st_methods.total_row_count) THEN
          DBMS_LOB.APPEND (res, '</osdm_s_st:MethodsCollection>');
        END IF;
        v_seq := v_seq + 1;
     END LOOP;
   END IF;

   -- Used in tables
   IF (reportTemplate.reportType = 0 OR reportTemplate.useSTUsedInTables = 1) THEN
     FOR rec_used_in_tables IN cur_used_in_tables(v_str_type_ovid) LOOP
        IF (cur_used_in_tables%ROWCOUNT = 1) THEN
           DBMS_LOB.APPEND (res,'<osdm_s_st:TablesCollection>');
        END IF;
           DBMS_LOB.APPEND (res,'<osdm_s_st:TableDetails>');

           v_model_name := rec_used_in_tables.model_name;
           IF (v_model_name != p_model_name) THEN
             DBMS_LOB.APPEND (res,v_model_name);
             p_model_name := v_model_name;
           ELSE
             DBMS_LOB.APPEND (res,'<osdm_s_st:ModelName></osdm_s_st:ModelName>');
           END IF;

           v_table_name := rec_used_in_tables.table_name;
           IF (v_table_name != p_table_name) THEN
           DBMS_LOB.APPEND (res,v_table_name);
             p_table_name := v_table_name;
           ELSE
             DBMS_LOB.APPEND (res,'<osdm_s_st:TableName></osdm_s_st:TableName>');
           END IF;

           DBMS_LOB.APPEND (res,rec_used_in_tables.column_name);
           DBMS_LOB.APPEND (res,'</osdm_s_st:TableDetails>');
        IF (cur_used_in_tables%ROWCOUNT = rec_used_in_tables.total_row_count) THEN
           DBMS_LOB.APPEND (res, '</osdm_s_st:TablesCollection>');
        END IF;
     END LOOP;
   END IF;

   -- Used in entities
   IF (reportTemplate.reportType = 0 OR reportTemplate.useSTUsedInEntities = 1) THEN
     FOR rec_used_in_entities IN cur_used_in_entities(v_str_type_ovid) LOOP
        IF (cur_used_in_entities%ROWCOUNT = 1) THEN
           DBMS_LOB.APPEND (res,'<osdm_s_st:EntitiesCollection>');
        END IF;
           DBMS_LOB.APPEND (res,'<osdm_s_st:EntityDetails>');
          
           v_entity_name := rec_used_in_entities.entity_name;
           IF (v_entity_name != p_entity_name) THEN
             DBMS_LOB.APPEND (res,v_entity_name);
             p_entity_name := v_entity_name;
           ELSE
             DBMS_LOB.APPEND (res,'<osdm_s_st:EntityName></osdm_s_st:EntityName>');
           END IF;

           DBMS_LOB.APPEND (res,rec_used_in_entities.attribute_name);
           DBMS_LOB.APPEND (res,'</osdm_s_st:EntityDetails>');
        IF (cur_used_in_entities%ROWCOUNT = rec_used_in_entities.total_row_count) THEN
           DBMS_LOB.APPEND (res, '</osdm_s_st:EntitiesCollection>');
        END IF;
     END LOOP;
   END IF;

  DBMS_LOB.APPEND (res,'</osdm_s_st:root>');

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering data for single structured type ended');  

RETURN res;
  
 EXCEPTION
 WHEN others THEN
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_SingleST_Data Exception : ' || SQLERRM);  
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_SingleST_Data Exception : ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
  RETURN res;
 
END Gather_SingleST_Data;

FUNCTION Gather_AllST_Data(v_model_ovid IN VARCHAR2, reportTemplate IN REPORT_TEMPLATE) RETURN CLOB IS 

res               CLOB;
v_notes           CLOB;
v_description     CLOB;
v_rel_total_count INTEGER;
token_value       CLOB;
v_seq             INTEGER := 1;
p_model_name      VARCHAR2(100) :='_';
v_model_name      VARCHAR2(100) :='';
p_table_name      VARCHAR2(100) :='_';
v_table_name      VARCHAR2(100) :='';
p_entity_name     VARCHAR2(100) :='_';
v_entity_name     VARCHAR2(100) :='';

-- General data
CURSOR cur_general_data(v_m_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_a_st:DesignName",d.design_name).getClobVal()                                        design_name,
        XMLElement("osdm_a_st:VersionDate",TO_CHAR(d.date_published,'dd.mm.yyyy hh24:mi:ss')).getClobVal()   version_date,
        d.version_comments                                                                                   comments,
        XMLElement("osdm_a_st:ModelName",m.model_name).getClobVal()                                          model_name
 FROM   dmrs_designs d, 
        dmrs_models m
 WHERE  d.design_ovid = m.design_ovid
 AND    m.model_ovid = v_model_ovid;
rec_general_data cur_general_data%ROWTYPE;

-- All structured types general data
CURSOR cur_all_st(v_m_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_a_st:STName",st.structured_type_name).getClobVal()                                    st_name,
        XMLElement("osdm_a_st:STSuperType",(SELECT st1.structured_type_name 
                                            FROM  dmrs_structured_types st1 
                                            WHERE st.super_type_ovid = st1.structured_type_ovid)).getClobVal() super_type,
        st.structured_type_ovid                                                                                st_ovid,

        COUNT(st.structured_type_name) over()                                                                  total_row_count
 FROM   dmrs_structured_types st
 WHERE  st.model_ovid = v_m_ovid
 ORDER BY st.structured_type_name;
rec_all_st cur_all_st%ROWTYPE;

--Attributes
CURSOR cur_st_attr(v_st_ovid IN VARCHAR2) IS
SELECT  XMLElement("osdm_a_st:AttributeName", sta.attribute_name).getClobVal()                                                                                 attr_name,
        XMLElement("osdm_a_st:M",DECODE(sta.mandatory,'N','','Y')).getClobVal()                                                                                m,
        XMLElement("osdm_a_st:DataTypeKind",DECODE(sta.datatype_kind,                                                                                           
                                                 'Domain',         'DOM',
                                                 'Logical Type',   'LT',
                                                 'Distinct Type',  'DT',
                                                 'Ref Struct Type','RST',
                                                 'Structured Type','ST',
                                                 'Collection Type','CT')
                  ).getClobVal()                                                                                                                               dt_kind,
         XMLElement("osdm_a_st:DataType", 
            DECODE(sta.datatype_kind, 
                  'Domain', sta.type_name ||' '||
                           DECODE (NVL(sta.t_size,''),'',
                              DECODE(NVL(sta.t_scale,0),0,
                                 DECODE(NVL(sta.t_precision,0),0,null,'('|| DECODE(NVL(sta.t_precision,0),0,null,sta.t_precision) ||')'),
                                   '('|| DECODE(NVL(sta.t_precision,0),0,null,sta.t_precision) || ',' || DECODE(NVL(sta.t_scale,0),0,null,sta.t_scale)||')'),
                                   '('||TRIM(DECODE(sta.t_size,'',null,sta.t_size||' '||sta.char_units ))||')'),
                   'Logical Type', sta.type_name  ||' '|| 
                           DECODE (NVL(sta.t_size,''),'',
                              DECODE(NVL(sta.t_scale,0),0,
                                 DECODE(NVL(sta.t_precision,0),0,null,'('|| DECODE(NVL(sta.t_precision,0),0,null,sta.t_precision) ||')'),
                                   '('|| DECODE(NVL(sta.t_precision,0),0,null,sta.t_precision) || ',' || DECODE(NVL(sta.t_scale,0),0,null,sta.t_scale)||')'),
                                   '('||TRIM(DECODE(sta.t_size,'',null,sta.t_size||' '||sta.char_units ))||')')
            )).getClobVal()                                                                                                                                    data_type,
        XMLElement("osdm_a_st:DomainName",DECODE(sta.domain_name,'Unknown',null,sta.domain_name)).getClobVal()                                                 domain_name,
      COUNT(sta.attribute_name) over()                                                                                                                         total_row_count
FROM  dmrs_struct_type_attrs sta,
      dmrs_structured_types st
WHERE sta.structured_type_ovid = st.structured_type_ovid
AND   st.structured_type_ovid = v_st_ovid;
rec_st_attr cur_st_attr%ROWTYPE;

-- Attributes Comments Data
CURSOR cur_attributes_comments(v_st_ovid IN VARCHAR2) IS
 SELECT a.attribute_name               attribute_name, 
        a.description                  description, 
        a.notes                        notes,
        COUNT(a.attribute_name) over() total_row_count
 FROM (
  SELECT XMLElement("osdm_a_st:AttributeCommentsName",a.attribute_name).getStringVal()   attribute_name,
         NVL(
        (SELECT t.text comments_in_rdbms
         FROM   dmrs_large_text t
         WHERE  t.ovid = a.attribute_ovid
         AND    t.type='Comments'),
        (SELECT t.text comments_in_rdbms
         FROM   dmrs_large_text t
         WHERE  t.ovid = a.attribute_ovid
         AND    t.type='CommentsInRDBMS'))  description, 
        (SELECT t.text comments_in_rdbms
         FROM   dmrs_large_text t
         WHERE  t.ovid = a.attribute_ovid
         AND    t.type='Note')              notes
  FROM   dmrs_struct_type_attrs a
  WHERE  a.structured_type_ovid = v_st_ovid
 ) a
 WHERE DBMS_LOB.getlength(description) > 0 OR DBMS_LOB.getlength(notes) > 0;
rec_attributes_comments cur_attributes_comments%ROWTYPE;

-- Methods
CURSOR  cur_st_methods(v_st_ovid IN VARCHAR2) IS
SELECT  XMLElement("osdm_a_st:MethodName", m.method_name).getClobVal()                           m_name,
        XMLElement("osdm_a_st:MethodConstructor", DECODE(m.constructor,'N','','Y')).getClobVal() m_constr,
        XMLElement("osdm_a_st:MethodOverriding", DECODE(m.overriding,'N','','Y')).getClobVal()   m_overriding,
        XMLElement("osdm_a_st:MethodOverridenMethod", m.overridden_method_name).getClobVal()     m_om_name,
        XMLElement("osdm_a_st:MethodReturnValue", 
        (SELECT sp.type_name  ||' '|| 
                DECODE (NVL(sp.t_size,''),'',
                 DECODE(NVL(sp.t_scale,0),0,
                  DECODE(NVL(sp.t_precision,0),0,null,'('|| DECODE(NVL(sp.t_precision,0),0,null,sp.t_precision) ||')'),
                  '('|| DECODE(NVL(sp.t_precision,0),0,null,sp.t_precision) || ',' || DECODE(NVL(sp.t_scale,0),0,null,sp.t_scale)||')'),
                  '('||TRIM(DECODE(sp.t_size,'',null,sp.t_size ))||')')
         FROM   dmrs_struct_type_method_pars sp 
         WHERE  return_value= 'Y'
         AND    sp.method_ovid = m.method_ovid)).getClobVal()                                    m_return_type,        
        COUNT(m.method_name) over()                                                              total_row_count,
        m.method_ovid                                                                            method_ovid
FROM dmrs_struct_type_methods m,
     dmrs_structured_types st
WHERE m.structured_type_ovid = st.structured_type_ovid
AND   st.structured_type_ovid = v_st_ovid;
rec_st_methods cur_st_methods%ROWTYPE;

-- Method params
CURSOR cur_st_methods_p(v_m_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_a_st:ParameterName", parameter_name).getClobVal()  param_name,
        XMLElement("osdm_a_st:ParameterType", 
        type_name  ||' '|| 
                DECODE (NVL(t_size,0),0,
                 DECODE(NVL(t_scale,0),0,
                  DECODE(NVL(t_precision,0),0,null,'('|| DECODE(NVL(t_precision,0),0,null,t_precision) ||')'),
                  '('|| DECODE(NVL(t_precision,0),0,null,t_precision) || ',' || DECODE(NVL(t_scale,0),0,null,t_scale)||')'),
                  '('||TRIM(DECODE(t_size,0,null,t_size ))||')')
        ).getClobVal()       param_type,
        COUNT(parameter_name) over()                                        total_row_count
 FROM   dmrs_struct_type_method_pars
 WHERE  method_ovid = v_m_ovid
 AND    return_value = 'N'
 ORDER BY seq;
rec_st_methods_p cur_st_methods_p%ROWTYPE;

-- Used In tables
CURSOR cur_used_in_tables(v_st_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_a_st:ModelName", m.model_name).getClobVal()     model_name,
        XMLElement("osdm_a_st:TableName", t.table_name).getClobVal()     table_name,
        XMLElement("osdm_a_st:ColumnName", c.column_name).getClobVal()   column_name,
        COUNT(m.model_name) over()                                       total_row_count
 FROM   dmrs_tables t,
        dmrs_columns c,
        dmrs_structured_types st,
        dmrs_models  m
 WHERE  t.ovid = c.container_ovid
 AND    c.structured_type_ovid = st.structured_type_ovid
 AND    m.model_ovid = t.model_ovid
 AND    c.datatype_kind = 'Structured Type'
 AND    st.structured_type_ovid = v_st_ovid
 ORDER BY m.model_name,
          t.table_name,
          c.column_name;
rec_used_in_tables cur_used_in_tables%ROWTYPE;

-- Used In entities
CURSOR cur_used_in_entities(v_st_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_a_st:EntityName", e.entity_name).getClobVal()        entity_name,
        XMLElement("osdm_a_st:AttributeName", a.attribute_name).getClobVal()  attribute_name,
        COUNT(e.entity_name) over()                                           total_row_count
 FROM   dmrs_entities e,
        dmrs_attributes a,
        dmrs_structured_types st
 WHERE  e.ovid = a.container_ovid
 AND    a.structured_type_ovid = st.structured_type_ovid
 AND    a.datatype_kind = 'Structured Type'
 AND    st.structured_type_ovid = v_st_ovid
 ORDER BY e.entity_name,
          a.attribute_name;
rec_used_in_entities cur_used_in_entities%ROWTYPE;

BEGIN

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering data for all structured types started ...');
  
  DBMS_LOB.CREATETEMPORARY(res, TRUE);

  DBMS_LOB.APPEND (res,'<osdm_a_st:root xmlns:osdm_a_st="osdm_a_st">');
  
  FOR rec_general_data IN cur_general_data(v_model_ovid) LOOP

     DBMS_LOB.APPEND (res, rec_general_data.design_name);
     DBMS_LOB.APPEND (res, rec_general_data.version_date);
     
       DBMS_LOB.APPEND (res, '<osdm_a_st:VersionComment>');
       DBMS_LOB.APPEND (res, '<osdm_a_st:VersionCommentDetails>');
      
       -- Tokenize rows
       FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_general_data.comments||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                      FROM   dual
                      CONNECT BY REGEXP_INSTR(rec_general_data.comments||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
             SELECT XMLElement("osdm_a_st:VersionCommentRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
             DBMS_LOB.APPEND (res, token_value);
          END LOOP;
         
       DBMS_LOB.APPEND (res, '</osdm_a_st:VersionCommentDetails>');
       DBMS_LOB.APPEND (res, '</osdm_a_st:VersionComment>');       

     DBMS_LOB.APPEND (res, rec_general_data.model_name);
  END LOOP;

  -- All structured types
  FOR rec_all_st IN cur_all_st(v_model_ovid) LOOP

      IF (cur_all_st%ROWCOUNT = 1) THEN
           DBMS_LOB.APPEND (res,'<osdm_a_st:STCollection>');
      END IF;
      
      DBMS_LOB.APPEND (res,'<osdm_a_st:STDetails>');

      -- Description / Notes
      IF (reportTemplate.reportType = 0 OR reportTemplate.useDescriptionInfo = 1) THEN
      
         DBMS_LOB.APPEND (res, '<osdm_a_st:DescriptionNotes>');
         
         SELECT 
               NVL(
                  (SELECT t.text comments_in_rdbms
                   FROM   dmrs_large_text t
                   WHERE  t.ovid = rec_all_st.st_ovid
                   AND    t.type='Comments'),
                  (SELECT t.text comments_in_rdbms
                   FROM   dmrs_large_text t
                   WHERE  t.ovid = rec_all_st.st_ovid
                   AND    t.type='CommentsInRDBMS'))        description, 
                  (SELECT t.text comments_in_rdbms
                   FROM   dmrs_large_text t
                   WHERE  t.ovid = rec_all_st.st_ovid
                   AND    t.type='Note')                    notes
         INTO   v_description, 
                v_notes
         FROM  dual;
         
         DBMS_LOB.APPEND (res, '<osdm_a_st:Description>');
         DBMS_LOB.APPEND (res, '<osdm_a_st:DescriptionDetails>');
         -- Tokenize rows
         FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_description||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                        FROM   dual
                        CONNECT BY REGEXP_INSTR(v_description||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
             SELECT XMLElement("osdm_a_st:DescriptionRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
             DBMS_LOB.APPEND (res, token_value);
         END LOOP;
         DBMS_LOB.APPEND (res, '</osdm_a_st:DescriptionDetails>');
         DBMS_LOB.APPEND (res, '</osdm_a_st:Description>');
         
         DBMS_LOB.APPEND (res, '<osdm_a_st:Notes>');
         DBMS_LOB.APPEND (res, '<osdm_a_st:NotesDetails>');
         -- Tokenize rows
         FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_notes||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                        FROM   dual
                        CONNECT BY REGEXP_INSTR(v_notes||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
             SELECT XMLElement("osdm_a_st:NoteRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
             DBMS_LOB.APPEND (res, token_value);
         END LOOP;
         
         DBMS_LOB.APPEND (res, '</osdm_a_st:NotesDetails>');
         DBMS_LOB.APPEND (res, '</osdm_a_st:Notes>');
         DBMS_LOB.APPEND (res, '</osdm_a_st:DescriptionNotes>');
         
      END IF;
      
      DBMS_LOB.APPEND (res, rec_all_st.st_name);
      DBMS_LOB.APPEND (res, rec_all_st.super_type);

      v_seq := 1;
      -- Attributes
      IF (reportTemplate.reportType = 0 OR reportTemplate.useSTAttributes = 1) THEN
        FOR rec_st_attr IN cur_st_attr(rec_all_st.st_ovid) LOOP
           IF (cur_st_attr%ROWCOUNT = 1) THEN
             DBMS_LOB.APPEND (res,'<osdm_a_st:AttributesCollection>');
           END IF;
      
             DBMS_LOB.APPEND (res, '<osdm_a_st:AttributeDetails>');
             DBMS_LOB.APPEND (res, '<osdm_a_st:Sequence>' || TO_CHAR(v_seq) || '</osdm_a_st:Sequence>');
             DBMS_LOB.APPEND (res, rec_st_attr.attr_name);
             DBMS_LOB.APPEND (res, rec_st_attr.m);
             IF (INSTR(LOWER(rec_st_attr.data_type),'unknown') = 0) THEN
                DBMS_LOB.APPEND (res, rec_st_attr.data_type);
             ELSE
                SELECT XMLElement("osdm_a_st:DataType", '').getClobVal() INTO token_value FROM dual;
                DBMS_LOB.APPEND (res, token_value);
             END IF;
             DBMS_LOB.APPEND (res, rec_st_attr.dt_kind);
             DBMS_LOB.APPEND (res, rec_st_attr.domain_name);
             DBMS_LOB.APPEND (res,'</osdm_a_st:AttributeDetails>');
      
           IF (cur_st_attr%ROWCOUNT = rec_st_attr.total_row_count) THEN
             DBMS_LOB.APPEND (res, '</osdm_a_st:AttributesCollection>');
           END IF;
           v_seq := v_seq + 1;
        END LOOP;
      END IF;

      v_seq := 1;
      -- Attribute Comments
      IF (reportTemplate.reportType = 0 OR reportTemplate.useSTAttributesComments = 1) THEN
        FOR rec_attributes_comments IN cur_attributes_comments(rec_all_st.st_ovid) LOOP
           IF (cur_attributes_comments%ROWCOUNT = 1) THEN
             DBMS_LOB.APPEND (res,'<osdm_a_st:AttributesCommentsCollection>');
           END IF;
      
             DBMS_LOB.APPEND (res, '<osdm_a_st:AttributeCommentsDetails>');
             DBMS_LOB.APPEND (res, '<osdm_a_st:AttributeCommentsSequence>' || TO_CHAR(v_seq) || '</osdm_a_st:AttributeCommentsSequence>');
             DBMS_LOB.APPEND (res, rec_attributes_comments.attribute_name);
      
             DBMS_LOB.APPEND (res, '<osdm_a_st:AttributeDescription>');
             DBMS_LOB.APPEND (res, '<osdm_a_st:AttributeDescriptionDetails>');
             -- Tokenize rows
             FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_attributes_comments.description||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                            FROM   dual
                            CONNECT BY REGEXP_INSTR(rec_attributes_comments.description||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
                 SELECT XMLElement("osdm_a_st:AttributeDescriptionRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
                 DBMS_LOB.APPEND (res, token_value);
             END LOOP;
             DBMS_LOB.APPEND (res, '</osdm_a_st:AttributeDescriptionDetails>');
             DBMS_LOB.APPEND (res, '</osdm_a_st:AttributeDescription>');
      
             DBMS_LOB.APPEND (res, '<osdm_a_st:AttributeNotes>');
             DBMS_LOB.APPEND (res, '<osdm_a_st:AttributeNotesDetails>');
             -- Tokenize rows
             FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_attributes_comments.notes||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                            FROM   dual
                            CONNECT BY REGEXP_INSTR(rec_attributes_comments.notes||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
                            
                 SELECT XMLElement("osdm_a_st:AttributeNoteRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
                 DBMS_LOB.APPEND (res, token_value);
             END LOOP;
             DBMS_LOB.APPEND (res, '</osdm_a_st:AttributeNotesDetails>');
             DBMS_LOB.APPEND (res, '</osdm_a_st:AttributeNotes>');
      
             DBMS_LOB.APPEND (res,'</osdm_a_st:AttributeCommentsDetails>');
      
           IF (cur_attributes_comments%ROWCOUNT = rec_attributes_comments.total_row_count) THEN
             DBMS_LOB.APPEND (res, '</osdm_a_st:AttributesCommentsCollection>');
           END IF;
           v_seq := v_seq + 1;
        END LOOP;
      END IF;

      v_seq := 1;
      IF (reportTemplate.reportType = 0 OR reportTemplate.useSTMethods = 1) THEN
        FOR rec_st_methods IN cur_st_methods(rec_all_st.st_ovid) LOOP
           IF (cur_st_methods%ROWCOUNT = 1) THEN
             DBMS_LOB.APPEND (res,'<osdm_a_st:MethodsCollection>');
           END IF;
               
               DBMS_LOB.APPEND (res, '<osdm_a_st:MethodDetails>');
               DBMS_LOB.APPEND (res, '<osdm_a_st:MethodSequence>' || TO_CHAR(v_seq) || '</osdm_a_st:MethodSequence>');
               DBMS_LOB.APPEND (res, rec_st_methods.m_name);
               DBMS_LOB.APPEND (res, rec_st_methods.m_constr);
               DBMS_LOB.APPEND (res, rec_st_methods.m_overriding);
               DBMS_LOB.APPEND (res, rec_st_methods.m_om_name);
               DBMS_LOB.APPEND (res, rec_st_methods.m_return_type);
               
               FOR rec_st_methods_p IN cur_st_methods_p(rec_st_methods.method_ovid) LOOP
                  IF (cur_st_methods_p%ROWCOUNT = 1) THEN
                    DBMS_LOB.APPEND (res,'<osdm_a_st:MethodParametersCollection>');
                  END IF;
      
                    DBMS_LOB.APPEND (res, '<osdm_a_st:MethodParameterDetails>');
                    DBMS_LOB.APPEND (res, rec_st_methods_p.param_name);
                    DBMS_LOB.APPEND (res, rec_st_methods_p.param_type);
                    DBMS_LOB.APPEND (res, '</osdm_a_st:MethodParameterDetails>');
      
                  IF (cur_st_methods_p%ROWCOUNT = rec_st_methods_p.total_row_count) THEN
                    DBMS_LOB.APPEND (res, '</osdm_a_st:MethodParametersCollection>');
                  END IF;
               END LOOP;       
              
               DBMS_LOB.APPEND (res, '</osdm_a_st:MethodDetails>');
               
           IF (cur_st_methods%ROWCOUNT = rec_st_methods.total_row_count) THEN
             DBMS_LOB.APPEND (res, '</osdm_a_st:MethodsCollection>');
           END IF;
           v_seq := v_seq + 1;
        END LOOP;
      END IF;

      -- Used in tables
      IF (reportTemplate.reportType = 0 OR reportTemplate.useSTUsedInTables = 1) THEN
        FOR rec_used_in_tables IN cur_used_in_tables(rec_all_st.st_ovid) LOOP
           IF (cur_used_in_tables%ROWCOUNT = 1) THEN
              DBMS_LOB.APPEND (res,'<osdm_a_st:TablesCollection>');
           END IF;
              DBMS_LOB.APPEND (res,'<osdm_a_st:TableDetails>');
      
              v_model_name := rec_used_in_tables.model_name;
              IF (v_model_name != p_model_name) THEN
                DBMS_LOB.APPEND (res,v_model_name);
                p_model_name := v_model_name;
              ELSE
                DBMS_LOB.APPEND (res,'<osdm_a_st:ModelName></osdm_a_st:ModelName>');
              END IF;
      
              v_table_name := rec_used_in_tables.table_name;
              IF (v_table_name != p_table_name) THEN
              DBMS_LOB.APPEND (res,v_table_name);
                p_table_name := v_table_name;
              ELSE
                DBMS_LOB.APPEND (res,'<osdm_a_st:TableName></osdm_a_st:TableName>');
              END IF;
      
              DBMS_LOB.APPEND (res,rec_used_in_tables.column_name);
              DBMS_LOB.APPEND (res,'</osdm_a_st:TableDetails>');
           IF (cur_used_in_tables%ROWCOUNT = rec_used_in_tables.total_row_count) THEN
              DBMS_LOB.APPEND (res, '</osdm_a_st:TablesCollection>');
           END IF;
        END LOOP;
      END IF;
      
      -- Used in entities
      IF (reportTemplate.reportType = 0 OR reportTemplate.useSTUsedInEntities = 1) THEN
        FOR rec_used_in_entities IN cur_used_in_entities(rec_all_st.st_ovid) LOOP
           IF (cur_used_in_entities%ROWCOUNT = 1) THEN
              DBMS_LOB.APPEND (res,'<osdm_a_st:EntitiesCollection>');
           END IF;
              DBMS_LOB.APPEND (res,'<osdm_a_st:EntityDetails>');
             
              v_entity_name := rec_used_in_entities.entity_name;
              IF (v_entity_name != p_entity_name) THEN
                DBMS_LOB.APPEND (res,v_entity_name);
                p_entity_name := v_entity_name;
              ELSE
                DBMS_LOB.APPEND (res,'<osdm_a_st:EntityName></osdm_a_st:EntityName>');
              END IF;
      
              DBMS_LOB.APPEND (res,rec_used_in_entities.attribute_name);
              DBMS_LOB.APPEND (res,'</osdm_a_st:EntityDetails>');
           IF (cur_used_in_entities%ROWCOUNT = rec_used_in_entities.total_row_count) THEN
              DBMS_LOB.APPEND (res, '</osdm_a_st:EntitiesCollection>');
           END IF;
        END LOOP;
      END IF;

      DBMS_LOB.APPEND (res,'</osdm_a_st:STDetails>');

      IF (cur_all_st%ROWCOUNT = rec_all_st.total_row_count) THEN
          DBMS_LOB.APPEND (res,'</osdm_a_st:STCollection>');
      END IF;

  END LOOP;
  
  DBMS_LOB.APPEND (res,'</osdm_a_st:root>');

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering data for all structured types ended');  

RETURN res;
  
 EXCEPTION
 WHEN others THEN
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_AllST_Data Exception : ' || SQLERRM);  
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_AllST_Data Exception : ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
  RETURN res;
 
END Gather_AllST_Data;

FUNCTION Gather_SingleCT_Data(v_ct_type_ovid IN VARCHAR2, reportTemplate IN REPORT_TEMPLATE) RETURN CLOB IS 

res               CLOB;
v_notes           CLOB;
v_description     CLOB;
v_rel_total_count INTEGER;
token_value       CLOB;
p_model_name      VARCHAR2(100) :='_';
v_model_name      VARCHAR2(100) :='';
p_table_name      VARCHAR2(100) :='_';
v_table_name      VARCHAR2(100) :='';
p_entity_name     VARCHAR2(100) :='_';
v_entity_name     VARCHAR2(100) :='';

-- General data
CURSOR cur_general_data(v_ct_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_s_ct:DesignName",d.design_name).getClobVal()                                        design_name,
        XMLElement("osdm_s_ct:VersionDate",TO_CHAR(d.date_published,'dd.mm.yyyy hh24:mi:ss')).getClobVal()   version_date,
        d.version_comments                                                                                   comments,
        XMLElement("osdm_s_ct:ModelName",m.model_name).getClobVal()                                          model_name
 FROM   dmrs_designs d, 
        dmrs_models m,
        dmrs_collection_types ct
 WHERE  d.design_ovid = m.design_ovid
 AND    ct.model_ovid = m.model_ovid
 AND    ct.collection_type_ovid = v_ct_ovid;
rec_general_data cur_general_data%ROWTYPE;

CURSOR cur_ct_data(v_ct_ovid IN VARCHAR2) IS
 SELECT  XMLElement("osdm_s_ct:CTName",ct.collection_type_name).getClobVal()                                                                                   ct_name,
         XMLElement("osdm_s_ct:CTType",ct.c_type).getClobVal()                                                                                                 ct_type,
         XMLElement("osdm_s_ct:CTMaxElements",ct.max_element).getClobVal()                                                                                     max_element,
         XMLElement("osdm_s_ct:CTDataTypeKind",DECODE(ct.datatype_kind,
                                                  'Domain',         'DOM',
                                                  'Logical Type',   'LT',
                                                  'Distinct Type',  'DT',
                                                  'Ref Struct Type','RST',
                                                  'Structured Type','ST',
                                                  'Collection Type','CT')
                   ).getClobVal()                                                                                                                               dt_kind,
          XMLElement("osdm_s_ct:CTDataType", 
             DECODE(ct.datatype_kind, 
                  'Domain', ct.dt_type ||' '||
                           DECODE (NVL(ct.t_size,''),'',
                              DECODE(NVL(ct.t_scale,0),0,
                                 DECODE(NVL(ct.t_precision,0),0,null,'('|| DECODE(NVL(ct.t_precision,0),0,null,ct.t_precision) ||')'),
                                   '('|| DECODE(NVL(ct.t_precision,0),0,null,ct.t_precision) || ',' || DECODE(NVL(ct.t_scale,0),0,null,ct.t_scale)||')'),
                                   '('||TRIM(DECODE(ct.t_size,'',null,ct.t_size||' '||ct.char_units ))||')'),
                   'Logical Type', ct.dt_type  ||' '|| 
                           DECODE (NVL(ct.t_size,''),'',
                              DECODE(NVL(ct.t_scale,0),0,
                                 DECODE(NVL(ct.t_precision,0),0,null,'('|| DECODE(NVL(ct.t_precision,0),0,null,ct.t_precision) ||')'),
                                   '('|| DECODE(NVL(ct.t_precision,0),0,null,ct.t_precision) || ',' || DECODE(NVL(ct.t_scale,0),0,null,ct.t_scale)||')'),
                                   '('||TRIM(DECODE(ct.t_size,'',null,ct.t_size||' '||ct.char_units ))||')')
             )).getClobVal()                                                                                                                                    data_type,
       XMLElement("osdm_s_ct:CTDomainName",DECODE(ct.domain_name,'Unknown',null,ct.domain_name)).getClobVal()                                                   domain_name
 FROM  dmrs_collection_types ct
 WHERE ct.collection_type_ovid = v_ct_ovid;
rec_ct_data cur_ct_data%ROWTYPE;

-- Used In tables
CURSOR cur_used_in_tables(v_ct_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_s_ct:ModelName", m.model_name).getClobVal()     model_name,
        XMLElement("osdm_s_ct:TableName", t.table_name).getClobVal()     table_name,
        XMLElement("osdm_s_ct:ColumnName", c.column_name).getClobVal()   column_name,
        COUNT(m.model_name) over()                                       total_row_count
FROM   dmrs_tables t,
        dmrs_columns c,
        dmrs_collection_types ct,
        dmrs_models  m
 WHERE  t.ovid = c.container_ovid
 AND    c.collection_type_ovid = ct.collection_type_ovid
 AND    m.model_ovid = t.model_ovid
 AND    c.datatype_kind = 'Collection Type'
 AND    ct.collection_type_ovid = v_ct_ovid
 ORDER BY m.model_name,
          t.table_name,
          c.column_name;
rec_used_in_tables cur_used_in_tables%ROWTYPE;

-- Used In entities
CURSOR cur_used_in_entities(v_ct_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_s_ct:EntityName", e.entity_name).getClobVal()        entity_name,
        XMLElement("osdm_s_ct:AttributeName", a.attribute_name).getClobVal()  attribute_name,
        COUNT(e.entity_name) over()                                           total_row_count
 FROM   dmrs_entities e,
        dmrs_attributes a,
        dmrs_collection_types ct
 WHERE  e.ovid = a.container_ovid
 AND    a.collection_type_ovid = ct.collection_type_ovid
 AND    a.datatype_kind = 'Collection Type'
 AND    ct.collection_type_ovid = v_ct_ovid
 ORDER BY e.entity_name,
          a.attribute_name;
rec_used_in_entities cur_used_in_entities%ROWTYPE;

BEGIN

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering data for single collection type started ...');
  
  DBMS_LOB.CREATETEMPORARY(res, TRUE);

  DBMS_LOB.APPEND (res,'<osdm_s_ct:root xmlns:osdm_s_ct="osdm_s_ct">');
  
  FOR rec_general_data IN cur_general_data(v_ct_type_ovid) LOOP

     DBMS_LOB.APPEND (res, rec_general_data.design_name);
     DBMS_LOB.APPEND (res, rec_general_data.version_date);
     
       DBMS_LOB.APPEND (res, '<osdm_s_ct:VersionComment>');
       DBMS_LOB.APPEND (res, '<osdm_s_ct:VersionCommentDetails>');
      
       -- Tokenize rows
       FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_general_data.comments||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                      FROM   dual
                      CONNECT BY REGEXP_INSTR(rec_general_data.comments||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
             SELECT XMLElement("osdm_s_ct:VersionCommentRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
             DBMS_LOB.APPEND (res, token_value);
          END LOOP;
         
       DBMS_LOB.APPEND (res, '</osdm_s_ct:VersionCommentDetails>');
       DBMS_LOB.APPEND (res, '</osdm_s_ct:VersionComment>');       
     
     
     DBMS_LOB.APPEND (res, rec_general_data.model_name);
  END LOOP;

   -- Description / Notes
   IF (reportTemplate.reportType = 0 OR reportTemplate.useDescriptionInfo = 1) THEN
      
      DBMS_LOB.APPEND (res, '<osdm_s_ct:DescriptionNotes>');
      
      SELECT 
            NVL(
               (SELECT t.text comments_in_rdbms
                FROM   dmrs_large_text t
                WHERE  t.ovid = v_ct_type_ovid
                AND    t.type='Comments'),
               (SELECT t.text comments_in_rdbms
                FROM   dmrs_large_text t
                WHERE  t.ovid = v_ct_type_ovid
                AND    t.type='CommentsInRDBMS'))        description, 
               (SELECT t.text comments_in_rdbms
                FROM   dmrs_large_text t
                WHERE  t.ovid = v_ct_type_ovid
                AND    t.type='Note')                    notes
      INTO   v_description, 
             v_notes
      FROM  dual;
      
      DBMS_LOB.APPEND (res, '<osdm_s_ct:Description>');
      DBMS_LOB.APPEND (res, '<osdm_s_ct:DescriptionDetails>');
      -- Tokenize rows
      FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_description||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                     FROM   dual
                     CONNECT BY REGEXP_INSTR(v_description||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
          SELECT XMLElement("osdm_s_ct:DescriptionRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
          DBMS_LOB.APPEND (res, token_value);
      END LOOP;
      DBMS_LOB.APPEND (res, '</osdm_s_ct:DescriptionDetails>');
      DBMS_LOB.APPEND (res, '</osdm_s_ct:Description>');
      
      DBMS_LOB.APPEND (res, '<osdm_s_ct:Notes>');
      DBMS_LOB.APPEND (res, '<osdm_s_ct:NotesDetails>');
      -- Tokenize rows
      FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_notes||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                     FROM   dual
                     CONNECT BY REGEXP_INSTR(v_notes||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
          SELECT XMLElement("osdm_s_ct:NoteRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
          DBMS_LOB.APPEND (res, token_value);
      END LOOP;
      DBMS_LOB.APPEND (res, '</osdm_s_ct:NotesDetails>');
      DBMS_LOB.APPEND (res, '</osdm_s_ct:Notes>');
      DBMS_LOB.APPEND (res, '</osdm_s_ct:DescriptionNotes>');
      
   END IF;

   FOR rec_ct_data IN cur_ct_data(v_ct_type_ovid) LOOP
      DBMS_LOB.APPEND (res, rec_ct_data.ct_name);
      DBMS_LOB.APPEND (res, rec_ct_data.ct_type);
      DBMS_LOB.APPEND (res, rec_ct_data.max_element);
      DBMS_LOB.APPEND (res, rec_ct_data.data_type);
      DBMS_LOB.APPEND (res, rec_ct_data.dt_kind);
      DBMS_LOB.APPEND (res, rec_ct_data.domain_name);
   END LOOP;

   -- Used in tables
   IF (reportTemplate.reportType = 0 OR reportTemplate.useCTUsedInTables = 1) THEN
     FOR rec_used_in_tables IN cur_used_in_tables(v_ct_type_ovid) LOOP
        IF (cur_used_in_tables%ROWCOUNT = 1) THEN
           DBMS_LOB.APPEND (res,'<osdm_s_ct:TablesCollection>');
        END IF;
           DBMS_LOB.APPEND (res,'<osdm_s_ct:TableDetails>');

           v_model_name := rec_used_in_tables.model_name;
           IF (v_model_name != p_model_name) THEN
             DBMS_LOB.APPEND (res,v_model_name);
             p_model_name := v_model_name;
           ELSE
             DBMS_LOB.APPEND (res,'<osdm_s_ct:ModelName></osdm_s_ct:ModelName>');
           END IF;

           v_table_name := rec_used_in_tables.table_name;
           IF (v_table_name != p_table_name) THEN
           DBMS_LOB.APPEND (res,v_table_name);
             p_table_name := v_table_name;
           ELSE
             DBMS_LOB.APPEND (res,'<osdm_s_ct:TableName></osdm_s_ct:TableName>');
           END IF;

           DBMS_LOB.APPEND (res,rec_used_in_tables.column_name);
           DBMS_LOB.APPEND (res,'</osdm_s_ct:TableDetails>');
        IF (cur_used_in_tables%ROWCOUNT = rec_used_in_tables.total_row_count) THEN
           DBMS_LOB.APPEND (res, '</osdm_s_ct:TablesCollection>');
        END IF;
     END LOOP;
   END IF;

   -- Used in entities
   IF (reportTemplate.reportType = 0 OR reportTemplate.useCTUsedInEntities = 1) THEN
     FOR rec_used_in_entities IN cur_used_in_entities(v_ct_type_ovid) LOOP
        IF (cur_used_in_entities%ROWCOUNT = 1) THEN
           DBMS_LOB.APPEND (res,'<osdm_s_ct:EntitiesCollection>');
        END IF;
           DBMS_LOB.APPEND (res,'<osdm_s_ct:EntityDetails>');
          
           v_entity_name := rec_used_in_entities.entity_name;
           IF (v_entity_name != p_entity_name) THEN
             DBMS_LOB.APPEND (res,v_entity_name);
             p_entity_name := v_entity_name;
           ELSE
             DBMS_LOB.APPEND (res,'<osdm_s_ct:EntityName></osdm_s_ct:EntityName>');
           END IF;

           DBMS_LOB.APPEND (res,rec_used_in_entities.attribute_name);
           DBMS_LOB.APPEND (res,'</osdm_s_ct:EntityDetails>');
        IF (cur_used_in_entities%ROWCOUNT = rec_used_in_entities.total_row_count) THEN
           DBMS_LOB.APPEND (res, '</osdm_s_ct:EntitiesCollection>');
        END IF;
     END LOOP;
   END IF;
  
  DBMS_LOB.APPEND (res,'</osdm_s_ct:root>');

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering data for single collection type ended');  

RETURN res;
  
 EXCEPTION
 WHEN others THEN
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_SingleCT_Data Exception : ' || SQLERRM);  
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_SingleCT_Data Exception : ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
  RETURN res;
 
END Gather_SingleCT_Data;

FUNCTION Gather_AllCT_Data(v_model_ovid IN VARCHAR2, reportTemplate IN REPORT_TEMPLATE) RETURN CLOB IS 

res               CLOB;
v_notes           CLOB;
v_description     CLOB;
v_rel_total_count INTEGER;
token_value       CLOB;
p_model_name      VARCHAR2(100) :='_';
v_model_name      VARCHAR2(100) :='';
p_table_name      VARCHAR2(100) :='_';
v_table_name      VARCHAR2(100) :='';
p_entity_name     VARCHAR2(100) :='_';
v_entity_name     VARCHAR2(100) :='';

CURSOR cur_general_data(v_m_ovid IN VARCHAR2) IS
 -- General data
 SELECT XMLElement("osdm_a_ct:DesignName",d.design_name).getClobVal()                                        design_name,
        XMLElement("osdm_a_ct:VersionDate",TO_CHAR(d.date_published,'dd.mm.yyyy hh24:mi:ss')).getClobVal()   version_date,
        d.version_comments                                                                                   comments,
        XMLElement("osdm_a_ct:ModelName",m.model_name).getClobVal()                                          model_name
 FROM   dmrs_designs d, 
        dmrs_models m
 WHERE  d.design_ovid = m.design_ovid
 AND    m.model_ovid = v_model_ovid;
rec_general_data cur_general_data%ROWTYPE;

-- All collection types data 
CURSOR cur_all_ct_data(v_m_ovid IN VARCHAR2) IS
 SELECT  XMLElement("osdm_a_ct:CTName",ct.collection_type_name).getClobVal()                                                                                   ct_name,
         XMLElement("osdm_a_ct:CTType",ct.c_type).getClobVal()                                                                                                 ct_type,
         XMLElement("osdm_a_ct:CTMaxElements",ct.max_element).getClobVal()                                                                                     max_element,
         XMLElement("osdm_a_ct:CTDataTypeKind",DECODE(ct.datatype_kind,
                                                  'Domain',         'DOM',
                                                  'Logical Type',   'LT',
                                                  'Distinct Type',  'DT',
                                                  'Ref Struct Type','RST',
                                                  'Structured Type','ST',
                                                  'Collection Type','CT')
                   ).getClobVal()                                                                                                                               dt_kind,
          XMLElement("osdm_a_ct:CTDataType", 
             DECODE(ct.datatype_kind, 
                  'Domain', ct.dt_type ||' '||
                           DECODE (NVL(ct.t_size,''),'',
                              DECODE(NVL(ct.t_scale,0),0,
                                 DECODE(NVL(ct.t_precision,0),0,null,'('|| DECODE(NVL(ct.t_precision,0),0,null,ct.t_precision) ||')'),
                                   '('|| DECODE(NVL(ct.t_precision,0),0,null,ct.t_precision) || ',' || DECODE(NVL(ct.t_scale,0),0,null,ct.t_scale)||')'),
                                   '('||TRIM(DECODE(ct.t_size,'',null,ct.t_size||' '||ct.char_units ))||')'),
                   'Logical Type', ct.dt_type  ||' '|| 
                           DECODE (NVL(ct.t_size,''),'',
                              DECODE(NVL(ct.t_scale,0),0,
                                 DECODE(NVL(ct.t_precision,0),0,null,'('|| DECODE(NVL(ct.t_precision,0),0,null,ct.t_precision) ||')'),
                                   '('|| DECODE(NVL(ct.t_precision,0),0,null,ct.t_precision) || ',' || DECODE(NVL(ct.t_scale,0),0,null,ct.t_scale)||')'),
                                   '('||TRIM(DECODE(ct.t_size,'',null,ct.t_size||' '||ct.char_units ))||')')
             )).getClobVal()                                                                                                                                    data_type,
       XMLElement("osdm_a_ct:CTDomainName",DECODE(ct.domain_name,'Unknown',null,ct.domain_name)).getClobVal()                                                   domain_name,
       ct.collection_type_ovid                                                                                                                                  ct_ovid,
       COUNT(ct.collection_type_name) over()                                                                                                                    total_row_count
 FROM  dmrs_collection_types ct
 WHERE ct.model_ovid = v_m_ovid;
rec_all_ct_data cur_all_ct_data%ROWTYPE;

-- Used In tables
CURSOR cur_used_in_tables(v_ct_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_a_ct:ModelName", m.model_name).getClobVal()     model_name,
        XMLElement("osdm_a_ct:TableName", t.table_name).getClobVal()     table_name,
        XMLElement("osdm_a_ct:ColumnName", c.column_name).getClobVal()   column_name,
        COUNT(m.model_name) over()                                       total_row_count
FROM   dmrs_tables t,
        dmrs_columns c,
        dmrs_collection_types ct,
        dmrs_models  m
 WHERE  t.ovid = c.container_ovid
 AND    c.collection_type_ovid = ct.collection_type_ovid
 AND    m.model_ovid = t.model_ovid
 AND    c.datatype_kind = 'Collection Type'
 AND    ct.collection_type_ovid = v_ct_ovid
 ORDER BY m.model_name,
          t.table_name,
          c.column_name;
rec_used_in_tables cur_used_in_tables%ROWTYPE;

-- Used In entities
CURSOR cur_used_in_entities(v_ct_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_a_ct:EntityName", e.entity_name).getClobVal()        entity_name,
        XMLElement("osdm_a_ct:AttributeName", a.attribute_name).getClobVal()  attribute_name,
        COUNT(e.entity_name) over()                                           total_row_count
 FROM   dmrs_entities e,
        dmrs_attributes a,
        dmrs_collection_types ct
 WHERE  e.ovid = a.container_ovid
 AND    a.collection_type_ovid = ct.collection_type_ovid
 AND    a.datatype_kind = 'Collection Type'
 AND    ct.collection_type_ovid = v_ct_ovid
 ORDER BY e.entity_name,
          a.attribute_name;
rec_used_in_entities cur_used_in_entities%ROWTYPE;

BEGIN

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering data for all collection types started ...');
  
  DBMS_LOB.CREATETEMPORARY(res, TRUE);

  DBMS_LOB.APPEND (res,'<osdm_a_ct:root xmlns:osdm_a_ct="osdm_a_ct">');
  
  FOR rec_general_data IN cur_general_data(v_model_ovid) LOOP

     DBMS_LOB.APPEND (res, rec_general_data.design_name);
     DBMS_LOB.APPEND (res, rec_general_data.version_date);
     
       DBMS_LOB.APPEND (res, '<osdm_a_ct:VersionComment>');
       DBMS_LOB.APPEND (res, '<osdm_a_ct:VersionCommentDetails>');
      
       -- Tokenize rows
       FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_general_data.comments||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                      FROM   dual
                      CONNECT BY REGEXP_INSTR(rec_general_data.comments||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
             SELECT XMLElement("osdm_a_ct:VersionCommentRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
             DBMS_LOB.APPEND (res, token_value);
          END LOOP;
         
       DBMS_LOB.APPEND (res, '</osdm_a_ct:VersionCommentDetails>');
       DBMS_LOB.APPEND (res, '</osdm_a_ct:VersionComment>');       
      
     DBMS_LOB.APPEND (res, rec_general_data.model_name);
  END LOOP;
 
  -- All structured types
  FOR rec_all_ct_data IN cur_all_ct_data(v_model_ovid) LOOP

      IF (cur_all_ct_data%ROWCOUNT = 1) THEN
           DBMS_LOB.APPEND (res,'<osdm_a_ct:CTCollection>');
      END IF;
      
      DBMS_LOB.APPEND (res,'<osdm_a_ct:CTDetails>');

      -- Description / Notes
      IF (reportTemplate.reportType = 0 OR reportTemplate.useDescriptionInfo = 1) THEN
   
         DBMS_LOB.APPEND (res, '<osdm_a_ct:DescriptionNotes>');
      
         SELECT 
               NVL(
                  (SELECT t.text comments_in_rdbms
                   FROM   dmrs_large_text t
                   WHERE  t.ovid = rec_all_ct_data.ct_ovid
                   AND    t.type='Comments'),
                  (SELECT t.text comments_in_rdbms
                   FROM   dmrs_large_text t
                   WHERE  t.ovid = rec_all_ct_data.ct_ovid
                   AND    t.type='CommentsInRDBMS'))        description, 
                  (SELECT t.text comments_in_rdbms
                   FROM   dmrs_large_text t
                   WHERE  t.ovid = rec_all_ct_data.ct_ovid
                   AND    t.type='Note')                    notes
         INTO   v_description, 
                v_notes
         FROM  dual;
         
         DBMS_LOB.APPEND (res, '<osdm_a_ct:Description>');
         DBMS_LOB.APPEND (res, '<osdm_a_ct:DescriptionDetails>');
         -- Tokenize rows
         FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_description||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                        FROM   dual
                        CONNECT BY REGEXP_INSTR(v_description||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
             SELECT XMLElement("osdm_a_ct:DescriptionRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
             DBMS_LOB.APPEND (res, token_value);
         END LOOP;
         DBMS_LOB.APPEND (res, '</osdm_a_ct:DescriptionDetails>');
         DBMS_LOB.APPEND (res, '</osdm_a_ct:Description>');
         
         DBMS_LOB.APPEND (res, '<osdm_a_ct:Notes>');
         DBMS_LOB.APPEND (res, '<osdm_a_ct:NotesDetails>');
         -- Tokenize rows
         FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_notes||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                        FROM   dual
                        CONNECT BY REGEXP_INSTR(v_notes||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
             SELECT XMLElement("osdm_a_ct:NoteRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
             DBMS_LOB.APPEND (res, token_value);
         END LOOP;
         DBMS_LOB.APPEND (res, '</osdm_a_ct:NotesDetails>');
         DBMS_LOB.APPEND (res, '</osdm_a_ct:Notes>');
         DBMS_LOB.APPEND (res, '</osdm_a_ct:DescriptionNotes>');

      END IF;
      
      DBMS_LOB.APPEND (res, rec_all_ct_data.ct_name);
      DBMS_LOB.APPEND (res, rec_all_ct_data.ct_type);
      DBMS_LOB.APPEND (res, rec_all_ct_data.max_element);
      DBMS_LOB.APPEND (res, rec_all_ct_data.dt_kind);
      DBMS_LOB.APPEND (res, rec_all_ct_data.data_type);
      DBMS_LOB.APPEND (res, rec_all_ct_data.domain_name);

      -- Used in tables
      IF (reportTemplate.reportType = 0 OR reportTemplate.useCTUsedInTables = 1) THEN
        FOR rec_used_in_tables IN cur_used_in_tables(rec_all_ct_data.ct_ovid) LOOP
           IF (cur_used_in_tables%ROWCOUNT = 1) THEN
              DBMS_LOB.APPEND (res,'<osdm_a_ct:TablesCollection>');
           END IF;
              DBMS_LOB.APPEND (res,'<osdm_a_ct:TableDetails>');
      
              v_model_name := rec_used_in_tables.model_name;
              IF (v_model_name != p_model_name) THEN
                DBMS_LOB.APPEND (res,v_model_name);
                p_model_name := v_model_name;
              ELSE
                DBMS_LOB.APPEND (res,'<osdm_a_ct:ModelName></osdm_a_ct:ModelName>');
              END IF;
      
              v_table_name := rec_used_in_tables.table_name;
              IF (v_table_name != p_table_name) THEN
              DBMS_LOB.APPEND (res,v_table_name);
                p_table_name := v_table_name;
              ELSE
                DBMS_LOB.APPEND (res,'<osdm_a_ct:TableName></osdm_a_ct:TableName>');
              END IF;
      
              DBMS_LOB.APPEND (res,rec_used_in_tables.column_name);
              DBMS_LOB.APPEND (res,'</osdm_a_ct:TableDetails>');
           IF (cur_used_in_tables%ROWCOUNT = rec_used_in_tables.total_row_count) THEN
              DBMS_LOB.APPEND (res, '</osdm_a_ct:TablesCollection>');
           END IF;
        END LOOP;
      END IF;
      
      -- Used in entities
      IF (reportTemplate.reportType = 0 OR reportTemplate.useCTUsedInEntities = 1) THEN
        FOR rec_used_in_entities IN cur_used_in_entities(rec_all_ct_data.ct_ovid) LOOP
           IF (cur_used_in_entities%ROWCOUNT = 1) THEN
              DBMS_LOB.APPEND (res,'<osdm_a_ct:EntitiesCollection>');
           END IF;
              DBMS_LOB.APPEND (res,'<osdm_a_ct:EntityDetails>');
             
              v_entity_name := rec_used_in_entities.entity_name;
              IF (v_entity_name != p_entity_name) THEN
                DBMS_LOB.APPEND (res,v_entity_name);
                p_entity_name := v_entity_name;
              ELSE
                DBMS_LOB.APPEND (res,'<osdm_a_ct:EntityName></osdm_a_ct:EntityName>');
              END IF;
      
              DBMS_LOB.APPEND (res,rec_used_in_entities.attribute_name);
              DBMS_LOB.APPEND (res,'</osdm_a_ct:EntityDetails>');
           IF (cur_used_in_entities%ROWCOUNT = rec_used_in_entities.total_row_count) THEN
              DBMS_LOB.APPEND (res, '</osdm_a_ct:EntitiesCollection>');
           END IF;
        END LOOP;
      END IF;
  
      DBMS_LOB.APPEND (res,'</osdm_a_ct:CTDetails>');

      IF (cur_all_ct_data%ROWCOUNT = rec_all_ct_data.total_row_count) THEN
          DBMS_LOB.APPEND (res,'</osdm_a_ct:CTCollection>');
      END IF;

  END LOOP;
  
  DBMS_LOB.APPEND (res,'</osdm_a_ct:root>');

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering data for all collection types ended');  

RETURN res;
  
 EXCEPTION
 WHEN others THEN
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_AllCT_Data Exception : ' || SQLERRM);  
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_AllCT_Data Exception : ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
  RETURN res;
 
END Gather_AllCT_Data;

FUNCTION Gather_SingleDT_Data(v_dt_type_ovid IN VARCHAR2, reportTemplate IN REPORT_TEMPLATE) RETURN CLOB IS 

res               CLOB;
v_notes           CLOB;
v_description     CLOB;
v_rel_total_count INTEGER;
token_value       CLOB;
p_model_name      VARCHAR2(100) :='_';
v_model_name      VARCHAR2(100) :='';
p_table_name      VARCHAR2(100) :='_';
v_table_name      VARCHAR2(100) :='';
p_entity_name     VARCHAR2(100) :='_';
v_entity_name     VARCHAR2(100) :='';

-- General data
CURSOR cur_general_data(v_dt_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_s_dt:DesignName",d.design_name).getClobVal()                                        design_name,
        XMLElement("osdm_s_dt:VersionDate",TO_CHAR(d.date_published,'dd.mm.yyyy hh24:mi:ss')).getClobVal()   version_date,
        d.version_comments                                                                                   comments,
        XMLElement("osdm_s_dt:ModelName",m.model_name).getClobVal()                                          model_name
 FROM   dmrs_designs d, 
        dmrs_models m,
        dmrs_distinct_types dt
 WHERE  d.design_ovid = m.design_ovid
 AND    dt.model_ovid = m.model_ovid
 AND    dt.distinct_type_ovid = v_dt_ovid;
rec_general_data cur_general_data%ROWTYPE;

-- Distinct type data
CURSOR cur_dt_data(v_ct_ovid IN VARCHAR2) IS
 SELECT  XMLElement("osdm_s_dt:DTName",dt.distinct_type_name).getClobVal()                             dt_name,
         XMLElement("osdm_s_dt:DTLogicalType",dt.logical_type_name).getClobVal()                       lt_type,
         XMLElement("osdm_s_dt:DTSize",DECODE(dt.t_size,'0','',dt.t_size)).getClobVal()                dt_size,
         XMLElement("osdm_s_dt:DTPrecision",DECODE(dt.t_precision,'0','',dt.t_precision)).getClobVal() dt_precision,
         XMLElement("osdm_s_dt:DTScale",DECODE(dt.t_scale,'0','',dt.t_scale)).getClobVal()             dt_scale
 FROM  dmrs_distinct_types dt
 WHERE dt.distinct_type_ovid = v_ct_ovid;
rec_dt_data cur_dt_data%ROWTYPE;

-- Used In tables
CURSOR cur_used_in_tables(v_dt_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_s_dt:ModelName", m.model_name).getClobVal()     model_name,
        XMLElement("osdm_s_dt:TableName", t.table_name).getClobVal()     table_name,
        XMLElement("osdm_s_dt:ColumnName", c.column_name).getClobVal()   column_name,
        COUNT(m.model_name) over()                                       total_row_count
FROM   dmrs_tables t,
        dmrs_columns c,
        dmrs_distinct_types dt,
        dmrs_models  m
 WHERE  t.ovid = c.container_ovid
 AND    c.distinct_type_ovid = dt.distinct_type_ovid
 AND    m.model_ovid = t.model_ovid
 AND    c.datatype_kind = 'Distinct Type'
 AND    dt.distinct_type_ovid = v_dt_ovid
 ORDER BY m.model_name,
          t.table_name,
          c.column_name;
rec_used_in_tables cur_used_in_tables%ROWTYPE;

-- Used In entities
CURSOR cur_used_in_entities(v_dt_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_s_dt:EntityName", e.entity_name).getClobVal()        entity_name,
        XMLElement("osdm_s_dt:AttributeName", a.attribute_name).getClobVal()  attribute_name,
        COUNT(e.entity_name) over()                                           total_row_count
 FROM   dmrs_entities e,
        dmrs_attributes a,
        dmrs_distinct_types dt
 WHERE  e.ovid = a.container_ovid
 AND    a.distinct_type_ovid = dt.distinct_type_ovid
 AND    a.datatype_kind = 'Distinct Type'
 AND    dt.distinct_type_ovid = v_dt_ovid
 ORDER BY e.entity_name,
          a.attribute_name;
rec_used_in_entities cur_used_in_entities%ROWTYPE;

BEGIN

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering data for single distinct type started ...');
  
  DBMS_LOB.CREATETEMPORARY(res, TRUE);

  DBMS_LOB.APPEND (res,'<osdm_s_dt:root xmlns:osdm_s_dt="osdm_s_dt">');
  
  FOR rec_general_data IN cur_general_data(v_dt_type_ovid) LOOP

     DBMS_LOB.APPEND (res, rec_general_data.design_name);
     DBMS_LOB.APPEND (res, rec_general_data.version_date);
     
       DBMS_LOB.APPEND (res, '<osdm_s_dt:VersionComment>');
       DBMS_LOB.APPEND (res, '<osdm_s_dt:VersionCommentDetails>');
      
       -- Tokenize rows
       FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_general_data.comments||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                      FROM   dual
                      CONNECT BY REGEXP_INSTR(rec_general_data.comments||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
             SELECT XMLElement("osdm_s_dt:VersionCommentRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
             DBMS_LOB.APPEND (res, token_value);
          END LOOP;
         
       DBMS_LOB.APPEND (res, '</osdm_s_dt:VersionCommentDetails>');
       DBMS_LOB.APPEND (res, '</osdm_s_dt:VersionComment>');       
     
     
     DBMS_LOB.APPEND (res, rec_general_data.model_name);
  END LOOP;

   -- Description / Notes
   IF (reportTemplate.reportType = 0 OR reportTemplate.useDescriptionInfo = 1) THEN
   
      DBMS_LOB.APPEND (res, '<osdm_s_dt:DescriptionNotes>');
      
      SELECT 
            NVL(
               (SELECT t.text comments_in_rdbms
                FROM   dmrs_large_text t
                WHERE  t.ovid = v_dt_type_ovid
                AND    t.type='Comments'),
               (SELECT t.text comments_in_rdbms
                FROM   dmrs_large_text t
                WHERE  t.ovid = v_dt_type_ovid
                AND    t.type='CommentsInRDBMS'))        description, 
               (SELECT t.text comments_in_rdbms
                FROM   dmrs_large_text t
                WHERE  t.ovid = v_dt_type_ovid
                AND    t.type='Note')                    notes
      INTO   v_description, 
             v_notes
      FROM  dual;
      
      DBMS_LOB.APPEND (res, '<osdm_s_dt:Description>');
      DBMS_LOB.APPEND (res, '<osdm_s_dt:DescriptionDetails>');
      -- Tokenize rows
      FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_description||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                     FROM   dual
                     CONNECT BY REGEXP_INSTR(v_description||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
          SELECT XMLElement("osdm_s_dt:DescriptionRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
          DBMS_LOB.APPEND (res, token_value);
      END LOOP;
      DBMS_LOB.APPEND (res, '</osdm_s_dt:DescriptionDetails>');
      DBMS_LOB.APPEND (res, '</osdm_s_dt:Description>');
      
      DBMS_LOB.APPEND (res, '<osdm_s_dt:Notes>');
      DBMS_LOB.APPEND (res, '<osdm_s_dt:NotesDetails>');
      -- Tokenize rows
      FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_notes||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                     FROM   dual
                     CONNECT BY REGEXP_INSTR(v_notes||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
          SELECT XMLElement("osdm_s_dt:NoteRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
          DBMS_LOB.APPEND (res, token_value);
      END LOOP;
      DBMS_LOB.APPEND (res, '</osdm_s_dt:NotesDetails>');
      DBMS_LOB.APPEND (res, '</osdm_s_dt:Notes>');
      DBMS_LOB.APPEND (res, '</osdm_s_dt:DescriptionNotes>');
   
   END IF;
   
   FOR rec_dt_data IN cur_dt_data(v_dt_type_ovid) LOOP
      DBMS_LOB.APPEND (res, rec_dt_data.dt_name);
      DBMS_LOB.APPEND (res, rec_dt_data.lt_type);
      DBMS_LOB.APPEND (res, rec_dt_data.dt_size);
      DBMS_LOB.APPEND (res, rec_dt_data.dt_precision);
      DBMS_LOB.APPEND (res, rec_dt_data.dt_scale);
   END LOOP;

   -- Used in tables
   IF (reportTemplate.reportType = 0 OR reportTemplate.useDTUsedInTables = 1) THEN
     FOR rec_used_in_tables IN cur_used_in_tables(v_dt_type_ovid) LOOP
        IF (cur_used_in_tables%ROWCOUNT = 1) THEN
           DBMS_LOB.APPEND (res,'<osdm_s_dt:TablesCollection>');
        END IF;
           DBMS_LOB.APPEND (res,'<osdm_s_dt:TableDetails>');

           v_model_name := rec_used_in_tables.model_name;
           IF (v_model_name != p_model_name) THEN
             DBMS_LOB.APPEND (res,v_model_name);
             p_model_name := v_model_name;
           ELSE
             DBMS_LOB.APPEND (res,'<osdm_s_dt:ModelName></osdm_s_dt:ModelName>');
           END IF;

           v_table_name := rec_used_in_tables.table_name;
           IF (v_table_name != p_table_name) THEN
           DBMS_LOB.APPEND (res,v_table_name);
             p_table_name := v_table_name;
           ELSE
             DBMS_LOB.APPEND (res,'<osdm_s_dt:TableName></osdm_s_dt:TableName>');
           END IF;

           DBMS_LOB.APPEND (res,rec_used_in_tables.column_name);
           DBMS_LOB.APPEND (res,'</osdm_s_dt:TableDetails>');
        IF (cur_used_in_tables%ROWCOUNT = rec_used_in_tables.total_row_count) THEN
           DBMS_LOB.APPEND (res, '</osdm_s_dt:TablesCollection>');
        END IF;
     END LOOP;
   END IF;

   -- Used in entities
   IF (reportTemplate.reportType = 0 OR reportTemplate.useDTUsedInEntities = 1) THEN
     FOR rec_used_in_entities IN cur_used_in_entities(v_dt_type_ovid) LOOP
        IF (cur_used_in_entities%ROWCOUNT = 1) THEN
           DBMS_LOB.APPEND (res,'<osdm_s_dt:EntitiesCollection>');
        END IF;
           DBMS_LOB.APPEND (res,'<osdm_s_dt:EntityDetails>');
          
           v_entity_name := rec_used_in_entities.entity_name;
           IF (v_entity_name != p_entity_name) THEN
             DBMS_LOB.APPEND (res,v_entity_name);
             p_entity_name := v_entity_name;
           ELSE
             DBMS_LOB.APPEND (res,'<osdm_s_dt:EntityName></osdm_s_dt:EntityName>');
           END IF;

           DBMS_LOB.APPEND (res,rec_used_in_entities.attribute_name);
           DBMS_LOB.APPEND (res,'</osdm_s_dt:EntityDetails>');
        IF (cur_used_in_entities%ROWCOUNT = rec_used_in_entities.total_row_count) THEN
           DBMS_LOB.APPEND (res, '</osdm_s_dt:EntitiesCollection>');
        END IF;
     END LOOP;
   END IF;
  
  DBMS_LOB.APPEND (res,'</osdm_s_dt:root>');

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering data for single distinct type ended');  

RETURN res;
  
 EXCEPTION
 WHEN others THEN
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_SingleDT_Data Exception : ' || SQLERRM);  
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_SingleDT_Data Exception : ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
  RETURN res;
 
END Gather_SingleDT_Data;

FUNCTION Gather_AllDT_Data(v_model_ovid IN VARCHAR2, reportTemplate IN REPORT_TEMPLATE) RETURN CLOB IS 

res               CLOB;
v_notes           CLOB;
v_description     CLOB;
v_rel_total_count INTEGER;
token_value       CLOB;
p_model_name      VARCHAR2(100) :='_';
v_model_name      VARCHAR2(100) :='';
p_table_name      VARCHAR2(100) :='_';
v_table_name      VARCHAR2(100) :='';
p_entity_name     VARCHAR2(100) :='_';
v_entity_name     VARCHAR2(100) :='';

CURSOR cur_general_data(v_m_ovid IN VARCHAR2) IS
 -- General data
 SELECT XMLElement("osdm_a_dt:DesignName",d.design_name).getClobVal()                                        design_name,
        XMLElement("osdm_a_dt:VersionDate",TO_CHAR(d.date_published,'dd.mm.yyyy hh24:mi:ss')).getClobVal()   version_date,
        d.version_comments                                                                                   comments,
        XMLElement("osdm_a_dt:ModelName",m.model_name).getClobVal()                                          model_name
 FROM   dmrs_designs d, 
        dmrs_models m
 WHERE  d.design_ovid = m.design_ovid
 AND    m.model_ovid = v_model_ovid;
rec_general_data cur_general_data%ROWTYPE;

-- All distinct types data 
CURSOR cur_all_dt_data(v_m_ovid IN VARCHAR2) IS
 SELECT  XMLElement("osdm_a_dt:DTName",dt.distinct_type_name).getClobVal()                             dt_name,
         XMLElement("osdm_a_dt:DTLogicalType",dt.logical_type_name).getClobVal()                       lt_type,
         XMLElement("osdm_a_dt:DTSize",DECODE(dt.t_size,'0','',dt.t_size)).getClobVal()                dt_size,
         XMLElement("osdm_a_dt:DTPrecision",DECODE(dt.t_precision,'0','',dt.t_precision)).getClobVal() dt_precision,
         XMLElement("osdm_a_dt:DTScale",DECODE(dt.t_scale,'0','',dt.t_scale)).getClobVal()             dt_scale,
         dt.distinct_type_ovid                                                                         dt_ovid,
         COUNT(dt.distinct_type_name) over()                                                           total_row_count
 FROM  dmrs_distinct_types dt
 WHERE dt.model_ovid = v_m_ovid;
rec_all_dt_data cur_all_dt_data%ROWTYPE;

-- Used In tables
CURSOR cur_used_in_tables(v_dt_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_a_dt:ModelName", m.model_name).getClobVal()     model_name,
        XMLElement("osdm_a_dt:TableName", t.table_name).getClobVal()     table_name,
        XMLElement("osdm_a_dt:ColumnName", c.column_name).getClobVal()   column_name,
        COUNT(m.model_name) over()                                       total_row_count
FROM   dmrs_tables t,
        dmrs_columns c,
        dmrs_distinct_types dt,
        dmrs_models  m
 WHERE  t.ovid = c.container_ovid
 AND    c.distinct_type_ovid = dt.distinct_type_ovid
 AND    m.model_ovid = t.model_ovid
 AND    c.datatype_kind = 'Distinct Type'
 AND    dt.distinct_type_ovid = v_dt_ovid
 ORDER BY m.model_name,
          t.table_name,
          c.column_name;
rec_used_in_tables cur_used_in_tables%ROWTYPE;

-- Used In entities
CURSOR cur_used_in_entities(v_dt_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_a_dt:EntityName", e.entity_name).getClobVal()        entity_name,
        XMLElement("osdm_a_dt:AttributeName", a.attribute_name).getClobVal()  attribute_name,
        COUNT(e.entity_name) over()                                           total_row_count
 FROM   dmrs_entities e,
        dmrs_attributes a,
        dmrs_distinct_types dt
 WHERE  e.ovid = a.container_ovid
 AND    a.distinct_type_ovid = dt.distinct_type_ovid
 AND    a.datatype_kind = 'Distinct Type'
 AND    dt.distinct_type_ovid = v_dt_ovid
 ORDER BY e.entity_name,
          a.attribute_name;
rec_used_in_entities cur_used_in_entities%ROWTYPE;

BEGIN

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering data for all distinct types started ...');
  
  DBMS_LOB.CREATETEMPORARY(res, TRUE);

  DBMS_LOB.APPEND (res,'<osdm_a_dt:root xmlns:osdm_a_dt="osdm_a_dt">');
  
  FOR rec_general_data IN cur_general_data(v_model_ovid) LOOP

     DBMS_LOB.APPEND (res, rec_general_data.design_name);
     DBMS_LOB.APPEND (res, rec_general_data.version_date);
     
       DBMS_LOB.APPEND (res, '<osdm_a_dt:VersionComment>');
       DBMS_LOB.APPEND (res, '<osdm_a_dt:VersionCommentDetails>');
      
       -- Tokenize rows
       FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_general_data.comments||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                      FROM   dual
                      CONNECT BY REGEXP_INSTR(rec_general_data.comments||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
             SELECT XMLElement("osdm_a_dt:VersionCommentRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
             DBMS_LOB.APPEND (res, token_value);
          END LOOP;
         
       DBMS_LOB.APPEND (res, '</osdm_a_dt:VersionCommentDetails>');
       DBMS_LOB.APPEND (res, '</osdm_a_dt:VersionComment>');       
     
     
     DBMS_LOB.APPEND (res, rec_general_data.model_name);
  END LOOP;
  
  -- All distinct types
  FOR rec_all_dt_data IN cur_all_dt_data(v_model_ovid) LOOP

      IF (cur_all_dt_data%ROWCOUNT = 1) THEN
           DBMS_LOB.APPEND (res,'<osdm_a_dt:DTCollection>');
      END IF;
      
      DBMS_LOB.APPEND (res,'<osdm_a_dt:DTDetails>');

      -- Description / Notes
      IF (reportTemplate.reportType = 0 OR reportTemplate.useDescriptionInfo = 1) THEN
      
         DBMS_LOB.APPEND (res, '<osdm_a_dt:DescriptionNotes>');
         
         SELECT 
               NVL(
                  (SELECT t.text comments_in_rdbms
                   FROM   dmrs_large_text t
                   WHERE  t.ovid = rec_all_dt_data.dt_ovid
                   AND    t.type='Comments'),
                  (SELECT t.text comments_in_rdbms
                   FROM   dmrs_large_text t
                   WHERE  t.ovid = rec_all_dt_data.dt_ovid
                   AND    t.type='CommentsInRDBMS'))        description, 
                  (SELECT t.text comments_in_rdbms
                   FROM   dmrs_large_text t
                   WHERE  t.ovid = rec_all_dt_data.dt_ovid
                   AND    t.type='Note')                    notes
         INTO   v_description, 
                v_notes
         FROM  dual;
         
         DBMS_LOB.APPEND (res, '<osdm_a_dt:Description>');
         DBMS_LOB.APPEND (res, '<osdm_a_dt:DescriptionDetails>');
         -- Tokenize rows
         FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_description||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                        FROM   dual
                        CONNECT BY REGEXP_INSTR(v_description||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
             SELECT XMLElement("osdm_a_dt:DescriptionRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
             DBMS_LOB.APPEND (res, token_value);
         END LOOP;
         DBMS_LOB.APPEND (res, '</osdm_a_dt:DescriptionDetails>');
         DBMS_LOB.APPEND (res, '</osdm_a_dt:Description>');
         
         DBMS_LOB.APPEND (res, '<osdm_a_dt:Notes>');
         DBMS_LOB.APPEND (res, '<osdm_a_dt:NotesDetails>');
         -- Tokenize rows
         FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_notes||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                        FROM   dual
                        CONNECT BY REGEXP_INSTR(v_notes||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
             SELECT XMLElement("osdm_a_dt:NoteRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
             DBMS_LOB.APPEND (res, token_value);
         END LOOP;
         DBMS_LOB.APPEND (res, '</osdm_a_dt:NotesDetails>');
         DBMS_LOB.APPEND (res, '</osdm_a_dt:Notes>');
         DBMS_LOB.APPEND (res, '</osdm_a_dt:DescriptionNotes>');
         
      END IF;
      
      DBMS_LOB.APPEND (res, rec_all_dt_data.dt_name);
      DBMS_LOB.APPEND (res, rec_all_dt_data.lt_type);
      DBMS_LOB.APPEND (res, rec_all_dt_data.dt_size);
      DBMS_LOB.APPEND (res, rec_all_dt_data.dt_precision);
      DBMS_LOB.APPEND (res, rec_all_dt_data.dt_scale);

      -- Used in tables
      IF (reportTemplate.reportType = 0 OR reportTemplate.useDTUsedInTables = 1) THEN
        FOR rec_used_in_tables IN cur_used_in_tables(rec_all_dt_data.dt_ovid) LOOP
           IF (cur_used_in_tables%ROWCOUNT = 1) THEN
              DBMS_LOB.APPEND (res,'<osdm_a_dt:TablesCollection>');
           END IF;
              DBMS_LOB.APPEND (res,'<osdm_a_dt:TableDetails>');
      
              v_model_name := rec_used_in_tables.model_name;
              IF (v_model_name != p_model_name) THEN
                DBMS_LOB.APPEND (res,v_model_name);
                p_model_name := v_model_name;
              ELSE
                DBMS_LOB.APPEND (res,'<osdm_a_dt:ModelName></osdm_a_dt:ModelName>');
              END IF;
      
              v_table_name := rec_used_in_tables.table_name;
              IF (v_table_name != p_table_name) THEN
              DBMS_LOB.APPEND (res,v_table_name);
                p_table_name := v_table_name;
              ELSE
                DBMS_LOB.APPEND (res,'<osdm_a_dt:TableName></osdm_a_dt:TableName>');
              END IF;
      
              DBMS_LOB.APPEND (res,rec_used_in_tables.column_name);
              DBMS_LOB.APPEND (res,'</osdm_a_dt:TableDetails>');
           IF (cur_used_in_tables%ROWCOUNT = rec_used_in_tables.total_row_count) THEN
              DBMS_LOB.APPEND (res, '</osdm_a_dt:TablesCollection>');
           END IF;
        END LOOP;
      END IF;
      
      -- Used in entities
      IF (reportTemplate.reportType = 0 OR reportTemplate.useDTUsedInEntities = 1) THEN
        FOR rec_used_in_entities IN cur_used_in_entities(rec_all_dt_data.dt_ovid) LOOP
           IF (cur_used_in_entities%ROWCOUNT = 1) THEN
              DBMS_LOB.APPEND (res,'<osdm_a_dt:EntitiesCollection>');
           END IF;
              DBMS_LOB.APPEND (res,'<osdm_a_dt:EntityDetails>');
             
              v_entity_name := rec_used_in_entities.entity_name;
              IF (v_entity_name != p_entity_name) THEN
                DBMS_LOB.APPEND (res,v_entity_name);
                p_entity_name := v_entity_name;
              ELSE
                DBMS_LOB.APPEND (res,'<osdm_a_dt:EntityName></osdm_a_dt:EntityName>');
              END IF;
      
              DBMS_LOB.APPEND (res,rec_used_in_entities.attribute_name);
              DBMS_LOB.APPEND (res,'</osdm_a_dt:EntityDetails>');
           IF (cur_used_in_entities%ROWCOUNT = rec_used_in_entities.total_row_count) THEN
              DBMS_LOB.APPEND (res, '</osdm_a_dt:EntitiesCollection>');
           END IF;
        END LOOP;
      END IF;

      DBMS_LOB.APPEND (res,'</osdm_a_dt:DTDetails>');

      IF (cur_all_dt_data%ROWCOUNT = rec_all_dt_data.total_row_count) THEN
          DBMS_LOB.APPEND (res,'</osdm_a_dt:DTCollection>');
      END IF;

  END LOOP;
  
  DBMS_LOB.APPEND (res,'</osdm_a_dt:root>');

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering data for all distinct types ended');  

RETURN res;
  
 EXCEPTION
 WHEN others THEN
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_AllDT_Data Exception : ' || SQLERRM);  
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_AllDT_Data Exception : ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
  RETURN res;
 
END Gather_AllDT_Data;

FUNCTION Gather_CR_Data(v_design_ovid IN VARCHAR2, reportTemplate IN REPORT_TEMPLATE) RETURN CLOB IS 

res               CLOB;
v_notes           CLOB;
v_description     CLOB;
v_reason          CLOB;
v_imp_notes       CLOB;
v_rel_total_count INTEGER;
token_value       CLOB;
p_model_name      VARCHAR2(100) :='_';
v_model_name      VARCHAR2(100) :='';

CURSOR cur_general_data(v_d_ovid IN VARCHAR2) IS
 -- General data
 SELECT XMLElement("osdm_cr:DesignName",d.design_name).getClobVal()                                        design_name,
        XMLElement("osdm_cr:VersionDate",TO_CHAR(d.date_published,'dd.mm.yyyy hh24:mi:ss')).getClobVal()   version_date,
        d.version_comments                                                                                 comments
 FROM   dmrs_designs d
 WHERE  d.design_ovid = v_d_ovid;
rec_general_data cur_general_data%ROWTYPE;

CURSOR cur_all_cr(v_d_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_cr:CRName",cr.change_request_name).getClobVal()                  cr_name,
        cr.reason                                                                         cr_reason,
        XMLElement("osdm_cr:CRStatus",cr.request_status).getClobVal()                     cr_status,
        XMLElement("osdm_cr:CRCompleted",cr.is_completed).getClobVal()                    cr_completed,
        XMLElement("osdm_cr:CRRequestDate",cr.request_date_string).getClobVal()           cr_req_date,
        XMLElement("osdm_cr:CRCompletionDate",cr.completion_date_string).getClobVal()     cr_compl_date,
        cr.change_request_ovid                                                            cr_ovid,
        COUNT(cr.change_request_name) over()                                              total_row_count
 FROM   dmrs_change_requests cr
 WHERE  design_ovid = v_d_ovid;
rec_all_cr cur_all_cr%ROWTYPE;

--Impacted Objects
CURSOR cur_i_objects(v_cr_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_cr:ModelName",cre.element_model_name).getClobVal()    model_name,
        XMLElement("osdm_cr:TypeName",cre.element_type).getClobVal()           type_name,
        XMLElement("osdm_cr:ObjectName",cre.element_name).getClobVal()         obj_name,
        COUNT(cre.element_name) over()                                         total_row_count
 FROM   dmrs_change_request_elements cre
 WHERE  cre.change_request_ovid = v_cr_ovid
 ORDER BY cre.element_model_name,
          cre.element_type,
          cre.element_name;
rec_i_objects cur_i_objects%ROWTYPE;

BEGIN

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering data for change requests started ...');
  
  DBMS_LOB.CREATETEMPORARY(res, TRUE);

  DBMS_LOB.APPEND (res,'<osdm_cr:root xmlns:osdm_cr="osdm_cr">');
  
  FOR rec_general_data IN cur_general_data(v_design_ovid) LOOP

     DBMS_LOB.APPEND (res, rec_general_data.design_name);
     DBMS_LOB.APPEND (res, rec_general_data.version_date);
     
       DBMS_LOB.APPEND (res, '<osdm_cr:VersionComment>');
       DBMS_LOB.APPEND (res, '<osdm_cr:VersionCommentDetails>');
      
       -- Tokenize rows
       FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_general_data.comments||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                      FROM   dual
                      CONNECT BY REGEXP_INSTR(rec_general_data.comments||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
             SELECT XMLElement("osdm_cr:VersionCommentRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
             DBMS_LOB.APPEND (res, token_value);
          END LOOP;
         
       DBMS_LOB.APPEND (res, '</osdm_cr:VersionCommentDetails>');
       DBMS_LOB.APPEND (res, '</osdm_cr:VersionComment>');       
     
  END LOOP;

  FOR rec_all_cr IN cur_all_cr(v_design_ovid) LOOP

      IF (cur_all_cr%ROWCOUNT = 1) THEN
           DBMS_LOB.APPEND (res,'<osdm_cr:CRCollection>');
      END IF;
      
      DBMS_LOB.APPEND (res,'<osdm_cr:CRDetails>');

      DBMS_LOB.APPEND (res,rec_all_cr.cr_name);

      -- Comments / Notes / Implementation notes
      SELECT 
            NVL(
               (SELECT t.text comments_in_rdbms
                FROM   dmrs_large_text t
                WHERE  t.ovid = rec_all_cr.cr_ovid
                AND    t.type='Comments'),
               (SELECT t.text comments_in_rdbms
                FROM   dmrs_large_text t
                WHERE  t.ovid = rec_all_cr.cr_ovid
                AND    t.type='CommentsInRDBMS'))        description, 
               (SELECT t.text comments_in_rdbms
                FROM   dmrs_large_text t
                WHERE  t.ovid = rec_all_cr.cr_ovid
                AND    t.type='Note')                    notes,
                (SELECT t.text comments_in_rdbms
                FROM   dmrs_large_text t
                WHERE  t.ovid = rec_all_cr.cr_ovid
                AND    t.type='Implementation Note')     imp_note
      INTO   v_description, 
             v_notes,
             v_imp_notes
      FROM  dual;

      DBMS_LOB.APPEND (res, '<osdm_cr:CRComment>');
      DBMS_LOB.APPEND (res, '<osdm_cr:CRCommentDetails>');
      -- Tokenize rows
      FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_description||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                     FROM   dual
                     CONNECT BY REGEXP_INSTR(v_description||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
          SELECT XMLElement("osdm_cr:CRCommentRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
          DBMS_LOB.APPEND (res, token_value);
      END LOOP;
      DBMS_LOB.APPEND (res, '</osdm_cr:CRCommentDetails>');
      DBMS_LOB.APPEND (res, '</osdm_cr:CRComment>');
      
      DBMS_LOB.APPEND (res, '<osdm_cr:CRNotes>');
      DBMS_LOB.APPEND (res, '<osdm_cr:CRNotesDetails>');
      -- Tokenize rows
      FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_notes||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                     FROM   dual
                     CONNECT BY REGEXP_INSTR(v_notes||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
          SELECT XMLElement("osdm_cr:CRNoteRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
          DBMS_LOB.APPEND (res, token_value);
      END LOOP;
      DBMS_LOB.APPEND (res, '</osdm_cr:CRNotesDetails>');
      DBMS_LOB.APPEND (res, '</osdm_cr:CRNotes>');

      DBMS_LOB.APPEND (res, '<osdm_cr:CRReason>');
      DBMS_LOB.APPEND (res, '<osdm_cr:CRReasonDetails>');
      -- Tokenize rows
      FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_all_cr.cr_reason||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                     FROM   dual
                     CONNECT BY REGEXP_INSTR(rec_all_cr.cr_reason||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
          SELECT XMLElement("osdm_cr:CRReasonRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
          DBMS_LOB.APPEND (res, token_value);
      END LOOP;
      DBMS_LOB.APPEND (res, '</osdm_cr:CRReasonDetails>');
      DBMS_LOB.APPEND (res, '</osdm_cr:CRReason>');

      DBMS_LOB.APPEND (res,rec_all_cr.cr_status);
      DBMS_LOB.APPEND (res,rec_all_cr.cr_completed);
      DBMS_LOB.APPEND (res,rec_all_cr.cr_req_date);
      DBMS_LOB.APPEND (res,rec_all_cr.cr_compl_date);

      DBMS_LOB.APPEND (res, '<osdm_cr:CRImplementationNote>');
      DBMS_LOB.APPEND (res, '<osdm_cr:CRImplementationNoteDetails>');
      -- Tokenize rows
      FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_imp_notes||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                     FROM   dual
                     CONNECT BY REGEXP_INSTR(v_imp_notes||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
          SELECT XMLElement("osdm_cr:CRImplementationNoteRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
          DBMS_LOB.APPEND (res, token_value);
      END LOOP;
      DBMS_LOB.APPEND (res, '</osdm_cr:CRImplementationNoteDetails>');
      DBMS_LOB.APPEND (res, '</osdm_cr:CRImplementationNote>');

      -- Impacted Objects
      IF (reportTemplate.reportType = 0 OR reportTemplate.useCRImpactedObjects = 1) THEN
        FOR rec_i_objects IN cur_i_objects(rec_all_cr.cr_ovid) LOOP
                                                 
             IF (cur_i_objects%ROWCOUNT = 1) THEN
                DBMS_LOB.APPEND (res,'<osdm_cr:CRUsedInObjectCollection>');
             END IF;
                DBMS_LOB.APPEND (res,'<osdm_cr:CRUsedInObjectDetails>');
               
                v_model_name := rec_i_objects.model_name;
                IF (v_model_name != p_model_name) THEN
                  DBMS_LOB.APPEND (res,v_model_name);
                  p_model_name := v_model_name;
                ELSE
                  DBMS_LOB.APPEND (res,'<osdm_cr:ModelName></osdm_cr:ModelName>');
                END IF;
        
                DBMS_LOB.APPEND (res,rec_i_objects.type_name);
                DBMS_LOB.APPEND (res,rec_i_objects.obj_name);
                DBMS_LOB.APPEND (res,'</osdm_cr:CRUsedInObjectDetails>');
             IF (cur_i_objects%ROWCOUNT = rec_i_objects.total_row_count) THEN
                DBMS_LOB.APPEND (res, '</osdm_cr:CRUsedInObjectCollection>');
             END IF;
                                                                           
        END LOOP;
      END IF;
      DBMS_LOB.APPEND (res,'</osdm_cr:CRDetails>');

      IF (cur_all_cr%ROWCOUNT = rec_all_cr.total_row_count) THEN
          DBMS_LOB.APPEND (res,'</osdm_cr:CRCollection>');
      END IF;

  END LOOP;
  
  DBMS_LOB.APPEND (res,'</osdm_cr:root>');

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering data for change requests ended');  

RETURN res;
  
 EXCEPTION
 WHEN others THEN
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_CR_Data Exception : ' || SQLERRM);  
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_CR_Data Exception : ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
  RETURN res;
 
END Gather_CR_Data;

FUNCTION Gather_MR_Data(v_design_ovid IN VARCHAR2, reportTemplate IN REPORT_TEMPLATE) RETURN CLOB IS 

res               CLOB;
v_notes           CLOB;
v_description     CLOB;
v_rel_total_count INTEGER;
token_value       CLOB;

CURSOR cur_general_data(v_d_ovid IN VARCHAR2) IS
 -- General data
 SELECT XMLElement("osdm_mr:DesignName",d.design_name).getClobVal()                                        design_name,
        XMLElement("osdm_mr:VersionDate",TO_CHAR(d.date_published,'dd.mm.yyyy hh24:mi:ss')).getClobVal()   version_date,
        d.version_comments                                                                                 comments
 FROM   dmrs_designs d
 WHERE  d.design_ovid = v_d_ovid;
rec_general_data cur_general_data%ROWTYPE;

CURSOR cur_all_measurements(v_d_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_mr:MName",mr.measurement_name).getClobVal()                                     m_name,
        XMLElement("osdm_mr:MValue",mr.measurement_value).getClobVal()                                   m_value,
        XMLElement("osdm_mr:MType",mr.measurement_type).getClobVal()                                     m_type,
        XMLElement("osdm_mr:MUnit",mr.measurement_unit).getClobVal()                                     m_unit,
        XMLElement("osdm_mr:MCreationDate",mr.measurement_cr_date).getClobVal()                          m_cr_date,
        XMLElement("osdm_mr:MEffectiveDate",mr.measurement_ef_date).getClobVal()                         m_ef_date,
        XMLElement("osdm_mr:ModelName",mr.object_model).getClobVal()                                     obj_model_name,
        XMLElement("osdm_mr:ObjectName",mr.object_name).getClobVal()                                     object_name,
        XMLElement("osdm_mr:TypeName",mr.object_type).getClobVal()                                       object_type,
        mr.measurement_ovid                                                                              m_ovid,
        COUNT(mr.measurement_name) over()                                                                total_row_count
 FROM dmrs_measurements mr
 WHERE design_ovid = v_d_ovid;
rec_all_measurements cur_all_measurements%ROWTYPE;

BEGIN

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering data for measurements started ...');
  
  DBMS_LOB.CREATETEMPORARY(res, TRUE);

  DBMS_LOB.APPEND (res,'<osdm_mr:root xmlns:osdm_mr="osdm_mr">');
  
  FOR rec_general_data IN cur_general_data(v_design_ovid) LOOP

     DBMS_LOB.APPEND (res, rec_general_data.design_name);
     DBMS_LOB.APPEND (res, rec_general_data.version_date);
     
       DBMS_LOB.APPEND (res, '<osdm_mr:VersionComment>');
       DBMS_LOB.APPEND (res, '<osdm_mr:VersionCommentDetails>');
      
       -- Tokenize rows
       FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_general_data.comments||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                      FROM   dual
                      CONNECT BY REGEXP_INSTR(rec_general_data.comments||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
             SELECT XMLElement("osdm_mr:VersionCommentRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
             DBMS_LOB.APPEND (res, token_value);
          END LOOP;
         
       DBMS_LOB.APPEND (res, '</osdm_mr:VersionCommentDetails>');
       DBMS_LOB.APPEND (res, '</osdm_mr:VersionComment>');       

  END LOOP;

  IF (reportTemplate.reportType = 0 OR reportTemplate.useMRImpactedObjects = 1) THEN
    FOR rec_all_measurements IN cur_all_measurements(v_design_ovid) LOOP

      IF (cur_all_measurements%ROWCOUNT = 1) THEN
        DBMS_LOB.APPEND (res,'<osdm_mr:MCollection>');
      END IF;
        DBMS_LOB.APPEND (res,'<osdm_mr:MDetails>');

        DBMS_LOB.APPEND (res,rec_all_measurements.m_name);
        
        -- Comments
        SELECT NVL(
                 (SELECT t.text comments_in_rdbms
                  FROM   dmrs_large_text t
                  WHERE  t.ovid = rec_all_measurements.m_ovid
                  AND    t.type='Comments'),
                 (SELECT t.text comments_in_rdbms
                  FROM   dmrs_large_text t
                  WHERE  t.ovid = rec_all_measurements.m_ovid
                  AND    t.type='CommentsInRDBMS'))                      description, 
                 (SELECT t.text comments_in_rdbms
                  FROM   dmrs_large_text t
                  WHERE  t.ovid = rec_all_measurements.m_ovid
                 AND    t.type='Note')                                   notes
        INTO   v_description, 
               v_notes
        FROM dual;
        
        DBMS_LOB.APPEND (res, '<osdm_mr:MComment>');
        DBMS_LOB.APPEND (res, '<osdm_mr:MCommentDetails>');
        -- Tokenize rows
        FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_description||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                       FROM   dual
                       CONNECT BY REGEXP_INSTR(v_description||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
            SELECT XMLElement("osdm_mr:MCommentRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
            DBMS_LOB.APPEND (res, token_value);
        END LOOP;
        DBMS_LOB.APPEND (res, '</osdm_mr:MCommentDetails>');
        DBMS_LOB.APPEND (res, '</osdm_mr:MComment>');
        
        DBMS_LOB.APPEND (res, '<osdm_mr:MNotes>');
        DBMS_LOB.APPEND (res, '<osdm_mr:MNotesDetails>');
        -- Tokenize rows
        FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(v_notes||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                       FROM   dual
                       CONNECT BY REGEXP_INSTR(v_notes||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
            SELECT XMLElement("osdm_mr:MNoteRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
            DBMS_LOB.APPEND (res, token_value);
        END LOOP;
        DBMS_LOB.APPEND (res, '</osdm_mr:MNotesDetails>');
        DBMS_LOB.APPEND (res, '</osdm_mr:MNotes>');
        
        DBMS_LOB.APPEND (res,rec_all_measurements.m_value);
        DBMS_LOB.APPEND (res,rec_all_measurements.m_unit);
        DBMS_LOB.APPEND (res,rec_all_measurements.m_type);
        DBMS_LOB.APPEND (res,rec_all_measurements.m_cr_date);
        DBMS_LOB.APPEND (res,rec_all_measurements.m_ef_date);
        DBMS_LOB.APPEND (res,'<osdm_mr:MUsedInObjectCollection>');
        DBMS_LOB.APPEND (res,'<osdm_mr:MUsedInObjectDetails>');
        DBMS_LOB.APPEND (res,rec_all_measurements.obj_model_name);
        DBMS_LOB.APPEND (res,rec_all_measurements.object_type);
        DBMS_LOB.APPEND (res,rec_all_measurements.object_name);
        DBMS_LOB.APPEND (res,'</osdm_mr:MUsedInObjectDetails>');
        DBMS_LOB.APPEND (res,'</osdm_mr:MUsedInObjectCollection>');

      DBMS_LOB.APPEND (res,'</osdm_mr:MDetails>');

      IF (cur_all_measurements%ROWCOUNT = rec_all_measurements.total_row_count) THEN
          DBMS_LOB.APPEND (res,'</osdm_mr:MCollection>');
      END IF;

    END LOOP;
  END IF;
  
  DBMS_LOB.APPEND (res,'</osdm_mr:root>');

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering data for measurements ended');  

RETURN res;
  
 EXCEPTION
 WHEN others THEN
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_MR_Data Exception : ' || SQLERRM);  
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_MR_Data Exception : ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
  RETURN res;
 
END Gather_MR_Data;

FUNCTION Gather_Constraint_Details_HTML(col_attr_ovid VARCHAR2) RETURN CLOB IS

clob_ CLOB;
clob_constraints CLOB;
clob_ranges CLOB;
clob_vl CLOB;

CURSOR cur_c_constraints(v_ovid IN VARCHAR2) IS
 SELECT constraint_name,
        text,
        database_type
 FROM   dmrs_check_constraints
 WHERE  dataelement_ovid = v_ovid
 ORDER BY sequence;
 rec_c_constraints cur_c_constraints % rowtype;

 CURSOR cur_ranges(v_ovid IN VARCHAR2) IS
 SELECT begin_value,
        end_value,
        short_description
 FROM   dmrs_value_ranges
 WHERE  dataelement_ovid = v_ovid
 ORDER BY sequence;
rec_ranges cur_ranges % rowtype;

CURSOR cur_valuelist_columns(v_ovid IN VARCHAR2) IS
 SELECT av.VALUE,
        av.short_description
 FROM   dmrs_avt av,
        dmrs_columns c
 WHERE  c.ovid = av.dataelement_ovid
 AND    av.dataelement_ovid = v_ovid;
rec_valuelist_columns cur_valuelist_columns % rowtype;

BEGIN

    FOR rec_c_constraints IN cur_c_constraints(col_attr_ovid) LOOP
      clob_constraints := clob_constraints 
                                           || '<tr><td>'
                                           || REPLACE(rec_c_constraints.text, Chr(10), '<br/>')
                                           || '</td><td align="center">' 
                                           || rec_c_constraints.database_type 
                                           || '</td></tr>';
    END LOOP;

    FOR rec_ranges IN cur_ranges(col_attr_ovid) LOOP
      clob_ranges := clob_ranges || '<tr><td align="right">' 
                                 || rec_ranges.begin_value 
                                 || '</td><td align="right">' 
                                 || rec_ranges.end_value 
                                 || '</td><td>' 
                                 || REPLACE(rec_ranges.short_description, Chr(10), '<br/>')
                                 || '</td></tr>';
    END LOOP;

    FOR rec_valuelist_columns IN cur_valuelist_columns(col_attr_ovid) LOOP
      clob_vl := clob_vl || '<tr><td align="right">' 
                         || rec_valuelist_columns.VALUE 
                         || '</td><td>' 
                         || REPLACE(rec_valuelist_columns.short_description, Chr(10), '<br/>')
                         || '</td></tr>';

    END LOOP;

    IF (clob_constraints IS NULL AND clob_ranges IS NULL AND clob_vl IS NULL) THEN
      RETURN '';
    ELSE
        
      clob_ := '<table class="inlineTable">';

      IF clob_constraints IS NOT NULL THEN
        clob_ := clob_ || '<tr><th>';
        clob_ := clob_ || '<table class="inlineTable">';
        clob_ := clob_ || '<tr><th colspan="3">Check Constraint</th></tr>';
        clob_ := clob_ || '<tr><th>Text</th><th>DB Type</th></tr>';
        clob_ := clob_ || clob_constraints;
        clob_ := clob_ || '</table>';
        clob_ := clob_ || '</th></tr>';
      END IF;

      IF clob_ranges IS NOT NULL THEN
        clob_ := clob_ || '<tr><th>';
        clob_ := clob_ || '<table class="inlineTable">';
        clob_ := clob_ || '<tr><th colspan="3">Ranges</th></tr>';
        clob_ := clob_ || '<tr><th>Begin Value</th><th>End Value</th><th>Description</th></tr>';
        clob_ := clob_ || clob_ranges;
        clob_ := clob_ || '</table>';
        clob_ := clob_ || '</th></tr>';
      END IF;

      IF clob_vl IS NOT NULL THEN
        clob_ := clob_ || '<tr><th>';
        clob_ := clob_ || '<table class="inlineTable">';
        clob_ := clob_ || '<tr><th colspan="2">Value List</th></tr>';
        clob_ := clob_ || '<tr><th>Value</th><th>Description</th></tr>';
        clob_ := clob_ || clob_vl;
        clob_ := clob_ || '</table>';
        clob_ := clob_ || '</th></tr>';
      END IF;

      clob_ := clob_ || '</table>';

      RETURN clob_;

    END IF;

EXCEPTION
 WHEN others THEN
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_Constraint_Details_HTML Exception : ' || SQLERRM);  
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_Constraint_Details_HTML Exception : ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
  RETURN clob_;
  
END Gather_Constraint_Details_HTML;

FUNCTION Gather_Domain_Constraints_HTML (domain_ovid VARCHAR2) RETURN CLOB IS

clob_            CLOB;
clob_constraints CLOB;
clob_ranges      CLOB;
clob_vl          CLOB;

CURSOR cur_c_constraints(v_c_ovid IN VARCHAR2) IS
 SELECT NVL(text,' ')           text,
        NVL(database_type,' ')  database_type
 FROM   dmrs_domain_check_constraints
 WHERE  domain_ovid = v_c_ovid
 ORDER BY sequence;
rec_c_constraints cur_c_constraints%rowtype;

CURSOR cur_ranges(v_c_ovid IN VARCHAR2) IS
 SELECT NVL(begin_value,' ')           begin_value,
        NVL(end_value, ' ')            end_value,
        NVL(short_description,' ')     short_description
 FROM   dmrs_domain_value_ranges
 WHERE  domain_ovid = v_c_ovid
 ORDER BY sequence;
rec_ranges cur_ranges%rowtype;

CURSOR cur_valuelist_columns(v_c_ovid IN VARCHAR2) IS
 SELECT NVL(av.value,' ')             value,
        NVL(av.short_description,' ') short_description
 FROM   dmrs_domain_avt av
 WHERE  av.domain_ovid = v_c_ovid;
rec_valuelist_columns cur_valuelist_columns%rowtype;

BEGIN
    
    DBMS_LOB.CREATETEMPORARY(clob_constraints, TRUE);
    DBMS_LOB.CREATETEMPORARY(clob_ranges, TRUE);
    DBMS_LOB.CREATETEMPORARY(clob_vl, TRUE);
    DBMS_LOB.CREATETEMPORARY(clob_, TRUE);
    
    FOR rec_c_constraints IN cur_c_constraints(domain_ovid) LOOP
        DBMS_LOB.APPEND (clob_constraints, '<tr><td>');
        DBMS_LOB.APPEND (clob_constraints, REPLACE(rec_c_constraints.text, Chr(10), '<br/>'));
        DBMS_LOB.APPEND (clob_constraints, '</td><td align="center">' );
        DBMS_LOB.APPEND (clob_constraints, rec_c_constraints.database_type );
        DBMS_LOB.APPEND (clob_constraints, '</td></tr>');
    END LOOP;

    FOR rec_ranges IN cur_ranges(domain_ovid) LOOP
        DBMS_LOB.APPEND (clob_ranges,'<tr><td align="right">');
        DBMS_LOB.APPEND (clob_ranges, rec_ranges.begin_value);
        DBMS_LOB.APPEND (clob_ranges,'</td><td align="right">');    
        DBMS_LOB.APPEND (clob_ranges, rec_ranges.end_value);
        DBMS_LOB.APPEND (clob_ranges,'</td><td>');
        DBMS_LOB.APPEND (clob_ranges,REPLACE(rec_ranges.short_description, Chr(10), '<br/>'));
        DBMS_LOB.APPEND (clob_ranges,'</td></tr>');
    END LOOP;

    FOR rec_valuelist_columns IN cur_valuelist_columns(domain_ovid) LOOP
        DBMS_LOB.APPEND (clob_vl,'<tr><td align="right">');
        DBMS_LOB.APPEND (clob_vl,rec_valuelist_columns.VALUE);
        DBMS_LOB.APPEND (clob_vl,'</td><td>'); 
        DBMS_LOB.APPEND (clob_vl,REPLACE(rec_valuelist_columns.short_description, Chr(10), '<br/>'));
        DBMS_LOB.APPEND (clob_vl,'</td></tr>');
    END LOOP;

    IF (clob_constraints IS NULL AND clob_ranges IS NULL AND clob_vl IS NULL) THEN
      RETURN '';
    ELSE

      DBMS_LOB.APPEND (clob_, '<table class="inlineTable">');

      IF clob_constraints IS NOT NULL THEN
         DBMS_LOB.APPEND (clob_,'<tr><th>');
         DBMS_LOB.APPEND (clob_,'<table class="inlineTable">');
         DBMS_LOB.APPEND (clob_,'<tr><th colspan="3">Check Constraint</th></tr>');
         DBMS_LOB.APPEND (clob_,'<tr><th>Text</th><th>DB Type</th></tr>');
         DBMS_LOB.APPEND (clob_,clob_constraints);
         DBMS_LOB.APPEND (clob_,'</table>');
         DBMS_LOB.APPEND (clob_,'</th></tr>');
      END IF;

      IF clob_ranges IS NOT NULL THEN
         DBMS_LOB.APPEND (clob_,'<tr><th>');
         DBMS_LOB.APPEND (clob_,'<table class="inlineTable">');
         DBMS_LOB.APPEND (clob_,'<tr><th colspan="3">Ranges</th></tr>');
         DBMS_LOB.APPEND (clob_,'<tr><th>Begin Value</th><th>End Value</th><th>Description</th></tr>');
         DBMS_LOB.APPEND (clob_,clob_ranges);
         DBMS_LOB.APPEND (clob_,'</table>');
         DBMS_LOB.APPEND (clob_,'</th></tr>');
      END IF;

      IF clob_vl IS NOT NULL THEN
         DBMS_LOB.APPEND (clob_,'<tr><th>');
         DBMS_LOB.APPEND (clob_,'<table class="inlineTable">');
         DBMS_LOB.APPEND (clob_,'<tr><th colspan="2">Value List</th></tr>');
         DBMS_LOB.APPEND (clob_,'<tr><th>Value</th><th>Description</th></tr>');
         DBMS_LOB.APPEND (clob_,clob_vl);
         DBMS_LOB.APPEND (clob_,'</table>');
         DBMS_LOB.APPEND (clob_,'</th></tr>');
      END IF;

      DBMS_LOB.APPEND (clob_,'</table>');
    END IF;

 RETURN clob_;
 
EXCEPTION
 WHEN others THEN
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_Domain_Constraints_HTML Exception : : ' || SQLERRM);  
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_Domain_Constraints_HTML Exception : ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
  RETURN clob_;

END Gather_Domain_Constraints_HTML;

FUNCTION Gather_Domain_Constraints_XML(domain_ovid VARCHAR2) RETURN CLOB IS

res          CLOB;
v_cc_created BOOLEAN := FALSE;

CURSOR cur_c_constraints(v_c_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_ad:Text",d.text).getClobVal()                  text,
        XMLElement("osdm_ad:DatabaseType",d.database_type).getClobVal() database_type,
        COUNT(text) over()                                              total_row_count
 FROM   dmrs_domain_check_constraints d
 WHERE  d.domain_ovid = v_c_ovid
 ORDER BY d.database_type;
rec_c_constraints cur_c_constraints%rowtype;

CURSOR cur_ranges(v_c_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_ad:RangeBeginValue",d.begin_value).getClobVal()             begin_value,
        XMLElement("osdm_ad:RangeEndValue",d.end_value).getClobVal()                 end_value,
        XMLElement("osdm_ad:RangeShortDescription",d.short_description).getClobVal() short_description,
        COUNT(begin_value) over() total_row_count
 FROM   dmrs_domain_value_ranges d
 WHERE  d.domain_ovid = v_c_ovid
 ORDER BY d.begin_value, 
          d.end_value,
          d.short_description;
rec_ranges cur_ranges%rowtype;

CURSOR cur_valuelist_columns(v_c_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_ad:VLValue",av.value).getClobVal()                         v_value, 
        XMLElement("osdm_ad:VLShortDescription",av.short_description).getClobVal()  short_description,
        COUNT(value) over() total_row_count
 FROM   dmrs_domain_avt av
 WHERE  av.domain_ovid = v_c_ovid
 ORDER BY av.value, 
          av.short_description;
rec_valuelist_columns cur_valuelist_columns%rowtype;

BEGIN

    DBMS_LOB.CREATETEMPORARY(res, TRUE);

    FOR rec_ranges IN cur_ranges(domain_ovid) LOOP
       IF (cur_ranges%ROWCOUNT = 1) THEN
          IF NOT v_cc_created THEN 
            DBMS_LOB.APPEND (res, '<osdm_ad:ConstraintsCollection>');
            DBMS_LOB.APPEND (res, '<osdm_ad:ConstraintDetails>');
            v_cc_created := TRUE;
          END IF;
          DBMS_LOB.APPEND (res,'<osdm_ad:RangesCollection>');
       END IF;
          DBMS_LOB.APPEND (res,'<osdm_ad:RangeDetails>');
          DBMS_LOB.APPEND (res,rec_ranges.begin_value);
          DBMS_LOB.APPEND (res,rec_ranges.end_value);
          DBMS_LOB.APPEND (res,rec_ranges.short_description);
          DBMS_LOB.APPEND (res,'</osdm_ad:RangeDetails>');
       IF (cur_ranges%ROWCOUNT = rec_ranges.total_row_count) THEN
          DBMS_LOB.APPEND (res, '</osdm_ad:RangesCollection>');
       END IF;
    END LOOP;

    FOR rec_valuelist_columns IN cur_valuelist_columns(domain_ovid) LOOP
       IF (cur_valuelist_columns%ROWCOUNT = 1) THEN
          IF NOT v_cc_created THEN 
            DBMS_LOB.APPEND (res, '<osdm_ad:ConstraintsCollection>');
            DBMS_LOB.APPEND (res, '<osdm_ad:ConstraintDetails>');
            v_cc_created := TRUE;
          END IF;
          DBMS_LOB.APPEND (res,'<osdm_ad:ValueListsCollection>');
       END IF;
          DBMS_LOB.APPEND (res,'<osdm_ad:ValueListDetails>');
          DBMS_LOB.APPEND (res,rec_valuelist_columns.v_value);
          DBMS_LOB.APPEND (res,rec_valuelist_columns.short_description);
          DBMS_LOB.APPEND (res,'</osdm_ad:ValueListDetails>');
       IF (cur_valuelist_columns%ROWCOUNT = rec_valuelist_columns.total_row_count) THEN
          DBMS_LOB.APPEND (res, '</osdm_ad:ValueListsCollection>');
       END IF;
    END LOOP;
   
    FOR rec_c_constraints IN cur_c_constraints(domain_ovid) LOOP
       IF (cur_c_constraints%ROWCOUNT = 1) THEN
          IF NOT v_cc_created THEN 
            DBMS_LOB.APPEND (res, '<osdm_ad:ConstraintsCollection>');
            DBMS_LOB.APPEND (res, '<osdm_ad:ConstraintDetails>');
            v_cc_created := TRUE;
          END IF;
          DBMS_LOB.APPEND (res,'<osdm_ad:CheckConstraintsCollection>');
       END IF;
       
          DBMS_LOB.APPEND (res,'<osdm_ad:CheckConstraintDetails>');
          DBMS_LOB.APPEND (res,rec_c_constraints.text);
          DBMS_LOB.APPEND (res,rec_c_constraints.database_type);
          DBMS_LOB.APPEND (res,'</osdm_ad:CheckConstraintDetails>');
       IF (cur_c_constraints%ROWCOUNT = rec_c_constraints.total_row_count) THEN
          DBMS_LOB.APPEND (res, '</osdm_ad:CheckConstraintsCollection>');
       END IF;
    END LOOP;

    IF v_cc_created THEN 
       DBMS_LOB.APPEND (res, '</osdm_ad:ConstraintDetails>');
       DBMS_LOB.APPEND (res, '</osdm_ad:ConstraintsCollection>');
    END IF;

  RETURN res;

EXCEPTION
 WHEN others THEN
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_Domain_Constraints_XML Exception : : ' || SQLERRM);  
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_Domain_Constraints_XML Exception : ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
  RETURN res;
  
END Gather_Domain_Constraints_XML;

FUNCTION Gather_AllDomains_Data(v_obj_ovid IN VARCHAR2, reportTemplate IN REPORT_TEMPLATE) RETURN CLOB IS 

res          CLOB;
token_value  CLOB;

-- Common Data
CURSOR cur_common_data(v_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_ad:DesignName",d.design_name).getClobVal()                                      design_name,
        XMLElement("osdm_ad:VersionDate",TO_CHAR(d.date_published,'dd.mm.yyyy hh24:mi:ss')).getClobVal() version_date,
        d.version_comments                                                                               version_comment
 FROM   dmrs_designs d
 WHERE  d.design_ovid = v_ovid;
rec_common_data cur_common_data%ROWTYPE;

CURSOR cur_all_domains(v_o_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_ad:DomainName", d.domain_name).getClobVal()                        domain_name, 
        XMLElement("osdm_ad:Synonyms", d.synonyms).getClobVal()                             synonyms,
        XMLElement("osdm_ad:DataType", d.native_type  ||' '||
           DECODE (NVL(d.t_size,''),'',
           DECODE(NVL(d.t_scale,0),0,
                DECODE(NVL(d.t_precision,0),0,null,'('|| DECODE(NVL(d.t_precision,0),0,null,d.t_precision) ||')'),
                        '('|| DECODE(NVL(d.t_precision,0),0,null,d.t_precision) || ',' || DECODE(NVL(d.t_scale,0),0,null,d.t_scale)||')'),
       '('||TRIM(DECODE(d.t_size,'',null,d.t_size||' '||d.char_units ))||')')).getClobVal()  data_type,
        XMLElement("osdm_ad:LogicalType", d.lt_name).getClobVal()                           lt_name,
        XMLElement("osdm_ad:UnitOfMeasure", d.unit_of_measure).getClobVal()                 unit_of_measure,
        XMLElement("osdm_ad:DefaultValue", d.default_value).getClobVal()                    default_value,
        Gather_Domain_Constraints_XML(d.ovid)                                               constraint_details,
        d.ovid                                                                              domain_ovid,
        COUNT(d.domain_name) over()                                                         total_row_count
 FROM   dmrs_domains d
 WHERE  d.design_ovid = v_o_ovid
 ORDER BY d. domain_name;
rec_all_domains cur_all_domains%ROWTYPE;

CURSOR cur_description(v_d_ovid IN VARCHAR2) IS
 SELECT lt.text  description
 FROM   dmrs_large_text lt
 WHERE  lt.ovid = v_d_ovid;
rec_description cur_description%ROWTYPE;

CURSOR cur_used_in_tables(v_d_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_ad:ModelName", c.model_name).getClobVal()     model_name,
        XMLElement("osdm_ad:TableName", c.table_name).getClobVal()     table_name,
        XMLElement("osdm_ad:ColumnName", c.column_name).getClobVal()   column_name,
        COUNT(c.model_name) over()                                     total_row_count
 FROM   dmrs_columns c,
        dmrs_domains d
 WHERE  d.ovid = v_d_ovid
 AND    c.domain_ovid = d.ovid
 ORDER BY c.model_name,
          c.table_name,
          c.column_name;
rec_used_in_tables cur_used_in_tables%ROWTYPE;

CURSOR cur_used_in_entities(v_d_ovid IN VARCHAR2) IS
 SELECT XMLElement("osdm_ad:EntityName", a.entity_name).getClobVal()        entity_name,
        XMLElement("osdm_ad:AttributeName", a.attribute_name).getClobVal()  attribute_name,
        COUNT(a.entity_name) over()                                         total_row_count
 FROM   dmrs_attributes a,
        dmrs_domains d
 WHERE  d.ovid = v_d_ovid
 AND    a.domain_ovid = d.ovid
 ORDER BY a.entity_name,
          a.attribute_name;
rec_used_in_entities cur_used_in_entities%ROWTYPE;

BEGIN

  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering all domains data started ...');

  DBMS_LOB.CREATETEMPORARY(res, TRUE);
  DBMS_LOB.APPEND (res,'<osdm_ad:root xmlns:osdm_ad="osdm_ad">');

   -- Common Data
   FOR rec_common_data IN cur_common_data(v_obj_ovid) LOOP

      DBMS_LOB.APPEND (res, rec_common_data.design_name);
      DBMS_LOB.APPEND (res, rec_common_data.version_date);  
        
      DBMS_LOB.APPEND (res, '<osdm_ad:VersionComment>');
      DBMS_LOB.APPEND (res, '<osdm_ad:VersionCommentDetails>');
      -- Tokenize rows
      FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_common_data.version_comment||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                     FROM   dual
                     CONNECT BY REGEXP_INSTR(rec_common_data.version_comment||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP

           SELECT XMLElement("osdm_ad:VersionCommentRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
           DBMS_LOB.APPEND (res, token_value);                   
       END LOOP;
      DBMS_LOB.APPEND (res, '</osdm_ad:VersionCommentDetails>');
      DBMS_LOB.APPEND (res, '</osdm_ad:VersionComment>');
   END LOOP;

   FOR rec_all_domains IN cur_all_domains(v_obj_ovid) LOOP
      IF (cur_all_domains%ROWCOUNT = 1) THEN
        DBMS_LOB.APPEND (res,'<osdm_ad:DomainsCollection>');
      END IF;

        DBMS_LOB.APPEND (res,'<osdm_ad:DomainDetails>');
         
        DBMS_LOB.APPEND (res,rec_all_domains.domain_name);
        DBMS_LOB.APPEND (res,rec_all_domains.synonyms);
        DBMS_LOB.APPEND (res,rec_all_domains.data_type);
        DBMS_LOB.APPEND (res,rec_all_domains.lt_name);
        DBMS_LOB.APPEND (res,rec_all_domains.unit_of_measure);
        DBMS_LOB.APPEND (res,rec_all_domains.default_value);
        
        DBMS_LOB.APPEND (res, '<osdm_ad:DomainComment>');
        DBMS_LOB.APPEND (res, '<osdm_ad:DomainCommentDetails>');

        FOR rec_description IN cur_description(rec_all_domains.domain_ovid) LOOP
           -- Tokenize rows
           FOR token IN ( SELECT REGEXP_REPLACE(REGEXP_SUBSTR(rec_description.description||Chr(10), '(.*'||Chr(10)||')', 1, LEVEL ), Chr(10), '') t
                          FROM   dual
                          CONNECT BY REGEXP_INSTR(rec_description.description||Chr(10), '(.*'||Chr(10)||')',1, LEVEL ) > 0) LOOP
                          
               SELECT XMLElement("osdm_ad:DomainCommentRow", XMLCDATA(token.t)).getClobVal() INTO token_value FROM dual;
               DBMS_LOB.APPEND (res, token_value);                                                                       
           END LOOP;
           
        END LOOP;
        DBMS_LOB.APPEND (res, '</osdm_ad:DomainCommentDetails>');
        DBMS_LOB.APPEND (res, '</osdm_ad:DomainComment>');       
      
        -- Constraints
        IF (reportTemplate.reportType = 0 OR reportTemplate.useDomainConstraints = 1) THEN
          DBMS_LOB.APPEND (res,rec_all_domains.constraint_details);
        END IF;

        -- Used in tables
        IF (reportTemplate.reportType = 0 OR reportTemplate.useDomainUsedInTables = 1) THEN
          FOR rec_used_in_tables IN cur_used_in_tables(rec_all_domains.domain_ovid) LOOP
             IF (cur_used_in_tables%ROWCOUNT = 1) THEN
                DBMS_LOB.APPEND (res,'<osdm_ad:TablesCollection>');
             END IF;
                DBMS_LOB.APPEND (res,'<osdm_ad:TableDetails>');
                DBMS_LOB.APPEND (res,rec_used_in_tables.model_name);
                DBMS_LOB.APPEND (res,rec_used_in_tables.table_name);
                DBMS_LOB.APPEND (res,rec_used_in_tables.column_name);
                DBMS_LOB.APPEND (res,'</osdm_ad:TableDetails>');
             IF (cur_used_in_tables%ROWCOUNT = rec_used_in_tables.total_row_count) THEN
                DBMS_LOB.APPEND (res, '</osdm_ad:TablesCollection>');
             END IF;
          END LOOP;
        END IF;

        -- Used in entities
        IF (reportTemplate.reportType = 0 OR reportTemplate.useDomainUsedInEntities = 1) THEN
          FOR rec_used_in_entities IN cur_used_in_entities(rec_all_domains.domain_ovid) LOOP
             IF (cur_used_in_entities%ROWCOUNT = 1) THEN
                DBMS_LOB.APPEND (res,'<osdm_ad:EntitiesCollection>');
             END IF;
                DBMS_LOB.APPEND (res,'<osdm_ad:EntityDetails>');
                DBMS_LOB.APPEND (res,rec_used_in_entities.entity_name);
                DBMS_LOB.APPEND (res,rec_used_in_entities.attribute_name);
                DBMS_LOB.APPEND (res,'</osdm_ad:EntityDetails>');
             IF (cur_used_in_entities%ROWCOUNT = rec_used_in_entities.total_row_count) THEN
                DBMS_LOB.APPEND (res, '</osdm_ad:EntitiesCollection>');
             END IF;
          END LOOP;
        END IF;

        DBMS_LOB.APPEND (res,'</osdm_ad:DomainDetails>');

      IF (cur_all_domains%ROWCOUNT = rec_all_domains.total_row_count) THEN
       DBMS_LOB.APPEND (res, '</osdm_ad:DomainsCollection>');
      END IF;
   END LOOP;

  DBMS_LOB.APPEND (res,'</osdm_ad:root>');
  
  UTL_FILE.PUT_LINE(log_file, TO_CHAR(SYSDATE,'yy.mm.dd hh:mi:ss') ||' '|| 'Gathering all domains data ended');

RETURN res;

EXCEPTION
 WHEN others THEN
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_AllDomains_Data Exception : ' || SQLERRM);  
  UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Gather_AllDomains_Data Exception : ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
  RETURN res;
 
END Gather_AllDomains_Data;  

FUNCTION Create_Log_File(v_reports_dir IN VARCHAR2) RETURN NUMBER IS 

insufficient_privileges EXCEPTION;
PRAGMA EXCEPTION_INIT(insufficient_privileges, -01031);

BEGIN

 IF v_reports_dir IS NOT NULL THEN
  EXECUTE IMMEDIATE 'CREATE OR REPLACE DIRECTORY OSDDM_REPORTS_DIR AS '''|| v_reports_dir ||'''';
  EXECUTE IMMEDIATE 'GRANT READ, WRITE ON DIRECTORY OSDDM_REPORTS_DIR TO PUBLIC';
 END IF;

 log_file := UTL_FILE.Fopen('OSDDM_REPORTS_DIR','osddm_reports.log','w', 32767);

RETURN 0;

 EXCEPTION
  WHEN UTL_FILE.Invalid_Path THEN
   RETURN 1;
  WHEN  UTL_FILE.Read_Error OR UTL_FILE.Write_Error OR UTL_FILE.Access_Denied THEN 
   RETURN 2;
  WHEN insufficient_privileges THEN
   RETURN 3;

END Create_Log_File;

PROCEDURE Generate_Report(v_rep_id           IN NUMBER,
                          v_obj_ovid         IN VARCHAR2,
                          v_mode             IN NUMBER,
                          v_reports_dir      IN VARCHAR2,
                          v_compress         IN NUMBER, 
                          reportTemplate     IN REPORT_TEMPLATE,
                          v_raw_xml         OUT BFILE, 
                          v_status          OUT NUMBER, 
                          osddm_reports_dir OUT VARCHAR2) IS

raw_xml_fn        CONSTANT VARCHAR2(20) := 'report_data_rs.xml';
res               CLOB;
db_data_clob      CLOB;
v_blob						BLOB;
v_blob_xml				BLOB;
v_dest_offset			INTEGER := 1;
v_src_offset			INTEGER := 1;
warning						INTEGER;
rseq              INTEGER;
nseq              INTEGER;
v_lang_context		NUMBER 	:= DBMS_LOB.Default_Lang_Ctx;
v_p_doc_xml_lngth NUMBER;
j_status          NUMBER;
db_version        VARCHAR2(100);

BEGIN

    v_status := Create_Log_File(v_reports_dir);

    IF (v_status = 0)  THEN

      DBMS_LOB.CREATETEMPORARY(v_blob, TRUE);
      DBMS_LOB.CREATETEMPORARY(v_blob_xml, TRUE);
      DBMS_LOB.CREATETEMPORARY(db_data_clob, TRUE);
      
      DBMS_LOB.APPEND (db_data_clob,'<?xml version = ''1.0'' encoding = ''UTF-8''?>');

      IF v_rep_id = 1 THEN
         DBMS_LOB.APPEND (db_data_clob, Gather_SingleTable_Data(v_obj_ovid, reportTemplate));
      ELSIF v_rep_id = 2 THEN
         DBMS_LOB.APPEND (db_data_clob, Gather_AllTables_Data(v_obj_ovid, reportTemplate));
      ELSIF v_rep_id = 3 THEN
         DBMS_LOB.APPEND (db_data_clob, Gather_SingleEntity_Data(v_obj_ovid, reportTemplate));
      ELSIF v_rep_id = 4 THEN
         DBMS_LOB.APPEND (db_data_clob, Gather_AllEntities_Data(v_obj_ovid, reportTemplate));
      ELSIF v_rep_id = 5 THEN
         DBMS_LOB.APPEND (db_data_clob, Gather_AllDomains_Data(v_obj_ovid, reportTemplate));
      ELSIF v_rep_id = 6 THEN
         DBMS_LOB.APPEND (db_data_clob, Gather_Glossary_Data(v_obj_ovid));
      ELSIF v_rep_id = 7 THEN
         DBMS_LOB.APPEND (db_data_clob, Gather_SingleST_Data(v_obj_ovid, reportTemplate));
      ELSIF v_rep_id = 8 THEN
         DBMS_LOB.APPEND (db_data_clob, Gather_AllST_Data(v_obj_ovid, reportTemplate));
      ELSIF v_rep_id = 9 THEN
         DBMS_LOB.APPEND (db_data_clob, Gather_SingleCT_Data(v_obj_ovid, reportTemplate));
      ELSIF v_rep_id = 10 THEN
         DBMS_LOB.APPEND (db_data_clob, Gather_AllCT_Data(v_obj_ovid, reportTemplate));
      ELSIF v_rep_id = 11 THEN
         DBMS_LOB.APPEND (db_data_clob, Gather_SingleDT_Data(v_obj_ovid, reportTemplate));
      ELSIF v_rep_id = 12 THEN
         DBMS_LOB.APPEND (db_data_clob, Gather_AllDT_Data(v_obj_ovid, reportTemplate));
      ELSIF v_rep_id = 13 THEN
         DBMS_LOB.APPEND (db_data_clob, Gather_CR_Data(v_obj_ovid, reportTemplate));
      ELSIF v_rep_id = 14 THEN
         DBMS_LOB.APPEND (db_data_clob, Gather_MR_Data(v_obj_ovid, reportTemplate));
      END IF;

	    SELECT banner
      INTO   db_version
      FROM   v$version
      WHERE  banner LIKE 'Oracle%';

      -- raw xml
      DBMS_LOB.CONVERTTOBLOB(v_blob_xml,
                             db_data_clob,
                             DBMS_LOB.LOBMAXSIZE,
                             v_dest_offset,
                             v_src_offset,
                             DBMS_LOB.DEFAULT_CSID,
                             v_lang_context,
                             warning);
      Generate_OS_File(v_blob_xml, raw_xml_fn, 0);
      v_raw_xml := BFILENAME('OSDDM_REPORTS_DIR', raw_xml_fn);

      UTL_FILE.fclose(log_file);

   END IF;

COMMIT;

   SELECT directory_path
   INTO   osddm_reports_dir
   FROM   all_directories
   WHERE  directory_name = 'OSDDM_REPORTS_DIR';

EXCEPTION

   WHEN others THEN
     ROLLBACK;
     IF (v_mode = 1) THEN
        UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Generate_Report Exception : ' || SQLERRM);  
        UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Generate_Report Exception : ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        UTL_FILE.fclose(log_file);
     ELSIF (v_mode = 2) THEN
        htp.p('<br/>');
        htp.p('<br/>');
        htp.p('Error occured during report generation:');
        htp.p('<br/>');
        htp.p('Pkg_Osdm_Utils.Generate_Report Exception:');
        htp.p(sqlerrm);
        htp.p('<br/>');
        htp.p('For more details see the report generation log file in OSDDM_REPORTS_DIR directory.');
        UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Generate_Report Exception : ' || SQLERRM);  
        UTL_FILE.PUT_LINE(log_file, 'Pkg_Osdm_Utils.Generate_Report Exception : ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
     END IF;
     
     IF UTL_FILE.is_open(log_file) THEN
        UTL_FILE.fclose(log_file);
     END IF;
     IF UTL_FILE.is_open(temp_file) THEN
        UTL_FILE.fclose(temp_file);
     END IF;

END Generate_Report;

END PKG_OSDM_UTILS;

/
--------------------------------------------------------

--  DDL for Package Body PKG_SP_TEST

--------------------------------------------------------


  CREATE OR REPLACE PACKAGE BODY "RPTAPP"."PKG_SP_TEST" AS
  PROCEDURE get_data1(soeid in varchar2, x out SYS_REFCURSOR) AS
  BEGIN
    OPEN x FOR SELECT  * from ra_report_instances ri where ri.submitted_by_soeid not like soeid;
  END get_data1;
  
  FUNCTION refcursor_function  RETURN SYS_REFCURSOR AS
  c SYS_REFCURSOR;
  BEGIN
  OPEN c FOR select * from ra_report_instances;
  RETURN c;
END refcursor_function;
END pkg_sp_test;

/
--------------------------------------------------------

--  DDL for Package Body RA_INQUIRY_PURGE_REPORT

--------------------------------------------------------


  CREATE OR REPLACE PACKAGE BODY "RPTAPP"."RA_INQUIRY_PURGE_REPORT" AS
  PROCEDURE RA_DELETE_RPT_INST_BY_PARAM(p_run_id IN NUMBER, p_report_id IN NUMBER, p_purge_date IN DATE) AS
  BEGIN
      BEGIN
          IF(p_run_id <> -1) THEN
              delete from RA_INSTANCE_QUERY_COLUMNS where RUN_ID=p_run_id;
              delete from RA_INSTANCE_STATUS_HIST where RUN_ID=p_run_id;
              delete from RA_INST_SHARE where RUN_ID=p_run_id;
              delete from RA_SHARED_REPORTS where RUN_ID=p_run_id;
              delete from RA_INSTANCE_PROMPT_VALUES where RUN_ID=p_run_id;
              delete from RA_TEMPLATES where RUN_ID=p_run_id;
              delete from RA_INST_LABEL where RUN_ID=p_run_id;
              delete from RA_UI_REPORT_EXECUTION_V where RUN_ID=p_run_id;
              delete from RA_REPORT_RUN_DETAILS_V where RUN_ID=p_run_id;
              delete from RA_REPORT_INSTANCES where RUN_ID=p_run_id;
          END IF;
          IF(p_report_id <> -1 AND p_purge_date IS NOT NULL) THEN
              delete from RA_INSTANCE_QUERY_COLUMNS where RUN_ID IN(SELECT RUN_ID FROM RA_REPORT_INSTANCES WHERE REPORT_ID = p_report_id AND CREATION_DTM < p_purge_date);
              delete from RA_INSTANCE_STATUS_HIST where RUN_ID IN(SELECT RUN_ID FROM RA_REPORT_INSTANCES WHERE REPORT_ID = p_report_id AND CREATION_DTM < p_purge_date);
              delete from RA_INST_SHARE where RUN_ID IN(SELECT RUN_ID FROM RA_REPORT_INSTANCES WHERE REPORT_ID = p_report_id AND CREATION_DTM < p_purge_date);
              delete from RA_SHARED_REPORTS where RUN_ID IN(SELECT RUN_ID FROM RA_REPORT_INSTANCES WHERE REPORT_ID = p_report_id AND CREATION_DTM < p_purge_date);
              delete from RA_INSTANCE_PROMPT_VALUES where RUN_ID IN(SELECT RUN_ID FROM RA_REPORT_INSTANCES WHERE REPORT_ID = p_report_id AND CREATION_DTM < p_purge_date);
              delete from RA_TEMPLATES where RUN_ID IN(SELECT RUN_ID FROM RA_REPORT_INSTANCES WHERE REPORT_ID = p_report_id AND CREATION_DTM < p_purge_date);
              delete from RA_INST_LABEL where RUN_ID IN(SELECT RUN_ID FROM RA_REPORT_INSTANCES WHERE REPORT_ID = p_report_id AND CREATION_DTM < p_purge_date);
              delete from RA_UI_REPORT_EXECUTION_V where RUN_ID IN(SELECT RUN_ID FROM RA_REPORT_INSTANCES WHERE REPORT_ID = p_report_id AND CREATION_DTM < p_purge_date);
              delete from RA_REPORT_RUN_DETAILS_V where RUN_ID IN(SELECT RUN_ID FROM RA_REPORT_INSTANCES WHERE REPORT_ID = p_report_id AND CREATION_DTM < p_purge_date);
              delete from RA_REPORT_INSTANCES where RUN_ID IN(SELECT RUN_ID FROM RA_REPORT_INSTANCES WHERE REPORT_ID = p_report_id AND CREATION_DTM < p_purge_date);
          END IF;
          COMMIT;
      EXCEPTION
      WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE('An exception has occurred--->' || SQLERRM);
          ROLLBACK;
      END;
  END RA_DELETE_RPT_INST_BY_PARAM;
END RA_INQUIRY_PURGE_REPORT;

/
--------------------------------------------------------

--  DDL for Package Body RA_INQUIRY_PURGE_REPORT_PKG

--------------------------------------------------------


  CREATE OR REPLACE PACKAGE BODY "RPTAPP"."RA_INQUIRY_PURGE_REPORT_PKG" AS
  PROCEDURE RA_DELETE_RPT_INST_BY_REPORT(P_REPORT_ID IN NUMBER, P_PURGE_DATE IN DATE) AS
  CURSOR PURGE_CUR IS SELECT RUN_ID FROM RA_REPORT_INSTANCES RA WHERE RA.REPORT_ID = P_REPORT_ID 
  		AND RA.CREATION_DTM < P_PURGE_DATE;
      
  BEGIN
  
      FOR PCUR IN PURGE_CUR
      LOOP 
         RA_DELETE_RPT_INST_BY_RUNID(PCUR.RUN_ID);
      END LOOP;      

   END;   
   
  PROCEDURE RA_DELETE_RPT_INST_BY_RUNID(P_RUN_ID IN NUMBER) AS
   BEGIN
              DELETE FROM RA_REPORT_INSTANCES WHERE RUN_ID=P_RUN_ID;
              DELETE FROM RA_INSTANCE_QUERY_COLUMNS WHERE RUN_ID=P_RUN_ID;              
              DELETE FROM RA_INSTANCE_STATUS_HIST WHERE RUN_ID=P_RUN_ID;              
              DELETE FROM RA_INST_SHARE WHERE RUN_ID=P_RUN_ID;              
              DELETE FROM RA_SHARED_REPORTS WHERE RUN_ID=P_RUN_ID;              
              DELETE FROM RA_INSTANCE_PROMPT_VALUES WHERE RUN_ID=P_RUN_ID;              
              DELETE FROM RA_TEMPLATES WHERE RUN_ID=P_RUN_ID;              
              DELETE FROM RA_INST_LABEL WHERE RUN_ID=P_RUN_ID;
              COMMIT;
   END;

END RA_INQUIRY_PURGE_REPORT_PKG;

/
--------------------------------------------------------

--  DDL for Package Body RA_STR_PROC_TEST

--------------------------------------------------------


  CREATE OR REPLACE PACKAGE BODY "RPTAPP"."RA_STR_PROC_TEST" AS

  PROCEDURE GETALLREPORTS_AFTER_DATE2 (P_USER_ID IN VARCHAR2, P_AS_OF_DATE IN DATE, p_REPORTS_INFO OUT ref_cursor_type) AS
  BEGIN
    OPEN P_REPORTS_INFO FOR SELECT  RI.RUN_ID,RI.ORIGINAL_RUN_ID,R.REPORT_ID,R.APP_ID,APPS.APP_NAME APP,
      RI.SUBMITTED_BY_SOEID SOEID,
      RI2.SUBMITTED_BY_SOEID ORIGINAL_SOEID,
        R.DISPLAY_REPORT_NAME REPORT_NAME,
        RI.INSTANCE_NAME REPORT_TITLE,
        RI.OUTPUT_TYPE,
        NVL(RI.OUTPUT_FILE_SIZE,0) AS "SIZE", 
        RI2.STATUS,
        (CASE 
          WHEN (RI2.STATUS=1) THEN 'Pending'
          WHEN (RI2.STATUS=2) THEN 'Executing'
          WHEN (RI2.STATUS=3) THEN 'Completed'
          WHEN (RI2.STATUS=4) THEN 'Failed' 
          END
        ) STATUS_DESC,
        (CASE 
          WHEN (R.ACTIVE_IND='A') THEN 'Active'
          WHEN (R.ACTIVE_IND='I') THEN 'Decommissioned'
          WHEN (R.ACTIVE_IND='D') THEN 'Deprecated'
          END
        ) REPORT_ACTIVE_IND,
        TO_CHAR(RI.CREATION_DTM,'YYYY/MM/DD HH24:MI:SS') CREATE_TIME,
        TO_CHAR(RI.CREATION_DTM,'YYYY/MM/DD HH24:MI:SS') SCHEDULED_TIME,
        (CASE WHEN RI2.START_TIME IS NULL THEN TO_CHAR(RI.CREATION_DTM,'YYYY/MM/DD HH24:MI:SS') ELSE TO_CHAR(RI2.START_TIME,'YYYY/MM/DD HH24:MI:SS') END) START_TIME,
        (CASE WHEN RI2.END_TIME IS NULL THEN NULL ELSE TO_CHAR(RI2.END_TIME,'YYYY/MM/DD HH24:MI:SS') END) END_TIME,
        (CASE WHEN RI.SUBSCRIPTION_ID IS NULL THEN 'USER' ELSE 'EVENT' END) TRIGGERED_BY,
        (CASE WHEN R.DATA_SECURITY_ENABLED='Y' THEN 'N' ELSE 'Y' END)  IS_SHARABLE,
        (CASE WHEN R.DATA_SECURITY_ENABLED='Y' THEN 'Y' ELSE 'N' END)  IS_ENTITLED,
        NVL(RI2.IS_MAXROWS_EXCEED,'N') IS_PARTIAL_RESULT,
        (CASE WHEN R.DETAIL_REPORT_ID IS NULL THEN 'N' ELSE 'Y' END) HAS_DETAILS,
        ( SELECT CASE WHEN COUNT(RUN_ID) > 0 THEN 'Y' ELSE 'N' END FROM RA_INSTANCE_READ_ACTIVITY RA WHERE RA.RUN_ID = RI2.RUN_ID AND RA.VIEWED_BY_SOEID = 'ad32528' )  AS IS_READ,
        'Y' AS IS_DELETABLE 
      FROM RA_REPORT_INSTANCES RI,RA_REPORTS_B R,RA_APPS APPS,RA_REPORT_INSTANCES RI2
      WHERE RI.REPORT_ID = R.REPORT_ID  AND RI.ORIGINAL_RUN_ID=RI2.RUN_ID AND R.APP_ID=APPS.APP_ID 
      AND P_USER_ID = RI.SUBMITTED_BY_SOEID AND RI.ACTIVE_IND = 'Y';
      
END GETALLREPORTS_AFTER_DATE2;

  PROCEDURE GETALLREPORTS_AFTER_DATE (USER_ID IN VARCHAR2, AS_OF_DATE IN DATE, REPORTS_INFO OUT ref_cursor_type) AS
  BEGIN
    OPEN REPORTS_INFO FOR SELECT  RI.RUN_ID,RI.ORIGINAL_RUN_ID,R.REPORT_ID,R.APP_ID,APPS.APP_NAME APP,
      RI.SUBMITTED_BY_SOEID SOEID,
      RI2.SUBMITTED_BY_SOEID ORIGINAL_SOEID,
        R.DISPLAY_REPORT_NAME REPORT_NAME,
        RI.INSTANCE_NAME REPORT_TITLE,
        RI.OUTPUT_TYPE,
        NVL(RI.OUTPUT_FILE_SIZE,0) AS "SIZE", 
        RI2.STATUS,
        (CASE 
          WHEN (RI2.STATUS=1) THEN 'Pending'
          WHEN (RI2.STATUS=2) THEN 'Executing'
          WHEN (RI2.STATUS=3) THEN 'Completed'
          WHEN (RI2.STATUS=4) THEN 'Failed' 
          END
        ) STATUS_DESC,
        (CASE 
          WHEN (R.ACTIVE_IND='A') THEN 'Active'
          WHEN (R.ACTIVE_IND='I') THEN 'Decommissioned'
          WHEN (R.ACTIVE_IND='D') THEN 'Deprecated'
          END
        ) REPORT_ACTIVE_IND,
        TO_CHAR(RI.CREATION_DTM,'YYYY/MM/DD HH24:MI:SS') CREATE_TIME,
        TO_CHAR(RI.CREATION_DTM,'YYYY/MM/DD HH24:MI:SS') SCHEDULED_TIME,
        (CASE WHEN RI2.START_TIME IS NULL THEN TO_CHAR(RI.CREATION_DTM,'YYYY/MM/DD HH24:MI:SS') ELSE TO_CHAR(RI2.START_TIME,'YYYY/MM/DD HH24:MI:SS') END) START_TIME,
        (CASE WHEN RI2.END_TIME IS NULL THEN NULL ELSE TO_CHAR(RI2.END_TIME,'YYYY/MM/DD HH24:MI:SS') END) END_TIME,
        (CASE WHEN RI.SUBSCRIPTION_ID IS NULL THEN 'USER' ELSE 'EVENT' END) TRIGGERED_BY,
        (CASE WHEN R.DATA_SECURITY_ENABLED='Y' THEN 'N' ELSE 'Y' END)  IS_SHARABLE,
        (CASE WHEN R.DATA_SECURITY_ENABLED='Y' THEN 'Y' ELSE 'N' END)  IS_ENTITLED,
        NVL(RI2.IS_MAXROWS_EXCEED,'N') IS_PARTIAL_RESULT,
        (CASE WHEN R.DETAIL_REPORT_ID IS NULL THEN 'N' ELSE 'Y' END) HAS_DETAILS,
        ( SELECT CASE WHEN COUNT(RUN_ID) > 0 THEN 'Y' ELSE 'N' END FROM RA_INSTANCE_READ_ACTIVITY RA WHERE RA.RUN_ID = RI2.RUN_ID AND RA.VIEWED_BY_SOEID = 'ad32528' )  AS IS_READ,
        'Y' AS IS_DELETABLE 
      FROM RA_REPORT_INSTANCES RI,RA_REPORTS_B R,RA_APPS APPS,RA_REPORT_INSTANCES RI2
      WHERE RI.REPORT_ID = R.REPORT_ID  AND RI.ORIGINAL_RUN_ID=RI2.RUN_ID AND R.APP_ID=APPS.APP_ID 
      AND RI.SUBMITTED_BY_SOEID='ad32528' AND RI.ACTIVE_IND = 'Y';

END GETALLREPORTS_AFTER_DATE;
END RA_STR_PROC_TEST;

/
--------------------------------------------------------

--  DDL for Package Body RA_USER_SCHEDULES_PKG

--------------------------------------------------------


  CREATE OR REPLACE PACKAGE BODY "RPTAPP"."RA_USER_SCHEDULES_PKG" 
AS
PROCEDURE invoke_create_job(
    p_user_schedule_id IN NUMBER )
IS
  l_user_schedules_rec ra_user_schedules%ROWTYPE;
  L_SCHEDULE_NAME VARCHAR2(300);
  l_job_name VARCHAR2(300); 
  l_repeat_interval VARCHAR2(100);
BEGIN
  SELECT *
  INTO l_user_schedules_rec
  FROM ra_user_schedules
  WHERE user_schedule_id = p_user_schedule_id;
  l_schedule_name := 'schedule_id_'||l_user_schedules_rec.user_schedule_id;
  l_repeat_interval := 'FREQ='||l_user_schedules_rec.freq||';INTERVAL='||l_user_schedules_rec.interval||';BYDAY='||l_user_schedules_rec.byday||';BYHOUR='||l_user_schedules_rec.byhour||';BYMINUTE='||l_user_schedules_rec.byminute||';BYSECOND='||l_user_schedules_rec.bysecond;
  DBMS_SCHEDULER.create_schedule (schedule_name => l_schedule_name, start_date => l_user_schedules_rec.from_date, repeat_interval => l_repeat_interval, end_date => l_user_schedules_rec.to_date, comments => NULL);
  l_job_name := 'job_for_'||l_schedule_name;
  DBMS_SCHEDULER.CREATE_JOB (JOB_NAME => L_JOB_NAME, PROGRAM_NAME => 'RUN_TEMPLATE', SCHEDULE_NAME => L_SCHEDULE_NAME, AUTO_DROP => FALSE);
  DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE (JOB_NAME => L_JOB_NAME, ARGUMENT_NAME => 'p_template_id', ARGUMENT_VALUE => L_USER_SCHEDULES_REC.TEMPLATE_ID );
  DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE (JOB_NAME => L_JOB_NAME, ARGUMENT_NAME => 'p_user_schedule_id', ARGUMENT_VALUE => L_USER_SCHEDULES_REC.USER_SCHEDULE_ID );
  DBMS_SCHEDULER.ENABLE(NAME => L_JOB_NAME);
  UPDATE RA_USER_SCHEDULES SET JOB_NAME=UPPER(L_JOB_NAME) WHERE USER_SCHEDULE_ID=L_USER_SCHEDULES_REC.USER_SCHEDULE_ID;
  COMMIT;

END INVOKE_CREATE_JOB;

PROCEDURE run_template(
    P_TEMPLATE_ID IN NUMBER,
    P_USER_SCHEDULE_ID IN NUMBER) 
IS
  l_run_id pls_integer ;
BEGIN
  l_run_id := rpt_run_id_seq.nextval;
  INSERT
  INTO ra_report_instances
    (
      run_id,
      report_id,
      instance_name,
      output_type,
      submitted_by_soeid,
      status,
      template_id,
      created_by ,
      last_updated_by,
      user_schedule_id,
      triggered_by,
      USER_ID,
      ORIGINAL_RUN_ID,
      PROCESSING_STATUS,
      CREATION_DTM,
      DOMAIN_CODE
    )
  SELECT L_RUN_ID, REPORT_ID,  
    S.SCHEDULE_DISPLAY_NAME ||' - ' || TO_CHAR(SYSDATE, 'DD-MON-YY HH24:MI'),
    OUTPUT_TYPE, OWNER_ID, 1, T.TEMPLATE_ID, 'RPTAPP', 'RPTAPP',
    S.USER_SCHEDULE_ID, 'SCHEDULE', OWNER_ID, L_RUN_ID, 1, SYS_EXTRACT_UTC(SYSTIMESTAMP), T.DOMAIN_CODE
  FROM RA_TEMPLATES T, RA_USER_SCHEDULES S
  WHERE T.TEMPLATE_ID = S.TEMPLATE_ID
  AND T.TEMPLATE_ID = P_TEMPLATE_ID
  AND S.USER_SCHEDULE_ID=P_USER_SCHEDULE_ID;
  
INSERT
  INTO ra_instance_prompt_values
    (
      run_id,
      instprm_prompt_id,
      instprm_prompt_value,
      created_by,
      last_updated_by
    )
  SELECT L_RUN_ID,
    param_id,
    PARAM_VALUE,
    'RPTAPP',
    'RPTAPP'
  FROM ra_template_param_values_v
  WHERE user_schedule_id = p_user_schedule_id 
  and   template_id = p_template_id;
  
INSERT INTO RA_INSTANCE_QUERY_COLUMNS (RUN_ID,QUERY_ID,COLUMN_ORDER,COLUMN_NAME,COLUMN_DISPLAY_NAME,COLUMN_TYPE,
COLUMN_SUB_TYPE, COLUMN_TYPE_FORMAT_MASK,REQUIRED_IN_SELECT_CLAUSE,CREATED_BY,CREATION_TIME,LAST_UPDATED_BY,
LAST_UPDATE_TIME,COLUMN_DATA_TYPE, MEASURE_FUNCTION)  
SELECT L_RUN_ID, QUERY_ID, COLUMN_ORDER, COLUMN_NAME, COLUMN_DISPLAY_NAME, COLUMN_TYPE, COLUMN_SUB_TYPE, 
COLUMN_TYPE_FORMAT_MASK, REQUIRED_IN_SELECT_CLAUSE, 'RPTAPP', SYSDATE, 'RPTAPP', SYSDATE, COLUMN_DATA_TYPE, MEASURE_FUNCTION 
FROM RA_TEMPLATE_QUERY_COLUMNS WHERE TEMPLATE_ID=P_TEMPLATE_ID;

END RUN_TEMPLATE;

PROCEDURE CANCEL_JOB(P_SCHEDULE_ID IN NUMBER)
IS
  P_JOB_NAME VARCHAR(200 CHAR);
BEGIN
  select JOB_NAME into P_JOB_NAME from RA_USER_SCHEDULES where USER_SCHEDULE_ID = P_SCHEDULE_ID;
  DBMS_SCHEDULER.DROP_JOB(job_name => P_JOB_NAME, force => true);
end CANCEL_JOB;

END ra_user_schedules_pkg;

/
--------------------------------------------------------

--  DDL for Procedure CREATE_INQ_DEV_USER

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."CREATE_INQ_DEV_USER" (P_APP_ID IN INTEGER, P_USER_SOEID IN VARCHAR2 ) AS 

BEGIN

	DELETE FROM RA_USER_APP_ROLE_MAP WHERE SOEID=LOWER(P_USER_SOEID) AND ROLE='INQURY_DEV' AND APP_ID = P_APP_ID;

	DELETE FROM RA_USER_APP_ROLES WHERE SOEID=LOWER(P_USER_SOEID) AND ROLE='INQUIRY_DEV';

	INSERT INTO RA_USER_APP_ROLE_MAP(SOEID, ROLE, APP_ID) VALUES (LOWER(P_USER_SOEID), 'INQUIRY_DEV', P_APP_ID);

	INSERT INTO RA_USER_APP_ROLES (SOEID, ROLE, ACTIVE_FLAG, CREATED_BY, LAST_UPDATED_BY) SELECT LOWER(P_USER_SOEID), 'INQUIRY_DEV', 'Y', USER, USER FROM DUAL;

	COMMIT;

END;

/
--------------------------------------------------------

--  DDL for Procedure CREATE_INQ_USER_MODEL_AFTER

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."CREATE_INQ_USER_MODEL_AFTER" (P_USER_SOEID IN VARCHAR2, P_MODEL_USER_ID IN VARCHAR2) AS 

BEGIN

	DELETE FROM RA_USER_APP_ROLE_MAP WHERE SOEID=LOWER(P_USER_SOEID);

	DELETE FROM RA_USER_APP_ROLES WHERE SOEID=LOWER(P_USER_SOEID);
  
  DELETE FROM RA_USER_LDAP_GROUPS WHERE SOEID  = LOWER(P_USER_SOEID);

	INSERT INTO RA_USER_APP_ROLE_MAP(SOEID, ROLE, APP_ID) SELECT LOWER(P_USER_SOEID), ROLE, APP_ID FROM RA_USER_APP_ROLE_MAP WHERE SOEID = LOWER(P_MODEL_USER_ID);

	INSERT INTO RA_USER_APP_ROLES (SOEID, ROLE, ACTIVE_FLAG, CREATED_BY, LAST_UPDATED_BY) SELECT LOWER(P_USER_SOEID), ROLE, ACTIVE_FLAG, user, user FROM RA_USER_APP_ROLES WHERE SOEID = LOWER(P_MODEL_USER_ID);	

  INSERT INTO RA_USER_LDAP_GROUPS (SOEID, LDAP_GROUP_NAME) SELECT LOWER(P_USER_SOEID), LDAP_GROUP_NAME FROM RA_USER_LDAP_GROUPS WHERE SOEID = LOWER(P_MODEL_USER_ID);
	COMMIT;

END;

/
--------------------------------------------------------

--  DDL for Procedure DELETE_HISTORY_PER_RUN_ID

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."DELETE_HISTORY_PER_RUN_ID" (P_NUM_OF_DAYS IN INTEGER) AS
BEGIN
    delete from RA_HIST_SUB_RUN_INSTANCES where (parent_run_id IN(select RUN_ID from RA_HIST_REPORT_INSTANCES where to_date(creation_dtm, 'DD-MON-YYYY') <= to_date((sysdate - P_NUM_OF_DAYS), 'DD-MON-YYYY')) OR sub_run_id IN(select RUN_ID from RA_HIST_REPORT_INSTANCES where to_date(creation_dtm, 'DD-MON-YYYY') <= to_date((sysdate - P_NUM_OF_DAYS), 'DD-MON-YYYY')));
    delete from RA_HIST_SHARED_REPORTS where run_id IN(select RUN_ID from RA_HIST_REPORT_INSTANCES where to_date(creation_dtm, 'DD-MON-YYYY') <= to_date((sysdate - P_NUM_OF_DAYS), 'DD-MON-YYYY'));
    delete from RA_HIST_REPORT_INST_INFO where run_id IN(select RUN_ID from RA_HIST_REPORT_INSTANCES where to_date(creation_dtm, 'DD-MON-YYYY') <= to_date((sysdate - P_NUM_OF_DAYS), 'DD-MON-YYYY'));
    delete from RA_HIST_RPT_INST_QRY_PROGRESS where run_id IN(select RUN_ID from RA_HIST_REPORT_INSTANCES where to_date(creation_dtm, 'DD-MON-YYYY') <= to_date((sysdate - P_NUM_OF_DAYS), 'DD-MON-YYYY'));
    delete from RA_HIST_INSTANCE_READ_ACTIVITY where run_id IN(select RUN_ID from RA_HIST_REPORT_INSTANCES where to_date(creation_dtm, 'DD-MON-YYYY') <= to_date((sysdate - P_NUM_OF_DAYS), 'DD-MON-YYYY'));
    delete from RA_HIST_INSTANCE_QUERY_COLUMNS where run_id IN(select RUN_ID from RA_HIST_REPORT_INSTANCES where to_date(creation_dtm, 'DD-MON-YYYY') <= to_date((sysdate - P_NUM_OF_DAYS), 'DD-MON-YYYY'));
    delete from RA_HIST_INSTANCE_PROMPT_VALUES where run_id IN(select RUN_ID from RA_HIST_REPORT_INSTANCES where to_date(creation_dtm, 'DD-MON-YYYY') <= to_date((sysdate - P_NUM_OF_DAYS), 'DD-MON-YYYY'));
    delete from RA_HIST_REPORT_INSTANCES where run_id IN(select RUN_ID from RA_HIST_REPORT_INSTANCES where to_date(creation_dtm, 'DD-MON-YYYY') <= to_date((sysdate - P_NUM_OF_DAYS), 'DD-MON-YYYY'));
	COMMIT;
  EXCEPTION
  WHEN OTHERS THEN
  ROLLBACK;
END;

/
--------------------------------------------------------

--  DDL for Procedure GETDYNAMICSQLQUERY

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."GETDYNAMICSQLQUERY" (DIMENSIONCOLS IN DIMENSION_ARRAY,MEASURECOLS IN MEASURE_ARRAY, STATICQUERY IN VARCHAR2,
QUERY OUT VARCHAR2)
AS
 QUERY_STR VARCHAR2(4000);
BEGIN
QUERY_STR:='SELECT ';
 FOR I IN DIMENSIONCOLS.FIRST .. DIMENSIONCOLS.LAST
  LOOP
       QUERY_STR :=QUERY_STR || DIMENSIONCOLS(i) ||',';
  END LOOP;
   FOR j IN MEASURECOLS.FIRST .. MEASURECOLS.LAST
  LOOP
  QUERY_STR := QUERY_STR || MEASURECOLS(J).MEASUREFUNCTION ||'(' || MEASURECOLS(J).COLUMNNAME ||') ' || MEASURECOLS(J).COLUMNDISPLAYNAME ;
  IF(J <MEASURECOLS.COUNT) THEN
  QUERY_STR := QUERY_STR ||',';
  END IF;
    
  END LOOP;
  QUERY_STR :=QUERY_STR ||  ' from ('||  STATICQUERY || ') STATIC_INNER_QRY_ALIAS ';
  QUERY_STR :=QUERY_STR || ' group by ';
   FOR I IN DIMENSIONCOLS.FIRST .. DIMENSIONCOLS.LAST
  LOOP
       QUERY_STR :=QUERY_STR || DIMENSIONCOLS(I);
       IF(I <DIMENSIONCOLS.COUNT) THEN
          QUERY_STR := QUERY_STR ||',';
          END IF;
  END LOOP;
  
  QUERY:=QUERY_STR;
END GETDYNAMICSQLQUERY;

/
--------------------------------------------------------

--  DDL for Procedure GETREPORTDATASET

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."GETREPORTDATASET" (inputParams in sys.xmltype,p_cursor out pa_query.p_cursor) as
begin
   dbms_output.put_line(inputParams.extract('//parameters/parameter[@name="reportId"]/@value').getStringVal());
   open p_cursor for select * from ra_report_instances where rownum<10;
end;

/
--------------------------------------------------------

--  DDL for Procedure GET_DYNAMIC_UNIVERSE_QUERY

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."GET_DYNAMIC_UNIVERSE_QUERY" (I_QUERY_ID IN NUMBER,I_REPORT_ID IN NUMBER, I_RUN_ID IN NUMBER,QUERY OUT VARCHAR2)
AS
 QUERY_STR VARCHAR2(4000);
  QUERY_PRE VARCHAR2(4000);
BEGIN
-- SELECT PART contains two parts . select inner one will use from and join where and group by clause and outer one will be use to select
-- From first query and assign column dispaly name
QUERY_PRE:='SELECT ';
QUERY_STR:='SELECT ';
FOR I IN (SELECT * FROM
        (
        SELECT SA.DISP_ORD,SA.QUERY_ATTR_ALS_NM,SA.QUERY_DISP_NM,DECODE(SA.ATTR_ID,0,DBMS_LOB.SUBSTR(SAE.QUERY_ATTR_EXPR,4000,1) || ' AS ' || SA.QUERY_ATTR_ALS_NM ,
        MA.ATTR_ALS_ENTY_NM || '.'||MA.ATTR_PHY_ATTR_NM || ' AS ' || SA.QUERY_ATTR_ALS_NM  ) AS COLUMN_NM  FROM 
        RA_SEEDED_QUERY_ATTR SA JOIN RA_INSTANCE_QUERY_COLUMNS RI ON SA.QUERY_ATTR_ID=RI.QUERY_ATTR_ID LEFT OUTER JOIN RA_META_ATTR MA ON SA.ATTR_ID=MA.ATTR_ID
        LEFT OUTER JOIN RA_SEEDED_QUERY_ATTR_EXPR SAE ON SA.QUERY_ATTR_ID=SAE.QUERY_ATTR_ID
        WHERE SA.QUERY_ID=I_QUERY_ID  AND SA.COLUMN_TYPE='D'  AND RI.RUN_ID=I_RUN_ID
        UNION ALL
        
        SELECT SA.DISP_ORD,SA.QUERY_ATTR_ALS_NM,SA.QUERY_DISP_NM,MAF.AGGR_FUNC_NM ||'(' ||DECODE(SA.ATTR_ID,0,DBMS_LOB.SUBSTR(SAE.QUERY_ATTR_EXPR,4000,1) || ') AS ' || SA.QUERY_ATTR_ALS_NM ,
        MA.ATTR_ALS_ENTY_NM || '.'||MA.ATTR_PHY_ATTR_NM || ') AS ' || SA.QUERY_ATTR_ALS_NM ) AS COLUMN_NM  FROM 
        RA_SEEDED_QUERY_ATTR SA JOIN RA_INSTANCE_QUERY_COLUMNS RI ON SA.QUERY_ATTR_ID=RI.QUERY_ATTR_ID LEFT OUTER JOIN RA_META_ATTR MA ON SA.ATTR_ID=MA.ATTR_ID
        JOIN RA_META_AGGR_FUNC MAF ON SA.AGGR_FUNC_ID =MAF.AGGR_FUNC_ID
        LEFT OUTER JOIN RA_SEEDED_QUERY_ATTR_EXPR SAE ON SA.QUERY_ATTR_ID=SAE.QUERY_ATTR_ID
        WHERE SA.QUERY_ID=I_QUERY_ID  AND SA.COLUMN_TYPE='M' AND RI.RUN_ID=I_RUN_ID
        ) ORDER BY DISP_ORD)
      LOOP
      QUERY_STR:=QUERY_STR || I.COLUMN_NM || ',';
      QUERY_PRE:=QUERY_PRE || I.QUERY_ATTR_ALS_NM || ' AS "' || I.QUERY_DISP_NM || '",';
 END LOOP;
 QUERY_STR:=SUBSTR(QUERY_STR,1,LENGTH(QUERY_STR)-1);
 
 -- FROM PART OF QUERY
 QUERY_STR := QUERY_STR || ' FROM ';
 
  QUERY_PRE:=SUBSTR(QUERY_PRE,1,LENGTH(QUERY_PRE)-1);
 
 QUERY_PRE := QUERY_PRE || ' FROM ( ';
  
 FOR J IN(
     SELECT ME.ENT_PHY_NM , MJ.ENT_ALS_NM ,MJ.JOIN_ORDER, MJ.PRNT_ENT_ALS_NM ,MJ.JOIN_SNTX,MJ.ENT_JOIN_CRTA
    FROM RA_META_JOIN_CRTA MJ JOIN RA_META_ENTITY_ALS ME ON MJ.ENT_ALS_NM =ME.ENT_ALS_NM
     WHERE PROD_NM  IN(SELECT PROD_NM FROM RA_META_PROD_TYP WHERE 
     PROD_ID IN(SELECT PROD_ID FROM RA_SEEDED_QUERY_PROD WHERE QUERY_ID=I_QUERY_ID))  ORDER BY JOIN_ORDER
 )
 LOOP
 IF(J.PRNT_ENT_ALS_NM IS NULL) THEN
  QUERY_STR := QUERY_STR || J.ENT_PHY_NM || ' ' || J.ENT_ALS_NM;
  ELSE
  IF( J.JOIN_SNTX IS NOT NULL ) THEN
  QUERY_STR := QUERY_STR  || ' ' || J.JOIN_SNTX || ' ';
  END IF;
  QUERY_STR := QUERY_STR || J.ENT_PHY_NM || ' ' || J.ENT_ALS_NM;
  QUERY_STR := QUERY_STR || ' ON '  || J.ENT_JOIN_CRTA;
  END IF;
 END LOOP;
 
 -- WHERE CLAUSE
  QUERY_STR := QUERY_STR || ' WHERE 1=1 ';
  FOR FL IN(SELECT   RA.ATTR_ALS_ENTY_NM || '.'||RA.ATTR_PHY_ATTR_NM AS PROMPT_NM,RA.ATTR_PHY_ATTR_NM PROMT_VAL, RF.ATTR_FILT_TYP, RF.ATTR_FILT_VAL
            ,RFO.FILT_OPER FROM RA_REPORT_FILT_CRTA RF JOIN RA_META_ATTR RA ON RA.ATTR_ID=RF.ATTR_ID
            JOIN RA_META_FILT_OPER RFO ON RF.FILT_OPER_ID =RFO.FILT_OPER_ID
            WHERE RF.REPORT_ID=I_REPORT_ID)
  LOOP
   QUERY_STR := QUERY_STR || ' AND ';
   QUERY_STR := QUERY_STR || FL.PROMPT_NM || ' ' || FL.FILT_OPER|| ' ' ||FN_GET_UNIV_TRANS_VAL(FL.ATTR_FILT_TYP,FL.ATTR_FILT_VAL);   
   dbms_output.put_line(FL.ATTR_FILT_TYP ||FL.ATTR_FILT_VAL);
  END LOOP;
  
   FOR RP IN(SELECT   RPB.PARAMETER_DATA_TYPE,
				RPB.PARAMETER_NAME_IN_UI,RPB.PARAM_NAME_IN_QUERY,RPB.IS_MULTI_VALUE_NUMERIC,RPB.MANDATORY_IND,RFO.FILT_OPER,
        RA.ATTR_ALS_ENTY_NM || '.'||RA.ATTR_PHY_ATTR_NM AS PROMPT_NM FROM RA_REPORT_PARAMETERS_B
            RPB JOIN RA_META_ATTR RA ON RPB.ATTR_ID=RA.ATTR_ID
            JOIN RA_META_FILT_OPER RFO ON RPB.FILT_OPER_ID =RFO.FILT_OPER_ID
            WHERE RPB.REPORT_ID=I_REPORT_ID)
  LOOP
  
   IF(RP.MANDATORY_IND = 'Y') THEN
    QUERY_STR := QUERY_STR || ' AND ';
      QUERY_STR := QUERY_STR || RP.PROMPT_NM || ' = :' ||RP.PARAM_NAME_IN_QUERY;
      ELSE
       QUERY_STR := QUERY_STR || ' <#if '||RP.PARAM_NAME_IN_QUERY||' ?? &&'||RP.PARAM_NAME_IN_QUERY||'?trim != ""> ';
        QUERY_STR := QUERY_STR || ' AND ';
       QUERY_STR := QUERY_STR || RP.PROMPT_NM || ' = :' ||RP.PARAM_NAME_IN_QUERY;
       QUERY_STR := QUERY_STR || ' </#if>';
      END IF;
  END LOOP;
 -- GROUP BY CLAUSE
 QUERY_STR := QUERY_STR || ' GROUP BY ';
 FOR K IN (SELECT * FROM
        (
        SELECT SA.DISP_ORD,DECODE(SA.ATTR_ID,0,DBMS_LOB.SUBSTR(SAE.QUERY_ATTR_EXPR,4000,1) || ' AS ' || SA.QUERY_ATTR_ALS_NM ,
        MA.ATTR_ALS_ENTY_NM || '.'||MA.ATTR_PHY_ATTR_NM ) AS COLUMN_NM  FROM 
        RA_SEEDED_QUERY_ATTR SA JOIN RA_INSTANCE_QUERY_COLUMNS RI ON SA.QUERY_ATTR_ID=RI.QUERY_ATTR_ID LEFT OUTER JOIN RA_META_ATTR MA ON SA.ATTR_ID=MA.ATTR_ID
        LEFT OUTER JOIN RA_SEEDED_QUERY_ATTR_EXPR SAE ON SA.QUERY_ATTR_ID=SAE.QUERY_ATTR_ID
        WHERE SA.QUERY_ID=I_QUERY_ID  AND SA.COLUMN_TYPE='D' AND RI.RUN_ID=I_RUN_ID
        ) ORDER BY DISP_ORD)
  LOOP
      QUERY_STR:=QUERY_STR || K.COLUMN_NM || ',';
  END LOOP;
        QUERY_STR:=SUBSTR(QUERY_STR,1,LENGTH(QUERY_STR)-1);
 
 QUERY_STR :=QUERY_PRE || QUERY_STR || ' )';
 dbms_output.put_line( QUERY_STR);
 QUERY:=QUERY_STR;
END GET_DYNAMIC_UNIVERSE_QUERY;

/
--------------------------------------------------------

--  DDL for Procedure GET_DYNAMIC_UNIVERSE_QUERY_BAK

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."GET_DYNAMIC_UNIVERSE_QUERY_BAK" (I_QUERY_ID IN NUMBER,I_REPORT_ID IN NUMBER, I_RUN_ID IN NUMBER,QUERY OUT VARCHAR2)
AS
 QUERY_STR VARCHAR2(4000);
  QUERY_PRE VARCHAR2(4000);
BEGIN
-- SELECT PART contains two parts . select inner one will use from and join where and group by clause and outer one will be use to select
-- From first query and assign column dispaly name
QUERY_PRE:='SELECT ';
QUERY_STR:='SELECT ';
FOR I IN (SELECT * FROM
        (
        SELECT SA.DISP_ORD,SA.QUERY_ATTR_ALS_NM,SA.QUERY_DISP_NM,DECODE(SA.ATTR_ID,0,DBMS_LOB.SUBSTR(SAE.QUERY_ATTR_EXPR,4000,1) || ' AS ' || SA.QUERY_ATTR_ALS_NM ,
        MA.ATTR_ALS_ENTY_NM || '.'||MA.ATTR_PHY_ATTR_NM || ' AS ' || SA.QUERY_ATTR_ALS_NM  ) AS COLUMN_NM  FROM 
        RA_SEEDED_QUERY_ATTR SA JOIN RA_INSTANCE_QUERY_COLUMNS RI ON SA.QUERY_ATTR_ID=RI.QUERY_ATTR_ID LEFT OUTER JOIN RA_META_ATTR MA ON SA.ATTR_ID=MA.ATTR_ID
        LEFT OUTER JOIN RA_SEEDED_QUERY_ATTR_EXPR SAE ON SA.QUERY_ATTR_ID=SAE.QUERY_ATTR_ID
        WHERE SA.QUERY_ID=I_QUERY_ID  AND SA.COLUMN_TYPE='D'  AND RI.RUN_ID=I_RUN_ID
        UNION ALL
        
        SELECT SA.DISP_ORD,SA.QUERY_ATTR_ALS_NM,SA.QUERY_DISP_NM,MAF.AGGR_FUNC_NM ||'(' ||DECODE(SA.ATTR_ID,0,DBMS_LOB.SUBSTR(SAE.QUERY_ATTR_EXPR,4000,1) || ') AS ' || SA.QUERY_ATTR_ALS_NM ,
        MA.ATTR_ALS_ENTY_NM || '.'||MA.ATTR_PHY_ATTR_NM || ') AS ' || SA.QUERY_ATTR_ALS_NM ) AS COLUMN_NM  FROM 
        RA_SEEDED_QUERY_ATTR SA JOIN RA_INSTANCE_QUERY_COLUMNS RI ON SA.QUERY_ATTR_ID=RI.QUERY_ATTR_ID LEFT OUTER JOIN RA_META_ATTR MA ON SA.ATTR_ID=MA.ATTR_ID
        JOIN RA_META_AGGR_FUNC MAF ON SA.AGGR_FUNC_ID =MAF.AGGR_FUNC_ID
        LEFT OUTER JOIN RA_SEEDED_QUERY_ATTR_EXPR SAE ON SA.QUERY_ATTR_ID=SAE.QUERY_ATTR_ID
        WHERE SA.QUERY_ID=I_QUERY_ID  AND SA.COLUMN_TYPE='M' AND RI.RUN_ID=I_RUN_ID
        ) ORDER BY DISP_ORD)
      LOOP
      QUERY_STR:=QUERY_STR || I.COLUMN_NM || ',';
      QUERY_PRE:=QUERY_PRE || I.QUERY_ATTR_ALS_NM || ' AS "' || I.QUERY_DISP_NM || '",';
 END LOOP;
 QUERY_STR:=SUBSTR(QUERY_STR,1,LENGTH(QUERY_STR)-1);
 
 -- FROM PART OF QUERY
 QUERY_STR := QUERY_STR || ' FROM ';
 
  QUERY_PRE:=SUBSTR(QUERY_PRE,1,LENGTH(QUERY_PRE)-1);
 
 QUERY_PRE := QUERY_PRE || ' FROM ( ';
  
 FOR J IN(
     SELECT ME.ENT_PHY_NM , MJ.ENT_ALS_NM ,MJ.JOIN_ORDER, MJ.PRNT_ENT_ALS_NM ,MJ.JOIN_SNTX,MJ.ENT_JOIN_CRTA
    FROM RA_META_JOIN_CRTA MJ JOIN RA_META_ENTITY_ALS ME ON MJ.ENT_ALS_NM =ME.ENT_ALS_NM
     WHERE PROD_NM  IN(SELECT PROD_NM FROM RA_META_PROD_TYP WHERE 
     PROD_ID IN(SELECT PROD_ID FROM RA_SEEDED_QUERY_PROD WHERE QUERY_ID=I_QUERY_ID))  ORDER BY JOIN_ORDER
 )
 LOOP
 IF(J.PRNT_ENT_ALS_NM IS NULL) THEN
  QUERY_STR := QUERY_STR || J.ENT_PHY_NM || ' ' || J.ENT_ALS_NM;
  ELSE
  IF( J.JOIN_SNTX IS NOT NULL ) THEN
  QUERY_STR := QUERY_STR  || ' ' || J.JOIN_SNTX || ' ';
  END IF;
  QUERY_STR := QUERY_STR || J.ENT_PHY_NM || ' ' || J.ENT_ALS_NM;
  QUERY_STR := QUERY_STR || ' ON '  || J.ENT_JOIN_CRTA;
  END IF;
 END LOOP;
 
 -- WHERE CLAUSE
  QUERY_STR := QUERY_STR || ' WHERE 1=1 ';
  FOR FL IN(SELECT   RA.ATTR_ALS_ENTY_NM || '.'||RA.ATTR_PHY_ATTR_NM AS PROMPT_NM,RA.ATTR_PHY_ATTR_NM PROMT_VAL, RF.ATTR_FILT_TYP, RF.ATTR_FILT_VAL
            ,RFO.FILT_OPER FROM RA_REPORT_FILT_CRTA RF JOIN RA_META_ATTR RA ON RA.ATTR_ID=RF.ATTR_ID
            JOIN RA_META_FILT_OPER RFO ON RF.FILT_OPER_ID =RFO.FILT_OPER_ID
            WHERE RF.REPORT_ID=I_REPORT_ID)
  LOOP
   QUERY_STR := QUERY_STR || ' AND ';
   QUERY_STR := QUERY_STR || FL.PROMPT_NM || ' ' || FL.FILT_OPER|| ' ' ||FN_GET_UNIV_TRANS_VAL(FL.ATTR_FILT_TYP,FL.ATTR_FILT_VAL);   
   dbms_output.put_line(FL.ATTR_FILT_TYP ||FL.ATTR_FILT_VAL);
  END LOOP;
  
   FOR RP IN(SELECT   RPB.PARAMETER_DATA_TYPE,
				RPB.PARAMETER_NAME_IN_UI,RPB.PARAM_NAME_IN_QUERY,RPB.IS_MULTI_VALUE_NUMERIC,RPB.MANDATORY_IND,RFO.FILT_OPER,
        RA.ATTR_ALS_ENTY_NM || '.'||RA.ATTR_PHY_ATTR_NM AS PROMPT_NM FROM RA_REPORT_PARAMETERS_B
            RPB JOIN RA_META_ATTR RA ON RPB.ATTR_ID=RA.ATTR_ID
            JOIN RA_META_FILT_OPER RFO ON RPB.FILT_OPER_ID =RFO.FILT_OPER_ID
            WHERE RPB.REPORT_ID=I_REPORT_ID)
  LOOP
  
   IF(RP.MANDATORY_IND = 'Y') THEN
    QUERY_STR := QUERY_STR || ' AND ';
      QUERY_STR := QUERY_STR || RP.PROMPT_NM || ' = :' ||RP.PARAM_NAME_IN_QUERY;
      ELSE
       QUERY_STR := QUERY_STR || ' <#if '||RP.PARAM_NAME_IN_QUERY||' ?? &&'||RP.PARAM_NAME_IN_QUERY||'?trim != ""> ';
        QUERY_STR := QUERY_STR || ' AND ';
       QUERY_STR := QUERY_STR || RP.PROMPT_NM || ' = :' ||RP.PARAM_NAME_IN_QUERY;
       QUERY_STR := QUERY_STR || ' </#if>';
      END IF;
  END LOOP;
 -- GROUP BY CLAUSE
 QUERY_STR := QUERY_STR || ' GROUP BY ';
 FOR K IN (SELECT * FROM
        (
        SELECT SA.DISP_ORD,DECODE(SA.ATTR_ID,0,DBMS_LOB.SUBSTR(SAE.QUERY_ATTR_EXPR,4000,1) || ' AS ' || SA.QUERY_ATTR_ALS_NM ,
        MA.ATTR_ALS_ENTY_NM || '.'||MA.ATTR_PHY_ATTR_NM ) AS COLUMN_NM  FROM 
        RA_SEEDED_QUERY_ATTR SA JOIN RA_INSTANCE_QUERY_COLUMNS RI ON SA.QUERY_ATTR_ID=RI.QUERY_ATTR_ID LEFT OUTER JOIN RA_META_ATTR MA ON SA.ATTR_ID=MA.ATTR_ID
        LEFT OUTER JOIN RA_SEEDED_QUERY_ATTR_EXPR SAE ON SA.QUERY_ATTR_ID=SAE.QUERY_ATTR_ID
        WHERE SA.QUERY_ID=I_QUERY_ID  AND SA.COLUMN_TYPE='D' AND RI.RUN_ID=I_RUN_ID
        ) ORDER BY DISP_ORD)
  LOOP
      QUERY_STR:=QUERY_STR || K.COLUMN_NM || ',';
  END LOOP;
        QUERY_STR:=SUBSTR(QUERY_STR,1,LENGTH(QUERY_STR)-1);
 
 QUERY_STR :=QUERY_PRE || QUERY_STR || ' )';
 dbms_output.put_line( QUERY_STR);
 QUERY:=QUERY_STR;
END GET_DYNAMIC_UNIVERSE_QUERY_BAK;

/
--------------------------------------------------------

--  DDL for Procedure GET_INQUIRY_PROC

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."GET_INQUIRY_PROC" 
(
  P_REPORT_ID IN NUMBER  
, P_SOEID IN VARCHAR2 
) as

CUR_RUN  SYS_REFCURSOR;

BEGIN
 OPEN CUR_RUN FOR SELECT * FROM RA_REPORT_INSTANCES WHERE REPORT_ID = P_REPORT_ID AND SUBMITTED_BY_SOEID = P_SOEID; 
END GET_INQUIRY_PROC;

/
--------------------------------------------------------

--  DDL for Procedure GET_REPORT_INSTANCES

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."GET_REPORT_INSTANCES" (  P_RECORDSET OUT SYS_REFCURSOR,   P_REPORT_ID IN NUMBER, P_SOEID IN VARCHAR) AS 
BEGIN
  IF P_REPORT_ID IS NOT NULL AND P_SOEID IS NOT NULL THEN
  OPEN P_RECORDSET FOR  SELECT * FROM RA_REPORT_INSTANCES WHERE REPORT_ID = P_REPORT_ID AND SUBMITTED_BY_SOEID = P_SOEID;
  ELSE
  OPEN P_RECORDSET FOR  SELECT * FROM RA_REPORT_INSTANCES ;
  END IF;  
END;

/
--------------------------------------------------------

--  DDL for Procedure GET_STATIC_UNIVERSE_QUERY

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."GET_STATIC_UNIVERSE_QUERY" (I_QUERY_ID IN NUMBER,I_REPORT_ID IN NUMBER,QUERY OUT VARCHAR2)
AS
 QUERY_STR VARCHAR2(4000);
  QUERY_PRE VARCHAR2(4000);
BEGIN
-- SELECT PART contains two parts . select inner one will use from and join where and group by clause and outer one will be use to select
-- From first query and assign column dispaly name
QUERY_PRE:='SELECT ';
QUERY_STR:='SELECT ';
FOR I IN (SELECT * FROM
        (
        SELECT SA.DISP_ORD,SA.QUERY_ATTR_ALS_NM,SA.QUERY_DISP_NM,DECODE(SA.ATTR_ID,0,DBMS_LOB.SUBSTR(SAE.QUERY_ATTR_EXPR,4000,1) || ' AS ' || SA.QUERY_ATTR_ALS_NM ,
        MA.ATTR_ALS_ENTY_NM || '.'||MA.ATTR_PHY_ATTR_NM || ' AS ' || SA.QUERY_ATTR_ALS_NM  ) AS COLUMN_NM  FROM 
        RA_SEEDED_QUERY_ATTR SA LEFT OUTER JOIN RA_META_ATTR MA ON SA.ATTR_ID=MA.ATTR_ID
        LEFT OUTER JOIN RA_SEEDED_QUERY_ATTR_EXPR SAE ON SA.QUERY_ATTR_ID=SAE.QUERY_ATTR_ID
        WHERE SA.QUERY_ID=I_QUERY_ID  AND SA.COLUMN_TYPE='D' 
        UNION ALL
        
        SELECT SA.DISP_ORD,SA.QUERY_ATTR_ALS_NM,SA.QUERY_DISP_NM,MAF.AGGR_FUNC_NM ||'(' ||DECODE(SA.ATTR_ID,0,DBMS_LOB.SUBSTR(SAE.QUERY_ATTR_EXPR,4000,1) || ') AS ' || SA.QUERY_ATTR_ALS_NM ,
        MA.ATTR_ALS_ENTY_NM || '.'||MA.ATTR_PHY_ATTR_NM || ') AS ' || SA.QUERY_ATTR_ALS_NM ) AS COLUMN_NM  FROM 
        RA_SEEDED_QUERY_ATTR SA LEFT OUTER JOIN RA_META_ATTR MA ON SA.ATTR_ID=MA.ATTR_ID
        JOIN RA_META_AGGR_FUNC MAF ON SA.AGGR_FUNC_ID =MAF.AGGR_FUNC_ID
        LEFT OUTER JOIN RA_SEEDED_QUERY_ATTR_EXPR SAE ON SA.QUERY_ATTR_ID=SAE.QUERY_ATTR_ID
        WHERE SA.QUERY_ID=I_QUERY_ID  AND SA.COLUMN_TYPE='M'
        ) ORDER BY DISP_ORD)
      LOOP
      QUERY_STR:=QUERY_STR || I.COLUMN_NM || ',';
      QUERY_PRE:=QUERY_PRE || I.QUERY_ATTR_ALS_NM || ' AS "' || I.QUERY_DISP_NM || '",';
 END LOOP;
 QUERY_STR:=SUBSTR(QUERY_STR,1,LENGTH(QUERY_STR)-1);
 
 -- FROM PART OF QUERY
 QUERY_STR := QUERY_STR || ' FROM ';
 
  QUERY_PRE:=SUBSTR(QUERY_PRE,1,LENGTH(QUERY_PRE)-1);
 
 QUERY_PRE := QUERY_PRE || ' FROM ( ';
  
 FOR J IN(
     SELECT ME.ENT_PHY_NM , MJ.ENT_ALS_NM ,MJ.JOIN_ORDER, MJ.PRNT_ENT_ALS_NM ,MJ.JOIN_SNTX,MJ.ENT_JOIN_CRTA
    FROM RA_META_JOIN_CRTA MJ JOIN RA_META_ENTITY_ALS ME ON MJ.ENT_ALS_NM =ME.ENT_ALS_NM
     WHERE PROD_NM  IN(SELECT PROD_NM FROM RA_META_PROD_TYP WHERE 
     PROD_ID IN(SELECT PROD_ID FROM RA_SEEDED_QUERY_PROD WHERE QUERY_ID=I_QUERY_ID))  ORDER BY JOIN_ORDER
 )
 LOOP
 IF(J.PRNT_ENT_ALS_NM IS NULL) THEN
  QUERY_STR := QUERY_STR || J.ENT_PHY_NM || ' ' || J.ENT_ALS_NM;
  ELSE
  IF( J.JOIN_SNTX IS NOT NULL ) THEN
  QUERY_STR := QUERY_STR  || ' ' || J.JOIN_SNTX || ' ';
  END IF;
  QUERY_STR := QUERY_STR || J.ENT_PHY_NM || ' ' || J.ENT_ALS_NM;
  QUERY_STR := QUERY_STR || ' ON '  || J.ENT_JOIN_CRTA;
  END IF;
 END LOOP;
 
 -- WHERE CLAUSE
  QUERY_STR := QUERY_STR || ' WHERE 1=1 ';
  FOR FL IN(SELECT   RA.ATTR_ALS_ENTY_NM || '.'||RA.ATTR_PHY_ATTR_NM AS PROMPT_NM,RA.ATTR_PHY_ATTR_NM PROMT_VAL, RF.ATTR_FILT_TYP, RF.ATTR_FILT_VAL
            ,RFO.FILT_OPER FROM RA_REPORT_FILT_CRTA RF JOIN RA_META_ATTR RA ON RA.ATTR_ID=RF.ATTR_ID
            JOIN RA_META_FILT_OPER RFO ON RF.FILT_OPER_ID =RFO.FILT_OPER_ID
            WHERE RF.REPORT_ID=I_REPORT_ID)
  LOOP
   QUERY_STR := QUERY_STR || ' AND ';
   QUERY_STR := QUERY_STR || FL.PROMPT_NM || ' ' || FL.FILT_OPER|| ' ' ||FN_GET_UNIV_TRANS_VAL(FL.ATTR_FILT_TYP,FL.ATTR_FILT_VAL);   
   dbms_output.put_line(FL.ATTR_FILT_TYP ||FL.ATTR_FILT_VAL);
  END LOOP;
  
   FOR RP IN(SELECT   RPB.PARAMETER_DATA_TYPE,
				RPB.PARAMETER_NAME_IN_UI,RPB.PARAM_NAME_IN_QUERY,RPB.IS_MULTI_VALUE_NUMERIC,RPB.MANDATORY_IND,RFO.FILT_OPER,
        RA.ATTR_ALS_ENTY_NM || '.'||RA.ATTR_PHY_ATTR_NM AS PROMPT_NM FROM RA_REPORT_PARAMETERS_B
            RPB JOIN RA_META_ATTR RA ON RPB.ATTR_ID=RA.ATTR_ID
            JOIN RA_META_FILT_OPER RFO ON RPB.FILT_OPER_ID =RFO.FILT_OPER_ID
            WHERE RPB.REPORT_ID=I_REPORT_ID)
  LOOP
   IF(RP.MANDATORY_IND = 'Y') THEN
    QUERY_STR := QUERY_STR || ' AND ';
      QUERY_STR := QUERY_STR || RP.PROMPT_NM || ' = :' ||RP.PARAM_NAME_IN_QUERY;
      ELSE
       QUERY_STR := QUERY_STR || ' <#if '||RP.PARAM_NAME_IN_QUERY||' ?? && '||RP.PARAM_NAME_IN_QUERY||'?trim != ""> ';
        QUERY_STR := QUERY_STR || ' AND ';
       QUERY_STR := QUERY_STR || RP.PROMPT_NM || ' = :' ||RP.PARAM_NAME_IN_QUERY;
       QUERY_STR := QUERY_STR || ' </#if>';
      END IF;
  END LOOP;
 -- GROUP BY CLAUSE
 QUERY_STR := QUERY_STR || ' GROUP BY ';
 FOR K IN (SELECT * FROM
        (
        SELECT SA.DISP_ORD,DECODE(SA.ATTR_ID,0,DBMS_LOB.SUBSTR(SAE.QUERY_ATTR_EXPR,4000,1) || ' AS ' || SA.QUERY_ATTR_ALS_NM ,
        MA.ATTR_ALS_ENTY_NM || '.'||MA.ATTR_PHY_ATTR_NM ) AS COLUMN_NM  FROM 
        RA_SEEDED_QUERY_ATTR SA LEFT OUTER JOIN RA_META_ATTR MA ON SA.ATTR_ID=MA.ATTR_ID
        LEFT OUTER JOIN RA_SEEDED_QUERY_ATTR_EXPR SAE ON SA.QUERY_ATTR_ID=SAE.QUERY_ATTR_ID
        WHERE SA.QUERY_ID=I_QUERY_ID  AND SA.COLUMN_TYPE='D'
        ) ORDER BY DISP_ORD)
  LOOP
      QUERY_STR:=QUERY_STR || K.COLUMN_NM || ',';
  END LOOP;
        QUERY_STR:=SUBSTR(QUERY_STR,1,LENGTH(QUERY_STR)-1);
 
 QUERY_STR :=QUERY_PRE || QUERY_STR || ' )';
 dbms_output.put_line( QUERY_STR);
 QUERY:=QUERY_STR;
END GET_STATIC_UNIVERSE_QUERY;

/
--------------------------------------------------------

--  DDL for Procedure GET_STATIC_UNIVERSE_QUERY_BAK

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."GET_STATIC_UNIVERSE_QUERY_BAK" (I_QUERY_ID IN NUMBER,I_REPORT_ID IN NUMBER,QUERY OUT VARCHAR2)
AS
 QUERY_STR VARCHAR2(4000);
  QUERY_PRE VARCHAR2(4000);
BEGIN
-- SELECT PART contains two parts . select inner one will use from and join where and group by clause and outer one will be use to select
-- From first query and assign column dispaly name
QUERY_PRE:='SELECT ';
QUERY_STR:='SELECT ';
FOR I IN (SELECT * FROM
        (
        SELECT SA.DISP_ORD,SA.QUERY_ATTR_ALS_NM,SA.QUERY_DISP_NM,DECODE(SA.ATTR_ID,0,DBMS_LOB.SUBSTR(SAE.QUERY_ATTR_EXPR,4000,1) || ' AS ' || SA.QUERY_ATTR_ALS_NM ,
        MA.ATTR_ALS_ENTY_NM || '.'||MA.ATTR_PHY_ATTR_NM || ' AS ' || SA.QUERY_ATTR_ALS_NM  ) AS COLUMN_NM  FROM 
        RA_SEEDED_QUERY_ATTR SA LEFT OUTER JOIN RA_META_ATTR MA ON SA.ATTR_ID=MA.ATTR_ID
        LEFT OUTER JOIN RA_SEEDED_QUERY_ATTR_EXPR SAE ON SA.QUERY_ATTR_ID=SAE.QUERY_ATTR_ID
        WHERE SA.QUERY_ID=I_QUERY_ID  AND SA.COLUMN_TYPE='D' 
        UNION ALL
        
        SELECT SA.DISP_ORD,SA.QUERY_ATTR_ALS_NM,SA.QUERY_DISP_NM,MAF.AGGR_FUNC_NM ||'(' ||DECODE(SA.ATTR_ID,0,DBMS_LOB.SUBSTR(SAE.QUERY_ATTR_EXPR,4000,1) || ') AS ' || SA.QUERY_ATTR_ALS_NM ,
        MA.ATTR_ALS_ENTY_NM || '.'||MA.ATTR_PHY_ATTR_NM || ') AS ' || SA.QUERY_ATTR_ALS_NM ) AS COLUMN_NM  FROM 
        RA_SEEDED_QUERY_ATTR SA LEFT OUTER JOIN RA_META_ATTR MA ON SA.ATTR_ID=MA.ATTR_ID
        JOIN RA_META_AGGR_FUNC MAF ON SA.AGGR_FUNC_ID =MAF.AGGR_FUNC_ID
        LEFT OUTER JOIN RA_SEEDED_QUERY_ATTR_EXPR SAE ON SA.QUERY_ATTR_ID=SAE.QUERY_ATTR_ID
        WHERE SA.QUERY_ID=I_QUERY_ID  AND SA.COLUMN_TYPE='M'
        ) ORDER BY DISP_ORD)
      LOOP
      QUERY_STR:=QUERY_STR || I.COLUMN_NM || ',';
      QUERY_PRE:=QUERY_PRE || I.QUERY_ATTR_ALS_NM || ' AS "' || I.QUERY_DISP_NM || '",';
 END LOOP;
 QUERY_STR:=SUBSTR(QUERY_STR,1,LENGTH(QUERY_STR)-1);
 
 -- FROM PART OF QUERY
 QUERY_STR := QUERY_STR || ' FROM ';
 
  QUERY_PRE:=SUBSTR(QUERY_PRE,1,LENGTH(QUERY_PRE)-1);
 
 QUERY_PRE := QUERY_PRE || ' FROM ( ';
  
 FOR J IN(
     SELECT ME.ENT_PHY_NM , MJ.ENT_ALS_NM ,MJ.JOIN_ORDER, MJ.PRNT_ENT_ALS_NM ,MJ.JOIN_SNTX,MJ.ENT_JOIN_CRTA
    FROM RA_META_JOIN_CRTA MJ JOIN RA_META_ENTITY_ALS ME ON MJ.ENT_ALS_NM =ME.ENT_ALS_NM
     WHERE PROD_NM  IN(SELECT PROD_NM FROM RA_META_PROD_TYP WHERE 
     PROD_ID IN(SELECT PROD_ID FROM RA_SEEDED_QUERY_PROD WHERE QUERY_ID=I_QUERY_ID))  ORDER BY JOIN_ORDER
 )
 LOOP
 IF(J.PRNT_ENT_ALS_NM IS NULL) THEN
  QUERY_STR := QUERY_STR || J.ENT_PHY_NM || ' ' || J.ENT_ALS_NM;
  ELSE
  IF( J.JOIN_SNTX IS NOT NULL ) THEN
  QUERY_STR := QUERY_STR  || ' ' || J.JOIN_SNTX || ' ';
  END IF;
  QUERY_STR := QUERY_STR || J.ENT_PHY_NM || ' ' || J.ENT_ALS_NM;
  QUERY_STR := QUERY_STR || ' ON '  || J.ENT_JOIN_CRTA;
  END IF;
 END LOOP;
 
 -- WHERE CLAUSE
  QUERY_STR := QUERY_STR || ' WHERE 1=1 ';
  FOR FL IN(SELECT   RA.ATTR_ALS_ENTY_NM || '.'||RA.ATTR_PHY_ATTR_NM AS PROMPT_NM,RA.ATTR_PHY_ATTR_NM PROMT_VAL, RF.ATTR_FILT_TYP, RF.ATTR_FILT_VAL
            ,RFO.FILT_OPER FROM RA_REPORT_FILT_CRTA RF JOIN RA_META_ATTR RA ON RA.ATTR_ID=RF.ATTR_ID
            JOIN RA_META_FILT_OPER RFO ON RF.FILT_OPER_ID =RFO.FILT_OPER_ID
            WHERE RF.REPORT_ID=I_REPORT_ID)
  LOOP
   QUERY_STR := QUERY_STR || ' AND ';
   QUERY_STR := QUERY_STR || FL.PROMPT_NM || ' ' || FL.FILT_OPER|| ' ' ||FN_GET_UNIV_TRANS_VAL(FL.ATTR_FILT_TYP,FL.ATTR_FILT_VAL);   
   dbms_output.put_line(FL.ATTR_FILT_TYP ||FL.ATTR_FILT_VAL);
  END LOOP;
  
   FOR RP IN(SELECT   RPB.PARAMETER_DATA_TYPE,
				RPB.PARAMETER_NAME_IN_UI,RPB.PARAM_NAME_IN_QUERY,RPB.IS_MULTI_VALUE_NUMERIC,RPB.MANDATORY_IND,RFO.FILT_OPER,
        RA.ATTR_ALS_ENTY_NM || '.'||RA.ATTR_PHY_ATTR_NM AS PROMPT_NM FROM RA_REPORT_PARAMETERS_B
            RPB JOIN RA_META_ATTR RA ON RPB.ATTR_ID=RA.ATTR_ID
            JOIN RA_META_FILT_OPER RFO ON RPB.FILT_OPER_ID =RFO.FILT_OPER_ID
            WHERE RPB.REPORT_ID=I_REPORT_ID)
  LOOP
   IF(RP.MANDATORY_IND = 'Y') THEN
    QUERY_STR := QUERY_STR || ' AND ';
      QUERY_STR := QUERY_STR || RP.PROMPT_NM || ' = :' ||RP.PARAM_NAME_IN_QUERY;
      ELSE
       QUERY_STR := QUERY_STR || ' <#if '||RP.PARAM_NAME_IN_QUERY||' ?? && '||RP.PARAM_NAME_IN_QUERY||'?trim != ""> ';
        QUERY_STR := QUERY_STR || ' AND ';
       QUERY_STR := QUERY_STR || RP.PROMPT_NM || ' = :' ||RP.PARAM_NAME_IN_QUERY;
       QUERY_STR := QUERY_STR || ' </#if>';
      END IF;
  END LOOP;
 -- GROUP BY CLAUSE
 QUERY_STR := QUERY_STR || ' GROUP BY ';
 FOR K IN (SELECT * FROM
        (
        SELECT SA.DISP_ORD,DECODE(SA.ATTR_ID,0,DBMS_LOB.SUBSTR(SAE.QUERY_ATTR_EXPR,4000,1) || ' AS ' || SA.QUERY_ATTR_ALS_NM ,
        MA.ATTR_ALS_ENTY_NM || '.'||MA.ATTR_PHY_ATTR_NM ) AS COLUMN_NM  FROM 
        RA_SEEDED_QUERY_ATTR SA LEFT OUTER JOIN RA_META_ATTR MA ON SA.ATTR_ID=MA.ATTR_ID
        LEFT OUTER JOIN RA_SEEDED_QUERY_ATTR_EXPR SAE ON SA.QUERY_ATTR_ID=SAE.QUERY_ATTR_ID
        WHERE SA.QUERY_ID=I_QUERY_ID  AND SA.COLUMN_TYPE='D'
        ) ORDER BY DISP_ORD)
  LOOP
      QUERY_STR:=QUERY_STR || K.COLUMN_NM || ',';
  END LOOP;
        QUERY_STR:=SUBSTR(QUERY_STR,1,LENGTH(QUERY_STR)-1);
 
 QUERY_STR :=QUERY_PRE || QUERY_STR || ' )';
 dbms_output.put_line( QUERY_STR);
 QUERY:=QUERY_STR;
END GET_STATIC_UNIVERSE_QUERY_BAK;

/
--------------------------------------------------------

--  DDL for Procedure GET_UNIVERSE_QUERY

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."GET_UNIVERSE_QUERY" (I_QUERY_ID IN NUMBER,I_REPORT_ID IN NUMBER,QUERY OUT VARCHAR2)
AS
  QUERY_STR VARCHAR2(4000);
  QUERY_PRE VARCHAR2(4000);
BEGIN
-- SELECT PART contains two parts . select inner one will use from and join where and group by clause and outer one will be use to select
-- From first query and assign column dispaly name
QUERY_PRE:='SELECT ';
QUERY_STR:='SELECT ';
FOR I IN (SELECT * FROM
        (
        SELECT SA.DISP_ORD,SA.QUERY_ATTR_ALS_NM,SA.QUERY_DISP_NM,DECODE(SA.ATTR_ID,0,DBMS_LOB.SUBSTR(SAE.QUERY_ATTR_EXPR,4000,1) || ' AS ' || SA.QUERY_ATTR_ALS_NM ,
        MA.ATTR_ALS_ENTY_NM || '.'||MA.ATTR_PHY_ATTR_NM || ' AS ' || SA.QUERY_ATTR_ALS_NM  ) AS COLUMN_NM  FROM 
        RA_SEEDED_QUERY_ATTR SA LEFT OUTER JOIN RA_META_ATTR MA ON SA.ATTR_ID=MA.ATTR_ID
        LEFT OUTER JOIN RA_SEEDED_QUERY_ATTR_EXPR SAE ON SA.QUERY_ATTR_ID=SAE.QUERY_ATTR_ID
        WHERE SA.QUERY_ID=I_QUERY_ID  AND SA.COLUMN_TYPE='D' 
        UNION ALL
        
        SELECT SA.DISP_ORD,SA.QUERY_ATTR_ALS_NM,SA.QUERY_DISP_NM,MAF.AGGR_FUNC_NM ||'(' ||DECODE(SA.ATTR_ID,0,DBMS_LOB.SUBSTR(SAE.QUERY_ATTR_EXPR,4000,1) || ') AS ' || SA.QUERY_ATTR_ALS_NM ,
        MA.ATTR_ALS_ENTY_NM || '.'||MA.ATTR_PHY_ATTR_NM || ') AS ' || SA.QUERY_ATTR_ALS_NM ) AS COLUMN_NM  FROM 
        RA_SEEDED_QUERY_ATTR SA LEFT OUTER JOIN RA_META_ATTR MA ON SA.ATTR_ID=MA.ATTR_ID
        JOIN RA_META_AGGR_FUNC MAF ON SA.AGGR_FUNC_ID =MAF.AGGR_FUNC_ID
        LEFT OUTER JOIN RA_SEEDED_QUERY_ATTR_EXPR SAE ON SA.QUERY_ATTR_ID=SAE.QUERY_ATTR_ID
        WHERE SA.QUERY_ID=I_QUERY_ID  AND SA.COLUMN_TYPE='M'
        ) ORDER BY DISP_ORD)
      LOOP
      QUERY_STR:=QUERY_STR || I.COLUMN_NM || ',';
      QUERY_PRE:=QUERY_PRE || I.QUERY_ATTR_ALS_NM || ' AS "' || I.QUERY_DISP_NM || '",';
 END LOOP;
 QUERY_STR:=SUBSTR(QUERY_STR,1,LENGTH(QUERY_STR)-1);
 
 -- FROM PART OF QUERY
 QUERY_STR := QUERY_STR || ' FROM ';
 
  QUERY_PRE:=SUBSTR(QUERY_PRE,1,LENGTH(QUERY_PRE)-1);
 
 QUERY_PRE := QUERY_PRE || ' FROM ( ';
  
 FOR J IN(
     SELECT ME.ENT_PHY_NM , MJ.ENT_ALS_NM ,MJ.JOIN_ORDER, MJ.PRNT_ENT_ALS_NM ,MJ.JOIN_SNTX,MJ.ENT_JOIN_CRTA
    FROM RA_META_JOIN_CRTA MJ JOIN RA_META_ENTITY_ALS ME ON MJ.ENT_ALS_NM =ME.ENT_ALS_NM
     WHERE PROD_NM  IN(SELECT PROD_NM FROM RA_META_PROD_TYP WHERE 
     PROD_ID IN(SELECT PROD_ID FROM RA_SEEDED_QUERY_PROD WHERE QUERY_ID=I_QUERY_ID))  ORDER BY JOIN_ORDER
 )
 LOOP
 IF(J.PRNT_ENT_ALS_NM IS NULL) THEN
  QUERY_STR := QUERY_STR || J.ENT_PHY_NM || ' ' || J.ENT_ALS_NM;
  ELSE
  IF( J.JOIN_SNTX IS NOT NULL ) THEN
  QUERY_STR := QUERY_STR  || ' ' || J.JOIN_SNTX || ' ';
  END IF;
  QUERY_STR := QUERY_STR || J.ENT_PHY_NM || ' ' || J.ENT_ALS_NM;
  QUERY_STR := QUERY_STR || ' ON '  || J.ENT_JOIN_CRTA;
  END IF;
 END LOOP;
 
 -- WHERE CLAUSE
  QUERY_STR := QUERY_STR || ' WHERE 1=1 ';
  FOR FL IN(SELECT   RA.ATTR_ALS_ENTY_NM || '.'||RA.ATTR_PHY_ATTR_NM AS PROMPT_NM,
          RA.ATTR_PHY_ATTR_NM PROMT_VAL, RF.ATTR_FILT_TYP, RF.ATTR_FILT_VAL,RF.PROMPT_IND,RF.MANDATORY_IND
            ,RFO.FILT_OPER FROM RA_REPORT_FILT_CRTA RF JOIN RA_META_ATTR RA ON RA.ATTR_ID=RF.ATTR_ID
            JOIN RA_META_FILT_OPER RFO ON RF.FILT_OPER_ID =RFO.FILT_OPER_ID
            WHERE RF.REPORT_ID=I_REPORT_ID)
  LOOP
  
   
   IF(FL.PROMPT_IND ='Y') THEN
      IF(FL.MANDATORY_IND = 'Y') THEN
       QUERY_STR := QUERY_STR || ' AND ';
        QUERY_STR := QUERY_STR || FL.PROMPT_NM || ' ' ||FL.FILT_OPER ||' :' ||FL.PROMT_VAL;
      ELSE
       QUERY_STR := QUERY_STR || ' <#if '||FL.PROMT_VAL||' ?? && '||FL.PROMT_VAL||'?trim != ""> ';
        QUERY_STR := QUERY_STR || ' AND ';
        QUERY_STR := QUERY_STR || FL.PROMPT_NM || ' ' ||FL.FILT_OPER ||' :' ||FL.PROMT_VAL;
       QUERY_STR := QUERY_STR || ' </#if>';
      END IF;
   ELSE
    QUERY_STR := QUERY_STR || ' AND ';
   QUERY_STR := QUERY_STR || FL.PROMPT_NM || ' ' || FL.FILT_OPER|| ' ' ||FN_GET_UNIV_TRANS_VAL(FL.ATTR_FILT_TYP,FL.ATTR_FILT_VAL);
   END IF;
    
  END LOOP;
  
 -- GROUP BY CLAUSE
 QUERY_STR := QUERY_STR || ' GROUP BY ';
 FOR K IN (SELECT * FROM
        (
        SELECT SA.DISP_ORD,DECODE(SA.ATTR_ID,0,DBMS_LOB.SUBSTR(SAE.QUERY_ATTR_EXPR,4000,1) || ' AS ' || SA.QUERY_ATTR_ALS_NM ,
        MA.ATTR_ALS_ENTY_NM || '.'||MA.ATTR_PHY_ATTR_NM ) AS COLUMN_NM  FROM 
        RA_SEEDED_QUERY_ATTR SA LEFT OUTER JOIN RA_META_ATTR MA ON SA.ATTR_ID=MA.ATTR_ID
        LEFT OUTER JOIN RA_SEEDED_QUERY_ATTR_EXPR SAE ON SA.QUERY_ATTR_ID=SAE.QUERY_ATTR_ID
        WHERE SA.QUERY_ID=I_QUERY_ID  AND SA.COLUMN_TYPE='D'
        ) ORDER BY DISP_ORD)
  LOOP
      QUERY_STR:=QUERY_STR || K.COLUMN_NM || ',';
  END LOOP;
        QUERY_STR:=SUBSTR(QUERY_STR,1,LENGTH(QUERY_STR)-1);
 
 QUERY_STR :=QUERY_PRE || QUERY_STR || ' )';
 dbms_output.put_line( QUERY_STR);
 QUERY:=QUERY_STR;
END GET_UNIVERSE_QUERY;

/
--------------------------------------------------------

--  DDL for Procedure P1

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."P1" (c1 in varchar2)
is
begin
  dbms_output.put_line('test');
end;

/
--------------------------------------------------------

--  DDL for Procedure PROC_GET_REPORT_INSTANCES

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."PROC_GET_REPORT_INSTANCES" (
P_REPORT_ID IN NUMBER, 
P_RECORDSET OUT SYS_REFCURSOR, 
P_SOEID IN VARCHAR,
P_RECORDSET2 OUT SYS_REFCURSOR) AS 
BEGIN
  IF P_REPORT_ID IS NOT NULL THEN
  OPEN P_RECORDSET FOR  SELECT * FROM RA_REPORT_INSTANCES WHERE REPORT_ID = P_REPORT_ID;  
  ELSIF P_SOEID IS NOT NULL THEN 
  OPEN P_RECORDSET FOR SELECT * FROM RA_USER_DETAILS WHERE SOEID = P_SOEID;
  ELSE
  OPEN P_RECORDSET FOR  SELECT * FROM RA_REPORT_INSTANCES ;
  END IF;  
  
  OPEN P_RECORDSET2 FOR  SELECT * FROM RA_APPS ;
  
END;

/
--------------------------------------------------------

--  DDL for Procedure PROC_GET_REPORT_INSTANCES1

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."PROC_GET_REPORT_INSTANCES1" ( P_RECORDSET OUT SYS_REFCURSOR,P_REPORT_ID IN NUMBER, P_USER_ID IN VARCHAR2 )AS 
 
BEGIN
  IF P_REPORT_ID IS NOT NULL THEN
    OPEN P_RECORDSET FOR  SELECT * FROM RA_REPORT_INSTANCES WHERE REPORT_ID = P_REPORT_ID;  
  ELSIF P_USER_ID IS NOT NULL THEN
    OPEN P_RECORDSET FOR  SELECT * FROM RA_REPORT_INSTANCES WHERE SUBMITTED_BY_SOEID = LOWER(P_USER_ID);
  ELSIF P_USER_ID IS NOT NULL AND P_REPORT_ID IS NOT NULL THEN
    OPEN P_RECORDSET FOR  SELECT * FROM RA_REPORT_INSTANCES WHERE SUBMITTED_BY_SOEID = LOWER(P_USER_ID) AND REPORT_ID = P_REPORT_ID;  
  ELSE 
  OPEN P_RECORDSET FOR  SELECT * FROM RA_REPORT_INSTANCES ;
  END IF;
  
END;

/
--------------------------------------------------------

--  DDL for Procedure PROC_MULTI_OUTPUT_TEST01

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."PROC_MULTI_OUTPUT_TEST01" (RUN_ID IN INTEGER,REPORT_ID IN VARCHAR2,CURSOR1 OUT SYS_REFCURSOR,CURSOR2 OUT SYS_REFCURSOR) AS 
BEGIN

OPEN CURSOR1 FOR SELECT INSTPRM_PROMPT_ID,  INSTPRM_PROMPT_VALUE FROM RA_INSTANCE_PROMPT_VALUES WHERE RUN_ID='13788';

OPEN CURSOR2 FOR SELECT  QUERY_ID,COLUMN_NAME FROM RA_INSTANCE_QUERY_COLUMNS WHERE RUN_ID='1441';


END PROC_MULTI_OUTPUT_TEST01;

/
--------------------------------------------------------

--  DDL for Procedure P_INSERT_SCRIPT

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."P_INSERT_SCRIPT" (P_QUERY_ID in number,
P_QUERY_TEXT in varchar2,
P_QUERY_DISPLAY_NAME VARCHAR2,
P_EFFECTIVE_FROM DATE,
EFFECTIVE_TO DATE,
CREATED_BY VARCHAR2,
CREATION_TIME VARCHAR2,
LAST_UPDATED_BY VARCHAR2,
LAST_UPDATE_TIME VARCHAR2,
QUERY_NAME VARCHAR2,
P_FLAG in number) as

g_clob clob;

begin

if P_FLAG=0 then
insert into RA_SEEDED_QUERIES values (P_QUERY_ID,
 empty_clob(), 
P_QUERY_DISPLAY_NAME,
P_EFFECTIVE_FROM ,
EFFECTIVE_TO ,
CREATED_BY ,
CREATION_TIME ,
LAST_UPDATED_BY ,
LAST_UPDATE_TIME ,
QUERY_NAME ) returning QUERY_TEXT into g_clob;
dbms_lob.write( g_clob,length(P_QUERY_TEXT), 1,P_QUERY_TEXT);
else
select QUERY_TEXT into g_clob from RA_SEEDED_QUERIES where QUERY_ID=P_QUERY_ID for update;
dbms_lob.writeappend( g_clob, length(P_QUERY_TEXT), P_QUERY_TEXT);
end if;

end;


set define off;
create or replace procedure P_TEST_PROC(P_QUERY_ID in number,
P_QUERY_TEXT in varchar2,
P_FLAG in number) as

g_clob clob;

begin
--SET DEFINE OFF;
if P_FLAG=0 then
insert into D1_TEST123 values (P_QUERY_ID,
 empty_clob()) returning QUERY_TEXT into g_clob;
dbms_lob.write( g_clob,length(P_QUERY_TEXT), 1,P_QUERY_TEXT);
else
select QUERY_TEXT into g_clob from D1_TEST123 where QUERY_ID=P_QUERY_ID for update;
dbms_lob.writeappend( g_clob, length(P_QUERY_TEXT), P_QUERY_TEXT);
end if;

end;

SET DEFINE OFF
EXEC P_TEST_PROC(
89,('WITH Excp_Cd_Combo AS
  (SELECT C_Excp_Id
  FROM Ps_C_Excp_Def
  WHERE C_Excp_Cat_Txt = ''Combo Validation''
  ),
  Report_Data AS
  (SELECT Rqst_Mntr.Da_Proc_Id,
    Rqst_Mntr.As_Of_Dt,
    Ps_C_Feed_Def_V.C_Feed_Id,
    Ps_C_Excp_Def.C_Excp_Cd,
    Susp_Jrnl_Head.Gaap_Typ_Cd,
    Susp_Jrnl_Head.Lv_Id,
    Susp_Jrnl_Line_Ext.Goc,
    Susp_Jrnl_Line_Ext.Gl_Acct_Id,
    Susp_Jrnl_Line_Ext.Lcl_Gl_Acct_Id,
    Susp_Jrnl_Line_Ext.LCL_BKG_LDGR_CTRY_CD AS BKG_LDGR_CTRY_CD,
    Susp_Jrnl_Line_Ses.Tran_Ccy_Cd,
    Susp_Jrnl_Line_Ses.Tran_Ccy_Actg_Ent_Amt,
    Susp_Jrnl_Head.Func_Ccy_Cd,
    Susp_Jrnl_Line_Ses.Func_Ccy_Actg_Ent_Amt,
    Susp_Jrnl_Head.Src_Jrnl_Head_Id,
    Susp_Jrnl_Line_Ext.Src_Jrnl_Line_Id,
    Susp_Jrnl_Line_Ext.Jrnl_Ent_Bkg_Dt,
    Attr_01.C_Attr_Nm AS Attr_Nm_01,
    Jrnl_Data_Excp_Ocur.EXCP_ATTR1_VAL,
    Jrnl_Data_Excp_Ocur.Excp_Typ_Ind,
    Jrnl_Data_Excp_Ocur.Excp_Msg_Txt,
    Jrnl_Data_Excp_Ocur.Jrnl_Head_Id,
    Jrnl_Data_Excp_Ocur.Jrnl_Line_Id,
    CASE
      WHEN Jrnl_Data_Excp_Ocur.C_Excp_Id = Excp.C_Excp_Id
      THEN Attr_02.C_Attr_Nm
      ELSE NULL
    END AS Attr_Nm_02,
    CASE
      WHEN Jrnl_Data_Excp_Ocur.C_Excp_Id = Excp.C_Excp_Id
      THEN Jrnl_Data_Excp_Ocur.EXCP_ATTR2_VAL
      ELSE NULL
    END AS ATTR_VAL_02,
    CASE
      WHEN Jrnl_Data_Excp_Ocur.C_Excp_Id = Excp.C_Excp_Id
      THEN Attr_03.C_Attr_Nm
      ELSE NULL
    END AS Attr_Nm_03,
    CASE
      WHEN Jrnl_Data_Excp_Ocur.C_Excp_Id = Excp.C_Excp_Id
      THEN Jrnl_Data_Excp_Ocur.EXCP_ATTR3_VAL
      ELSE NULL
    END AS ATTR_VAL_03,
    CASE
      WHEN Jrnl_Data_Excp_Ocur.C_Excp_Id = Excp.C_Excp_Id
      THEN Attr_04.C_Attr_Nm
      ELSE NULL
    END AS Attr_Nm_04,
    CASE
      WHEN Jrnl_Data_Excp_Ocur.C_Excp_Id = Excp.C_Excp_Id
      THEN Jrnl_Data_Excp_Ocur.EXCP_ATTR4_VAL
      ELSE NULL
    END AS ATTR_VAL_04,
    CASE
      WHEN Jrnl_Data_Excp_Ocur.C_Excp_Id = Excp.C_Excp_Id
      THEN Attr_05.C_Attr_Nm
      ELSE NULL
    END AS ATTR_Nm_05,
    CASE
      WHEN Jrnl_Data_Excp_Ocur.C_Excp_Id = Excp.C_Excp_Id
      THEN Jrnl_Data_Excp_Ocur.EXCP_ATTR5_VAL
      ELSE NULL
    END AS ATTR_VAL_05,
    CASE
      WHEN Jrnl_Data_Excp_Ocur.C_Excp_Id = Excp.C_Excp_Id
      THEN Attr_06.C_Attr_Nm
      ELSE NULL
    END AS Attr_Nm_06,
    CASE
      WHEN Jrnl_Data_Excp_Ocur.C_Excp_Id = Excp.C_Excp_Id
      THEN Jrnl_Data_Excp_Ocur.EXCP_ATTR6_VAL
      ELSE NULL
    END AS ATTR_VAL_06
  FROM Ps_C_Feed_Def Ps_C_Feed_Def_V
  JOIN Csi_Src_Sys
  ON (Csi_Src_Sys.Csi_Id = Ps_C_Feed_Def_V.C_Csiid)
  JOIN Rqst_Mntr
  ON ( Ps_C_Feed_Def_V.C_Feed_Id = Rqst_Mntr.Feed_Id)
  JOIN Jrnl_Data_Excp_Ocur
  ON ( Rqst_Mntr.Da_Proc_Id = Jrnl_Data_Excp_Ocur.Da_Proc_Id
  AND Rqst_Mntr.As_Of_Dt    = Jrnl_Data_Excp_Ocur.Feed_As_Of_Dt)
  JOIN Ps_C_Excp_Def
  ON ( Jrnl_Data_Excp_Ocur.C_Excp_Id = Ps_C_Excp_Def.C_Excp_Id )
  JOIN Ps_C_Attr Attr_01
  ON (Jrnl_Data_Excp_Ocur.Excp_Attr1_Cd = Attr_01.C_Attr_Cd)
  LEFT OUTER JOIN Ps_C_Attr Attr_02
  ON (Jrnl_Data_Excp_Ocur.Excp_Attr2_Cd = Attr_02.C_Attr_Cd)
  LEFT OUTER JOIN Ps_C_Attr Attr_03
  ON (Jrnl_Data_Excp_Ocur.Excp_Attr3_Cd = Attr_03.C_Attr_Cd)
  LEFT OUTER JOIN Ps_C_Attr Attr_04
  ON (Jrnl_Data_Excp_Ocur.Excp_Attr4_Cd = Attr_04.C_Attr_Cd)
  LEFT OUTER JOIN Ps_C_Attr Attr_05
  ON (Jrnl_Data_Excp_Ocur.Excp_Attr5_Cd = Attr_05.C_Attr_Cd)
  LEFT OUTER JOIN Ps_C_Attr Attr_06
  ON (Jrnl_Data_Excp_Ocur.Excp_Attr6_Cd = Attr_06.C_Attr_Cd)
  LEFT OUTER JOIN Excp_Cd_Combo Excp
  ON (Jrnl_Data_Excp_Ocur.C_Excp_Id = Excp.C_Excp_Id)
  JOIN Susp_Jrnl_Head
  ON (Rqst_Mntr.Da_Proc_Id             = Susp_Jrnl_Head.Da_Proc_Id
  AND Rqst_Mntr.Rqst_Id                = Susp_Jrnl_Head.Orig_Rqst_Id
  AND Jrnl_Data_Excp_Ocur.Jrnl_Head_Id = Susp_Jrnl_Head.Susp_Jrnl_Head_Id)
  JOIN Susp_Jrnl_Line Susp_Jrnl_Line_Ext
  ON (Susp_Jrnl_Head.Susp_Jrnl_Head_Id = Susp_Jrnl_Line_Ext.Susp_Jrnl_Head_Id
  AND Jrnl_Data_Excp_Ocur.Jrnl_Line_Id = Susp_Jrnl_Line_Ext.Susp_Jrnl_Line_Id)
  Left JOIN Susp_Jrnl_Line Susp_Jrnl_Line_Ses
  ON (Susp_Jrnl_Line_Ext.SUSP_JRNL_HEAD_ID     =Susp_Jrnl_Line_Ses.SUSP_JRNL_HEAD_ID
  AND Susp_Jrnl_Line_Ext.Refd_Jrnl_Line_Id     =Susp_Jrnl_Line_Ses.Susp_Jrnl_Line_Id)
  WHERE Jrnl_Data_Excp_Ocur.Jrnl_Line_Excp_Ind = ''Y''
  AND Susp_Jrnl_Line_Ext.Jrnl_Line_Src         = ''EXT''
  AND Rqst_Mntr.As_Of_Dt                       = TO_DATE(:BUSINESS_DATE, ''YYYY-MM-DD'')
  And Jrnl_Data_Excp_Ocur.Excp_Typ_Ind         = :EXCEPTION_TYPE
  <#if FEED_ID?? && FEED_ID?trim != "">
    And Ps_C_Feed_Def_V.C_Feed_Id = :FEED_ID
  </#if>
  )
SELECT As_Of_Dt         AS "As of Date",
  Da_Proc_Id            AS "DA Proc ID",
  C_Feed_Id             AS "Core Feed ID",
  Lv_Id                 AS "LV ID",
  Gaap_Typ_Cd           AS "GAAP Type",
  Gl_Acct_Id            AS "Standard GL Account",
  Lcl_Gl_Acct_Id        AS "Local GL Account",
  Goc                   AS "GOC",
  Bkg_Ldgr_Ctry_Cd      AS "Bkg-Ldgr Country Code",
  Src_Jrnl_Head_Id      AS "Source Journal Header ID",
  Src_Jrnl_Line_Id      AS "Source Journal Line ID",
  Jrnl_Head_Id          AS "Journal Header ID",
  Jrnl_Line_Id          AS "Journal Line ID",
  Jrnl_Ent_Bkg_Dt       AS "Journal Entry Booking Date",
  Tran_Ccy_Cd           AS "Transaction Ccy",
  Tran_Ccy_Actg_Ent_Amt AS "Actg-Entry Transaction Ccy Amt",
  Func_Ccy_Cd           AS "Functional Ccy",
  Func_Ccy_Actg_Ent_Amt AS "Actg-Entry Functional Ccy Amt",
  Attr_Nm_01            AS "Attribute 01 Name",
  Excp_Attr1_Val        AS "Attribute 01 Value",
  Attr_Nm_02            AS "Attribute 02 Name",
  Attr_Val_02           AS "Attribute 02 Value",
  Attr_Nm_03            AS "Attribute Name 03",
  Attr_Val_03           AS "Attribute 03 Value",
  Attr_Nm_04            AS "Attribute Name 04",
  Attr_Val_04           AS "Attribute 04 Value",
  Attr_Nm_05            AS "Attribute Name 05",
  Attr_Val_05           AS "Attribute 05 Value",
  Attr_Nm_06            AS "Attribute Name 06",
  Attr_Val_06           AS "Attribute 06 Value",
  Excp_Typ_Ind          AS "Exception Type",
  Excp_Msg_Txt          AS "Exception Message"
FROM Report_Data'), 0);

/
--------------------------------------------------------

--  DDL for Procedure P_TEST

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."P_TEST" (P_IDX in number,P_TXT in varchar2,P_FLAG in number) as

g_clob clob;

begin

if P_FLAG=0 then
insert into test values (P_IDX, empty_clob() ) returning TXT into g_clob;
dbms_lob.write( g_clob,length(P_TXT), 1,P_TXT);
else
select TXT into g_clob from test where IDX=P_IDX for update;
dbms_lob.writeappend( g_clob, length(P_TXT), P_TXT);
end if;

end;

/
--------------------------------------------------------

--  DDL for Procedure P_TEST_01

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."P_TEST_01" as
DECLARE   
 v_inteval   INTERVAL YEAR(3) TO MONTH := 0; 
 BEGIN  
 v_inteval := INTERVAL '123-2' YEAR TO MONTH; 
 
 DBMS_OUTPUT.put_line (v_inteval); 
 
 END;

/
--------------------------------------------------------

--  DDL for Procedure P_TEST_PROC

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."P_TEST_PROC" (P_QUERY_ID in number,
P_QUERY_TEXT in varchar2,
P_FLAG in number) as

g_clob clob;

begin
--SET DEFINE OFF;
if P_FLAG=0 then
insert into D1_TEST123 values (P_QUERY_ID,
 empty_clob()) returning QUERY_TEXT into g_clob;
dbms_lob.write( g_clob,length(P_QUERY_TEXT), 1,P_QUERY_TEXT);
else
select QUERY_TEXT into g_clob from D1_TEST123 where QUERY_ID=P_QUERY_ID for update;
dbms_lob.writeappend( g_clob, length(P_QUERY_TEXT), P_QUERY_TEXT);
end if;

end;

/
--------------------------------------------------------

--  DDL for Procedure REMOVE_REPORT

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."REMOVE_REPORT" (P_REPORT_ID IN NUMBER) AS 

BEGIN


DELETE FROM RA_SEEDED_QUERIES WHERE QUERY_ID IN ( SELECT QUERY_ID FROM RA_REPORT_QUERY_MAP WHERE REPORT_ID IN (P_REPORT_ID) );

DELETE FROM RA_SEEDED_QUERY_COLUMNS WHERE QUERY_ID IN ( SELECT QUERY_ID FROM RA_REPORT_QUERY_MAP WHERE REPORT_ID IN (P_REPORT_ID) );

DELETE FROM RA_REPORTS_B WHERE REPORT_ID IN (P_REPORT_ID);

DELETE FROM RA_REPORT_PARAMETERS_B WHERE REPORT_ID IN (P_REPORT_ID);

DELETE FROM RA_REPORT_QUERY_MAP WHERE REPORT_ID IN (P_REPORT_ID);

DELETE FROM RA_SUB_REPORT_MAP WHERE REPORT_ID IN (P_REPORT_ID);

DELETE FROM RA_REPORT_LDAP_GROUPS WHERE REPORT_ID IN (P_REPORT_ID);

COMMIT;

END;

/
--------------------------------------------------------

--  DDL for Procedure SAVE_HISTORY_FOR_RUN_ID

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."SAVE_HISTORY_FOR_RUN_ID" (P_RUN_ID IN INTEGER) AS 
BEGIN
    delete from RA_HIST_REPORT_INSTANCES where run_id = P_RUN_ID;
    delete from RA_HIST_SHARED_REPORTS where run_id = P_RUN_ID;
    delete from RA_HIST_SUB_RUN_INSTANCES where (parent_run_id = P_RUN_ID OR sub_run_id = P_RUN_ID);
    delete from RA_HIST_REPORT_INST_INFO where run_id = P_RUN_ID;
    delete from RA_HIST_RPT_INST_QRY_PROGRESS where run_id = P_RUN_ID;
    delete from RA_HIST_INSTANCE_READ_ACTIVITY where run_id = P_RUN_ID;
    delete from RA_HIST_INSTANCE_QUERY_COLUMNS where run_id = P_RUN_ID;
    delete from RA_HIST_INSTANCE_PROMPT_VALUES where run_id = P_RUN_ID;
    
    insert into RA_HIST_REPORT_INSTANCES select * from RA_REPORT_INSTANCES where run_id = P_RUN_ID;
    insert into RA_HIST_SHARED_REPORTS select * from RA_SHARED_REPORTS where run_id = P_RUN_ID;
	  insert into RA_HIST_SUB_RUN_INSTANCES select * from RA_SUB_RUN_INSTANCES where (parent_run_id = P_RUN_ID OR sub_run_id = P_RUN_ID);
	  insert into RA_HIST_REPORT_INST_INFO select * from RA_REPORT_INST_INFO where run_id = P_RUN_ID;
   	insert into RA_HIST_RPT_INST_QRY_PROGRESS select * from RA_REPORT_INST_QRY_PROGRESS where run_id = P_RUN_ID;
  	insert into RA_HIST_INSTANCE_READ_ACTIVITY select * from RA_INSTANCE_READ_ACTIVITY where run_id = P_RUN_ID;
   	insert into RA_HIST_INSTANCE_QUERY_COLUMNS select * from RA_INSTANCE_QUERY_COLUMNS where run_id = P_RUN_ID;
  	insert into RA_HIST_INSTANCE_PROMPT_VALUES select * from RA_INSTANCE_PROMPT_VALUES where run_id = P_RUN_ID;
	COMMIT;
  EXCEPTION
  WHEN OTHERS THEN
  ROLLBACK;
END;

/
--------------------------------------------------------

--  DDL for Procedure SP_COPY_LDAP

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."SP_COPY_LDAP" as 
    V_LDAP_GROUP_NAME RA_REPORT_LDAP_GROUPS.LDAP_GROUP_NAME%TYPE;
    V_INS_LDAP_GRP VARCHAR2(250);
BEGIN
   FOR RPT_CR IN (            
                   SELECT REPORT_ID
                   FROM   RA_REPORTS_B
                   WHERE  APP_ID = 6
                   AND   ACTIVE_IND = 'A'
                  ) 
    LOOP
        FOR APP_CR IN ( SELECT LDAP_GROUP_NAME 
                        FROM RA_APP_LDAP_GROUPS
                        WHERE APP_ID = 6
                      ) 
      LOOP
        V_LDAP_GROUP_NAME :='';
         FOR LDAP_CR IN ( SELECT LDAP_GROUP_NAME 
                          FROM  RA_REPORT_LDAP_GROUPS
                          WHERE LDAP_GROUP_NAME = APP_CR.LDAP_GROUP_NAME
                           AND  REPORT_ID = RPT_CR.REPORT_ID
                        ) 
         LOOP
            V_LDAP_GROUP_NAME := LDAP_CR.LDAP_GROUP_NAME;
         END LOOP;
         IF V_LDAP_GROUP_NAME IS NULL THEN 
            dbms_output.put_line( 'New LDAP Group '||RPT_CR.REPORT_ID ||'-'|| APP_CR.LDAP_GROUP_NAME);
            
            V_INS_LDAP_GRP := 'INSERT INTO RA_REPORT_LDAP_GROUPS values ('||RPT_CR.REPORT_ID ||','''
                                                                          || APP_CR.LDAP_GROUP_NAME
                                                                          ||''',''RPTAPP'',to_timestamp(sysdate),''RPTAPP'',to_timestamp(sysdate))';
                  EXECUTE IMMEDIATE (V_INS_LDAP_GRP);
                 --dbms_output.put_line( V_INS_LDAP_GRP);
                  V_LDAP_GROUP_NAME :='';
          ELSE
            --dbms_output.put_line( 'Existing LDAP Group  '||RPT_CR.REPORT_ID ||'-'|| V_LDAP_GROUP_NAME);
            null;
         END IF;
      END LOOP;
  END LOOP;
 COMMIT;
end sp_copy_ldap;

/
--------------------------------------------------------

--  DDL for Procedure SP_REPORT_LDAP_CONFIG

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."SP_REPORT_LDAP_CONFIG" (P_N_APP_ID In Number, P_SR_REPORT_QRY Out Sys_Refcursor)
As
Napp_Id       Number;
Vpivot_Qry    Varchar2(32000);
Vpivot_Cols   Varchar2(32000);

Begin
  Napp_ID := P_N_APP_ID;
  
	Vpivot_Cols := '';

  For Ldapgrp In (Select Distinct Ldap_Group_Name 
                   From Ra_App_Ldap_Groups 
            		  Where App_Id = Napp_Id
                    And Ldap_Group_Name <> 'TECH_ADMIN')
	Loop
      Vpivot_Cols := Vpivot_Cols || '''' || Ldapgrp.Ldap_Group_Name || ''' As "' || Ldapgrp.Ldap_Group_Name || '",';
	End Loop;

  Vpivot_Qry :=               'Select * From ';
  Vpivot_Qry := Vpivot_Qry || '   ( ';  
  Vpivot_Qry := Vpivot_Qry || '   Select Rrb.Display_Report_Name';
  Vpivot_Qry := Vpivot_Qry || '         ,Rrlg.Ldap_Group_Name';
  Vpivot_Qry := Vpivot_Qry || '         ,''X'' MapValue';
  Vpivot_Qry := Vpivot_Qry || '     From Ra_Reports_B Rrb';
  Vpivot_Qry := Vpivot_Qry || '         ,Ra_Report_Ldap_Groups Rrlg';
  Vpivot_Qry := Vpivot_Qry || '    Where Rrb.Report_Id        =  Rrlg.Report_Id';
  Vpivot_Qry := Vpivot_Qry || '      And Rrb.App_Id           =  ' || Napp_Id;
  Vpivot_Qry := Vpivot_Qry || '      And Rrb.Active_Ind       =  ''A''';
  Vpivot_Qry := Vpivot_Qry || '      And Rrlg.Ldap_Group_Name <> ''TECH_ADMIN''';
  Vpivot_Qry := Vpivot_Qry || '   ) Rpt_Qry Pivot (Max (MapValue) For Ldap_Group_Name In (' || Substr(Vpivot_Cols, 1, Instr(Vpivot_Cols, ',' ,-1) - 1) || ')) ';
  Vpivot_Qry := Vpivot_Qry || 'Order By Display_Report_Name';

  Dbms_Output.Put_Line('Qry -'||Vpivot_Qry);

  Open P_Sr_Report_Qry For Vpivot_Qry;
End SP_REPORT_LDAP_CONFIG;

/
--------------------------------------------------------

--  DDL for Procedure TESTMESSAGE

--------------------------------------------------------

set define off;


  CREATE OR REPLACE PROCEDURE "RPTAPP"."TESTMESSAGE" (text_message VARCHAR2) 
AS 
  msg SYS.AQ$_JMS_TEXT_MESSAGE; 
  msg_hdr SYS.AQ$_JMS_HEADER; 
  msg_agent SYS.AQ$_AGENT; 
  msg_proparray SYS.AQ$_JMS_USERPROPARRAY; 
  msg_property SYS.AQ$_JMS_USERPROPERTY; 
  queue_options DBMS_AQ.ENQUEUE_OPTIONS_T; 
  msg_props DBMS_AQ.MESSAGE_PROPERTIES_T; 
  msg_id RAW(16); 
  dummy VARCHAR2(4000); 
BEGIN 
  msg_agent := SYS.AQ$_AGENT(' ', NULL, 0); 
  msg_proparray := SYS.AQ$_JMS_USERPROPARRAY()  ; 
  msg_proparray.EXTEND(1); 
  msg_property := SYS.AQ$_JMS_USERPROPERTY('JMS_OracleDeliveryMode', 100, '2', NULL, 27); 
  msg_proparray(1) := msg_property; 
  msg_hdr := SYS.AQ$_JMS_HEADER(msg_agent,NULL,'<USERNAME>',NULL,NULL,NULL,msg_proparray); 
  msg := SYS.AQ$_JMS_TEXT_MESSAGE(msg_hdr,NULL,NULL,NULL); 
  msg.text_vc  := text_message; 
  msg.text_len := LENGTH(msg.text_vc); 
  DBMS_AQ.ENQUEUE(queue_name => 'QUE_RA_INST_PROMPT_VLUS' , enqueue_options => queue_options , message_properties => msg_props , payload => msg , msgid => msg_id); 
END;

/
--------------------------------------------------------

--  DDL for Queue TRADE_QUEUE

--------------------------------------------------------


   BEGIN DBMS_AQADM.CREATE_QUEUE(
     Queue_name          => 'RPTAPP.TRADE_QUEUE',
     Queue_table         => 'RPTAPP.TRADE_QUEUE_TABLE',
     Queue_type          =>  0,
     Max_retries         =>  5,
     Retry_delay         =>  60,
     dependency_tracking =>  FALSE);
  END;
--------------------------------------------------------

--  DDL for Queue USERQUEUE

--------------------------------------------------------


   BEGIN DBMS_AQADM.CREATE_QUEUE(
     Queue_name          => 'RPTAPP.USERQUEUE',
     Queue_table         => 'RPTAPP.MYQUEUETABLE',
     Queue_type          =>  0,
     Max_retries         =>  5,
     Retry_delay         =>  0,
     dependency_tracking =>  FALSE);
  END;
--------------------------------------------------------

--  DDL for Queue QUE_RA_INST_PROMPT_VLUS

--------------------------------------------------------


   BEGIN DBMS_AQADM.CREATE_QUEUE(
     Queue_name          => 'RPTAPP.QUE_RA_INST_PROMPT_VLUS',
     Queue_table         => 'RPTAPP.QUE_RA_INST_PROMPT_VLUS',
     Queue_type          =>  0,
     Max_retries         =>  5,
     Retry_delay         =>  60,
     dependency_tracking =>  FALSE);
  END;
--------------------------------------------------------

--  DDL for Queue Table MYQUEUETABLE

--------------------------------------------------------


   BEGIN DBMS_AQADM.CREATE_QUEUE_TABLE(
     Queue_table        => '"RPTAPP"."MYQUEUETABLE"',
     Queue_payload_type => 'SYS.AQ$_JMS_TEXT_MESSAGE',
     storage_clause     => 'PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 TABLESPACE USERS',
     Sort_list          => 'ENQ_TIME',
     Compatible         => '10.0.0');
  END;
--------------------------------------------------------

--  DDL for Queue Table QUE_RA_INST_PROMPT_VLUS

--------------------------------------------------------


   BEGIN DBMS_AQADM.CREATE_QUEUE_TABLE(
     Queue_table        => '"RPTAPP"."QUE_RA_INST_PROMPT_VLUS"',
     Queue_payload_type => 'SYS.AQ$_JMS_TEXT_MESSAGE',
     storage_clause     => 'PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 TABLESPACE USERS',
     Sort_list          => 'ENQ_TIME',
     Compatible         => '10.0.0');
  END;
--------------------------------------------------------

--  DDL for Queue Table TRADE_QUEUE_TABLE

--------------------------------------------------------


   BEGIN DBMS_AQADM.CREATE_QUEUE_TABLE(
     Queue_table        => '"RPTAPP"."TRADE_QUEUE_TABLE"',
     Queue_payload_type => 'SYS.AQ$_JMS_TEXT_MESSAGE',
     storage_clause     => 'PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 TABLESPACE USERS',
     Sort_list          => 'ENQ_TIME',
     Compatible         => '10.0.0');
  END;
